{"version":3,"sources":["../../node_modules/moo/moo.js","../../node_modules/nearley/lib/nearley.js","../../node_modules/pgsql-ast-parser/webpack/bootstrap","../../node_modules/pgsql-ast-parser/external \"moo\"","../../node_modules/pgsql-ast-parser/src/lexer.ts","../../node_modules/pgsql-ast-parser/src/ast-mapper.ts","../../node_modules/pgsql-ast-parser/src/keywords.ts","../../node_modules/pgsql-ast-parser/src/literal-syntaxes/interval-builder.ts","../../node_modules/pgsql-ast-parser/src/ast-visitor.ts","../../node_modules/pgsql-ast-parser/src/utils.ts","../../node_modules/pgsql-ast-parser/src/index.ts","../../node_modules/pgsql-ast-parser/src/parser.ts","../../node_modules/pgsql-ast-parser/external \"nearley\"","../../node_modules/pgsql-ast-parser/src/syntax/main.ne","../../node_modules/pgsql-ast-parser/src/literal-syntaxes/array.ne","../../node_modules/pgsql-ast-parser/src/literal-syntaxes/array-lexer.ts","../../node_modules/pgsql-ast-parser/src/literal-syntaxes/geometric.ne","../../node_modules/pgsql-ast-parser/src/literal-syntaxes/geometric-lexer.ts","../../node_modules/pgsql-ast-parser/src/literal-syntaxes/interval.ne","../../node_modules/pgsql-ast-parser/src/literal-syntaxes/interval-lexer.ts","../../node_modules/pgsql-ast-parser/src/literal-syntaxes/interval-iso.ne","../../node_modules/pgsql-ast-parser/src/literal-syntaxes/interval-iso-lexer.ts","../../node_modules/pgsql-ast-parser/src/to-sql.ts","../../node_modules/pgsql-ast-parser/src/pg-escape.ts","../../node_modules/pgsql-ast-parser/src/syntax/ast.ts","../../node_modules/pg-mem/node_modules/object-hash/index.js","../../node_modules/immutable/dist/immutable.es.js","../../node_modules/moment/moment.js","../../node_modules/yallist/iterator.js","../../node_modules/yallist/yallist.js","../../node_modules/lru-cache/index.js","../../node_modules/jsonify/lib/parse.js","../../node_modules/jsonify/lib/stringify.js","../../node_modules/jsonify/index.js","../../node_modules/json-stable-stringify/index.js","../../node_modules/functional-red-black-tree/rbtree.js","../../node_modules/ms/index.js","../../node_modules/knex/node_modules/debug/src/common.js","../../node_modules/knex/node_modules/debug/src/browser.js","../../node_modules/has-flag/index.js","../../node_modules/supports-color/index.js","../../node_modules/knex/node_modules/debug/src/node.js","../../node_modules/knex/node_modules/debug/src/index.js","../../node_modules/knex/lib/constants.js","../../node_modules/knex/lib/util/is.js","../../node_modules/knex/lib/helpers.js","../../node_modules/knex/lib/util/save-async-stack.js","../../node_modules/knex/lib/util/nanoid.js","../../node_modules/knex/lib/util/noop.js","../../node_modules/knex/lib/util/finally-mixin.js","../../node_modules/knex/lib/interface.js","../../node_modules/knex/lib/raw.js","../../node_modules/knex/lib/ref.js","../../node_modules/knex/lib/util/timeout.js","../../node_modules/knex/lib/runner.js","../../node_modules/knex/lib/query/joinclause.js","../../node_modules/knex/lib/query/constants.js","../../node_modules/knex/lib/query/builder.js","../../node_modules/knex/lib/formatter.js","../../node_modules/knex/lib/migrate/table-resolver.js","../../node_modules/knex/lib/migrate/table-creator.js","../../node_modules/knex/lib/migrate/migration-list-resolver.js","../../node_modules/knex/lib/util/fs.js","../../node_modules/knex/lib/util/template.js","../../node_modules/knex/lib/util/is-module-type.js","../../node_modules/knex/lib/util/import-file.js","../../node_modules/knex/lib/migrate/sources/fs-migrations.js","../../node_modules/colorette/index.cjs","../../node_modules/knex/lib/logger.js","../../node_modules/knex/lib/migrate/configuration-merger.js","../../node_modules/knex/lib/util/timestamp.js","../../node_modules/knex/lib/migrate/MigrationGenerator.js","../../node_modules/knex/lib/migrate/Migrator.js","../../node_modules/knex/lib/seed/Seeder.js","../../node_modules/knex/lib/functionhelper.js","../../node_modules/knex/lib/query/methods.js","../../node_modules/knex/lib/util/delay.js","../../node_modules/knex/lib/util/batchInsert.js","../../node_modules/knex/lib/util/make-knex.js","../../node_modules/knex/lib/transaction.js","../../node_modules/knex/lib/query/compiler.js","../../node_modules/knex/lib/schema/builder.js","../../node_modules/knex/lib/schema/helpers.js","../../node_modules/knex/lib/schema/compiler.js","../../node_modules/knex/lib/schema/tablebuilder.js","../../node_modules/knex/lib/schema/tablecompiler.js","../../node_modules/knex/lib/schema/columnbuilder.js","../../node_modules/knex/lib/schema/columncompiler.js","../../node_modules/tarn/dist/TimeoutError.js","../../node_modules/tarn/dist/PromiseInspection.js","../../node_modules/tarn/dist/utils.js","../../node_modules/tarn/dist/PendingOperation.js","../../node_modules/tarn/dist/Resource.js","../../node_modules/tarn/dist/Pool.js","../../node_modules/tarn/dist/tarn.js","../../node_modules/knex/lib/query/string.js","../../node_modules/knex/lib/client.js","../../node_modules/knex/lib/util/fake-client.js","../../node_modules/knex/node_modules/pg-connection-string/index.js","../../node_modules/knex/lib/util/parse-connection.js","../../node_modules/knex/lib/config-resolver.js","../../node_modules/knex/lib/knex.js","../../node_modules/knex/lib/index.js","../../node_modules/knex/knex.js","../../node_modules/pg-mem/webpack/bootstrap","../../node_modules/pg-mem/src/interfaces-private.ts","../../node_modules/pg-mem/src/utils.ts","../../node_modules/pg-mem/src/datatypes/index.ts","../../node_modules/pg-mem/src/interfaces.ts","../../node_modules/pg-mem/src/parser/context.ts","../../node_modules/pg-mem/src/transforms/transform-base.ts","../../node_modules/pg-mem/src/parser/expression-builder.ts","../../node_modules/pg-mem/src/execution/exec-utils.ts","../../node_modules/pg-mem/src/schema/readonly-table.ts","../../node_modules/pg-mem/src/datatypes/datatype-base.ts","../../node_modules/pg-mem/src/transforms/selection.ts","../../node_modules/pg-mem/src/evaluator.ts","../../node_modules/pg-mem/src/execution/select.ts","../../node_modules/pg-mem/external \"pgsql-ast-parser\"","../../node_modules/pg-mem/src/datatypes/datatypes.ts","../../node_modules/pg-mem/external \"object-hash\"","../../node_modules/pg-mem/external \"immutable\"","../../node_modules/pg-mem/external \"moment\"","../../node_modules/pg-mem/src/execution/clean-results.ts","../../node_modules/pg-mem/src/datatypes/t-record.ts","../../node_modules/pg-mem/src/execution/records-mutations/mutation-base.ts","../../node_modules/pg-mem/src/misc/buffer-node.ts","../../node_modules/pg-mem/external \"lru-cache\"","../../node_modules/pg-mem/src/transforms/aggregation.ts","../../node_modules/pg-mem/src/transforms/join.ts","../../node_modules/pg-mem/src/transforms/alias.ts","../../node_modules/pg-mem/src/parser/parse-cache.ts","../../node_modules/pg-mem/src/schema/table-index.ts","../../node_modules/pg-mem/external \"json-stable-stringify\"","../../node_modules/pg-mem/src/transforms/array-filter.ts","../../node_modules/pg-mem/src/constraints/index-cst.ts","../../node_modules/pg-mem/src/misc/pg-escape.ts","../../node_modules/pg-mem/src/datatypes/t-custom-enum.ts","../../node_modules/pg-mem/src/execution/schema-amends/create-sequence.ts","../../node_modules/pg-mem/src/execution/statement-exec.ts","../../node_modules/pg-mem/src/schema/view.ts","../../node_modules/pg-mem/src/transforms/seq-scan.ts","../../node_modules/pg-mem/src/index.ts","../../node_modules/pg-mem/src/db.ts","../../node_modules/pg-mem/src/schema/schema.ts","../../node_modules/pg-mem/src/parser/function-call.ts","../../node_modules/pg-mem/src/datatypes/datatypes-geometric.ts","../../node_modules/pg-mem/src/datatypes/t-interval.ts","../../node_modules/pg-mem/src/datatypes/t-time.ts","../../node_modules/pg-mem/src/datatypes/t-timestamp.ts","../../node_modules/pg-mem/src/datatypes/t-jsonb.ts","../../node_modules/pg-mem/src/datatypes/t-regtype.ts","../../node_modules/pg-mem/src/datatypes/t-regclass.ts","../../node_modules/pg-mem/src/datatypes/t-inet.ts","../../node_modules/pg-mem/src/table.ts","../../node_modules/pg-mem/src/transforms/restrictive-index.ts","../../node_modules/pg-mem/src/transforms/aggregations/count.ts","../../node_modules/pg-mem/src/transforms/aggregations/max-min.ts","../../node_modules/pg-mem/src/transforms/aggregations/sum.ts","../../node_modules/pg-mem/src/transforms/aggregations/array_agg.ts","../../node_modules/pg-mem/src/transforms/aggregations/avg.ts","../../node_modules/pg-mem/src/transforms/aggregations/json_aggs.ts","../../node_modules/pg-mem/src/transforms/aggregations/bool-aggregs.ts","../../node_modules/pg-mem/src/execution/records-mutations/deletion.ts","../../node_modules/pg-mem/src/execution/records-mutations/update.ts","../../node_modules/pg-mem/src/execution/records-mutations/insert.ts","../../node_modules/pg-mem/src/schema/values-table.ts","../../node_modules/pg-mem/src/schema/function-call-table.ts","../../node_modules/pg-mem/src/schema/btree-index.ts","../../node_modules/pg-mem/external \"functional-red-black-tree\"","../../node_modules/pg-mem/src/column.ts","../../node_modules/pg-mem/src/constraints/generated.ts","../../node_modules/pg-mem/src/constraints/foreign-key.ts","../../node_modules/pg-mem/src/constraints/subscription.ts","../../node_modules/pg-mem/src/constraints/wrapped.ts","../../node_modules/pg-mem/src/migrate/migrate.ts","../../node_modules/pg-mem/src/datatypes/t-equivalent.ts","../../node_modules/pg-mem/src/schema/overload-resolver.ts","../../node_modules/pg-mem/src/schema/sequence.ts","../../node_modules/pg-mem/src/execution/schema-amends/create-table.ts","../../node_modules/pg-mem/src/execution/schema-amends/create-index.ts","../../node_modules/pg-mem/src/execution/schema-amends/alter.ts","../../node_modules/pg-mem/src/execution/schema-amends/alter-sequence.ts","../../node_modules/pg-mem/src/execution/schema-amends/drop-index.ts","../../node_modules/pg-mem/src/execution/schema-amends/drop-table.ts","../../node_modules/pg-mem/src/execution/schema-amends/drop-sequence.ts","../../node_modules/pg-mem/src/execution/transaction-statements.ts","../../node_modules/pg-mem/src/execution/records-mutations/truncate-table.ts","../../node_modules/pg-mem/src/execution/show.ts","../../node_modules/pg-mem/src/execution/set.ts","../../node_modules/pg-mem/src/execution/schema-amends/create-enum.ts","../../node_modules/pg-mem/src/execution/schema-amends/create-view.ts","../../node_modules/pg-mem/src/execution/schema-amends/create-materialized-view.ts","../../node_modules/pg-mem/src/execution/schema-amends/create-schema.ts","../../node_modules/pg-mem/src/execution/schema-amends/create-function.ts","../../node_modules/pg-mem/src/execution/schema-amends/do.ts","../../node_modules/pg-mem/src/execution/schema-amends/drop-type.ts","../../node_modules/pg-mem/src/transforms/build-filter.ts","../../node_modules/pg-mem/src/transforms/eq-filter.ts","../../node_modules/pg-mem/src/transforms/false-filter.ts","../../node_modules/pg-mem/src/transforms/and-filter.ts","../../node_modules/pg-mem/src/transforms/or-filter.ts","../../node_modules/pg-mem/src/transforms/in-filter.ts","../../node_modules/pg-mem/src/transforms/not-in-filter.ts","../../node_modules/pg-mem/src/transforms/startswith-filter.ts","../../node_modules/pg-mem/src/transforms/ineq-filter.ts","../../node_modules/pg-mem/src/transforms/between-filter.ts","../../node_modules/pg-mem/src/adapters/index.ts","../../node_modules/pg-mem/src/adapters/adapters.ts","../../node_modules/pg-mem/src/misc/pg-utils.ts","../../node_modules/pg-mem/src/transaction.ts","../../node_modules/pg-mem/src/transforms/limit.ts","../../node_modules/pg-mem/src/transforms/union.ts","../../node_modules/pg-mem/src/transforms/distinct.ts","../../node_modules/pg-mem/src/transforms/order-by.ts","../../node_modules/pg-mem/src/schema/pg-catalog/index.ts","../../node_modules/pg-mem/src/schema/pg-catalog/pg-attribute-list.ts","../../node_modules/pg-mem/src/schema/pg-catalog/pg-class.ts","../../node_modules/pg-mem/src/schema/pg-catalog/pg-constraints-list.ts","../../node_modules/pg-mem/src/schema/pg-catalog/pg-index-list.ts","../../node_modules/pg-mem/src/schema/pg-catalog/pg-namespace-list.ts","../../node_modules/pg-mem/src/schema/pg-catalog/pg-type-list.ts","../../node_modules/pg-mem/src/functions/index.ts","../../node_modules/pg-mem/src/functions/string.ts","../../node_modules/pg-mem/src/functions/date.ts","../../node_modules/pg-mem/src/functions/system.ts","../../node_modules/pg-mem/src/functions/sequence-fns.ts","../../node_modules/pg-mem/src/schema/pg-catalog/pg-range.ts","../../node_modules/pg-mem/src/schema/pg-catalog/pg-database.ts","../../node_modules/pg-mem/src/schema/pg-catalog/binary-operators.ts","../../node_modules/pg-mem/src/schema/pg-catalog/sql-function-language.ts","../../node_modules/pg-mem/src/schema/information-schema/index.ts","../../node_modules/pg-mem/src/schema/information-schema/columns-list.ts","../../node_modules/pg-mem/src/schema/information-schema/table-list.ts","../../node_modules/pg-mem/src/schema/information-schema/table-constraints.ts","../../node_modules/pg-mem/src/schema/information-schema/key-column-usage.ts","../../node_modules/pg-mem/src/schema/information-schema/constraint-column-usage.ts","../src/app.ts","../src/trpc/index.ts","../../node_modules/superjson/src/double-indexed-kv.ts","../../node_modules/superjson/src/registry.ts","../../node_modules/superjson/src/class-registry.ts","../../node_modules/superjson/src/util.ts","../../node_modules/superjson/src/custom-transformer-registry.ts","../../node_modules/superjson/src/is.ts","../../node_modules/superjson/src/pathstringifier.ts","../../node_modules/superjson/src/transformer.ts","../../node_modules/superjson/src/accessDeep.ts","../../node_modules/superjson/src/plainer.ts","../../node_modules/is-what/dist/index.js","../../node_modules/copy-anything/dist/index.js","../../node_modules/superjson/src/index.ts","../src/entities/index.ts","../src/entities/item/item.ts","../src/entities/category/category.ts","../src/entities/user/user.ts","../src/entities/message/message.ts","../src/entities/room/room.ts","../src/modules/user/login/index.ts","../src/config.ts","../src/modules/user/tokenPayload.ts","../src/modules/user/login/schema.ts","../src/modules/user/signup/index.ts","../src/modules/user/signup/schema.ts","../src/modules/user/index.ts","../src/trpc/authenticatedProcedure/index.ts","../src/trpc/authenticatedProcedure/buildAuthenticatedProcedure.ts","../src/entities/user/schema.ts","../src/utils/validation.ts","../src/modules/item/addItem/index.ts","../src/entities/item/schema.ts","../src/modules/item/removeItem/index.ts","../src/modules/item/updatePosition/index.ts","../src/modules/item/updateCategory/index.ts","../src/modules/item/updateRoom/index.ts","../src/modules/item/removeCategories/index.ts","../src/modules/item/removeRoom/index.ts","../src/modules/item/index.ts","../src/entities/room/schema.ts","../src/modules/room/deleteRoom/index.ts","../src/modules/room/createRoom/index.ts","../src/modules/room/updateRoom/index.ts","../src/modules/room/loadRoom/index.ts","../src/modules/room/getRooms/index.ts","../src/modules/room/index.ts","../src/entities/message/schema.ts","../src/modules/message/service/openai/index.ts","../src/modules/message/service/openai/repository.ts","../src/modules/message/service/openai/generator.ts","../src/modules/message/chat/index.ts","../src/modules/index.ts","../src/database/index.ts","../src/modules/message/service/openai/config/open-ai.ts","../src/index.ts"],"sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory) /* global define */\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory()\n  } else {\n    root.moo = factory()\n  }\n}(this, function() {\n  'use strict';\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty\n  var toString = Object.prototype.toString\n  var hasSticky = typeof new RegExp().sticky === 'boolean'\n\n  /***************************************************************************/\n\n  function isRegExp(o) { return o && toString.call(o) === '[object RegExp]' }\n  function isObject(o) { return o && typeof o === 'object' && !isRegExp(o) && !Array.isArray(o) }\n\n  function reEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n  }\n  function reGroups(s) {\n    var re = new RegExp('|' + s)\n    return re.exec('').length - 1\n  }\n  function reCapture(s) {\n    return '(' + s + ')'\n  }\n  function reUnion(regexps) {\n    if (!regexps.length) return '(?!)'\n    var source =  regexps.map(function(s) {\n      return \"(?:\" + s + \")\"\n    }).join('|')\n    return \"(?:\" + source + \")\"\n  }\n\n  function regexpOrLiteral(obj) {\n    if (typeof obj === 'string') {\n      return '(?:' + reEscape(obj) + ')'\n\n    } else if (isRegExp(obj)) {\n      // TODO: consider /u support\n      if (obj.ignoreCase) throw new Error('RegExp /i flag not allowed')\n      if (obj.global) throw new Error('RegExp /g flag is implied')\n      if (obj.sticky) throw new Error('RegExp /y flag is implied')\n      if (obj.multiline) throw new Error('RegExp /m flag is implied')\n      return obj.source\n\n    } else {\n      throw new Error('Not a pattern: ' + obj)\n    }\n  }\n\n  function pad(s, length) {\n    if (s.length > length) {\n      return s\n    }\n    return Array(length - s.length + 1).join(\" \") + s\n  }\n\n  function lastNLines(string, numLines) {\n    var position = string.length\n    var lineBreaks = 0;\n    while (true) {\n      var idx = string.lastIndexOf(\"\\n\", position - 1)\n      if (idx === -1) {\n        break;\n      } else {\n        lineBreaks++\n      }\n      position = idx\n      if (lineBreaks === numLines) {\n        break;\n      }\n      if (position === 0) {\n        break;\n      }\n    }\n    var startPosition = \n      lineBreaks < numLines ?\n      0 : \n      position + 1\n    return string.substring(startPosition).split(\"\\n\")\n  }\n\n  function objectToRules(object) {\n    var keys = Object.getOwnPropertyNames(object)\n    var result = []\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      var thing = object[key]\n      var rules = [].concat(thing)\n      if (key === 'include') {\n        for (var j = 0; j < rules.length; j++) {\n          result.push({include: rules[j]})\n        }\n        continue\n      }\n      var match = []\n      rules.forEach(function(rule) {\n        if (isObject(rule)) {\n          if (match.length) result.push(ruleOptions(key, match))\n          result.push(ruleOptions(key, rule))\n          match = []\n        } else {\n          match.push(rule)\n        }\n      })\n      if (match.length) result.push(ruleOptions(key, match))\n    }\n    return result\n  }\n\n  function arrayToRules(array) {\n    var result = []\n    for (var i = 0; i < array.length; i++) {\n      var obj = array[i]\n      if (obj.include) {\n        var include = [].concat(obj.include)\n        for (var j = 0; j < include.length; j++) {\n          result.push({include: include[j]})\n        }\n        continue\n      }\n      if (!obj.type) {\n        throw new Error('Rule has no type: ' + JSON.stringify(obj))\n      }\n      result.push(ruleOptions(obj.type, obj))\n    }\n    return result\n  }\n\n  function ruleOptions(type, obj) {\n    if (!isObject(obj)) {\n      obj = { match: obj }\n    }\n    if (obj.include) {\n      throw new Error('Matching rules cannot also include states')\n    }\n\n    // nb. error and fallback imply lineBreaks\n    var options = {\n      defaultType: type,\n      lineBreaks: !!obj.error || !!obj.fallback,\n      pop: false,\n      next: null,\n      push: null,\n      error: false,\n      fallback: false,\n      value: null,\n      type: null,\n      shouldThrow: false,\n    }\n\n    // Avoid Object.assign(), so we support IE9+\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) {\n        options[key] = obj[key]\n      }\n    }\n\n    // type transform cannot be a string\n    if (typeof options.type === 'string' && type !== options.type) {\n      throw new Error(\"Type transform cannot be a string (type '\" + options.type + \"' for token '\" + type + \"')\")\n    }\n\n    // convert to array\n    var match = options.match\n    options.match = Array.isArray(match) ? match : match ? [match] : []\n    options.match.sort(function(a, b) {\n      return isRegExp(a) && isRegExp(b) ? 0\n           : isRegExp(b) ? -1 : isRegExp(a) ? +1 : b.length - a.length\n    })\n    return options\n  }\n\n  function toRules(spec) {\n    return Array.isArray(spec) ? arrayToRules(spec) : objectToRules(spec)\n  }\n\n  var defaultErrorRule = ruleOptions('error', {lineBreaks: true, shouldThrow: true})\n  function compileRules(rules, hasStates) {\n    var errorRule = null\n    var fast = Object.create(null)\n    var fastAllowed = true\n    var unicodeFlag = null\n    var groups = []\n    var parts = []\n\n    // If there is a fallback rule, then disable fast matching\n    for (var i = 0; i < rules.length; i++) {\n      if (rules[i].fallback) {\n        fastAllowed = false\n      }\n    }\n\n    for (var i = 0; i < rules.length; i++) {\n      var options = rules[i]\n\n      if (options.include) {\n        // all valid inclusions are removed by states() preprocessor\n        throw new Error('Inheritance is not allowed in stateless lexers')\n      }\n\n      if (options.error || options.fallback) {\n        // errorRule can only be set once\n        if (errorRule) {\n          if (!options.fallback === !errorRule.fallback) {\n            throw new Error(\"Multiple \" + (options.fallback ? \"fallback\" : \"error\") + \" rules not allowed (for token '\" + options.defaultType + \"')\")\n          } else {\n            throw new Error(\"fallback and error are mutually exclusive (for token '\" + options.defaultType + \"')\")\n          }\n        }\n        errorRule = options\n      }\n\n      var match = options.match.slice()\n      if (fastAllowed) {\n        while (match.length && typeof match[0] === 'string' && match[0].length === 1) {\n          var word = match.shift()\n          fast[word.charCodeAt(0)] = options\n        }\n      }\n\n      // Warn about inappropriate state-switching options\n      if (options.pop || options.push || options.next) {\n        if (!hasStates) {\n          throw new Error(\"State-switching options are not allowed in stateless lexers (for token '\" + options.defaultType + \"')\")\n        }\n        if (options.fallback) {\n          throw new Error(\"State-switching options are not allowed on fallback tokens (for token '\" + options.defaultType + \"')\")\n        }\n      }\n\n      // Only rules with a .match are included in the RegExp\n      if (match.length === 0) {\n        continue\n      }\n      fastAllowed = false\n\n      groups.push(options)\n\n      // Check unicode flag is used everywhere or nowhere\n      for (var j = 0; j < match.length; j++) {\n        var obj = match[j]\n        if (!isRegExp(obj)) {\n          continue\n        }\n\n        if (unicodeFlag === null) {\n          unicodeFlag = obj.unicode\n        } else if (unicodeFlag !== obj.unicode && options.fallback === false) {\n          throw new Error('If one rule is /u then all must be')\n        }\n      }\n\n      // convert to RegExp\n      var pat = reUnion(match.map(regexpOrLiteral))\n\n      // validate\n      var regexp = new RegExp(pat)\n      if (regexp.test(\"\")) {\n        throw new Error(\"RegExp matches empty string: \" + regexp)\n      }\n      var groupCount = reGroups(pat)\n      if (groupCount > 0) {\n        throw new Error(\"RegExp has capture groups: \" + regexp + \"\\nUse (?: … ) instead\")\n      }\n\n      // try and detect rules matching newlines\n      if (!options.lineBreaks && regexp.test('\\n')) {\n        throw new Error('Rule should declare lineBreaks: ' + regexp)\n      }\n\n      // store regex\n      parts.push(reCapture(pat))\n    }\n\n\n    // If there's no fallback rule, use the sticky flag so we only look for\n    // matches at the current index.\n    //\n    // If we don't support the sticky flag, then fake it using an irrefutable\n    // match (i.e. an empty pattern).\n    var fallbackRule = errorRule && errorRule.fallback\n    var flags = hasSticky && !fallbackRule ? 'ym' : 'gm'\n    var suffix = hasSticky || fallbackRule ? '' : '|'\n\n    if (unicodeFlag === true) flags += \"u\"\n    var combined = new RegExp(reUnion(parts) + suffix, flags)\n    return {regexp: combined, groups: groups, fast: fast, error: errorRule || defaultErrorRule}\n  }\n\n  function compile(rules) {\n    var result = compileRules(toRules(rules))\n    return new Lexer({start: result}, 'start')\n  }\n\n  function checkStateGroup(g, name, map) {\n    var state = g && (g.push || g.next)\n    if (state && !map[state]) {\n      throw new Error(\"Missing state '\" + state + \"' (in token '\" + g.defaultType + \"' of state '\" + name + \"')\")\n    }\n    if (g && g.pop && +g.pop !== 1) {\n      throw new Error(\"pop must be 1 (in token '\" + g.defaultType + \"' of state '\" + name + \"')\")\n    }\n  }\n  function compileStates(states, start) {\n    var all = states.$all ? toRules(states.$all) : []\n    delete states.$all\n\n    var keys = Object.getOwnPropertyNames(states)\n    if (!start) start = keys[0]\n\n    var ruleMap = Object.create(null)\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      ruleMap[key] = toRules(states[key]).concat(all)\n    }\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      var rules = ruleMap[key]\n      var included = Object.create(null)\n      for (var j = 0; j < rules.length; j++) {\n        var rule = rules[j]\n        if (!rule.include) continue\n        var splice = [j, 1]\n        if (rule.include !== key && !included[rule.include]) {\n          included[rule.include] = true\n          var newRules = ruleMap[rule.include]\n          if (!newRules) {\n            throw new Error(\"Cannot include nonexistent state '\" + rule.include + \"' (in state '\" + key + \"')\")\n          }\n          for (var k = 0; k < newRules.length; k++) {\n            var newRule = newRules[k]\n            if (rules.indexOf(newRule) !== -1) continue\n            splice.push(newRule)\n          }\n        }\n        rules.splice.apply(rules, splice)\n        j--\n      }\n    }\n\n    var map = Object.create(null)\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      map[key] = compileRules(ruleMap[key], true)\n    }\n\n    for (var i = 0; i < keys.length; i++) {\n      var name = keys[i]\n      var state = map[name]\n      var groups = state.groups\n      for (var j = 0; j < groups.length; j++) {\n        checkStateGroup(groups[j], name, map)\n      }\n      var fastKeys = Object.getOwnPropertyNames(state.fast)\n      for (var j = 0; j < fastKeys.length; j++) {\n        checkStateGroup(state.fast[fastKeys[j]], name, map)\n      }\n    }\n\n    return new Lexer(map, start)\n  }\n\n  function keywordTransform(map) {\n\n    // Use a JavaScript Map to map keywords to their corresponding token type\n    // unless Map is unsupported, then fall back to using an Object:\n    var isMap = typeof Map !== 'undefined'\n    var reverseMap = isMap ? new Map : Object.create(null)\n\n    var types = Object.getOwnPropertyNames(map)\n    for (var i = 0; i < types.length; i++) {\n      var tokenType = types[i]\n      var item = map[tokenType]\n      var keywordList = Array.isArray(item) ? item : [item]\n      keywordList.forEach(function(keyword) {\n        if (typeof keyword !== 'string') {\n          throw new Error(\"keyword must be string (in keyword '\" + tokenType + \"')\")\n        }\n        if (isMap) {\n          reverseMap.set(keyword, tokenType)\n        } else {\n          reverseMap[keyword] = tokenType\n        }\n      })\n    }\n    return function(k) {\n      return isMap ? reverseMap.get(k) : reverseMap[k]\n    }\n  }\n\n  /***************************************************************************/\n\n  var Lexer = function(states, state) {\n    this.startState = state\n    this.states = states\n    this.buffer = ''\n    this.stack = []\n    this.reset()\n  }\n\n  Lexer.prototype.reset = function(data, info) {\n    this.buffer = data || ''\n    this.index = 0\n    this.line = info ? info.line : 1\n    this.col = info ? info.col : 1\n    this.queuedToken = info ? info.queuedToken : null\n    this.queuedText = info ? info.queuedText: \"\";\n    this.queuedThrow = info ? info.queuedThrow : null\n    this.setState(info ? info.state : this.startState)\n    this.stack = info && info.stack ? info.stack.slice() : []\n    return this\n  }\n\n  Lexer.prototype.save = function() {\n    return {\n      line: this.line,\n      col: this.col,\n      state: this.state,\n      stack: this.stack.slice(),\n      queuedToken: this.queuedToken,\n      queuedText: this.queuedText,\n      queuedThrow: this.queuedThrow,\n    }\n  }\n\n  Lexer.prototype.setState = function(state) {\n    if (!state || this.state === state) return\n    this.state = state\n    var info = this.states[state]\n    this.groups = info.groups\n    this.error = info.error\n    this.re = info.regexp\n    this.fast = info.fast\n  }\n\n  Lexer.prototype.popState = function() {\n    this.setState(this.stack.pop())\n  }\n\n  Lexer.prototype.pushState = function(state) {\n    this.stack.push(this.state)\n    this.setState(state)\n  }\n\n  var eat = hasSticky ? function(re, buffer) { // assume re is /y\n    return re.exec(buffer)\n  } : function(re, buffer) { // assume re is /g\n    var match = re.exec(buffer)\n    // will always match, since we used the |(?:) trick\n    if (match[0].length === 0) {\n      return null\n    }\n    return match\n  }\n\n  Lexer.prototype._getGroup = function(match) {\n    var groupCount = this.groups.length\n    for (var i = 0; i < groupCount; i++) {\n      if (match[i + 1] !== undefined) {\n        return this.groups[i]\n      }\n    }\n    throw new Error('Cannot find token type for matched text')\n  }\n\n  function tokenToString() {\n    return this.value\n  }\n\n  Lexer.prototype.next = function() {\n    var index = this.index\n\n    // If a fallback token matched, we don't need to re-run the RegExp\n    if (this.queuedGroup) {\n      var token = this._token(this.queuedGroup, this.queuedText, index)\n      this.queuedGroup = null\n      this.queuedText = \"\"\n      return token\n    }\n\n    var buffer = this.buffer\n    if (index === buffer.length) {\n      return // EOF\n    }\n\n    // Fast matching for single characters\n    var group = this.fast[buffer.charCodeAt(index)]\n    if (group) {\n      return this._token(group, buffer.charAt(index), index)\n    }\n\n    // Execute RegExp\n    var re = this.re\n    re.lastIndex = index\n    var match = eat(re, buffer)\n\n    // Error tokens match the remaining buffer\n    var error = this.error\n    if (match == null) {\n      return this._token(error, buffer.slice(index, buffer.length), index)\n    }\n\n    var group = this._getGroup(match)\n    var text = match[0]\n\n    if (error.fallback && match.index !== index) {\n      this.queuedGroup = group\n      this.queuedText = text\n\n      // Fallback tokens contain the unmatched portion of the buffer\n      return this._token(error, buffer.slice(index, match.index), index)\n    }\n\n    return this._token(group, text, index)\n  }\n\n  Lexer.prototype._token = function(group, text, offset) {\n    // count line breaks\n    var lineBreaks = 0\n    if (group.lineBreaks) {\n      var matchNL = /\\n/g\n      var nl = 1\n      if (text === '\\n') {\n        lineBreaks = 1\n      } else {\n        while (matchNL.exec(text)) { lineBreaks++; nl = matchNL.lastIndex }\n      }\n    }\n\n    var token = {\n      type: (typeof group.type === 'function' && group.type(text)) || group.defaultType,\n      value: typeof group.value === 'function' ? group.value(text) : text,\n      text: text,\n      toString: tokenToString,\n      offset: offset,\n      lineBreaks: lineBreaks,\n      line: this.line,\n      col: this.col,\n    }\n    // nb. adding more props to token object will make V8 sad!\n\n    var size = text.length\n    this.index += size\n    this.line += lineBreaks\n    if (lineBreaks !== 0) {\n      this.col = size - nl + 1\n    } else {\n      this.col += size\n    }\n\n    // throw, if no rule with {error: true}\n    if (group.shouldThrow) {\n      var err = new Error(this.formatError(token, \"invalid syntax\"))\n      throw err;\n    }\n\n    if (group.pop) this.popState()\n    else if (group.push) this.pushState(group.push)\n    else if (group.next) this.setState(group.next)\n\n    return token\n  }\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    var LexerIterator = function(lexer) {\n      this.lexer = lexer\n    }\n\n    LexerIterator.prototype.next = function() {\n      var token = this.lexer.next()\n      return {value: token, done: !token}\n    }\n\n    LexerIterator.prototype[Symbol.iterator] = function() {\n      return this\n    }\n\n    Lexer.prototype[Symbol.iterator] = function() {\n      return new LexerIterator(this)\n    }\n  }\n\n  Lexer.prototype.formatError = function(token, message) {\n    if (token == null) {\n      // An undefined token indicates EOF\n      var text = this.buffer.slice(this.index)\n      var token = {\n        text: text,\n        offset: this.index,\n        lineBreaks: text.indexOf('\\n') === -1 ? 0 : 1,\n        line: this.line,\n        col: this.col,\n      }\n    }\n    \n    var numLinesAround = 2\n    var firstDisplayedLine = Math.max(token.line - numLinesAround, 1)\n    var lastDisplayedLine = token.line + numLinesAround\n    var lastLineDigits = String(lastDisplayedLine).length\n    var displayedLines = lastNLines(\n        this.buffer, \n        (this.line - token.line) + numLinesAround + 1\n      )\n      .slice(0, 5)\n    var errorLines = []\n    errorLines.push(message + \" at line \" + token.line + \" col \" + token.col + \":\")\n    errorLines.push(\"\")\n    for (var i = 0; i < displayedLines.length; i++) {\n      var line = displayedLines[i]\n      var lineNo = firstDisplayedLine + i\n      errorLines.push(pad(String(lineNo), lastLineDigits) + \"  \" + line);\n      if (lineNo === token.line) {\n        errorLines.push(pad(\"\", lastLineDigits + token.col + 1) + \"^\")\n      }\n    }\n    return errorLines.join(\"\\n\")\n  }\n\n  Lexer.prototype.clone = function() {\n    return new Lexer(this.states, this.state)\n  }\n\n  Lexer.prototype.has = function(tokenType) {\n    return true\n  }\n\n\n  return {\n    compile: compile,\n    states: compileStates,\n    error: Object.freeze({error: true}),\n    fallback: Object.freeze({fallback: true}),\n    keywords: keywordTransform,\n  }\n\n}));\n","(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        var symbolSequence = (typeof withCursorAt === \"undefined\")\n                             ? this.symbols.map(getSymbolShortDisplay).join(' ')\n                             : (   this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(' ')\n                                 + \" ● \"\n                                 + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(' ')     );\n        return this.name + \" → \" + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n            // Having right set here will prevent the right state and its children\n            // form being garbage collected\n            state.right = undefined;\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== 'string') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset(\"\");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === '\\n') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === 'string') {\n            var lines = buffer\n                .split(\"\\n\")\n                .slice(\n                    Math.max(0, this.line - 5), \n                    this.line\n                );\n\n            var nextLineBreak = buffer.indexOf('\\n', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var col = this.index - this.lastLineBreak;\n            var lastLineDigits = String(this.line).length;\n            message += \" at line \" + this.line + \" col \" + col + \":\\n\\n\";\n            message += lines\n                .map(function(line, i) {\n                    return pad(this.line - lines.length + i + 1, lastLineDigits) + \" \" + line;\n                }, this)\n                .join(\"\\n\");\n            message += \"\\n\" + pad(\"\", lastLineDigits + col) + \"^\\n\";\n            return message;\n        } else {\n            return message + \" at index \" + (this.index - 1);\n        }\n\n        function pad(n, length) {\n            var s = String(n);\n            return Array(length - s.length + 1).join(\" \") + s;\n        }\n    }\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (true) {\n            try {\n                token = lexer.next();\n                if (!token) {\n                    break;\n                }\n            } catch (e) {\n                // Create the next column so that the error reporter\n                // can display the correctly predicted states.\n                var nextColumn = new Column(this.grammar, this.current + 1);\n                this.table.push(nextColumn);\n                var err = new Error(this.reportLexerError(e));\n                err.offset = this.current;\n                err.token = e.token;\n                throw err;\n            }\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.text !== undefined ? token.text : token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal's start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var err = new Error(this.reportError(token));\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it's worth\n        return this;\n    };\n\n    Parser.prototype.reportLexerError = function(lexerError) {\n        var tokenDisplay, lexerMessage;\n        // Planning to add a token property to moo's thrown error\n        // even on erroring tokens to be used in error display below\n        var token = lexerError.token;\n        if (token) {\n            tokenDisplay = \"input \" + JSON.stringify(token.text[0]) + \" (lexer error)\";\n            lexerMessage = this.lexer.formatError(token, \"Syntax error\");\n        } else {\n            tokenDisplay = \"input (lexer error)\";\n            lexerMessage = lexerError.message;\n        }\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportError = function(token) {\n        var tokenDisplay = (token.type ? token.type + \" token: \" : \"\") + JSON.stringify(token.value !== undefined ? token.value : token);\n        var lexerMessage = this.lexer.formatError(token, \"Syntax error\");\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportErrorCommon = function(lexerMessage, tokenDisplay) {\n        var lines = [];\n        lines.push(lexerMessage);\n        var lastColumnIndex = this.table.length - 2;\n        var lastColumn = this.table[lastColumnIndex];\n        var expectantStates = lastColumn.states\n            .filter(function(state) {\n                var nextSymbol = state.rule.symbols[state.dot];\n                return nextSymbol && typeof nextSymbol !== \"string\";\n            });\n\n        if (expectantStates.length === 0) {\n            lines.push('Unexpected ' + tokenDisplay + '. I did not expect any more input. Here is the state of my parse table:\\n');\n            this.displayStateStack(lastColumn.states, lines);\n        } else {\n            lines.push('Unexpected ' + tokenDisplay + '. Instead, I was expecting to see one of the following:\\n');\n            // Display a \"state stack\" for each expectant state\n            // - which shows you how this state came to be, step by step.\n            // If there is more than one derivation, we only display the first one.\n            var stateStacks = expectantStates\n                .map(function(state) {\n                    return this.buildFirstStateStack(state, []) || [state];\n                }, this);\n            // Display each state that is expecting a terminal symbol next.\n            stateStacks.forEach(function(stateStack) {\n                var state = stateStack[0];\n                var nextSymbol = state.rule.symbols[state.dot];\n                var symbolDisplay = this.getSymbolDisplay(nextSymbol);\n                lines.push('A ' + symbolDisplay + ' based on:');\n                this.displayStateStack(stateStack, lines);\n            }, this);\n        }\n        lines.push(\"\");\n        return lines.join(\"\\n\");\n    }\n    \n    Parser.prototype.displayStateStack = function(stateStack, lines) {\n        var lastDisplay;\n        var sameDisplayCount = 0;\n        for (var j = 0; j < stateStack.length; j++) {\n            var state = stateStack[j];\n            var display = state.rule.toString(state.dot);\n            if (display === lastDisplay) {\n                sameDisplayCount++;\n            } else {\n                if (sameDisplayCount > 0) {\n                    lines.push('    ^ ' + sameDisplayCount + ' more lines identical to this');\n                }\n                sameDisplayCount = 0;\n                lines.push('    ' + display);\n            }\n            lastDisplay = display;\n        }\n    };\n\n    Parser.prototype.getSymbolDisplay = function(symbol) {\n        return getSymbolLongDisplay(symbol);\n    };\n\n    /*\n    Builds a the first state stack. You can think of a state stack as the call stack\n    of the recursive-descent parser which the Nearley parse algorithm simulates.\n    A state stack is represented as an array of state objects. Within a\n    state stack, the first item of the array will be the starting\n    state, with each successive item in the array going further back into history.\n\n    This function needs to be given a starting state and an empty array representing\n    the visited states, and it returns an single state stack.\n\n    */\n    Parser.prototype.buildFirstStateStack = function(state, visited) {\n        if (visited.indexOf(state) !== -1) {\n            // Found cycle, return null\n            // to eliminate this path from the results, because\n            // we don't know how to display it meaningfully\n            return null;\n        }\n        if (state.wantedBy.length === 0) {\n            return [state];\n        }\n        var prevState = state.wantedBy[0];\n        var childVisited = [state].concat(visited);\n        var childResult = this.buildFirstStateStack(prevState, childVisited);\n        if (childResult === null) {\n            return null;\n        }\n        return [state].concat(childResult);\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error('set option `keepHistory` to enable rewinding')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    function getSymbolLongDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === \"string\") {\n            return symbol;\n        } else if (type === \"object\") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return 'character matching ' + symbol;\n            } else if (symbol.type) {\n                return symbol.type + ' token';\n            } else if (symbol.test) {\n                return 'token matching ' + String(symbol.test);\n            } else {\n                throw new Error('Unknown symbol type: ' + symbol);\n            }\n        }\n    }\n\n    function getSymbolShortDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === \"string\") {\n            return symbol;\n        } else if (type === \"object\") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return symbol.toString();\n            } else if (symbol.type) {\n                return '%' + symbol.type;\n            } else if (symbol.test) {\n                return '<' + String(symbol.test) + '>';\n            } else {\n                throw new Error('Unknown symbol type: ' + symbol);\n            }\n        }\n    }\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"moo\");","import { compile, keywords, Token } from 'moo';\n\nimport { sqlKeywords } from './keywords';\nimport { NodeLocation, PGComment } from './syntax/ast';\n\n// build keywords\nconst keywordsMap: any = {};\nfor (const k of sqlKeywords) {\n    keywordsMap['kw_' + k.toLowerCase()] = k;\n}\nconst caseInsensitiveKeywords = (map: any) => {\n    const transform = keywords(map)\n    return (text: string) => transform(text.toUpperCase())\n}\n\n\n// build lexer\nexport const lexer = compile({\n    word: {\n        match: /[eE](?!')[A-Za-z0-9_]*|[a-df-zA-DF-Z_][A-Za-z0-9_]*/,\n        type: caseInsensitiveKeywords(keywordsMap),\n        value: x => x.toLowerCase(),\n    },\n    wordQuoted: {\n        match: /\"(?:[^\"\\*]|\"\")+\"/,\n        type: () => 'quoted_word',\n        value: x => x.substring(1, x.length - 1),\n    },\n    string: {\n        match: /'(?:[^']|\\'\\')*'/,\n        value: x => {\n            return x.substring(1, x.length - 1)\n                .replace(/''/g, '\\'');\n        },\n    },\n    eString: {\n        match: /\\b(?:e|E)'(?:[^'\\\\]|[\\r\\n\\s]|(?:\\\\\\s)|(?:\\\\\\n)|(?:\\\\.)|(?:\\'\\'))+'/,\n        value: x => {\n            return x.substring(2, x.length - 1)\n                .replace(/''/g, '\\'')\n                .replace(/\\\\([\\s\\n])/g, (_, x) => x)\n                .replace(/\\\\./g, m => JSON.parse('\"' + m + '\"'));\n        },\n    },\n    qparam: {\n        match: /\\$\\d+/,\n    },\n    commentLine: /\\-\\-.*?$[\\s\\r\\n]*/,\n    commentFullOpen: /\\/\\*/,\n    commentFullClose: /\\*\\/[\\s\\r\\n]*/,\n    star: '*',\n    comma: ',',\n    space: { match: /[\\s\\t\\n\\v\\f\\r]+/, lineBreaks: true, },\n    int: /\\-?\\d+(?![\\.\\d])/,\n    float: /\\-?(?:(?:\\d*\\.\\d+)|(?:\\d+\\.\\d*))/,\n    // word: /[a-zA-Z][A-Za-z0-9_\\-]*/,\n    lparen: '(',\n    rparen: ')',\n    lbracket: '[',\n    rbracket: ']',\n    semicolon: ';',\n    dot: /\\.(?!\\d)/,\n    op_cast: '::',\n    op_colon: ':',\n    op_plus: '+',\n    op_eq: '=',\n    op_neq: {\n        match: /(?:!=)|(?:\\<\\>)/,\n        value: () => '!=',\n    },\n    op_membertext: '->>',\n    op_member: '->',\n    op_minus: '-',\n    op_div: /\\//,\n    op_not_ilike: /\\!~~\\*/, // !~~* =ILIKE\n    op_not_like: /\\!~~/, // !~~ =LIKE\n    op_ilike: /~~\\*/, // ~~* =ILIKE\n    op_like: /~~/, // ~~ =LIKE\n    op_mod: '%',\n    op_exp: '^',\n    op_additive: {\n        // group other additive operators\n        match: ['||', '-', '#-', '&&'],\n    },\n    op_compare: {\n        // group other comparison operators\n        // ... to add: \"IN\" and \"NOT IN\" that are matched by keywords\n        match: ['>', '>=', '<', '<=', '@>', '<@', '?', '?|', '?&', '#>>', '>>', '<<', '~', '~*', '!~', '!~*', '@@'],\n    },\n    ops_others: {\n        // referenced as (any other operator) in https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-PRECEDENCE\n        // see also https://www.postgresql.org/docs/9.0/functions-math.html\n        match: ['|', '&', '^', '#'],\n    },\n    codeblock: {\n        match: /\\$\\$(?:.|[\\s\\t\\n\\v\\f\\r])*?\\$\\$/s,\n        lineBreaks: true,\n        value: (x: string) => x.substring(2, x.length - 2),\n    },\n});\n\nlexer.next = (next => () => {\n    let tok: Token | undefined;\n    let commentFull: {\n        nested: number;\n        offset: number;\n        text: string;\n    } | null = null;\n\n    while (tok = next.call(lexer)) {\n        // js regex can't be recursive, so we'll keep track of nested opens (/*) and closes (*/).\n        if (tok.type === 'commentFullOpen') {\n            if (commentFull === null) { // initial open - start collecting content\n                commentFull = {\n                    nested: 0,\n                    offset: tok.offset,\n                    text: tok.text\n                }\n                continue;\n            }\n            commentFull.nested++;\n        }\n        if (commentFull != null) {\n            // collect comment content\n            commentFull.text += tok.text;\n\n            if (tok.type === 'commentFullClose') {\n                if (commentFull.nested === 0) { // finish comment, if not nested\n                    comments?.push(makeComment(commentFull))\n                    commentFull = null;\n                    continue;\n                }\n                commentFull.nested--;\n            }\n            continue;\n        }\n        if (tok.type === 'space') {\n            continue;\n        }\n        if (tok.type === 'commentLine') {\n            comments?.push(makeComment(tok))\n            continue;\n        }\n        break;\n    }\n\n    if (trackingLoc && tok) {\n        const start = tok.offset;\n        const loc: NodeLocation = {\n            start,\n            end: start + tok.text.length,\n        };\n        (tok as any)._location = loc;\n    }\n    return tok;\n})(lexer.next);\n\nexport const lexerAny: any = lexer;\n\nlet comments: PGComment[] | null = null;\n\nconst makeComment = ({ offset, text }: { offset: number; text: string }): PGComment => ({\n\t_location: { start: offset, end: offset + text.length },\n\tcomment: text,\n});\n\nexport function trackingComments<T>(act: () => T): { ast: T; comments: PGComment[] } {\n    if (comments) {\n        throw new Error('WAT ? Recursive comments tracking 🤔🤨 ?');\n    }\n    try {\n        comments = [];\n        const ast = act();\n        return { comments, ast };\n    } finally {\n        comments = null;\n    }\n}\n\nlet trackingLoc = false;\nexport function tracking<T>(act: () => T): T {\n    if (trackingLoc) {\n        return act();\n    }\n    try {\n        trackingLoc = true;\n        return act();\n    } finally {\n        trackingLoc = false;\n    }\n}\n\nexport function track(xs: any, ret: any) {\n    if (!trackingLoc || !ret || typeof ret !== 'object') {\n        return ret;\n    }\n    const start = seek(xs, true);\n    const end = seek(xs, false);\n    if (!start || !end) {\n        return ret;\n    }\n    if (start === end) {\n        ret._location = start;\n    } else {\n        const loc: NodeLocation = {\n            start: start.start,\n            end: end.end,\n        };\n        ret._location = loc;\n    }\n\n    return ret;\n}\n\nconst literal = Symbol('_literal');\nconst doubleQuotedSym = Symbol('_doublequoted');\nexport function box(xs: any, value: any, doubleQuoted?: boolean) {\n    if (!trackingLoc && !doubleQuoted) {\n        return value;\n    }\n    return track(xs, { [literal]: value, [doubleQuotedSym]: doubleQuoted });\n}\n\n\nfunction unwrapNoBox(e: any[]): any {\n    if (Array.isArray(e) && e.length === 1) {\n        e = unwrapNoBox(e[0]);\n    }\n    if (Array.isArray(e) && !e.length) {\n        return null;\n    }\n    return e;\n}\nexport function doubleQuoted(value: any) {\n    const uw = unwrapNoBox(value);\n    if (typeof value === 'object' && uw?.[doubleQuotedSym]) {\n        return {doubleQuoted: true};\n    }\n    return undefined;\n}\nexport function unbox(value: any): any {\n    if (typeof value === 'object') {\n        return value?.[literal] ?? value;\n    }\n    return value;\n}\n\n\nfunction seek(xs: any, start: boolean): NodeLocation | null {\n    if (!xs) {\n        return null;\n    }\n    if (Array.isArray(xs)) {\n        const diff = start ? 1 : -1;\n        for (let i = start ? 0 : xs.length - 1; i >= 0 && i < xs.length; i += diff) {\n            const v = seek(xs[i], start);\n            if (v) {\n                return v;\n            }\n        }\n        return null;\n    }\n    if (typeof xs !== 'object') {\n        return null;\n    }\n    return xs._location;\n}\n","import * as a from './syntax/ast';\nimport { nil, NotSupported, trimNullish } from './utils';\n\n\n\nexport interface IAstPartialMapper {\n    statement?: (val: a.Statement) => a.Statement | nil;\n    update?: (val: a.UpdateStatement) => a.Statement | nil\n    insert?: (val: a.InsertStatement) => a.Statement | nil\n    delete?: (val: a.DeleteStatement) => a.Statement | nil\n    comment?: (val: a.CommentStatement) => a.Statement | nil\n    do?: (val: a.DoStatement) => a.Statement | nil\n    createFunction?: (val: a.CreateFunctionStatement) => a.Statement | nil\n    dropFunction?: (val: a.DropFunctionStatement) => a.Statement | nil\n    raise?: (val: a.RaiseStatement) => a.Statement | nil\n    createSchema?: (val: a.CreateSchemaStatement) => a.Statement | nil\n    createEnum?(val: a.CreateEnumType): a.Statement | nil\n    createCompositeType?(val: a.CreateCompositeType): a.Statement | nil\n    drop?: (val: a.DropStatement) => a.Statement | nil\n    show?: (val: a.ShowStatement) => a.Statement | nil\n    createTable?: (val: a.CreateTableStatement) => a.Statement | nil\n    truncateTable?: (val: a.TruncateTableStatement) => a.Statement | nil\n    createExtension?: (val: a.CreateExtensionStatement) => a.Statement | nil\n    set?: (st: a.SetStatement) => a.SetStatement | nil\n    dataType?: (dataType: a.DataTypeDef) => a.DataTypeDef\n    prepare?: (st: a.PrepareStatement) => a.Statement | nil\n    deallocate?: (st: a.DeallocateStatement) => a.Statement | nil\n    parameter?: (st: a.ExprParameter) => a.Expr | nil\n    tableRef?: (st: a.QNameAliased) => a.QNameAliased | nil\n    transaction?: (val: a.CommitStatement | a.RollbackStatement | a.StartTransactionStatement) => a.Statement | nil\n    createIndex?: (val: a.CreateIndexStatement) => a.Statement | nil\n    alterTable?: (st: a.AlterTableStatement) => a.Statement | nil\n    alterIndex?: (st: a.AlterIndexStatement) => a.Statement | nil\n    tableAlteration?: (change: a.TableAlteration, table: a.QNameAliased) => a.TableAlteration | nil\n    dropColumn?: (change: a.TableAlterationDropColumn, table: a.QNameAliased) => a.TableAlteration | nil\n    dropConstraint?: (change: a.TableAlterationDropConstraint, table: a.QNameAliased) => a.TableAlteration | nil\n    renameConstraint?: (change: a.TableAlterationRenameConstraint, table: a.QNameAliased) => a.TableAlteration | nil\n    setTableOwner?: (change: a.TableAlterationOwner, table: a.QNameAliased) => a.TableAlteration | nil\n    renameColumn?: (change: a.TableAlterationRenameColumn, table: a.QNameAliased) => a.TableAlteration | nil\n    renameTable?: (change: a.TableAlterationRename, table: a.QNameAliased) => a.TableAlteration | nil\n    alterColumn?: (change: a.TableAlterationAlterColumn, inTable: a.QNameAliased) => a.TableAlteration | nil\n    setColumnType?: (alter: a.AlterColumnSetType, inTable: a.QName, inColumn: a.Name) => a.AlterColumn | nil\n    alterColumnSimple?: (alter: a.AlterColumnSimple, inTable: a.QName, inColumn: a.Name) => a.AlterColumn | nil\n    alterColumnAddGenerated?: (alter: a.AlterColumnAddGenerated, inTable: a.QName, inColumn: a.Name) => a.AlterColumn | nil\n    setColumnDefault?: (alter: a.AlterColumnSetDefault, inTable: a.QName, inColumn: a.Name) => a.AlterColumn | nil\n    addConstraint?: (change: a.TableAlterationAddConstraint, inTable: a.QName) => a.TableAlteration | nil\n    addColumn?: (change: a.TableAlterationAddColumn, inTable: a.QName) => a.TableAlteration | nil\n    createColumn?: (col: a.CreateColumnDef) => a.CreateColumnDef | nil\n    likeTable?: (col: a.CreateColumnsLikeTable) => a.CreateColumnDef | a.CreateColumnsLikeTable | nil\n    with?: (val: a.WithStatement) => a.SelectStatement | nil\n    withRecursive?: (val: a.WithRecursiveStatement) => a.SelectStatement | nil;\n    union?: (val: a.SelectFromUnion) => a.SelectStatement | nil\n    select?: (val: a.SelectStatement) => a.SelectStatement | nil\n    selection?: (val: a.SelectFromStatement) => a.SelectStatement | nil\n    createView?: (val: a.CreateViewStatement) => a.Statement | nil\n    createMaterializedView?: (val: a.CreateMaterializedViewStatement) => a.Statement | nil\n    refreshMaterializedView?: (val: a.RefreshMaterializedViewStatement) => a.Statement | nil\n    from?: (from: a.From) => a.From | nil\n    fromCall?: (from: a.FromCall) => a.From | nil\n    fromStatement?: (from: a.FromStatement) => a.From | nil\n    values?: (from: a.ValuesStatement) => a.SelectStatement | nil;\n    fromTable?: (from: a.FromTable) => a.From | nil\n    selectionColumn?: (val: a.SelectedColumn) => a.SelectedColumn | nil\n    expr?: (val: a.Expr) => a.Expr | nil\n    ternary?: (val: a.ExprTernary) => a.Expr | nil\n    arraySelect?: (val: a.ExprArrayFromSelect) => a.Expr | nil\n    arrayIndex?: (val: a.ExprArrayIndex) => a.Expr | nil\n    member?: (val: a.ExprMember) => a.Expr | nil\n    extract?: (st: a.ExprExtract) => a.Expr | nil\n    case?: (val: a.ExprCase) => a.Expr | nil\n    cast?: (val: a.ExprCast) => a.Expr | nil\n    call?: (val: a.ExprCall) => a.Expr | nil\n    callSubstring?: (val: a.ExprSubstring) => a.Expr | nil\n    callOverlay?: (val: a.ExprOverlay) => a.Expr | nil\n    array?: (val: a.ExprList) => a.Expr | nil\n    constant?: (value: a.ExprLiteral) => a.Expr | nil\n    default?: (value: a.ExprDefault) => a.Expr | nil;\n    ref?: (val: a.ExprRef) => a.Expr | nil\n    unary?: (val: a.ExprUnary) => a.Expr | nil\n    binary?: (val: a.ExprBinary) => a.Expr | nil\n    join?(join: a.JoinClause): a.JoinClause | nil\n    constraint?: (constraint: a.ColumnConstraint) => a.ColumnConstraint | nil\n    valueKeyword?(val: a.ExprValueKeyword): a.Expr | nil\n    tablespace?(val: a.TablespaceStatement): a.Statement | nil\n    setGlobal?(val: a.SetGlobalStatement): a.Statement | nil\n    setTimezone?(val: a.SetTimezone): a.Statement | nil\n    createSequence?(seq: a.CreateSequenceStatement): a.Statement | nil\n    alterSequence?(seq: a.AlterSequenceStatement): a.Statement | nil\n    begin?(begin: a.BeginStatement): a.Statement | nil\n}\n\nexport type IAstFullMapper = {\n    [key in keyof IAstPartialMapper]-?: IAstPartialMapper[key];\n};\n\nexport type IAstMapper = IAstFullMapper & {\n    /** Forces the next call to use the default implementation, not yours */\n    super(): IAstMapper;\n}\n\n\n/**\n * Builds an AST modifier based on the default implementation, merged with the one you provide.\n *\n * Example of a modifier that renames all reference to columns 'foo' to 'bar'\n * ```ts\n *  const mapper = astMapper(b => ({\n *       ref: a => assignChanged(a, {\n *           name: a.name === 'foo'\n *               ? 'bar'\n *               : a.name\n *       })\n *   }));\n *\n * const modified = mapper.statement(myStatementToModify);\n * ```\n */\nexport function astMapper(modifierBuilder: MapperBuilder): IAstMapper {\n    const instance = new AstDefaultMapper();\n    instance.wrapped = modifierBuilder(instance);\n    return instance;\n}\n\nexport type MapperBuilder = (defaultImplem: IAstMapper) => IAstPartialMapper;\n\n\n\ntype PartialNil<T> = {\n    [P in keyof T]?: T[P] | nil;\n};\n/**\n * An helper function that returns a copy of an object with modified properties\n * (similar to Object.assign()), but ONLY if thos properties have changed.\n * Will return the original object if not.\n */\nexport function assignChanged<T>(orig: T, assign: PartialNil<T>): T {\n    if (!orig) {\n        return orig;\n    }\n    let changed = false;\n    for (const k of Object.keys(assign)) {\n        if ((orig as any)[k] !== (assign as any)[k]) {\n            changed = true;\n            break;\n        }\n    }\n    if (!changed) {\n        return orig;\n    }\n    return trimNullish({\n        ...orig,\n        ...assign,\n    }, 0);\n}\n\n/**\n * An helper function that returns a map of an array, but:\n * - It will return the original array if it is null-ish\n * - It will remove all null-ish entries\n * - It will return the original array if nothing has changed\n */\nexport function arrayNilMap<T extends Object>(this: void, collection: T[] | nil, mapper: (v: T) => T | nil): T[] | nil {\n    if (!collection?.length) {\n        return collection;\n    }\n    let changed = false;\n    let ret: T[] = collection;\n    for (let i = 0; i < collection.length; i++) {\n        const orig = collection[i];\n        const val = mapper(orig);\n        if (!changed && (!val || val !== orig)) {\n            changed = true;\n            ret = collection.slice(0, i);\n        }\n        if (!val) {\n            continue;\n        }\n        if (changed) {\n            ret.push(val);\n        }\n    }\n    return ret;\n}\n\nfunction withAccepts(val: a.Statement | nil): val is a.WithStatementBinding {\n    switch (val?.type) {\n        case 'select':\n        case 'delete':\n        case 'insert':\n        case 'update':\n        case 'union':\n        case 'union all':\n        case 'with':\n            return true;\n        default:\n            return false;\n    }\n}\n\n/**\n * Can be used to modify an AST.\n *\n * You will have to override functions that you're interested in to use this class.\n *\n * Example: Will remove all references in\n */\nexport class AstDefaultMapper implements IAstMapper {\n\n    wrapped?: IAstPartialMapper;\n    skipNext?: boolean;\n\n    super() {\n        return new SkipModifier(this);\n    }\n\n    statement(val: a.Statement): a.Statement | nil {\n        switch (val.type) {\n            case 'alter table':\n                return this.alterTable(val);\n            case 'alter index':\n                return this.alterIndex(val);\n            case 'commit':\n            case 'start transaction':\n            case 'rollback':\n                return this.transaction(val);\n            case 'create index':\n                return this.createIndex(val);\n            case 'create table':\n                return this.createTable(val);\n            case 'truncate table':\n                return this.truncateTable(val);\n            case 'delete':\n                return this.delete(val);\n            case 'insert':\n                return this.insert(val);\n            case 'with':\n                return this.with(val);\n            case 'with recursive':\n                return this.withRecursive(val);\n            case 'select':\n                return this.selection(val);\n            case 'update':\n                return this.update(val);\n            case 'create extension':\n                return this.createExtension(val);\n            case 'tablespace':\n                return this.tablespace(val);\n            case 'set':\n                return this.setGlobal(val);\n            case 'set timezone':\n                return this.setTimezone(val);\n            case 'create sequence':\n                return this.createSequence(val);\n            case 'alter sequence':\n                return this.alterSequence(val);\n            case 'begin':\n                return this.begin(val);\n            case 'drop table':\n            case 'drop index':\n            case 'drop sequence':\n            case 'drop type':\n            case 'drop trigger':\n                return this.drop(val);\n            case 'create enum':\n                return this.createEnum(val);\n            case 'create composite type':\n                return this.createCompositeType(val);\n            case 'union':\n            case 'union all':\n                return this.union(val);\n            case 'show':\n                return this.show(val);\n            case 'prepare':\n                return this.prepare(val);\n            case 'deallocate':\n                return this.deallocate(val);\n            case 'create view':\n                return this.createView(val);\n            case 'create materialized view':\n                return this.createMaterializedView(val);\n            case 'refresh materialized view':\n                return this.refreshMaterializedView(val);\n            case 'create schema':\n                return this.createSchema(val);\n            case 'raise':\n                return this.raise(val);\n            case 'comment':\n                return this.comment(val);\n            case 'do':\n                return this.do(val);\n            case 'create function':\n                return this.createFunction(val);\n            case 'drop function':\n                return this.dropFunction(val);\n            case 'values':\n                return this.values(val);\n            default:\n                throw NotSupported.never(val);\n        }\n    }\n\n    comment(val: a.CommentStatement): a.Statement | nil {\n        // not really supported :/\n        return val;\n    }\n\n    createView(val: a.CreateViewStatement): a.Statement | nil {\n        const query = this.select(val.query);\n        if (!query) {\n            return null;\n        }\n        const ref = this.tableRef(val.name);\n        if (!ref) {\n            return null;\n        }\n        return assignChanged(val, {\n            query,\n            name: ref,\n        });\n    }\n\n    createMaterializedView(val: a.CreateMaterializedViewStatement): a.Statement | nil {\n        const query = this.select(val.query);\n        if (!query) {\n            return null;\n        }\n        const ref = this.tableRef(val.name);\n        if (!ref) {\n            return null;\n        }\n        return assignChanged(val, {\n            query,\n            name: ref,\n        });\n    }\n\n    refreshMaterializedView(val: a.RefreshMaterializedViewStatement): a.Statement | nil {\n        return val;\n    }\n\n\n    do(val: a.DoStatement): a.Statement | nil {\n        return val;\n    }\n\n    createFunction(val: a.CreateFunctionStatement): a.Statement | nil {\n        // process arguments\n        const args = arrayNilMap(val.arguments, a => {\n            const type = this.dataType(a.type);\n            return assignChanged(a, { type });\n        });\n\n        // process return type\n        let returns: typeof val.returns;\n        if (val.returns) {\n            switch (val.returns.kind) {\n                case 'table':\n                    returns = assignChanged(val.returns, {\n                        columns: arrayNilMap(val.returns.columns, v => {\n                            const type = this.dataType(v.type);\n                            return type && assignChanged(v, { type })\n                        })\n                    });\n                    break;\n                case undefined:\n                case null:\n                case 'array':\n                    returns = this.dataType(val.returns);\n                    break;\n                default:\n                    throw NotSupported.never(val.returns);\n            }\n        }\n        return assignChanged(val, {\n            returns,\n            arguments: args,\n        });\n    }\n\n    dropFunction(val: a.DropFunctionStatement): a.Statement | nil {\n        const args = arrayNilMap(val.arguments, a => {\n            const type = this.dataType(a.type);\n            return assignChanged(a, { type });\n        });\n\n        return assignChanged(val, {\n            arguments: args,\n        });\n    }\n\n    show(val: a.ShowStatement): a.Statement | nil {\n        return val;\n    }\n\n    createEnum(val: a.CreateEnumType): a.Statement | nil {\n        return val;\n    }\n\n    createCompositeType(val: a.CreateCompositeType): a.Statement | nil {\n        const attributes = arrayNilMap(val.attributes, a => assignChanged(a, {\n            dataType: this.dataType(a.dataType),\n        }));\n        return assignChanged(val, { attributes });\n    }\n\n\n    drop(val: a.DropStatement): a.Statement | nil {\n        return val;\n    }\n\n    alterSequence(seq: a.AlterSequenceStatement): a.Statement | nil {\n        if (seq.change.type === 'set options') {\n            if (seq.change.as) {\n                this.dataType(seq.change.as);\n            }\n        }\n        return seq;\n    }\n\n    begin(begin: a.BeginStatement): a.Statement | nil {\n        return begin;\n    }\n\n    createSequence(seq: a.CreateSequenceStatement): a.Statement | nil {\n        if (seq.options.as) {\n            this.dataType(seq.options.as);\n        }\n        return seq;\n    }\n\n    tablespace(val: a.TablespaceStatement): a.Statement | nil {\n        return val;\n    }\n\n    setGlobal(val: a.SetGlobalStatement): a.Statement | nil {\n        return val;\n    }\n\n    setTimezone(val: a.SetTimezone): a.Statement | nil {\n        return val;\n    }\n\n\n    update(val: a.UpdateStatement): a.Statement | nil {\n        if (!val) {\n            return val;\n        }\n        const table = this.tableRef(val.table);\n        if (!table) {\n            return null; // nothing to update\n        }\n\n        const from = val.from && this.from(val.from);\n\n        const where = val.where && this.expr(val.where);\n\n        const sets = arrayNilMap(val.sets, x => this.set(x));\n        if (!sets?.length) {\n            return null; // nothing to update\n        }\n        const returning = arrayNilMap(val.returning, c => this.selectionColumn(c));\n\n        return assignChanged(val, {\n            table,\n            where,\n            sets,\n            from,\n            returning,\n        });\n    }\n\n\n    insert(val: a.InsertStatement): a.Statement | nil {\n        const into = this.tableRef(val.into);\n        if (!into) {\n            return null; // nowhere to insert into\n        }\n\n        const select = val.insert && this.select(val.insert);\n\n        if (!select) {\n            // nothing to insert\n            return null;\n        }\n\n        const returning = arrayNilMap(val.returning, c => this.selectionColumn(c));\n        let on = val.onConflict?.on;\n        switch (on?.type) {\n            case 'on constraint':\n                // nothing to do\n                break;\n            case 'on expr':\n                on = assignChanged(on, {\n                    exprs: arrayNilMap(on.exprs, e => this.expr(e)),\n                });\n                break;\n            case null:\n            case undefined:\n                break;\n            default:\n                throw NotSupported.never(on);\n        }\n        let ocdo = val.onConflict?.do;\n        if (ocdo && ocdo !== 'do nothing') {\n            const sets = arrayNilMap(ocdo.sets, x => this.set(x));\n            if (!sets?.length) {\n                ocdo = 'do nothing';\n            } else if (ocdo.sets !== sets) {\n                ocdo = { sets };\n            }\n        }\n\n        return assignChanged(val, {\n            into,\n            insert: select,\n            returning,\n            onConflict: !ocdo ? val.onConflict : assignChanged(val.onConflict, {\n                do: ocdo,\n                on,\n            }),\n        });\n    }\n\n\n    raise(val: a.RaiseStatement): a.Statement | nil {\n        return assignChanged(val, {\n            formatExprs: val.formatExprs && arrayNilMap(val.formatExprs, x => this.expr(x)),\n            using: val.using && arrayNilMap(val.using, u => {\n                return assignChanged(u, {\n                    value: this.expr(u.value),\n                })\n            }),\n        });\n    }\n\n\n    delete(val: a.DeleteStatement): a.Statement | nil {\n        const from = this.tableRef(val.from);\n        if (!from) {\n            return null; // nothing to delete\n        }\n        const where = val.where && this.expr(val.where);\n        const returning = arrayNilMap(val.returning, c => this.selectionColumn(c));\n\n        return assignChanged(val, {\n            where,\n            returning,\n            from,\n        });\n    }\n\n    createSchema(val: a.CreateSchemaStatement): a.Statement | nil {\n        return val;\n    }\n\n    createTable(val: a.CreateTableStatement): a.Statement | nil {\n        const columns = arrayNilMap(val.columns, col => {\n            switch (col.kind) {\n                case 'column':\n                    return this.createColumn(col);\n                case 'like table':\n                    return this.likeTable(col);\n                default:\n                    throw NotSupported.never(col);\n            }\n        })\n        if (!columns?.length) {\n            return null; // no column to create\n        }\n        return assignChanged(val, {\n            columns,\n        });\n    }\n\n    likeTable(col: a.CreateColumnsLikeTable): a.CreateColumnDef | a.CreateColumnsLikeTable | nil {\n        const like = this.tableRef(col.like);\n        if (!like) {\n            return null;\n        }\n        return assignChanged(col, { like });\n    }\n\n\n    truncateTable(val: a.TruncateTableStatement): a.Statement | nil {\n        return val;\n    }\n\n\n    constraint(c: a.ColumnConstraint): a.ColumnConstraint | nil {\n        switch (c.type) {\n            case 'not null':\n            case 'null':\n            case 'primary key':\n            case 'unique':\n            case 'add generated':\n                return c;\n            case 'default': {\n                const def = this.expr(c.default);\n                if (!def) {\n                    return null;\n                }\n                return assignChanged(c, {\n                    default: def,\n                });\n            }\n            case 'check': {\n                const def = this.expr(c.expr);\n                if (!def) {\n                    return null;\n                }\n                return assignChanged(c, {\n                    expr: def,\n                });\n            }\n            case 'reference': {\n                const foreignTable = this.tableRef(c.foreignTable);\n                if (!foreignTable) {\n                    return null;\n                }\n                return assignChanged(c, {\n                    foreignTable,\n                });\n            }\n            default:\n                throw NotSupported.never(c);\n        }\n    }\n\n    set(st: a.SetStatement): a.SetStatement | nil {\n        const value = this.expr(st.value);\n        if (!value) {\n            return null;\n        }\n        return assignChanged(st, {\n            value,\n        });\n    }\n\n\n    // =========================================\n    // ================ STUFF ==================\n    // =========================================\n\n    /** Called when a data type definition is encountered */\n    dataType(dataType: a.DataTypeDef): a.DataTypeDef {\n        return dataType;\n    }\n\n    /** Called when an alias of a table is created */\n    tableRef(st: a.QNameAliased): a.QNameAliased | nil {\n        return st;\n    }\n\n    transaction(val: a.CommitStatement | a.RollbackStatement | a.StartTransactionStatement): a.Statement | nil {\n        return val;\n    }\n\n    createExtension(val: a.CreateExtensionStatement): a.Statement | nil {\n        return val;\n    }\n\n    createIndex(val: a.CreateIndexStatement): a.Statement | nil {\n        const expressions = arrayNilMap(val.expressions, e => {\n            const expression = this.expr(e.expression);\n            if (expression === e.expression) {\n                return e;\n            }\n            if (!expression) {\n                return null; // no more index expression\n            }\n            return {\n                ...e,\n                expression,\n            };\n        });\n        if (!expressions?.length) {\n            return null; // no columns to create index on\n        }\n        return assignChanged(val, {\n            expressions,\n        });\n    }\n\n    prepare(st: a.PrepareStatement): a.Statement | nil {\n        const statement = this.statement(st.statement);\n        if (!statement) {\n            return null;\n        }\n        return assignChanged(st, {\n            args: arrayNilMap(st.args, a => this.dataType(a)),\n            statement,\n        })\n    }\n\n    deallocate(st: a.DeallocateStatement): a.Statement | nil {\n        return st;\n    }\n\n    // =========================================\n    // ============== ALTER INDEX ==============\n    // =========================================\n\n    alterIndex(st: a.AlterIndexStatement): a.Statement | nil {\n        // not much as of today...might improve this in the future\n        return st;\n    }\n\n    // =========================================\n    // ============== ALTER TABLE ==============\n    // =========================================\n\n    alterTable(st: a.AlterTableStatement): a.Statement | nil {\n        const table = this.tableRef(st.table);\n        if (!table) {\n            return null; // no table\n        }\n        let changes: a.TableAlteration[] = [];\n        let hasChanged: boolean = false;\n        for (let i = 0; i < (st.changes?.length || 0); i++) {\n            const currentChange: a.TableAlteration = st.changes[i];\n            const change: a.TableAlteration | nil = this.tableAlteration(currentChange, st.table);\n\n            hasChanged = hasChanged || (change != currentChange);\n\n            if (!!change) {\n                changes.push(change);\n            }\n        }\n\n        if (!changes.length) {\n            return null; // no change left\n        }\n\n        if (!hasChanged) {\n            return st;\n        }\n\n        return assignChanged(st, {\n            table,\n            changes,\n        });\n\n    }\n\n    tableAlteration(change: a.TableAlteration, table: a.QNameAliased): a.TableAlteration | nil {\n        switch (change.type) {\n            case 'add column':\n                return this.addColumn(change, table);\n            case 'add constraint':\n                return this.addConstraint(change, table);\n            case 'alter column':\n                return this.alterColumn(change, table);\n            case 'rename':\n                return this.renameTable(change, table);\n            case 'rename column':\n                return this.renameColumn(change, table);\n            case 'rename constraint':\n                return this.renameConstraint(change, table);\n            case 'drop column':\n                return this.dropColumn(change, table);\n            case 'drop constraint':\n                return this.dropConstraint(change, table);\n            case 'owner':\n                return this.setTableOwner(change, table);\n            default:\n                throw NotSupported.never(change);\n        }\n    }\n\n    dropColumn(change: a.TableAlterationDropColumn, table: a.QNameAliased): a.TableAlteration | nil {\n        return change;\n    }\n\n    dropConstraint(change: a.TableAlterationDropConstraint, table: a.QNameAliased): a.TableAlteration | nil {\n        return change;\n    }\n\n    setTableOwner(change: a.TableAlterationOwner, table: a.QNameAliased): a.TableAlteration | nil {\n        return change;\n    }\n\n    renameConstraint(change: a.TableAlterationRenameConstraint, table: a.QNameAliased): a.TableAlteration | nil {\n        return change;\n    }\n\n    renameColumn(change: a.TableAlterationRenameColumn, table: a.QNameAliased): a.TableAlteration | nil {\n        return change;\n    }\n\n\n    renameTable(change: a.TableAlterationRename, table: a.QNameAliased): a.TableAlteration | nil {\n        return change;\n    }\n\n    alterColumn(change: a.TableAlterationAlterColumn, inTable: a.QNameAliased): a.TableAlteration | nil {\n        let alter: a.AlterColumn | nil;\n        switch (change.alter.type) {\n            case 'set default':\n                alter = this.setColumnDefault(change.alter, inTable, change.column);\n                break;\n            case 'set type':\n                alter = this.setColumnType(change.alter, inTable, change.column);\n                break;\n            case 'drop default':\n            case 'set not null':\n            case 'drop not null':\n                alter = this.alterColumnSimple(change.alter, inTable, change.column);\n                break;\n            case 'add generated':\n                alter = this.alterColumnAddGenerated(change.alter, inTable, change.column);\n                break;\n            default:\n                throw NotSupported.never(change.alter);\n        }\n        if (!alter) {\n            return null; // no more alter\n        }\n        return assignChanged(change, {\n            alter,\n        });\n    }\n\n    setColumnType(alter: a.AlterColumnSetType, inTable: a.QName, inColumn: a.Name): a.AlterColumn | nil {\n        const dataType = this.dataType(alter.dataType);\n        return assignChanged(alter, {\n            dataType,\n        });\n    }\n\n    alterColumnAddGenerated(alter: a.AlterColumnAddGenerated, inTable: a.QName, inColumn: a.Name): a.AlterColumn | nil {\n        return alter;\n    }\n\n\n    alterColumnSimple(alter: a.AlterColumnSimple, inTable: a.QName, inColumn: a.Name): a.AlterColumn | nil {\n        return alter;\n    }\n\n    setColumnDefault(alter: a.AlterColumnSetDefault, inTable: a.QName, inColumn: a.Name): a.AlterColumn | nil {\n        const def = this.expr(alter.default);\n        if (!def) {\n            return null; // no more default to set\n        }\n        return assignChanged(alter, {\n            default: def,\n        });\n    }\n\n    addConstraint(change: a.TableAlterationAddConstraint, inTable: a.QName): a.TableAlteration | nil {\n        return change;\n    }\n\n    addColumn(change: a.TableAlterationAddColumn, inTable: a.QName): a.TableAlteration | nil {\n        const column = this.createColumn(change.column);\n        if (!column) {\n            return null; // no more column to add\n        }\n\n        return assignChanged(change, {\n            column,\n        });\n    }\n\n    createColumn(col: a.CreateColumnDef): a.CreateColumnDef | nil {\n        // to be overriden\n        const dataType = this.dataType(col.dataType);\n        if (!dataType) {\n            return null; // no data type => remove column\n        }\n        const constraints = arrayNilMap(col.constraints, m => this.constraint(m))\n            ?? undefined;\n        return assignChanged(col, {\n            dataType,\n            constraints,\n        });\n    }\n\n    // =========================================\n    // ============== SELECTIONS ==============\n    // =========================================\n\n    select(val: a.SelectStatement): a.SelectStatement | nil {\n        switch (val.type) {\n            case 'select':\n                return this.selection(val);\n            case 'union':\n            case 'union all':\n                return this.union(val);\n            case 'with':\n                return this.with(val);\n            case 'values':\n                return this.values(val);\n            case 'with recursive':\n                return this.withRecursive(val);\n            default:\n                throw NotSupported.never(val);\n        }\n    }\n\n    selection(val: a.SelectFromStatement): a.SelectStatement | nil {\n        const from = arrayNilMap(val.from, c => this.from(c));\n        const columns = arrayNilMap(val.columns, c => this.selectionColumn(c));\n        const where = val.where && this.expr(val.where);\n        const groupBy = arrayNilMap(val.groupBy, c => this.expr(c));\n        const having = val.having && this.expr(val.having);\n        const orderBy = this.orderBy(val.orderBy);\n        const limit = assignChanged(val.limit, {\n            limit: this.expr(val.limit?.limit),\n            offset: this.expr(val.limit?.offset),\n        });\n\n        return assignChanged(val, {\n            from,\n            columns,\n            where,\n            groupBy,\n            having,\n            orderBy,\n            limit,\n        });\n    }\n\n    orderBy(orderBy: a.OrderByStatement[] | null | undefined) {\n        return arrayNilMap(orderBy, c => {\n            const by = this.expr(c.by);\n            if (!by) {\n                return null;\n            }\n            if (by === c.by) {\n                return c;\n            }\n            return {\n                ...c,\n                by,\n            };\n        });\n    }\n\n    union(val: a.SelectFromUnion): a.SelectStatement | nil {\n        const left = this.select(val.left);\n        const right = this.select(val.right);\n        if (!left || !right) {\n            return left ?? right;\n        }\n        return assignChanged(val, {\n            left,\n            right\n        })\n    }\n\n    with(val: a.WithStatement): a.SelectStatement | nil {\n        const bind = arrayNilMap(val.bind, s => {\n            const statement = this.statement(s.statement);\n            return withAccepts(statement)\n                ? assignChanged(s, { statement })\n                : null;\n        });\n\n        // no bindngs\n        if (!bind) {\n            return null;\n        }\n        const _in = this.statement(val.in);\n        if (!withAccepts(_in)) {\n            return null;\n        }\n        return assignChanged(val, {\n            bind,\n            in: _in,\n        })\n    }\n\n    withRecursive(val: a.WithRecursiveStatement): a.SelectStatement | nil {\n        const statement = this.union(val.bind);\n        if (!statement) {\n            return null;\n        }\n        // 'with recursive' only accepts unions\n        if (statement.type !== 'union' && statement.type !== 'union all') {\n            return null;\n        }\n        const _in = this.statement(val.in);\n        if (!withAccepts(_in)) {\n            return null;\n        }\n        return assignChanged(val, {\n            bind: statement,\n            in: _in,\n        });\n    }\n\n\n    from(from: a.From): a.From | nil {\n        switch (from.type) {\n            case 'table':\n                return this.fromTable(from);\n            case 'statement':\n                return this.fromStatement(from);\n            case 'call':\n                return this.fromCall(from);\n            default:\n                throw NotSupported.never(from);\n        }\n    }\n\n    fromCall(from: a.FromCall): a.From | nil {\n        const call = this.call(from);\n        if (!call || call.type !== 'call') {\n            return null;\n        }\n        return assignChanged(from, call);\n    }\n\n\n    fromStatement(from: a.FromStatement): a.From | nil {\n        const statement = this.select(from.statement);\n        if (!statement) {\n            return null; // nothing to select from\n        }\n        const join = from.join && this.join(from.join);\n        return assignChanged(from, {\n            statement,\n            join,\n        })\n    }\n\n    values(from: a.ValuesStatement): a.SelectStatement | nil {\n        const values = arrayNilMap(from.values, x => arrayNilMap(x, y => this.expr(y)));\n        if (!values?.length) {\n            return null; // nothing to select from\n        }\n        return assignChanged(from, {\n            values,\n        });\n    }\n\n    join(join: a.JoinClause): a.JoinClause | nil {\n        const on = join.on && this.expr(join.on);\n        if (!on && !join.using) {\n            return join;\n        }\n        return assignChanged(join, {\n            on,\n        });\n    }\n\n    fromTable(from: a.FromTable): a.From | nil {\n        const nfrom = this.tableRef(from.name);\n        if (!nfrom) {\n            return null; // nothing to select from\n        }\n        const join = from.join && this.join(from.join);\n        return assignChanged(from, {\n            name: nfrom,\n            join,\n        })\n    }\n\n\n    selectionColumn(val: a.SelectedColumn): a.SelectedColumn | nil {\n        const expr = this.expr(val.expr);\n        if (!expr) {\n            return null; // not selected anymore\n        }\n        return assignChanged(val, {\n            expr,\n        });\n    }\n\n    // =========================================\n    // ============== EXPRESSIONS ==============\n    // =========================================\n\n    expr(val: a.Expr | nil): a.Expr | nil {\n        if (!val) {\n            return val;\n        }\n        switch (val.type) {\n            case 'binary':\n                return this.binary(val);\n            case 'unary':\n                return this.unary(val);\n            case 'ref':\n                return this.ref(val);\n            case 'string':\n            case 'numeric':\n            case 'integer':\n            case 'boolean':\n            case 'constant':\n            case 'null':\n                return this.constant(val);\n            case 'list':\n            case 'array':\n                return this.array(val);\n            case 'array select':\n                return this.arraySelect(val);\n            case 'call':\n                return this.call(val);\n            case 'cast':\n                return this.cast(val)\n            case 'case':\n                return this.case(val);\n            case 'member':\n                return this.member(val);\n            case 'arrayIndex':\n                return this.arrayIndex(val);\n            case 'ternary':\n                return this.ternary(val);\n            case 'select':\n            case 'union':\n            case 'union all':\n            case 'with':\n            case 'with recursive':\n                return this.select(val);\n            case 'keyword':\n                return this.valueKeyword(val);\n            case 'parameter':\n                return this.parameter(val);\n            case 'extract':\n                return this.extract(val);\n            case 'overlay':\n                return this.callOverlay(val);\n            case 'substring':\n                return this.callSubstring(val);\n            case 'values':\n                return this.values(val);\n            case 'default':\n                return this.default(val);\n            default:\n                throw NotSupported.never(val);\n        }\n    }\n\n\n    arraySelect(val: a.ExprArrayFromSelect) {\n        const select = this.select(val.select);\n        if (!select) {\n            return null;\n        }\n        return assignChanged(val, { select });\n    }\n\n    extract(st: a.ExprExtract): a.Expr | nil {\n        const from = this.expr(st.from);\n        if (!from) {\n            return null;\n        }\n        return assignChanged(st, { from })\n    }\n\n    valueKeyword(val: a.ExprValueKeyword): a.Expr | nil {\n        return val;\n    }\n\n    ternary(val: a.ExprTernary): a.Expr | nil {\n        const value = this.expr(val.value);\n        const lo = this.expr(val.lo);\n        const hi = this.expr(val.hi);\n        if (!value || !lo || !hi) {\n            return null; // missing a branch\n        }\n        return assignChanged(val, {\n            value,\n            lo,\n            hi,\n        });\n    }\n\n    parameter(st: a.ExprParameter): a.Expr | nil {\n        return st;\n    }\n\n    arrayIndex(val: a.ExprArrayIndex): a.Expr | nil {\n        const array = this.expr(val.array);\n        const index = this.expr(val.index);\n        if (!array || !index) {\n            return null;\n        }\n        return assignChanged(val, {\n            array,\n            index,\n        });\n    }\n\n    member(val: a.ExprMember): a.Expr | nil {\n        const operand = this.expr(val.operand);\n        if (!operand) {\n            return null;\n        }\n        return assignChanged(val, {\n            operand,\n        });\n    }\n\n    case(val: a.ExprCase): a.Expr | nil {\n        const value = val.value && this.expr(val.value);\n        const whens = arrayNilMap(val.whens, w => {\n            const when = this.expr(w.when);\n            const value = this.expr(w.value);\n            if (!when || !value) {\n                return null;\n            }\n            return assignChanged(w, {\n                value,\n                when,\n            });\n        });\n        if (!whens?.length) {\n            return null; // no case\n        }\n        const els = val.else && this.expr(val.else);\n\n        return assignChanged(val, {\n            value,\n            whens,\n            else: els,\n        });\n    }\n\n    cast(val: a.ExprCast): a.Expr | nil {\n        const operand = this.expr(val.operand);\n        if (!operand) {\n            return null;\n        }\n        return assignChanged(val, {\n            operand,\n        });\n    }\n\n    call(val: a.ExprCall): a.Expr | nil {\n        const args = arrayNilMap(val.args, a => this.expr(a));\n        if (!args) {\n            return null;\n        }\n        const orderBy = this.orderBy(val.orderBy);\n        const filter = this.expr(val.filter);\n        return assignChanged(val, {\n            args,\n            orderBy,\n            filter,\n        });\n    }\n\n    callSubstring(val: a.ExprSubstring): a.Expr | nil {\n        return assignChanged(val, {\n            value: this.expr(val.value),\n            from: this.expr(val.from),\n            for: this.expr(val.for),\n        })\n    }\n    callOverlay(val: a.ExprOverlay): a.Expr | nil {\n        return assignChanged(val, {\n            value: this.expr(val.value),\n            placing: this.expr(val.placing),\n            from: this.expr(val.from),\n            for: this.expr(val.for),\n        })\n    }\n\n    array(val: a.ExprList): a.Expr | nil {\n        const expressions = arrayNilMap(val.expressions, a => this.expr(a));\n        if (!expressions) {\n            return null;\n        }\n        return assignChanged(val, {\n            expressions,\n        });\n    }\n\n    constant(value: a.ExprLiteral): a.Expr | nil {\n        return value;\n    }\n\n    default(value: a.ExprDefault): a.Expr | nil {\n        return value;\n    }\n\n    /** Called when a reference is used */\n    ref(val: a.ExprRef): a.Expr | nil {\n        return val;\n    }\n\n    unary(val: a.ExprUnary): a.Expr | nil {\n        const operand = this.expr(val.operand);\n        if (!operand) {\n            return null;\n        }\n        return assignChanged(val, {\n            operand,\n        });\n    }\n\n    binary(val: a.ExprBinary): a.Expr | nil {\n        const left = this.expr(val.left);\n        const right = this.expr(val.right);\n        if (!left || !right) {\n            return null;\n        }\n        return assignChanged(val, {\n            left,\n            right,\n        });\n    }\n}\n\n// ====== auto implement the replace mechanism\nconst proto = AstDefaultMapper.prototype as any;\nfor (const k of Object.getOwnPropertyNames(proto)) {\n    const orig = proto[k] as Function;\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    Object.defineProperty(proto, k, {\n        configurable: false,\n        get() {\n            return function (this: AstDefaultMapper, ...args: []) {\n                if (this.skipNext) {\n                    this.skipNext = false;\n                    return orig.apply(this, args);\n                }\n                const impl = (this.wrapped as any)?.[k];\n                if (!impl) {\n                    return orig.apply(this, args);\n                }\n                return impl.apply(this.wrapped, args);\n            }\n        }\n    });\n}\n\n\n// ====== auto implement the skip mechanism\nclass SkipModifier extends AstDefaultMapper {\n    constructor(readonly parent: AstDefaultMapper) {\n        super();\n    }\n}\n\nfor (const k of Object.getOwnPropertyNames(proto)) {\n    const orig = proto[k] as Function;\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    Object.defineProperty(SkipModifier.prototype, k, {\n        configurable: false,\n        get() {\n            return function (this: SkipModifier, ...args: []) {\n                this.parent.skipNext = true;\n                return orig.apply(this.parent, args);\n            }\n        }\n    });\n}\n","// https://www.postgresql.org/docs/current/sql-keywords-appendix.html\n// $('table.table').children('tbody').children().toArray().filter(x => { const txt = $($(x).children()[1]).text(); return txt.includes('reserved') && !txt.includes('non-reserved')}).map(x => $($(x).children()[0]).text())\nexport const sqlKeywords = [\n    \"ALL\", \"ANALYSE\", \"ANALYZE\", \"AND\", \"ANY\", \"ARRAY\", \"AS\", \"ASC\", \"ASYMMETRIC\", \"AUTHORIZATION\", \"BINARY\", \"BOTH\", \"CASE\", \"CAST\", \"CHECK\", \"COLLATE\", \"COLLATION\", \"CONCURRENTLY\", \"CONSTRAINT\", \"CREATE\", \"CROSS\", \"CURRENT_CATALOG\", \"CURRENT_DATE\", \"CURRENT_ROLE\", \"CURRENT_SCHEMA\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"DEFAULT\", \"DEFERRABLE\", \"DESC\", \"DISTINCT\", \"DO\", \"ELSE\", \"END\", \"EXCEPT\", \"FALSE\", \"FETCH\", \"FOR\", \"FOREIGN\", \"FREEZE\", \"FROM\", \"FULL\", \"GRANT\", \"GROUP\", \"HAVING\", \"ILIKE\", \"IN\", \"INITIALLY\", \"INNER\", \"INTERSECT\", \"INTO\", \"IS\", \"ISNULL\", \"JOIN\", \"LATERAL\", \"LEADING\", \"LEFT\", \"LIKE\", \"LIMIT\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"NATURAL\", \"NOT\", \"NOTNULL\", \"NULL\", \"OFFSET\", \"ON\", \"ONLY\", \"OR\", \"ORDER\", \"OUTER\", \"OVERLAPS\", \"PLACING\", \"PRIMARY\", \"REFERENCES\", \"RETURNING\", \"RIGHT\", \"SELECT\", \"SESSION_USER\", \"SIMILAR\", \"SOME\", \"SYMMETRIC\", \"TABLE\", \"TABLESAMPLE\", \"THEN\", \"TO\", \"TRAILING\", \"TRUE\", \"UNION\", \"UNIQUE\", \"USER\", \"USING\", \"VARIADIC\", \"VERBOSE\", \"WHEN\", \"WHERE\", \"WINDOW\", \"WITH\"\n\n    // added manually\n    , \"PRECISION\"\n];","import { Interval } from '../syntax/ast';\nimport { nil } from '../utils';\n\nconst types: [keyof Interval, number][] = [\n    ['years', 12],\n    ['months', 30],\n    ['days', 24],\n    ['hours', 60],\n    ['minutes', 60],\n    ['seconds', 1000],\n    ['milliseconds', 0],\n]\n\ntype E = [keyof Interval, number];\ntype K = E | K[];\nfunction* unwrap(k: K): IterableIterator<E> {\n    if (typeof k[1] === 'number') {\n        yield k as E;\n    } else {\n        for (const v of k as K[]) {\n            yield* unwrap(v);\n        }\n    }\n}\n\nexport function buildInterval(orig: string, vals: 'invalid' | K): Interval {\n    const ret: Interval = {};\n    if (vals === 'invalid') {\n        throw new Error(`invalid input syntax for type interval: \"${orig}\"`)\n    }\n    for (const [k, v] of unwrap(vals)) {\n        ret[k] = (ret[k] ?? 0) + v;\n    }\n    return ret;\n}\n\n\n/** Returns a normalized copy of the given interval */\nexport function normalizeInterval(value: Interval): Interval {\n    const ret = { ...value };\n\n    // trim non-integers\n    for (let i = 0; i < types.length; i++) {\n        const [k, mul] = types[i];\n        const v = ret[k] ?? 0;\n        const int = v >= 0\n            ? Math.floor(v)\n            : Math.ceil(v);\n        if (!v || int === v) {\n            continue;\n        }\n        const nk = types[i + 1]?.[0];\n        if (nk) {\n            ret[nk] = (ret[nk] ?? 0) + mul * (v - int);\n        }\n        ret[k] = int;\n    }\n\n    if (ret.months || ret.years) {\n        const m = (ret.months ?? 0) + (ret.years ?? 0) * 12;\n        ret.months = m % 12;\n        ret.years = (m - ret.months) / 12;\n    }\n\n    // normalize time\n    let t = (ret.hours ?? 0) * 3600\n        + (ret.minutes ?? 0) * 60\n        + (ret.seconds ?? 0)\n        + (ret.milliseconds ?? 0) / 1000;\n    let sign = 1;\n    if (t < 0) {\n        sign = -1;\n        t = -t;\n    }\n\n    if (t >= 3600) {\n        ret.hours = sign * Math.floor(t / 3600);\n        t -= sign * ret.hours * 3600;\n    } else {\n        delete ret.hours;\n    }\n\n    if (t >= 60) {\n        ret.minutes = sign * Math.floor(t / 60);\n        t -= sign * ret.minutes * 60;\n    } else {\n        delete ret.minutes;\n    }\n\n    if (t > 0) {\n        ret.seconds = sign * Math.floor(t);\n        t -= sign * ret.seconds;\n    } else {\n        delete ret.seconds;\n    }\n\n    if (t > 0) {\n        ret.milliseconds = sign * Math.round(t * 1000);\n    } else {\n        delete ret.milliseconds;\n    }\n\n\n    // trim zeros.\n    for (const [k] of types) {\n        if (!ret[k]) {\n            delete ret[k];\n        }\n    }\n\n    return ret;\n}\n\n/** Interval value to postgres string representation  */\nexport function intervalToString(value: Interval): String {\n    value = normalizeInterval(value);\n    const ret: string[] = [];\n    if (value.years) {\n        ret.push(value.years === 1 ? '1 year' : value.years + ' years');\n    }\n    if (value.months) {\n        ret.push(value.months === 1 ? '1 month' : value.months + ' months');\n    }\n    if (value.days) {\n        ret.push(value.days === 1 ? '1 day' : value.days + ' days');\n    }\n    if (value.hours || value.minutes || value.seconds || value.milliseconds) {\n\n        let time = `${num(value.hours ?? 0)}:${num(value.minutes ?? 0)}:${num(value.seconds ?? 0)}`\n        if (value.milliseconds) {\n            time = time + (value.milliseconds / 1000).toString().substr(1)\n\n        }\n        if (neg(value.hours) || neg(value.minutes) || neg(value.seconds) || neg(value.milliseconds)) {\n            time = '-' + time;\n        }\n        ret.push(time);\n    }\n    return ret.join(' ');\n}\n\nfunction num(v: number) {\n    v = Math.abs(v);\n    return v < 10 ? '0' + v : v.toString();\n}\nfunction neg(v: number | nil) {\n    return v && v < 0;\n}","import * as a from './syntax/ast';\nimport { AstDefaultMapper, IAstPartialMapper, astMapper, IAstMapper } from './ast-mapper';\nimport { ReplaceReturnType } from './utils';\n\n\n\nexport type IAstPartialVisitor = { [key in keyof IAstPartialMapper]: ReplaceReturnType<IAstPartialMapper[key], any> }\nexport type IAstFullVisitor = {\n    [key in keyof IAstPartialVisitor]-?: IAstPartialVisitor[key];\n}\n\nexport type IAstVisitor = IAstFullVisitor & {\n    super(): IAstVisitor;\n}\n\n\nclass Visitor {\n    mapper?: IAstMapper;\n    visitor?: IAstPartialVisitor;\n\n    super() {\n        return new SkipVisitor(this);\n    }\n}\n\n// =============== auto implement the mapper\nconst mapperProto = AstDefaultMapper.prototype as any;\nfor (const k of Object.getOwnPropertyNames(mapperProto)) {\n    const orig = mapperProto[k] as Function;\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    Object.defineProperty(Visitor.prototype, k, {\n        configurable: false,\n        get() {\n            return function (this: Visitor, ...args: any[]) {\n                const impl = (this.visitor as any)[k] as Function;\n                if (!impl) {\n                    // just ignore & forward call to mapper\n                    return orig.apply(this, args);\n                }\n                // return first argument\n                // ...which means \"I dont wana change anything\"\n                //    in the ast-modifier language.\n                impl.apply(this.visitor, args);\n                return args[0];\n            }\n        }\n    })\n}\n\n\n// ====== auto implement the skip mechanism\nclass SkipVisitor {\n    constructor(readonly parent: Visitor) {\n    }\n}\n\nfor (const k of Object.getOwnPropertyNames(mapperProto)) {\n    const orig = mapperProto[k] as Function;\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    Object.defineProperty(SkipVisitor.prototype, k, {\n        configurable: false,\n        get() {\n            return function (this: SkipVisitor, ...args: []) {\n                return orig.apply(this.parent, args);\n            }\n        }\n    });\n}\n\n/**\n * Builds an AST visitor based on the default implementation, merged with the one you provide.\n *\n * Example of visitor which counts references to a column 'foo':\n *\n * ```ts\n * let cnt = 0;\n * const visitor = astVisitor(v => ({\n *      ref: r => {\n *          if (r.name === 'foo') {\n *              cnt++;\n *          }\n *          v.super().ref(r);\n *      }\n *  }));\n *\n * visitor.statement(myStatementToCount);\n * console.log(`${cnt} references to foo !`);\n * ```\n */\nexport function astVisitor<T extends IAstPartialVisitor = IAstPartialVisitor>(visitorBuilder: (defaultImplem: IAstVisitor) => T): IAstVisitor {\n    return astMapper(m => {\n        const ret = new Visitor();\n        ret.mapper = m;\n        ret.visitor = visitorBuilder(ret as any);\n        return ret as any;\n    })\n}\n","export type Optional<T> = { [key in keyof T]?: T[key] };\n\nexport type nil = undefined | null;\n\ntype Impossible<K extends keyof any> = {\n    [P in K]: never;\n};\nexport type NoExtraProperties<T, U extends T = T> = U & Impossible<Exclude<keyof U, keyof T>>;\n\n\n\nexport type ReplaceReturnType<T, TNewReturn> = T extends (...a: any) => any\n    ? (...a: Parameters<T>) => TNewReturn\n    : never;\n\nexport class NotSupported extends Error {\n    constructor(what?: string) {\n        super('Not supported' + (what ? ': ' + what : ''));\n    }\n\n    static never(value: never, msg?: string) {\n        return new NotSupported(`${msg ?? ''} ${JSON.stringify(value)}`);\n    }\n}\n\nexport function trimNullish<T>(value: T, depth = 5): T {\n    if (depth < 0)\n        return value;\n    if (value instanceof Array) {\n        value.forEach(x => trimNullish(x, depth - 1))\n    }\n    if (typeof value !== 'object' || value instanceof Date)\n        return value;\n\n    if (!value) {\n        return value;\n    }\n\n    for (const k of Object.keys(value)) {\n        const val = (value as any)[k];\n        if (val === undefined || val === null)\n            delete (value as any)[k];\n        else\n            trimNullish(val, depth - 1);\n    }\n    return value;\n}","export { parse, parseFirst, parseArrayLiteral, parseGeometricLiteral, parseIntervalLiteral, parseWithComments } from './parser';\nexport { astVisitor } from './ast-visitor'\nexport { arrayNilMap, assignChanged, astMapper } from './ast-mapper';\nexport { toSql } from './to-sql';\nexport * from './syntax/ast';\nexport type { IAstToSql } from './to-sql';\nexport type { IAstPartialMapper, IAstMapper } from './ast-mapper';\nexport type { nil } from './utils';\nexport type { IAstPartialVisitor, IAstVisitor } from './ast-visitor'\nexport { intervalToString, normalizeInterval } from './literal-syntaxes/interval-builder';\n","import { Statement, Expr, QName, GeometricLiteral, Point, Line, Segment, Box, Path, Polygon, Circle, Interval, PGComment } from './syntax/ast';\nimport { Parser, Grammar } from 'nearley';\nimport sqlGrammar from './syntax/main.ne';\nimport arrayGrammar from './literal-syntaxes/array.ne';\nimport geometricGrammar from './literal-syntaxes/geometric.ne';\nimport intervalTextGrammar from './literal-syntaxes/interval.ne';\nimport intervalIsoGrammar from './literal-syntaxes/interval-iso.ne';\nimport { buildInterval } from './literal-syntaxes/interval-builder';\nimport { tracking, trackingComments } from './lexer';\n\nlet sqlCompiled: Grammar;\nlet arrayCompiled: Grammar;\nlet geometricCompiled: Grammar;\nlet intervalTextCompiled: Grammar;\nlet intervalIsoCompiled: Grammar;\n\n/** Parse the first SQL statement in the given text (discards the rest), and return its AST */\nexport function parseFirst(sql: string): Statement {\n    const first = parse(sql);\n    return first[0];\n}\n\nexport interface ParseOptions {\n    /**\n     *  [Advanced usage only] This allows to parse sub-expressions, not necessarily full valid statements.\n     *\n     *  For instance, `parse('2+2', {entry: 'expr'})`  will return the AST of the given expression (which is not a valid statement)\n     */\n    entry?: string;\n\n    /** If true, then a detailed location will be available on each node */\n    locationTracking?: boolean;\n}\n\n/** Parse an AST from SQL, and get the comments */\nexport function parseWithComments(sql: string, options?: ParseOptions): { ast: Statement[]; comments: PGComment[] } {\n    return trackingComments(() => parse(sql, options));\n}\n\n/** Parse an AST from SQL */\nexport function parse(sql: string): Statement[];\nexport function parse(sql: string, entry: 'expr'): Expr;\nexport function parse(sql: string, entry: 'qualified_name'): QName;\nexport function parse(sql: string, options?: ParseOptions): Statement[];\nexport function parse(sql: string, optEntry?: string | ParseOptions): any {\n    if (!sqlCompiled) {\n        sqlCompiled = Grammar.fromCompiled(sqlGrammar);\n    }\n\n    const entry = typeof optEntry === 'string'\n        ? optEntry\n        : optEntry?.entry;\n    const opts = typeof optEntry === 'string' ? null : optEntry;\n\n\n    // parse sql\n    const doParse = () => _parse(sql, sqlCompiled, entry);\n    let parsed = opts?.locationTracking\n        ? tracking(doParse)\n        : doParse();\n\n    // always return an array of statements.\n    if (typeof optEntry !== 'string' && !Array.isArray(parsed)) {\n        parsed = [parsed]\n    }\n    return parsed;\n}\n\nexport function parseArrayLiteral(sql: string): string[] {\n    if (!arrayCompiled) {\n        arrayCompiled = Grammar.fromCompiled(arrayGrammar);\n    }\n    return _parse(sql, arrayCompiled);\n}\n\nexport function parseIntervalLiteral(literal: string): Interval {\n    if (literal.startsWith('P')) {\n        if (!intervalIsoCompiled) {\n            intervalIsoCompiled = Grammar.fromCompiled(intervalIsoGrammar);\n        }\n        return buildInterval(literal, _parse(literal, intervalIsoCompiled));\n    } else {\n        if (!intervalTextCompiled) {\n            intervalTextCompiled = Grammar.fromCompiled(intervalTextGrammar);\n        }\n        const low = literal.toLowerCase(); // full text syntax is case insensitive\n        return buildInterval(literal, _parse(low, intervalTextCompiled));\n    }\n}\n\n\nexport function parseGeometricLiteral(sql: string, type: 'point'): Point;\nexport function parseGeometricLiteral(sql: string, type: 'line'): Line;\nexport function parseGeometricLiteral(sql: string, type: 'lseg'): Segment;\nexport function parseGeometricLiteral(sql: string, type: 'box'): Box;\nexport function parseGeometricLiteral(sql: string, type: 'path'): Path;\nexport function parseGeometricLiteral(sql: string, type: 'polygon'): Polygon;\nexport function parseGeometricLiteral(sql: string, type: 'circle'): Circle;\nexport function parseGeometricLiteral(sql: string, type: 'point' | 'line' | 'lseg' | 'box' | 'path' | 'polygon' | 'circle'): GeometricLiteral {\n    if (!geometricCompiled) {\n        geometricCompiled = Grammar.fromCompiled(geometricGrammar);\n    }\n    return _parse(sql, geometricCompiled, type);\n}\n\nfunction _parse(sql: string, grammar: Grammar, entry?: string): any {\n    try {\n        grammar.start = entry ?? 'main';\n        const parser = new Parser(grammar);\n        parser.feed(sql);\n        const asts = parser.finish();\n        if (!asts.length) {\n            throw new Error('Unexpected end of input');\n        } else if (asts.length !== 1) {\n            throw new Error(`💀 Ambiguous SQL syntax: Please file an issue stating the request that has failed at https://github.com/oguimbal/pgsql-ast-parser:\n\n        ${sql}\n\n        `);\n        }\n        return asts[0];\n    } catch (e) {\n        if (typeof (e as any)?.message !== 'string') {\n            throw e;\n        }\n        let msg: string = (e as any).message;\n        // remove all the stack crap of nearley parser\n        let begin: string | null = null;\n        const parts: string[] = [];\n        const reg = /A (.+) token based on:/g;\n        let m: RegExpExecArray | null;\n        while (m = reg.exec(msg)) {\n            begin = begin ?? msg.substr(0, m.index);\n            parts.push(`    - A \"${m[1]}\" token`);\n        }\n        if (begin) {\n            msg = begin + parts.join('\\n') + '\\n\\n';\n        }\n        (e as any).message = msg;\n        throw e;\n    }\n}","module.exports = require(\"nearley\");","// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\ndeclare var lparen: any;\ndeclare var rparen: any;\ndeclare var dot: any;\ndeclare var float: any;\ndeclare var int: any;\ndeclare var comma: any;\ndeclare var star: any;\ndeclare var string: any;\ndeclare var eString: any;\ndeclare var kw_primary: any;\ndeclare var kw_unique: any;\ndeclare var quoted_word: any;\ndeclare var word: any;\ndeclare var kw_not: any;\ndeclare var kw_with: any;\ndeclare var kw_null: any;\ndeclare var kw_array: any;\ndeclare var lbracket: any;\ndeclare var rbracket: any;\ndeclare var kw_precision: any;\ndeclare var kw_as: any;\ndeclare var kw_current_schema: any;\ndeclare var kw_all: any;\ndeclare var kw_analyse: any;\ndeclare var kw_analyze: any;\ndeclare var kw_and: any;\ndeclare var kw_any: any;\ndeclare var kw_asc: any;\ndeclare var kw_asymmetric: any;\ndeclare var kw_authorization: any;\ndeclare var kw_binary: any;\ndeclare var kw_both: any;\ndeclare var kw_case: any;\ndeclare var kw_cast: any;\ndeclare var kw_check: any;\ndeclare var kw_collate: any;\ndeclare var kw_collation: any;\ndeclare var kw_concurrently: any;\ndeclare var kw_constraint: any;\ndeclare var kw_create: any;\ndeclare var kw_cross: any;\ndeclare var kw_current_catalog: any;\ndeclare var kw_current_date: any;\ndeclare var kw_current_role: any;\ndeclare var kw_current_time: any;\ndeclare var kw_current_timestamp: any;\ndeclare var kw_current_user: any;\ndeclare var kw_default: any;\ndeclare var kw_deferrable: any;\ndeclare var kw_desc: any;\ndeclare var kw_distinct: any;\ndeclare var kw_do: any;\ndeclare var kw_else: any;\ndeclare var kw_end: any;\ndeclare var kw_except: any;\ndeclare var kw_false: any;\ndeclare var kw_fetch: any;\ndeclare var kw_for: any;\ndeclare var kw_foreign: any;\ndeclare var kw_freeze: any;\ndeclare var kw_from: any;\ndeclare var kw_full: any;\ndeclare var kw_grant: any;\ndeclare var kw_group: any;\ndeclare var kw_having: any;\ndeclare var kw_ilike: any;\ndeclare var kw_in: any;\ndeclare var kw_initially: any;\ndeclare var kw_inner: any;\ndeclare var kw_intersect: any;\ndeclare var kw_into: any;\ndeclare var kw_is: any;\ndeclare var kw_isnull: any;\ndeclare var kw_join: any;\ndeclare var kw_lateral: any;\ndeclare var kw_leading: any;\ndeclare var kw_left: any;\ndeclare var kw_like: any;\ndeclare var kw_limit: any;\ndeclare var kw_localtime: any;\ndeclare var kw_localtimestamp: any;\ndeclare var kw_natural: any;\ndeclare var kw_notnull: any;\ndeclare var kw_offset: any;\ndeclare var kw_on: any;\ndeclare var kw_only: any;\ndeclare var kw_or: any;\ndeclare var kw_order: any;\ndeclare var kw_outer: any;\ndeclare var kw_overlaps: any;\ndeclare var kw_placing: any;\ndeclare var kw_references: any;\ndeclare var kw_returning: any;\ndeclare var kw_right: any;\ndeclare var kw_select: any;\ndeclare var kw_session_user: any;\ndeclare var kw_similar: any;\ndeclare var kw_some: any;\ndeclare var kw_symmetric: any;\ndeclare var kw_table: any;\ndeclare var kw_tablesample: any;\ndeclare var kw_then: any;\ndeclare var kw_to: any;\ndeclare var kw_trailing: any;\ndeclare var kw_true: any;\ndeclare var kw_union: any;\ndeclare var kw_user: any;\ndeclare var kw_using: any;\ndeclare var kw_variadic: any;\ndeclare var kw_verbose: any;\ndeclare var kw_when: any;\ndeclare var kw_where: any;\ndeclare var kw_window: any;\ndeclare var kw_from: any;\ndeclare var kw_as: any;\ndeclare var kw_join: any;\ndeclare var kw_on: any;\ndeclare var kw_using: any;\ndeclare var comma: any;\ndeclare var kw_inner: any;\ndeclare var kw_cross: any;\ndeclare var kw_left: any;\ndeclare var kw_outer: any;\ndeclare var kw_right: any;\ndeclare var kw_full: any;\ndeclare var kw_select: any;\ndeclare var kw_all: any;\ndeclare var kw_distinct: any;\ndeclare var kw_where: any;\ndeclare var kw_group: any;\ndeclare var kw_having: any;\ndeclare var kw_offset: any;\ndeclare var kw_limit: any;\ndeclare var kw_fetch: any;\ndeclare var kw_only: any;\ndeclare var kw_for: any;\ndeclare var kw_order: any;\ndeclare var kw_asc: any;\ndeclare var kw_desc: any;\ndeclare var kw_or: any;\ndeclare var kw_and: any;\ndeclare var kw_not: any;\ndeclare var op_eq: any;\ndeclare var op_neq: any;\ndeclare var kw_isnull: any;\ndeclare var kw_is: any;\ndeclare var kw_null: any;\ndeclare var kw_notnull: any;\ndeclare var kw_true: any;\ndeclare var kw_false: any;\ndeclare var op_compare: any;\ndeclare var ops_others: any;\ndeclare var op_plus: any;\ndeclare var op_minus: any;\ndeclare var op_additive: any;\ndeclare var star: any;\ndeclare var op_div: any;\ndeclare var op_mod: any;\ndeclare var op_exp: any;\ndeclare var lbracket: any;\ndeclare var rbracket: any;\ndeclare var op_cast: any;\ndeclare var kw_cast: any;\ndeclare var dot: any;\ndeclare var kw_array: any;\ndeclare var qparam: any;\ndeclare var kw_default: any;\ndeclare var kw_like: any;\ndeclare var kw_ilike: any;\ndeclare var op_like: any;\ndeclare var op_ilike: any;\ndeclare var op_not_like: any;\ndeclare var op_not_ilike: any;\ndeclare var kw_in: any;\ndeclare var op_member: any;\ndeclare var op_membertext: any;\ndeclare var kw_case: any;\ndeclare var kw_end: any;\ndeclare var kw_when: any;\ndeclare var kw_then: any;\ndeclare var kw_else: any;\ndeclare var kw_any: any;\ndeclare var kw_some: any;\ndeclare var kw_current_catalog: any;\ndeclare var kw_current_date: any;\ndeclare var kw_current_role: any;\ndeclare var kw_current_schema: any;\ndeclare var kw_current_timestamp: any;\ndeclare var kw_current_time: any;\ndeclare var kw_localtimestamp: any;\ndeclare var kw_localtime: any;\ndeclare var kw_session_user: any;\ndeclare var kw_user: any;\ndeclare var kw_current_user: any;\ndeclare var lparen: any;\ndeclare var kw_placing: any;\ndeclare var rparen: any;\ndeclare var kw_create: any;\ndeclare var kw_table: any;\ndeclare var kw_constraint: any;\ndeclare var kw_unique: any;\ndeclare var kw_check: any;\ndeclare var kw_foreign: any;\ndeclare var kw_references: any;\ndeclare var kw_on: any;\ndeclare var kw_full: any;\ndeclare var kw_null: any;\ndeclare var kw_default: any;\ndeclare var kw_like: any;\ndeclare var kw_all: any;\ndeclare var kw_collate: any;\ndeclare var comma: any;\ndeclare var kw_create: any;\ndeclare var kw_unique: any;\ndeclare var kw_on: any;\ndeclare var kw_using: any;\ndeclare var kw_collate: any;\ndeclare var kw_asc: any;\ndeclare var kw_desc: any;\ndeclare var kw_where: any;\ndeclare var kw_with: any;\ndeclare var comma: any;\ndeclare var op_eq: any;\ndeclare var kw_create: any;\ndeclare var kw_with: any;\ndeclare var kw_from: any;\ndeclare var kw_default: any;\ndeclare var kw_to: any;\ndeclare var op_eq: any;\ndeclare var word: any;\ndeclare var kw_on: any;\ndeclare var kw_true: any;\ndeclare var kw_false: any;\ndeclare var quoted_word: any;\ndeclare var kw_create: any;\ndeclare var kw_using: any;\ndeclare var comma: any;\ndeclare var kw_table: any;\ndeclare var kw_is: any;\ndeclare var kw_only: any;\ndeclare var kw_not: any;\ndeclare var kw_deferrable: any;\ndeclare var kw_into: any;\ndeclare var kw_user: any;\ndeclare var kw_on: any;\ndeclare var kw_returning: any;\ndeclare var kw_constraint: any;\ndeclare var kw_do: any;\ndeclare var kw_where: any;\ndeclare var kw_from: any;\ndeclare var kw_returning: any;\ndeclare var op_eq: any;\ndeclare var kw_table: any;\ndeclare var kw_only: any;\ndeclare var kw_to: any;\ndeclare var kw_constraint: any;\ndeclare var kw_default: any;\ndeclare var kw_as: any;\ndeclare var kw_to: any;\ndeclare var kw_from: any;\ndeclare var kw_returning: any;\ndeclare var kw_table: any;\ndeclare var comma: any;\ndeclare var kw_create: any;\ndeclare var kw_as: any;\ndeclare var kw_with: any;\ndeclare var kw_to: any;\ndeclare var kw_session_user: any;\ndeclare var kw_current_user: any;\ndeclare var comma: any;\ndeclare var kw_table: any;\ndeclare var kw_concurrently: any;\ndeclare var kw_with: any;\ndeclare var kw_as: any;\ndeclare var kw_create: any;\ndeclare var kw_as: any;\ndeclare var comma: any;\ndeclare var kw_union: any;\ndeclare var kw_all: any;\ndeclare var kw_as: any;\ndeclare var kw_all: any;\ndeclare var kw_create: any;\ndeclare var kw_or: any;\ndeclare var comma: any;\ndeclare var kw_as: any;\ndeclare var kw_with: any;\ndeclare var kw_check: any;\ndeclare var op_eq: any;\ndeclare var kw_concurrently: any;\ndeclare var kw_with: any;\ndeclare var kw_create: any;\ndeclare var kw_or: any;\ndeclare var comma: any;\ndeclare var kw_default: any;\ndeclare var op_eq: any;\ndeclare var kw_in: any;\ndeclare var kw_as: any;\ndeclare var codeblock: any;\ndeclare var kw_not: any;\ndeclare var kw_null: any;\ndeclare var kw_on: any;\ndeclare var kw_table: any;\ndeclare var kw_do: any;\ndeclare var semicolon: any;\n\nimport {lexerAny} from '../lexer';\n\n\n    import {track, box, unbox, doubleQuoted} from '../lexer';\n\n    // usage ex:  replace track(whatever) with debug(track)(whatever)\n    function debug<T>(fn: any): any {\n        fn = fn || ((x: any) => x);\n        return ((x: any, ...args: any[]) => {\n            debugger;\n            return fn(x, ...args);\n        });\n    }\n\n    function asName(val: any): any {\n        return asNameWithColumns(val, undefined);\n    }\n\n    function asNameWithColumns(val: any, columns: any[] | undefined): any {\n        const name = toStr(val);\n        if (!columns || columns.length === 0) {\n            return track(val, {name});\n        }\n        return track(val, {\n            name,\n            columns: columns.map(c => ({name: toStr(c)})),\n        });\n    }\n\n    function asLit(val: any): any {\n        const value = toStr(val);\n        return track(val, {value});\n    }\n\n    function unwrap(e: any[]): any {\n        if (Array.isArray(e) && e.length === 1) {\n            e = unwrap(e[0]);\n        }\n        if (Array.isArray(e) && !e.length) {\n            return null;\n        }\n        return unbox(e);\n    }\n    const get = (i: number) => (x: any[]) => track(x, x[i]);\n    const last = (x: any[]) => Array.isArray(x) ? track(x[x.length - 1], x[x.length - 1]) : x;\n    const trim = (x: string | null | undefined) => x && x.trim();\n    const value = (x: any) => x && x.value;\n    function flatten(e: any): any[] {\n        if (Array.isArray(e)) {\n            const ret = [];\n            for (const i of e) {\n                ret.push(...flatten(i));\n            }\n            return ret;\n        }\n        if (!e) {\n            return [];\n        }\n        return [e];\n    }\n    function asStr(value: any) {\n        value = unbox(value);\n        return value?.value ?? value;\n    }\n    function flattenStr(e: any): string[] {\n        const fl = flatten(unbox(e));\n        return fl.filter(x => !!x)\n                    .map(x => asStr(x))\n                    .filter(x => typeof x === 'string')\n                    .map(x => x.trim())\n                    .filter(x => !!x);\n    }\n    function toStr(e: any, join?: string): string {\n        return flattenStr(e).join(join || '');\n    }\n\n    function fromEntries(vals: [string, any][]): any {\n        const ret = {} as any;\n        for (const [k, v] of vals) {\n            ret[k] = v;\n        }\n        return ret;\n    }\n\n\n\n const kwSensitivity = { sensitivity: 'accent' };\n const eqInsensitive = (a: string, b: string) => a.localeCompare(b, undefined, kwSensitivity) === 0;\n const notReservedKw = (kw: string) => (x: any[], _: any, rej: any) => {\n     const val = asStr(x[0]);\n     if (eqInsensitive(val, kw)) {\n         return box(x, kw);\n     }\n     return rej;\n }\n const kw = notReservedKw;\n const anyKw = (...kw: string[]) => {\n     const kwSet = new Set(kw);\n     return (x: any[], _: any, rej: any) => {\n        const val = typeof x[0] === 'string' ? x[0] : x[0].value;\n        return kwSet.has(val) ? val : rej;\n    }\n }\n\n\nfunction setSeqOpts(ret: any, opts: any) {\n    const defs = new Set();\n    const unboxed = opts.map(unbox);\n    for (const [k, v] of unboxed) {\n        if (defs.has(k)) {\n            throw new Error('conflicting or redundant options');\n        }\n        defs.add(k);\n        ret[k] = unbox(v);\n    }\n}\n\ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n};\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: never) => string;\n  has: (tokenType: string) => boolean;\n};\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n};\n\ntype NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n};\n\nconst grammar: Grammar = {\n  Lexer: lexerAny,\n  ParserRules: [\n    {\"name\": \"lparen\", \"symbols\": [(lexerAny.has(\"lparen\") ? {type: \"lparen\"} : lparen)]},\n    {\"name\": \"rparen\", \"symbols\": [(lexerAny.has(\"rparen\") ? {type: \"rparen\"} : rparen)]},\n    {\"name\": \"number$subexpression$1\", \"symbols\": [\"float\"]},\n    {\"name\": \"number$subexpression$1\", \"symbols\": [\"int\"]},\n    {\"name\": \"number\", \"symbols\": [\"number$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"dot\", \"symbols\": [(lexerAny.has(\"dot\") ? {type: \"dot\"} : dot)], \"postprocess\": id},\n    {\"name\": \"float\", \"symbols\": [(lexerAny.has(\"float\") ? {type: \"float\"} : float)], \"postprocess\": x => box(x, parseFloat(unwrap(x)))},\n    {\"name\": \"int\", \"symbols\": [(lexerAny.has(\"int\") ? {type: \"int\"} : int)], \"postprocess\": x => box(x, parseInt(unwrap(x), 10))},\n    {\"name\": \"comma\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma)], \"postprocess\": id},\n    {\"name\": \"star\", \"symbols\": [(lexerAny.has(\"star\") ? {type: \"star\"} : star)], \"postprocess\": x => box(x, x[0].value)},\n    {\"name\": \"string$subexpression$1\", \"symbols\": [(lexerAny.has(\"string\") ? {type: \"string\"} : string)]},\n    {\"name\": \"string$subexpression$1\", \"symbols\": [(lexerAny.has(\"eString\") ? {type: \"eString\"} : eString)]},\n    {\"name\": \"string\", \"symbols\": [\"string$subexpression$1\"], \"postprocess\": x => box(x, unwrap(x[0]).value)},\n    {\"name\": \"ident\", \"symbols\": [\"word\"], \"postprocess\": get(0)},\n    {\"name\": \"word\", \"symbols\": [(lexerAny.has(\"kw_primary\") ? {type: \"kw_primary\"} : kw_primary)], \"postprocess\": x => box(x, 'primary')},\n    {\"name\": \"word\", \"symbols\": [(lexerAny.has(\"kw_unique\") ? {type: \"kw_unique\"} : kw_unique)], \"postprocess\": x => box(x, 'unique')},\n    {\"name\": \"word\", \"symbols\": [(lexerAny.has(\"quoted_word\") ? {type: \"quoted_word\"} : quoted_word)], \"postprocess\": x => box(x, x[0].value, true)},\n    {\"name\": \"word\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": x => box(x, x[0].value)},\n    {\"name\": \"collist_paren\", \"symbols\": [\"lparen\", \"collist\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"collist$ebnf$1\", \"symbols\": []},\n    {\"name\": \"collist$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"ident\"], \"postprocess\": last},\n    {\"name\": \"collist$ebnf$1\", \"symbols\": [\"collist$ebnf$1\", \"collist$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"collist\", \"symbols\": [\"ident\", \"collist$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"kw_between\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('between')},\n    {\"name\": \"kw_conflict\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('conflict')},\n    {\"name\": \"kw_nothing\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('nothing')},\n    {\"name\": \"kw_begin\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('begin')},\n    {\"name\": \"kw_if\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('if')},\n    {\"name\": \"kw_exists\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('exists')},\n    {\"name\": \"kw_key\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('key')},\n    {\"name\": \"kw_index\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('index')},\n    {\"name\": \"kw_extension\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('extension')},\n    {\"name\": \"kw_schema\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('schema')},\n    {\"name\": \"kw_nulls\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('nulls')},\n    {\"name\": \"kw_first\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('first')},\n    {\"name\": \"kw_last\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('last')},\n    {\"name\": \"kw_start\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('start')},\n    {\"name\": \"kw_restart\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('restart')},\n    {\"name\": \"kw_filter\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('filter')},\n    {\"name\": \"kw_commit\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('commit')},\n    {\"name\": \"kw_tablespace\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('tablespace')},\n    {\"name\": \"kw_transaction\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('transaction')},\n    {\"name\": \"kw_work\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('work')},\n    {\"name\": \"kw_read\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('read')},\n    {\"name\": \"kw_write\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('write')},\n    {\"name\": \"kw_isolation\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('isolation')},\n    {\"name\": \"kw_level\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('level')},\n    {\"name\": \"kw_serializable\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('serializable')},\n    {\"name\": \"kw_rollback\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('rollback')},\n    {\"name\": \"kw_insert\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('insert')},\n    {\"name\": \"kw_value\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('value')},\n    {\"name\": \"kw_values\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('values')},\n    {\"name\": \"kw_update\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('update')},\n    {\"name\": \"kw_column\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('column')},\n    {\"name\": \"kw_set\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('set')},\n    {\"name\": \"kw_version\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('version')},\n    {\"name\": \"kw_alter\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('alter')},\n    {\"name\": \"kw_rename\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('rename')},\n    {\"name\": \"kw_sequence\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('sequence')},\n    {\"name\": \"kw_temp\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('temp')},\n    {\"name\": \"kw_temporary\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('temporary')},\n    {\"name\": \"kw_add\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('add')},\n    {\"name\": \"kw_owner\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('owner')},\n    {\"name\": \"kw_owned\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('owned')},\n    {\"name\": \"kw_including\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('including')},\n    {\"name\": \"kw_excluding\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('excluding')},\n    {\"name\": \"kw_none\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('none')},\n    {\"name\": \"kw_drop\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('drop')},\n    {\"name\": \"kw_operator\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('operator')},\n    {\"name\": \"kw_minvalue\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('minvalue')},\n    {\"name\": \"kw_maxvalue\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('maxvalue')},\n    {\"name\": \"kw_data\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('data')},\n    {\"name\": \"kw_type\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('type')},\n    {\"name\": \"kw_trigger\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('trigger')},\n    {\"name\": \"kw_delete\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('delete')},\n    {\"name\": \"kw_cache\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('cache')},\n    {\"name\": \"kw_cascade\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('cascade')},\n    {\"name\": \"kw_no\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('no')},\n    {\"name\": \"kw_timestamp\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('timestamp')},\n    {\"name\": \"kw_cycle\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('cycle')},\n    {\"name\": \"kw_function\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('function')},\n    {\"name\": \"kw_returns\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('returns')},\n    {\"name\": \"kw_language\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('language')},\n    {\"name\": \"kw_out\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('out')},\n    {\"name\": \"kw_inout\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('inout')},\n    {\"name\": \"kw_variadic\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('variadic')},\n    {\"name\": \"kw_action\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('action')},\n    {\"name\": \"kw_restrict\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('restrict')},\n    {\"name\": \"kw_truncate\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('truncate')},\n    {\"name\": \"kw_increment\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('increment')},\n    {\"name\": \"kw_by\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('by')},\n    {\"name\": \"kw_row\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('row')},\n    {\"name\": \"kw_rows\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('rows')},\n    {\"name\": \"kw_next\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('next')},\n    {\"name\": \"kw_match\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('match')},\n    {\"name\": \"kw_replace\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('replace')},\n    {\"name\": \"kw_recursive\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('recursive')},\n    {\"name\": \"kw_view\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('view')},\n    {\"name\": \"kw_cascaded\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('cascaded')},\n    {\"name\": \"kw_unlogged\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('unlogged')},\n    {\"name\": \"kw_global\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('global')},\n    {\"name\": \"kw_option\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('option')},\n    {\"name\": \"kw_materialized\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('materialized')},\n    {\"name\": \"kw_partial\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('partial')},\n    {\"name\": \"kw_partition\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('partition')},\n    {\"name\": \"kw_simple\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('simple')},\n    {\"name\": \"kw_generated\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('generated')},\n    {\"name\": \"kw_always\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('always')},\n    {\"name\": \"kw_identity\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('identity')},\n    {\"name\": \"kw_name\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('name')},\n    {\"name\": \"kw_enum\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('enum')},\n    {\"name\": \"kw_show\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('show')},\n    {\"name\": \"kw_ordinality\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('ordinality')},\n    {\"name\": \"kw_overriding\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('overriding')},\n    {\"name\": \"kw_over\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('over')},\n    {\"name\": \"kw_system\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('system')},\n    {\"name\": \"kw_comment\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('comment')},\n    {\"name\": \"kw_time\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('time')},\n    {\"name\": \"kw_at\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('at')},\n    {\"name\": \"kw_zone\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('zone')},\n    {\"name\": \"kw_interval\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('interval')},\n    {\"name\": \"kw_hour\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('hour')},\n    {\"name\": \"kw_minute\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('minute')},\n    {\"name\": \"kw_local\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('local')},\n    {\"name\": \"kw_prepare\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('prepare')},\n    {\"name\": \"kw_deallocate\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('deallocate')},\n    {\"name\": \"kw_raise\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('raise')},\n    {\"name\": \"kw_continue\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('continue')},\n    {\"name\": \"kw_share\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('share')},\n    {\"name\": \"kw_refresh\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('refresh')},\n    {\"name\": \"kw_nowait\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('nowait')},\n    {\"name\": \"kw_skip\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('skip')},\n    {\"name\": \"kw_locked\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": notReservedKw('locked')},\n    {\"name\": \"kw_ifnotexists\", \"symbols\": [\"kw_if\", (lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not), \"kw_exists\"]},\n    {\"name\": \"kw_ifexists\", \"symbols\": [\"kw_if\", \"kw_exists\"]},\n    {\"name\": \"kw_withordinality\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with), \"kw_ordinality\"]},\n    {\"name\": \"kw_not_null\", \"symbols\": [(lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not), (lexerAny.has(\"kw_null\") ? {type: \"kw_null\"} : kw_null)]},\n    {\"name\": \"kw_primary_key\", \"symbols\": [(lexerAny.has(\"kw_primary\") ? {type: \"kw_primary\"} : kw_primary), \"kw_key\"]},\n    {\"name\": \"data_type$ebnf$1$subexpression$1$macrocall$2\", \"symbols\": [\"int\"]},\n    {\"name\": \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"data_type$ebnf$1$subexpression$1$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": [\"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1\", \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"data_type$ebnf$1$subexpression$1$macrocall$1\", \"symbols\": [\"data_type$ebnf$1$subexpression$1$macrocall$2\", \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"data_type$ebnf$1$subexpression$1\", \"symbols\": [\"lparen\", \"data_type$ebnf$1$subexpression$1$macrocall$1\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"data_type$ebnf$1\", \"symbols\": [\"data_type$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"data_type$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"data_type$ebnf$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_array\") ? {type: \"kw_array\"} : kw_array)]},\n    {\"name\": \"data_type$ebnf$2$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"lbracket\") ? {type: \"lbracket\"} : lbracket), (lexerAny.has(\"rbracket\") ? {type: \"rbracket\"} : rbracket)]},\n    {\"name\": \"data_type$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"data_type$ebnf$2$subexpression$1$ebnf$1$subexpression$1\"]},\n    {\"name\": \"data_type$ebnf$2$subexpression$1$ebnf$1$subexpression$2\", \"symbols\": [(lexerAny.has(\"lbracket\") ? {type: \"lbracket\"} : lbracket), (lexerAny.has(\"rbracket\") ? {type: \"rbracket\"} : rbracket)]},\n    {\"name\": \"data_type$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"data_type$ebnf$2$subexpression$1$ebnf$1\", \"data_type$ebnf$2$subexpression$1$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"data_type$ebnf$2$subexpression$1\", \"symbols\": [\"data_type$ebnf$2$subexpression$1$ebnf$1\"]},\n    {\"name\": \"data_type$ebnf$2\", \"symbols\": [\"data_type$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"data_type$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"data_type\", \"symbols\": [\"data_type_simple\", \"data_type$ebnf$1\", \"data_type$ebnf$2\"], \"postprocess\":  x => {\n            let asArray = x[2];\n            const name = unwrap(x[0]);\n            let ret;\n            ret = {\n                ...name,\n                ... Array.isArray(x[1]) && x[1].length ? { config: x[1].map(unwrap) } : {},\n            };\n            if (asArray) {\n                if (asArray[0].type === 'kw_array') {\n                    asArray = [['array']]\n                }\n                for (const _ of asArray[0]) {\n                    ret = {\n                        kind: 'array',\n                        arrayOf: ret,\n                    };\n                }\n            }\n            return track(x, ret);\n        } },\n    {\"name\": \"data_type_list$ebnf$1\", \"symbols\": []},\n    {\"name\": \"data_type_list$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"data_type\"], \"postprocess\": last},\n    {\"name\": \"data_type_list$ebnf$1\", \"symbols\": [\"data_type_list$ebnf$1\", \"data_type_list$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"data_type_list\", \"symbols\": [\"data_type\", \"data_type_list$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"data_type_simple\", \"symbols\": [\"data_type_text\"], \"postprocess\": x => track(x, { name: toStr(x, ' ') })},\n    {\"name\": \"data_type_simple\", \"symbols\": [\"data_type_numeric\"], \"postprocess\": x => track(x, { name: toStr(x, ' ') })},\n    {\"name\": \"data_type_simple\", \"symbols\": [\"data_type_date\"]},\n    {\"name\": \"data_type_simple\", \"symbols\": [\"qualified_name_mark_quotes\"]},\n    {\"name\": \"data_type_numeric$subexpression$1\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": kw('double')},\n    {\"name\": \"data_type_numeric\", \"symbols\": [\"data_type_numeric$subexpression$1\", (lexerAny.has(\"kw_precision\") ? {type: \"kw_precision\"} : kw_precision)]},\n    {\"name\": \"data_type_text$subexpression$1\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": anyKw('character', 'bit')},\n    {\"name\": \"data_type_text$subexpression$2\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": kw('varying')},\n    {\"name\": \"data_type_text\", \"symbols\": [\"data_type_text$subexpression$1\", \"data_type_text$subexpression$2\"]},\n    {\"name\": \"data_type_date$subexpression$1\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": anyKw('timestamp', 'time')},\n    {\"name\": \"data_type_date$subexpression$2\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with)]},\n    {\"name\": \"data_type_date$subexpression$2\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": kw('without')},\n    {\"name\": \"data_type_date$subexpression$3\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": kw('time')},\n    {\"name\": \"data_type_date$subexpression$4\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": kw('zone')},\n    {\"name\": \"data_type_date\", \"symbols\": [\"data_type_date$subexpression$1\", \"data_type_date$subexpression$2\", \"data_type_date$subexpression$3\", \"data_type_date$subexpression$4\"], \"postprocess\": x => track(x, { name: toStr(x, ' ') })},\n    {\"name\": \"data_type_date$subexpression$5\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": anyKw('timestamp', 'time')},\n    {\"name\": \"data_type_date$subexpression$6\", \"symbols\": [\"lparen\", \"int\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"data_type_date$subexpression$7\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with)]},\n    {\"name\": \"data_type_date$subexpression$7\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": kw('without')},\n    {\"name\": \"data_type_date$subexpression$8\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": kw('time')},\n    {\"name\": \"data_type_date$subexpression$9\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": kw('zone')},\n    {\"name\": \"data_type_date\", \"symbols\": [\"data_type_date$subexpression$5\", \"data_type_date$subexpression$6\", \"data_type_date$subexpression$7\", \"data_type_date$subexpression$8\", \"data_type_date$subexpression$9\"], \"postprocess\": x => track(x, { name: `timestamp ${toStr(x[2])} time zone`, config: [unbox(x[1])] })},\n    {\"name\": \"ident_aliased$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"ident\"], \"postprocess\": last},\n    {\"name\": \"ident_aliased\", \"symbols\": [\"ident_aliased$subexpression$1\"]},\n    {\"name\": \"ident_aliased\", \"symbols\": [\"ident\"], \"postprocess\": unwrap},\n    {\"name\": \"table_ref\", \"symbols\": [\"qualified_name\"], \"postprocess\": unwrap},\n    {\"name\": \"qcolumn$ebnf$1$subexpression$1\", \"symbols\": [\"dot\", \"ident\"], \"postprocess\": last},\n    {\"name\": \"qcolumn$ebnf$1\", \"symbols\": [\"qcolumn$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"qcolumn$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"qcolumn\", \"symbols\": [\"ident\", \"dot\", \"ident\", \"qcolumn$ebnf$1\"], \"postprocess\":  x => {\n            if (!x[3]) {\n                return track(x, {\n                        table: unbox(x[0]),\n                        column: unbox(x[2]),\n                    });\n            }\n            return track(x, {\n                schema: unbox(x[0]),\n                table: unbox(x[2]),\n                column: unbox(x[3]),\n            });\n        } },\n    {\"name\": \"table_ref_aliased$ebnf$1\", \"symbols\": [\"ident_aliased\"], \"postprocess\": id},\n    {\"name\": \"table_ref_aliased$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"table_ref_aliased\", \"symbols\": [\"table_ref\", \"table_ref_aliased$ebnf$1\"], \"postprocess\":  x => {\n            const alias = unwrap(x[1]);\n            return track(x, {\n                ...unwrap(x[0]),\n                ...alias ? { alias } : {},\n            })\n        } },\n    {\"name\": \"qualified_name\", \"symbols\": [\"qname_ident\"], \"postprocess\": x => track(x, {name: toStr(x) })},\n    {\"name\": \"qualified_name\", \"symbols\": [\"ident\", \"dot\", \"ident_extended\"], \"postprocess\":  x => {\n            const schema = toStr(x[0]);\n            const name = toStr(x[2]);\n            return track(x, {schema, name});\n        } },\n    {\"name\": \"qualified_name\", \"symbols\": [(lexerAny.has(\"kw_current_schema\") ? {type: \"kw_current_schema\"} : kw_current_schema)], \"postprocess\": x => track(x, { name: 'current_schema' })},\n    {\"name\": \"qualified_name_mark_quotes\", \"symbols\": [\"qname_ident\"], \"postprocess\": x => track(x, {name: toStr(x), ...doubleQuoted(x) })},\n    {\"name\": \"qualified_name_mark_quotes\", \"symbols\": [\"ident\", \"dot\", \"ident_extended\"], \"postprocess\":  x => {\n            const schema = toStr(x[0]);\n            const name = toStr(x[2]);\n            return track(x, {schema, name, ...doubleQuoted(x[2])});\n        } },\n    {\"name\": \"qualified_name_mark_quotes\", \"symbols\": [(lexerAny.has(\"kw_current_schema\") ? {type: \"kw_current_schema\"} : kw_current_schema)], \"postprocess\": x => track(x, { name: 'current_schema' })},\n    {\"name\": \"qname_ident\", \"symbols\": [\"ident\"]},\n    {\"name\": \"qname_ident\", \"symbols\": [(lexerAny.has(\"kw_precision\") ? {type: \"kw_precision\"} : kw_precision)]},\n    {\"name\": \"qname\", \"symbols\": [\"qualified_name\"], \"postprocess\": unwrap},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_all\") ? {type: \"kw_all\"} : kw_all)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_analyse\") ? {type: \"kw_analyse\"} : kw_analyse)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_analyze\") ? {type: \"kw_analyze\"} : kw_analyze)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_and\") ? {type: \"kw_and\"} : kw_and)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_any\") ? {type: \"kw_any\"} : kw_any)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_array\") ? {type: \"kw_array\"} : kw_array)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_asc\") ? {type: \"kw_asc\"} : kw_asc)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_asymmetric\") ? {type: \"kw_asymmetric\"} : kw_asymmetric)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_authorization\") ? {type: \"kw_authorization\"} : kw_authorization)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_binary\") ? {type: \"kw_binary\"} : kw_binary)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_both\") ? {type: \"kw_both\"} : kw_both)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_case\") ? {type: \"kw_case\"} : kw_case)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_cast\") ? {type: \"kw_cast\"} : kw_cast)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_check\") ? {type: \"kw_check\"} : kw_check)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_collate\") ? {type: \"kw_collate\"} : kw_collate)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_collation\") ? {type: \"kw_collation\"} : kw_collation)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_concurrently\") ? {type: \"kw_concurrently\"} : kw_concurrently)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_constraint\") ? {type: \"kw_constraint\"} : kw_constraint)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_cross\") ? {type: \"kw_cross\"} : kw_cross)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_catalog\") ? {type: \"kw_current_catalog\"} : kw_current_catalog)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_date\") ? {type: \"kw_current_date\"} : kw_current_date)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_role\") ? {type: \"kw_current_role\"} : kw_current_role)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_schema\") ? {type: \"kw_current_schema\"} : kw_current_schema)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_time\") ? {type: \"kw_current_time\"} : kw_current_time)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_timestamp\") ? {type: \"kw_current_timestamp\"} : kw_current_timestamp)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_user\") ? {type: \"kw_current_user\"} : kw_current_user)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_deferrable\") ? {type: \"kw_deferrable\"} : kw_deferrable)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_desc\") ? {type: \"kw_desc\"} : kw_desc)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_distinct\") ? {type: \"kw_distinct\"} : kw_distinct)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_do\") ? {type: \"kw_do\"} : kw_do)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_else\") ? {type: \"kw_else\"} : kw_else)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_end\") ? {type: \"kw_end\"} : kw_end)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_except\") ? {type: \"kw_except\"} : kw_except)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_false\") ? {type: \"kw_false\"} : kw_false)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_fetch\") ? {type: \"kw_fetch\"} : kw_fetch)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_for\") ? {type: \"kw_for\"} : kw_for)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_foreign\") ? {type: \"kw_foreign\"} : kw_foreign)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_freeze\") ? {type: \"kw_freeze\"} : kw_freeze)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_from\") ? {type: \"kw_from\"} : kw_from)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_full\") ? {type: \"kw_full\"} : kw_full)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_grant\") ? {type: \"kw_grant\"} : kw_grant)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_group\") ? {type: \"kw_group\"} : kw_group)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_having\") ? {type: \"kw_having\"} : kw_having)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_ilike\") ? {type: \"kw_ilike\"} : kw_ilike)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_in\") ? {type: \"kw_in\"} : kw_in)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_initially\") ? {type: \"kw_initially\"} : kw_initially)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_inner\") ? {type: \"kw_inner\"} : kw_inner)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_intersect\") ? {type: \"kw_intersect\"} : kw_intersect)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_into\") ? {type: \"kw_into\"} : kw_into)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_is\") ? {type: \"kw_is\"} : kw_is)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_isnull\") ? {type: \"kw_isnull\"} : kw_isnull)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_join\") ? {type: \"kw_join\"} : kw_join)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_lateral\") ? {type: \"kw_lateral\"} : kw_lateral)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_leading\") ? {type: \"kw_leading\"} : kw_leading)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_left\") ? {type: \"kw_left\"} : kw_left)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_like\") ? {type: \"kw_like\"} : kw_like)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_limit\") ? {type: \"kw_limit\"} : kw_limit)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_localtime\") ? {type: \"kw_localtime\"} : kw_localtime)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_localtimestamp\") ? {type: \"kw_localtimestamp\"} : kw_localtimestamp)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_natural\") ? {type: \"kw_natural\"} : kw_natural)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_notnull\") ? {type: \"kw_notnull\"} : kw_notnull)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_null\") ? {type: \"kw_null\"} : kw_null)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_offset\") ? {type: \"kw_offset\"} : kw_offset)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_only\") ? {type: \"kw_only\"} : kw_only)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_or\") ? {type: \"kw_or\"} : kw_or)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_order\") ? {type: \"kw_order\"} : kw_order)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_outer\") ? {type: \"kw_outer\"} : kw_outer)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_overlaps\") ? {type: \"kw_overlaps\"} : kw_overlaps)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_placing\") ? {type: \"kw_placing\"} : kw_placing)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_primary\") ? {type: \"kw_primary\"} : kw_primary)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_references\") ? {type: \"kw_references\"} : kw_references)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_returning\") ? {type: \"kw_returning\"} : kw_returning)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_right\") ? {type: \"kw_right\"} : kw_right)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_select\") ? {type: \"kw_select\"} : kw_select)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_session_user\") ? {type: \"kw_session_user\"} : kw_session_user)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_similar\") ? {type: \"kw_similar\"} : kw_similar)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_some\") ? {type: \"kw_some\"} : kw_some)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_symmetric\") ? {type: \"kw_symmetric\"} : kw_symmetric)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_table\") ? {type: \"kw_table\"} : kw_table)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_tablesample\") ? {type: \"kw_tablesample\"} : kw_tablesample)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_then\") ? {type: \"kw_then\"} : kw_then)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_trailing\") ? {type: \"kw_trailing\"} : kw_trailing)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_true\") ? {type: \"kw_true\"} : kw_true)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_union\") ? {type: \"kw_union\"} : kw_union)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_unique\") ? {type: \"kw_unique\"} : kw_unique)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_user\") ? {type: \"kw_user\"} : kw_user)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_using\") ? {type: \"kw_using\"} : kw_using)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_variadic\") ? {type: \"kw_variadic\"} : kw_variadic)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_verbose\") ? {type: \"kw_verbose\"} : kw_verbose)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_when\") ? {type: \"kw_when\"} : kw_when)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_where\") ? {type: \"kw_where\"} : kw_where)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_window\") ? {type: \"kw_window\"} : kw_window)]},\n    {\"name\": \"any_keyword\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with)]},\n    {\"name\": \"ident_extended\", \"symbols\": [\"ident\"]},\n    {\"name\": \"ident_extended\", \"symbols\": [\"any_keyword\"]},\n    {\"name\": \"select_statement$ebnf$1\", \"symbols\": [\"select_from\"], \"postprocess\": id},\n    {\"name\": \"select_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_statement$ebnf$2\", \"symbols\": [\"select_where\"], \"postprocess\": id},\n    {\"name\": \"select_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_statement$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [\"select_having\"], \"postprocess\": id},\n    {\"name\": \"select_statement$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_statement$ebnf$3$subexpression$1\", \"symbols\": [\"select_groupby\", \"select_statement$ebnf$3$subexpression$1$ebnf$1\"]},\n    {\"name\": \"select_statement$ebnf$3\", \"symbols\": [\"select_statement$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"select_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_statement$ebnf$4\", \"symbols\": [\"select_order_by\"], \"postprocess\": id},\n    {\"name\": \"select_statement$ebnf$4\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_statement$ebnf$5\", \"symbols\": [\"select_limit_offset\"], \"postprocess\": id},\n    {\"name\": \"select_statement$ebnf$5\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_statement$ebnf$6$subexpression$1$ebnf$1\", \"symbols\": [\"select_skip\"], \"postprocess\": id},\n    {\"name\": \"select_statement$ebnf$6$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_statement$ebnf$6$subexpression$1\", \"symbols\": [\"select_for\", \"select_statement$ebnf$6$subexpression$1$ebnf$1\"]},\n    {\"name\": \"select_statement$ebnf$6\", \"symbols\": [\"select_statement$ebnf$6$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"select_statement$ebnf$6\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_statement\", \"symbols\": [\"select_what\", \"select_statement$ebnf$1\", \"select_statement$ebnf$2\", \"select_statement$ebnf$3\", \"select_statement$ebnf$4\", \"select_statement$ebnf$5\", \"select_statement$ebnf$6\"], \"postprocess\":  x => {\n            let [what, from, where, _groupBy, orderBy, limit, _selectFor] = x;\n            from = unwrap(from);\n            let groupBy = _groupBy && _groupBy[0];\n            let having = _groupBy && _groupBy[1];\n            groupBy = groupBy && (groupBy.length === 1 && groupBy[0].type === 'list' ? groupBy[0].expressions : groupBy);\n            having = having && unwrap(having);\n            let selectFor = _selectFor && _selectFor[0];\n            let skip = _selectFor && _selectFor[1];\n            skip = unwrap(skip);\n            return track(x, {\n                ...what,\n                ...from ? { from: Array.isArray(from) ? from : [from] } : {},\n                ...groupBy ? { groupBy } : {},\n                ...having ? { having } : {},\n                ...limit ? { limit: unwrap(limit) } : {},\n                ...orderBy ? { orderBy } : {},\n                ...where ? { where } : {},\n                ...selectFor ? { for: selectFor[1] } : {},\n                ...skip ? { skip } : {},\n                type: 'select',\n            });\n        } },\n    {\"name\": \"select_from\", \"symbols\": [(lexerAny.has(\"kw_from\") ? {type: \"kw_from\"} : kw_from), \"select_from_items\"], \"postprocess\": last},\n    {\"name\": \"select_from_items$ebnf$1\", \"symbols\": []},\n    {\"name\": \"select_from_items$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"select_from_item\"], \"postprocess\": last},\n    {\"name\": \"select_from_items$ebnf$1\", \"symbols\": [\"select_from_items$ebnf$1\", \"select_from_items$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_from_items\", \"symbols\": [\"select_from_item\", \"select_from_items$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [...head, ...(flatten(tail) || [])];\n        } },\n    {\"name\": \"select_from_item\", \"symbols\": [\"select_from_subject\"]},\n    {\"name\": \"select_from_item\", \"symbols\": [\"select_from_item_joins\"], \"postprocess\": get(0)},\n    {\"name\": \"select_from_item_joins$subexpression$1\", \"symbols\": [\"select_from_item\"], \"postprocess\": get(0)},\n    {\"name\": \"select_from_item_joins\", \"symbols\": [\"select_from_item_joins$subexpression$1\", \"select_table_join\"], \"postprocess\": flatten},\n    {\"name\": \"select_from_item_joins\", \"symbols\": [\"lparen\", \"select_from_item_joins\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"select_from_subject\", \"symbols\": [\"stb_table\"], \"postprocess\": unwrap},\n    {\"name\": \"select_from_subject\", \"symbols\": [\"stb_statement\"], \"postprocess\": unwrap},\n    {\"name\": \"select_from_subject\", \"symbols\": [\"stb_call\"], \"postprocess\": unwrap},\n    {\"name\": \"stb_opts$ebnf$1\", \"symbols\": [\"collist_paren\"], \"postprocess\": id},\n    {\"name\": \"stb_opts$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"stb_opts\", \"symbols\": [\"ident_aliased\", \"stb_opts$ebnf$1\"], \"postprocess\":  x => track(x, {\n            alias: toStr(x[0]),\n           ...x[1] && {columnNames: unbox(x[1]).map(asName)},\n        }) },\n    {\"name\": \"stb_table$ebnf$1\", \"symbols\": [\"stb_opts\"], \"postprocess\": id},\n    {\"name\": \"stb_table$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"stb_table\", \"symbols\": [\"table_ref\", \"stb_table$ebnf$1\"], \"postprocess\":  x => {\n            return track(x, {\n                type: 'table',\n                name: track(x, {\n                    ...x[0],\n                    ...x[1],\n                }),\n            });\n        } },\n    {\"name\": \"stb_statement\", \"symbols\": [\"selection_paren\", \"stb_opts\"], \"postprocess\":  x => track(x, {\n            type: 'statement',\n            statement: unwrap(x[0]),\n            ...x[1],\n        }) },\n    {\"name\": \"select_values\", \"symbols\": [\"kw_values\", \"insert_values\"], \"postprocess\":  x => track(x, {\n            type: 'values',\n            values: x[1],\n        }) },\n    {\"name\": \"stb_call$ebnf$1\", \"symbols\": [\"kw_withordinality\"], \"postprocess\": id},\n    {\"name\": \"stb_call$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"stb_call$ebnf$2\", \"symbols\": [\"stb_call_alias\"], \"postprocess\": id},\n    {\"name\": \"stb_call$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"stb_call\", \"symbols\": [\"expr_function_call\", \"stb_call$ebnf$1\", \"stb_call$ebnf$2\"], \"postprocess\":  x => {\n            const withOrdinality = x[1];\n            const alias = x[2];\n        \n            if (!withOrdinality && !alias) {\n                return x[0];\n            }\n        \n            return track(x, {\n                ...x[0],\n                ... withOrdinality && { withOrdinality: true },\n                alias: alias ? asNameWithColumns(alias[0], alias[1]) : undefined,\n            });\n        } },\n    {\"name\": \"stb_call_alias$subexpression$1$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as)], \"postprocess\": id},\n    {\"name\": \"stb_call_alias$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"stb_call_alias$subexpression$1\", \"symbols\": [\"stb_call_alias$subexpression$1$ebnf$1\", \"ident\"], \"postprocess\": last},\n    {\"name\": \"stb_call_alias$ebnf$1\", \"symbols\": [\"stb_call_alias_list\"], \"postprocess\": id},\n    {\"name\": \"stb_call_alias$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"stb_call_alias\", \"symbols\": [\"stb_call_alias$subexpression$1\", \"stb_call_alias$ebnf$1\"]},\n    {\"name\": \"stb_call_alias_list\", \"symbols\": [\"lparen\", \"stb_call_alias_list_raw\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"stb_call_alias_list_raw$ebnf$1\", \"symbols\": []},\n    {\"name\": \"stb_call_alias_list_raw$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"ident\"], \"postprocess\": last},\n    {\"name\": \"stb_call_alias_list_raw$ebnf$1\", \"symbols\": [\"stb_call_alias_list_raw$ebnf$1\", \"stb_call_alias_list_raw$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"stb_call_alias_list_raw\", \"symbols\": [\"ident\", \"stb_call_alias_list_raw$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"select_table_join$ebnf$1\", \"symbols\": [\"select_table_join_clause\"], \"postprocess\": id},\n    {\"name\": \"select_table_join$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_table_join\", \"symbols\": [\"select_join_op\", (lexerAny.has(\"kw_join\") ? {type: \"kw_join\"} : kw_join), \"select_from_subject\", \"select_table_join$ebnf$1\"], \"postprocess\":  x => track(x, {\n            ...unwrap(x[2]),\n            join: {\n                type: toStr(x[0], ' '),\n                ...x[3] && unwrap(x[3]),\n            }\n        }) },\n    {\"name\": \"select_table_join_clause\", \"symbols\": [(lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on), \"expr\"], \"postprocess\": x => track(x, { on: last(x) })},\n    {\"name\": \"select_table_join_clause$macrocall$2\", \"symbols\": [\"ident\"]},\n    {\"name\": \"select_table_join_clause$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"select_table_join_clause$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"select_table_join_clause$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"select_table_join_clause$macrocall$1$ebnf$1\", \"symbols\": [\"select_table_join_clause$macrocall$1$ebnf$1\", \"select_table_join_clause$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_table_join_clause$macrocall$1\", \"symbols\": [\"select_table_join_clause$macrocall$2\", \"select_table_join_clause$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"select_table_join_clause\", \"symbols\": [(lexerAny.has(\"kw_using\") ? {type: \"kw_using\"} : kw_using), \"lparen\", \"select_table_join_clause$macrocall$1\", \"rparen\"], \"postprocess\": x => track(x, { using: x[2].map(asName) })},\n    {\"name\": \"select_join_op$subexpression$1$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_inner\") ? {type: \"kw_inner\"} : kw_inner)], \"postprocess\": id},\n    {\"name\": \"select_join_op$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_join_op$subexpression$1\", \"symbols\": [\"select_join_op$subexpression$1$ebnf$1\"], \"postprocess\": x => box(x, 'INNER JOIN')},\n    {\"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$1\"]},\n    {\"name\": \"select_join_op$subexpression$2\", \"symbols\": [(lexerAny.has(\"kw_cross\") ? {type: \"kw_cross\"} : kw_cross)], \"postprocess\": x => box(x, 'CROSS JOIN')},\n    {\"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$2\"]},\n    {\"name\": \"select_join_op$subexpression$3$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_outer\") ? {type: \"kw_outer\"} : kw_outer)], \"postprocess\": id},\n    {\"name\": \"select_join_op$subexpression$3$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_join_op$subexpression$3\", \"symbols\": [(lexerAny.has(\"kw_left\") ? {type: \"kw_left\"} : kw_left), \"select_join_op$subexpression$3$ebnf$1\"], \"postprocess\": x => box(x, 'LEFT JOIN')},\n    {\"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$3\"]},\n    {\"name\": \"select_join_op$subexpression$4$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_outer\") ? {type: \"kw_outer\"} : kw_outer)], \"postprocess\": id},\n    {\"name\": \"select_join_op$subexpression$4$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_join_op$subexpression$4\", \"symbols\": [(lexerAny.has(\"kw_right\") ? {type: \"kw_right\"} : kw_right), \"select_join_op$subexpression$4$ebnf$1\"], \"postprocess\": x => box(x, 'RIGHT JOIN')},\n    {\"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$4\"]},\n    {\"name\": \"select_join_op$subexpression$5$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_outer\") ? {type: \"kw_outer\"} : kw_outer)], \"postprocess\": id},\n    {\"name\": \"select_join_op$subexpression$5$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_join_op$subexpression$5\", \"symbols\": [(lexerAny.has(\"kw_full\") ? {type: \"kw_full\"} : kw_full), \"select_join_op$subexpression$5$ebnf$1\"], \"postprocess\": x => box(x, 'FULL JOIN')},\n    {\"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$5\"]},\n    {\"name\": \"select_what$ebnf$1\", \"symbols\": [\"select_distinct\"], \"postprocess\": id},\n    {\"name\": \"select_what$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_what$ebnf$2\", \"symbols\": [\"select_expr_list_aliased\"], \"postprocess\": id},\n    {\"name\": \"select_what$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_what\", \"symbols\": [(lexerAny.has(\"kw_select\") ? {type: \"kw_select\"} : kw_select), \"select_what$ebnf$1\", \"select_what$ebnf$2\"], \"postprocess\":  x => track(x, {\n            columns: x[2],\n            ...x[1] && {distinct: unbox(x[1]) },\n        }) },\n    {\"name\": \"select_expr_list_aliased$ebnf$1\", \"symbols\": []},\n    {\"name\": \"select_expr_list_aliased$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"select_expr_list_item\"], \"postprocess\": last},\n    {\"name\": \"select_expr_list_aliased$ebnf$1\", \"symbols\": [\"select_expr_list_aliased$ebnf$1\", \"select_expr_list_aliased$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_expr_list_aliased\", \"symbols\": [\"select_expr_list_item\", \"select_expr_list_aliased$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"select_expr_list_item$ebnf$1\", \"symbols\": [\"ident_aliased\"], \"postprocess\": id},\n    {\"name\": \"select_expr_list_item$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_expr_list_item\", \"symbols\": [\"expr\", \"select_expr_list_item$ebnf$1\"], \"postprocess\":  x => track(x, {\n            expr: x[0],\n            ...x[1] ? {alias: asName(x[1]) } : {},\n        }) },\n    {\"name\": \"select_distinct\", \"symbols\": [(lexerAny.has(\"kw_all\") ? {type: \"kw_all\"} : kw_all)], \"postprocess\": x => box(x, 'all')},\n    {\"name\": \"select_distinct$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on), \"lparen\", \"expr_list_raw\", \"rparen\"], \"postprocess\": get(2)},\n    {\"name\": \"select_distinct$ebnf$1\", \"symbols\": [\"select_distinct$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"select_distinct$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_distinct\", \"symbols\": [(lexerAny.has(\"kw_distinct\") ? {type: \"kw_distinct\"} : kw_distinct), \"select_distinct$ebnf$1\"], \"postprocess\": x => box(x, x[1] || 'distinct')},\n    {\"name\": \"select_where\", \"symbols\": [(lexerAny.has(\"kw_where\") ? {type: \"kw_where\"} : kw_where), \"expr\"], \"postprocess\": last},\n    {\"name\": \"select_groupby\", \"symbols\": [(lexerAny.has(\"kw_group\") ? {type: \"kw_group\"} : kw_group), \"kw_by\", \"expr_list_raw\"], \"postprocess\": last},\n    {\"name\": \"select_having\", \"symbols\": [(lexerAny.has(\"kw_having\") ? {type: \"kw_having\"} : kw_having), \"expr\"], \"postprocess\": last},\n    {\"name\": \"select_limit_offset$ebnf$1$subexpression$1\", \"symbols\": [\"select_offset\"]},\n    {\"name\": \"select_limit_offset$ebnf$1$subexpression$1\", \"symbols\": [\"select_limit\"]},\n    {\"name\": \"select_limit_offset$ebnf$1\", \"symbols\": [\"select_limit_offset$ebnf$1$subexpression$1\"]},\n    {\"name\": \"select_limit_offset$ebnf$1$subexpression$2\", \"symbols\": [\"select_offset\"]},\n    {\"name\": \"select_limit_offset$ebnf$1$subexpression$2\", \"symbols\": [\"select_limit\"]},\n    {\"name\": \"select_limit_offset$ebnf$1\", \"symbols\": [\"select_limit_offset$ebnf$1\", \"select_limit_offset$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_limit_offset\", \"symbols\": [\"select_limit_offset$ebnf$1\"], \"postprocess\":  (x, rej) => {\n            const value = unwrap(x);\n            if (!Array.isArray(value)) {\n                return track(x, value);\n            }\n            if (value.length != 2) {\n                return rej;\n            }\n            const a = unwrap(value[0]);\n            const b = unwrap(value[1]);\n            if (a.offset && b.offset || a.limit && b.limit) {\n                return rej;\n            }\n            return track(x, {\n                ...a,\n                ...b,\n            });\n        } },\n    {\"name\": \"select_offset$ebnf$1$subexpression$1\", \"symbols\": [\"kw_row\"]},\n    {\"name\": \"select_offset$ebnf$1$subexpression$1\", \"symbols\": [\"kw_rows\"]},\n    {\"name\": \"select_offset$ebnf$1\", \"symbols\": [\"select_offset$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"select_offset$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_offset\", \"symbols\": [(lexerAny.has(\"kw_offset\") ? {type: \"kw_offset\"} : kw_offset), \"expr_nostar\", \"select_offset$ebnf$1\"], \"postprocess\": x => track(x, { offset: unwrap(x[1]) })},\n    {\"name\": \"select_limit$subexpression$1\", \"symbols\": [\"select_limit_1\"]},\n    {\"name\": \"select_limit$subexpression$1\", \"symbols\": [\"select_limit_2\"]},\n    {\"name\": \"select_limit\", \"symbols\": [\"select_limit$subexpression$1\"], \"postprocess\": x => track(x, { limit: unwrap(x) })},\n    {\"name\": \"select_limit_1\", \"symbols\": [(lexerAny.has(\"kw_limit\") ? {type: \"kw_limit\"} : kw_limit), \"expr_nostar\"], \"postprocess\": last},\n    {\"name\": \"select_limit_2$ebnf$1$subexpression$1\", \"symbols\": [\"kw_first\"]},\n    {\"name\": \"select_limit_2$ebnf$1$subexpression$1\", \"symbols\": [\"kw_next\"]},\n    {\"name\": \"select_limit_2$ebnf$1\", \"symbols\": [\"select_limit_2$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"select_limit_2$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_limit_2$subexpression$1\", \"symbols\": [\"kw_row\"]},\n    {\"name\": \"select_limit_2$subexpression$1\", \"symbols\": [\"kw_rows\"]},\n    {\"name\": \"select_limit_2\", \"symbols\": [(lexerAny.has(\"kw_fetch\") ? {type: \"kw_fetch\"} : kw_fetch), \"select_limit_2$ebnf$1\", \"expr_nostar\", \"select_limit_2$subexpression$1\", (lexerAny.has(\"kw_only\") ? {type: \"kw_only\"} : kw_only)], \"postprocess\": get(2)},\n    {\"name\": \"select_for$subexpression$1\", \"symbols\": [\"kw_update\"], \"postprocess\": x => track(x, {type: 'update'})},\n    {\"name\": \"select_for$subexpression$1\", \"symbols\": [\"kw_no\", \"kw_key\", \"kw_update\"], \"postprocess\": x => track(x, {type: 'no key update'})},\n    {\"name\": \"select_for$subexpression$1\", \"symbols\": [\"kw_share\"], \"postprocess\": x => track(x, {type: 'share'})},\n    {\"name\": \"select_for$subexpression$1\", \"symbols\": [\"kw_key\", \"kw_share\"], \"postprocess\": x => track(x, {type: 'key share'})},\n    {\"name\": \"select_for\", \"symbols\": [(lexerAny.has(\"kw_for\") ? {type: \"kw_for\"} : kw_for), \"select_for$subexpression$1\"]},\n    {\"name\": \"select_skip$subexpression$1\", \"symbols\": [\"kw_nowait\"], \"postprocess\": x => track(x, {type: 'nowait'})},\n    {\"name\": \"select_skip$subexpression$1\", \"symbols\": [\"kw_skip\", \"kw_locked\"], \"postprocess\": x => track(x, {type: 'skip locked'})},\n    {\"name\": \"select_skip\", \"symbols\": [\"select_skip$subexpression$1\"]},\n    {\"name\": \"select_order_by$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_order\") ? {type: \"kw_order\"} : kw_order), \"kw_by\"]},\n    {\"name\": \"select_order_by$ebnf$1\", \"symbols\": []},\n    {\"name\": \"select_order_by$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"select_order_by_expr\"], \"postprocess\": last},\n    {\"name\": \"select_order_by$ebnf$1\", \"symbols\": [\"select_order_by$ebnf$1\", \"select_order_by$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_order_by\", \"symbols\": [\"select_order_by$subexpression$1\", \"select_order_by_expr\", \"select_order_by$ebnf$1\"], \"postprocess\":  ([_, head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"select_order_by_expr$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_asc\") ? {type: \"kw_asc\"} : kw_asc)]},\n    {\"name\": \"select_order_by_expr$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_desc\") ? {type: \"kw_desc\"} : kw_desc)]},\n    {\"name\": \"select_order_by_expr$ebnf$1\", \"symbols\": [\"select_order_by_expr$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"select_order_by_expr$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_order_by_expr$ebnf$2$subexpression$1$subexpression$1\", \"symbols\": [\"kw_first\"]},\n    {\"name\": \"select_order_by_expr$ebnf$2$subexpression$1$subexpression$1\", \"symbols\": [\"kw_last\"]},\n    {\"name\": \"select_order_by_expr$ebnf$2$subexpression$1\", \"symbols\": [\"kw_nulls\", \"select_order_by_expr$ebnf$2$subexpression$1$subexpression$1\"], \"postprocess\": last},\n    {\"name\": \"select_order_by_expr$ebnf$2\", \"symbols\": [\"select_order_by_expr$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"select_order_by_expr$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"select_order_by_expr\", \"symbols\": [\"expr\", \"select_order_by_expr$ebnf$1\", \"select_order_by_expr$ebnf$2\"], \"postprocess\":  x => track(x, {\n            by: x[0],\n            ...x[1] && {order: toStr(x[1]).toUpperCase()},\n            ...x[2] && {nulls: toStr(x[2]).toUpperCase()},\n        }) },\n    {\"name\": \"expr\", \"symbols\": [\"expr_nostar\"], \"postprocess\": unwrap},\n    {\"name\": \"expr\", \"symbols\": [\"expr_star\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_nostar\", \"symbols\": [\"expr_paren\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_nostar\", \"symbols\": [\"expr_or\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_paren$subexpression$1\", \"symbols\": [\"expr_or_select\"]},\n    {\"name\": \"expr_paren$subexpression$1\", \"symbols\": [\"expr_list_many\"]},\n    {\"name\": \"expr_paren\", \"symbols\": [\"lparen\", \"expr_paren$subexpression$1\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"expr_or$macrocall$2$macrocall$2\", \"symbols\": [(lexerAny.has(\"kw_or\") ? {type: \"kw_or\"} : kw_or)]},\n    {\"name\": \"expr_or$macrocall$2$macrocall$1\", \"symbols\": [\"expr_or$macrocall$2$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_or$macrocall$2\", \"symbols\": [\"expr_or$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_or$macrocall$3\", \"symbols\": [\"expr_or\"]},\n    {\"name\": \"expr_or$macrocall$4\", \"symbols\": [\"expr_and\"]},\n    {\"name\": \"expr_or$macrocall$1$subexpression$1\", \"symbols\": [\"expr_or$macrocall$3\"]},\n    {\"name\": \"expr_or$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_or$macrocall$1$subexpression$2\", \"symbols\": [\"expr_or$macrocall$4\"]},\n    {\"name\": \"expr_or$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_or$macrocall$1\", \"symbols\": [\"expr_or$macrocall$1$subexpression$1\", \"expr_or$macrocall$2\", \"expr_or$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_or$macrocall$1\", \"symbols\": [\"expr_or$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_or\", \"symbols\": [\"expr_or$macrocall$1\"]},\n    {\"name\": \"expr_and$macrocall$2$macrocall$2\", \"symbols\": [(lexerAny.has(\"kw_and\") ? {type: \"kw_and\"} : kw_and)]},\n    {\"name\": \"expr_and$macrocall$2$macrocall$1\", \"symbols\": [\"expr_and$macrocall$2$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_and$macrocall$2\", \"symbols\": [\"expr_and$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_and$macrocall$3\", \"symbols\": [\"expr_and\"]},\n    {\"name\": \"expr_and$macrocall$4\", \"symbols\": [\"expr_not\"]},\n    {\"name\": \"expr_and$macrocall$1$subexpression$1\", \"symbols\": [\"expr_and$macrocall$3\"]},\n    {\"name\": \"expr_and$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_and$macrocall$1$subexpression$2\", \"symbols\": [\"expr_and$macrocall$4\"]},\n    {\"name\": \"expr_and$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_and$macrocall$1\", \"symbols\": [\"expr_and$macrocall$1$subexpression$1\", \"expr_and$macrocall$2\", \"expr_and$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_and$macrocall$1\", \"symbols\": [\"expr_and$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_and\", \"symbols\": [\"expr_and$macrocall$1\"]},\n    {\"name\": \"expr_not$macrocall$2$macrocall$2\", \"symbols\": [(lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not)]},\n    {\"name\": \"expr_not$macrocall$2$macrocall$1\", \"symbols\": [\"expr_not$macrocall$2$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_not$macrocall$2\", \"symbols\": [\"expr_not$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_not$macrocall$3\", \"symbols\": [\"expr_not\"]},\n    {\"name\": \"expr_not$macrocall$4\", \"symbols\": [\"expr_eq\"]},\n    {\"name\": \"expr_not$macrocall$1$subexpression$1\", \"symbols\": [\"expr_not$macrocall$3\"]},\n    {\"name\": \"expr_not$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_not$macrocall$1\", \"symbols\": [\"expr_not$macrocall$2\", \"expr_not$macrocall$1$subexpression$1\"], \"postprocess\":  x => track(x, {\n            type: 'unary',\n            ...unwrap(x[0]),\n            operand: unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_not$macrocall$1\", \"symbols\": [\"expr_not$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_not\", \"symbols\": [\"expr_not$macrocall$1\"]},\n    {\"name\": \"expr_eq$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_eq\") ? {type: \"op_eq\"} : op_eq)]},\n    {\"name\": \"expr_eq$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_neq\") ? {type: \"op_neq\"} : op_neq)]},\n    {\"name\": \"expr_eq$macrocall$2$macrocall$2\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$2$subexpression$1\"]},\n    {\"name\": \"expr_eq$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$2\"]},\n    {\"name\": \"expr_eq$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_eq$macrocall$2$macrocall$1\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_eq$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_eq$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\":  x => track(x, {\n            op:  (toStr(x[4], ' ') || '<error>').toUpperCase(),\n            opSchema: toStr(x[2]),\n        })},\n    {\"name\": \"expr_eq$macrocall$2\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_eq$macrocall$3\", \"symbols\": [\"expr_eq\"]},\n    {\"name\": \"expr_eq$macrocall$4\", \"symbols\": [\"expr_is\"]},\n    {\"name\": \"expr_eq$macrocall$1$subexpression$1\", \"symbols\": [\"expr_eq$macrocall$3\"]},\n    {\"name\": \"expr_eq$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_eq$macrocall$1$subexpression$2\", \"symbols\": [\"expr_eq$macrocall$4\"]},\n    {\"name\": \"expr_eq$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_eq$macrocall$1\", \"symbols\": [\"expr_eq$macrocall$1$subexpression$1\", \"expr_eq$macrocall$2\", \"expr_eq$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_eq$macrocall$1\", \"symbols\": [\"expr_eq$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_eq\", \"symbols\": [\"expr_eq$macrocall$1\"]},\n    {\"name\": \"expr_star\", \"symbols\": [\"star\"], \"postprocess\": x => track(x, { type: 'ref', name: '*' })},\n    {\"name\": \"expr_is$subexpression$1\", \"symbols\": [\"expr_is\"]},\n    {\"name\": \"expr_is$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_is$subexpression$2\", \"symbols\": [(lexerAny.has(\"kw_isnull\") ? {type: \"kw_isnull\"} : kw_isnull)]},\n    {\"name\": \"expr_is$subexpression$2\", \"symbols\": [(lexerAny.has(\"kw_is\") ? {type: \"kw_is\"} : kw_is), (lexerAny.has(\"kw_null\") ? {type: \"kw_null\"} : kw_null)]},\n    {\"name\": \"expr_is\", \"symbols\": [\"expr_is$subexpression$1\", \"expr_is$subexpression$2\"], \"postprocess\": x => track(x, { type: 'unary', op: 'IS NULL', operand: unwrap(x[0]) })},\n    {\"name\": \"expr_is$subexpression$3\", \"symbols\": [\"expr_is\"]},\n    {\"name\": \"expr_is$subexpression$3\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_is$subexpression$4\", \"symbols\": [(lexerAny.has(\"kw_notnull\") ? {type: \"kw_notnull\"} : kw_notnull)]},\n    {\"name\": \"expr_is$subexpression$4\", \"symbols\": [(lexerAny.has(\"kw_is\") ? {type: \"kw_is\"} : kw_is), \"kw_not_null\"]},\n    {\"name\": \"expr_is\", \"symbols\": [\"expr_is$subexpression$3\", \"expr_is$subexpression$4\"], \"postprocess\": x => track(x, { type: 'unary', op: 'IS NOT NULL', operand: unwrap(x[0])})},\n    {\"name\": \"expr_is$subexpression$5\", \"symbols\": [\"expr_is\"]},\n    {\"name\": \"expr_is$subexpression$5\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_is$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not)], \"postprocess\": id},\n    {\"name\": \"expr_is$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_is$subexpression$6\", \"symbols\": [(lexerAny.has(\"kw_true\") ? {type: \"kw_true\"} : kw_true)]},\n    {\"name\": \"expr_is$subexpression$6\", \"symbols\": [(lexerAny.has(\"kw_false\") ? {type: \"kw_false\"} : kw_false)]},\n    {\"name\": \"expr_is\", \"symbols\": [\"expr_is$subexpression$5\", (lexerAny.has(\"kw_is\") ? {type: \"kw_is\"} : kw_is), \"expr_is$ebnf$1\", \"expr_is$subexpression$6\"], \"postprocess\":  x => track(x, {\n            type: 'unary',\n            op: 'IS ' + flattenStr([x[2], x[3]])\n                .join(' ')\n                .toUpperCase(),\n            operand: unwrap(x[0]),\n        }) },\n    {\"name\": \"expr_is\", \"symbols\": [\"expr_compare\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_compare$macrocall$2$macrocall$2\", \"symbols\": [(lexerAny.has(\"op_compare\") ? {type: \"op_compare\"} : op_compare)]},\n    {\"name\": \"expr_compare$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_compare$macrocall$2$macrocall$2\"]},\n    {\"name\": \"expr_compare$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_compare$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_compare$macrocall$2$macrocall$1\", \"symbols\": [\"expr_compare$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_compare$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_compare$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\":  x => track(x, {\n            op:  (toStr(x[4], ' ') || '<error>').toUpperCase(),\n            opSchema: toStr(x[2]),\n        })},\n    {\"name\": \"expr_compare$macrocall$2\", \"symbols\": [\"expr_compare$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_compare$macrocall$3\", \"symbols\": [\"expr_compare\"]},\n    {\"name\": \"expr_compare$macrocall$4\", \"symbols\": [\"expr_range\"]},\n    {\"name\": \"expr_compare$macrocall$1$subexpression$1\", \"symbols\": [\"expr_compare$macrocall$3\"]},\n    {\"name\": \"expr_compare$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_compare$macrocall$1$subexpression$2\", \"symbols\": [\"expr_compare$macrocall$4\"]},\n    {\"name\": \"expr_compare$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_compare$macrocall$1\", \"symbols\": [\"expr_compare$macrocall$1$subexpression$1\", \"expr_compare$macrocall$2\", \"expr_compare$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_compare$macrocall$1\", \"symbols\": [\"expr_compare$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_compare\", \"symbols\": [\"expr_compare$macrocall$1\"]},\n    {\"name\": \"expr_range$macrocall$2\", \"symbols\": [\"ops_between\"]},\n    {\"name\": \"expr_range$macrocall$3\", \"symbols\": [(lexerAny.has(\"kw_and\") ? {type: \"kw_and\"} : kw_and)]},\n    {\"name\": \"expr_range$macrocall$4\", \"symbols\": [\"expr_range\"]},\n    {\"name\": \"expr_range$macrocall$5\", \"symbols\": [\"expr_others\"]},\n    {\"name\": \"expr_range$macrocall$1$subexpression$1\", \"symbols\": [\"expr_range$macrocall$4\"]},\n    {\"name\": \"expr_range$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_range$macrocall$1$subexpression$2\", \"symbols\": [\"expr_range$macrocall$4\"]},\n    {\"name\": \"expr_range$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_range$macrocall$1$subexpression$3\", \"symbols\": [\"expr_range$macrocall$5\"]},\n    {\"name\": \"expr_range$macrocall$1$subexpression$3\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_range$macrocall$1\", \"symbols\": [\"expr_range$macrocall$1$subexpression$1\", \"expr_range$macrocall$2\", \"expr_range$macrocall$1$subexpression$2\", \"expr_range$macrocall$3\", \"expr_range$macrocall$1$subexpression$3\"], \"postprocess\":  x => track(x, {\n            type: 'ternary',\n            value: unwrap(x[0]),\n            lo: unwrap(x[2]),\n            hi: unwrap(x[4]),\n            op: (flattenStr(x[1]).join(' ') || '<error>').toUpperCase(),\n        }) },\n    {\"name\": \"expr_range$macrocall$1\", \"symbols\": [\"expr_range$macrocall$5\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_range\", \"symbols\": [\"expr_range$macrocall$1\"]},\n    {\"name\": \"expr_others$macrocall$2$macrocall$2\", \"symbols\": [(lexerAny.has(\"ops_others\") ? {type: \"ops_others\"} : ops_others)]},\n    {\"name\": \"expr_others$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_others$macrocall$2$macrocall$2\"]},\n    {\"name\": \"expr_others$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_others$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_others$macrocall$2$macrocall$1\", \"symbols\": [\"expr_others$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_others$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_others$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\":  x => track(x, {\n            op:  (toStr(x[4], ' ') || '<error>').toUpperCase(),\n            opSchema: toStr(x[2]),\n        })},\n    {\"name\": \"expr_others$macrocall$2\", \"symbols\": [\"expr_others$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_others$macrocall$3\", \"symbols\": [\"expr_others\"]},\n    {\"name\": \"expr_others$macrocall$4\", \"symbols\": [\"expr_like\"]},\n    {\"name\": \"expr_others$macrocall$1$subexpression$1\", \"symbols\": [\"expr_others$macrocall$3\"]},\n    {\"name\": \"expr_others$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_others$macrocall$1$subexpression$2\", \"symbols\": [\"expr_others$macrocall$4\"]},\n    {\"name\": \"expr_others$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_others$macrocall$1\", \"symbols\": [\"expr_others$macrocall$1$subexpression$1\", \"expr_others$macrocall$2\", \"expr_others$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_others$macrocall$1\", \"symbols\": [\"expr_others$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_others\", \"symbols\": [\"expr_others$macrocall$1\"]},\n    {\"name\": \"expr_like$macrocall$2$macrocall$2\", \"symbols\": [\"ops_like\"]},\n    {\"name\": \"expr_like$macrocall$2$macrocall$1\", \"symbols\": [\"expr_like$macrocall$2$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_like$macrocall$2\", \"symbols\": [\"expr_like$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_like$macrocall$3\", \"symbols\": [\"expr_like\"]},\n    {\"name\": \"expr_like$macrocall$4\", \"symbols\": [\"expr_in\"]},\n    {\"name\": \"expr_like$macrocall$1$subexpression$1\", \"symbols\": [\"expr_like$macrocall$3\"]},\n    {\"name\": \"expr_like$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_like$macrocall$1$subexpression$2\", \"symbols\": [\"expr_like$macrocall$4\"]},\n    {\"name\": \"expr_like$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_like$macrocall$1\", \"symbols\": [\"expr_like$macrocall$1$subexpression$1\", \"expr_like$macrocall$2\", \"expr_like$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_like$macrocall$1\", \"symbols\": [\"expr_like$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_like\", \"symbols\": [\"expr_like$macrocall$1\"]},\n    {\"name\": \"expr_in$macrocall$2$macrocall$2\", \"symbols\": [\"ops_in\"]},\n    {\"name\": \"expr_in$macrocall$2$macrocall$1\", \"symbols\": [\"expr_in$macrocall$2$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_in$macrocall$2\", \"symbols\": [\"expr_in$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_in$macrocall$3\", \"symbols\": [\"expr_in\"]},\n    {\"name\": \"expr_in$macrocall$4\", \"symbols\": [\"expr_add\"]},\n    {\"name\": \"expr_in$macrocall$1$subexpression$1\", \"symbols\": [\"expr_in$macrocall$3\"]},\n    {\"name\": \"expr_in$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_in$macrocall$1$subexpression$2\", \"symbols\": [\"expr_in$macrocall$4\"]},\n    {\"name\": \"expr_in$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_in$macrocall$1\", \"symbols\": [\"expr_in$macrocall$1$subexpression$1\", \"expr_in$macrocall$2\", \"expr_in$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_in$macrocall$1\", \"symbols\": [\"expr_in$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_in\", \"symbols\": [\"expr_in$macrocall$1\"]},\n    {\"name\": \"expr_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_plus\") ? {type: \"op_plus\"} : op_plus)]},\n    {\"name\": \"expr_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_minus\") ? {type: \"op_minus\"} : op_minus)]},\n    {\"name\": \"expr_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_additive\") ? {type: \"op_additive\"} : op_additive)]},\n    {\"name\": \"expr_add$macrocall$2$macrocall$2\", \"symbols\": [\"expr_add$macrocall$2$macrocall$2$subexpression$1\"]},\n    {\"name\": \"expr_add$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_add$macrocall$2$macrocall$2\"]},\n    {\"name\": \"expr_add$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_add$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_add$macrocall$2$macrocall$1\", \"symbols\": [\"expr_add$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_add$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_add$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\":  x => track(x, {\n            op:  (toStr(x[4], ' ') || '<error>').toUpperCase(),\n            opSchema: toStr(x[2]),\n        })},\n    {\"name\": \"expr_add$macrocall$2\", \"symbols\": [\"expr_add$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_add$macrocall$3\", \"symbols\": [\"expr_add\"]},\n    {\"name\": \"expr_add$macrocall$4\", \"symbols\": [\"expr_mult\"]},\n    {\"name\": \"expr_add$macrocall$1$subexpression$1\", \"symbols\": [\"expr_add$macrocall$3\"]},\n    {\"name\": \"expr_add$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_add$macrocall$1$subexpression$2\", \"symbols\": [\"expr_add$macrocall$4\"]},\n    {\"name\": \"expr_add$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_add$macrocall$1\", \"symbols\": [\"expr_add$macrocall$1$subexpression$1\", \"expr_add$macrocall$2\", \"expr_add$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_add$macrocall$1\", \"symbols\": [\"expr_add$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_add\", \"symbols\": [\"expr_add$macrocall$1\"]},\n    {\"name\": \"expr_mult$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"star\") ? {type: \"star\"} : star)]},\n    {\"name\": \"expr_mult$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_div\") ? {type: \"op_div\"} : op_div)]},\n    {\"name\": \"expr_mult$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_mod\") ? {type: \"op_mod\"} : op_mod)]},\n    {\"name\": \"expr_mult$macrocall$2$macrocall$2\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$2$subexpression$1\"]},\n    {\"name\": \"expr_mult$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$2\"]},\n    {\"name\": \"expr_mult$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_mult$macrocall$2$macrocall$1\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_mult$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_mult$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\":  x => track(x, {\n            op:  (toStr(x[4], ' ') || '<error>').toUpperCase(),\n            opSchema: toStr(x[2]),\n        })},\n    {\"name\": \"expr_mult$macrocall$2\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_mult$macrocall$3\", \"symbols\": [\"expr_mult\"]},\n    {\"name\": \"expr_mult$macrocall$4\", \"symbols\": [\"expr_exp\"]},\n    {\"name\": \"expr_mult$macrocall$1$subexpression$1\", \"symbols\": [\"expr_mult$macrocall$3\"]},\n    {\"name\": \"expr_mult$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_mult$macrocall$1$subexpression$2\", \"symbols\": [\"expr_mult$macrocall$4\"]},\n    {\"name\": \"expr_mult$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_mult$macrocall$1\", \"symbols\": [\"expr_mult$macrocall$1$subexpression$1\", \"expr_mult$macrocall$2\", \"expr_mult$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_mult$macrocall$1\", \"symbols\": [\"expr_mult$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_mult\", \"symbols\": [\"expr_mult$macrocall$1\"]},\n    {\"name\": \"expr_exp$macrocall$2$macrocall$2\", \"symbols\": [(lexerAny.has(\"op_exp\") ? {type: \"op_exp\"} : op_exp)]},\n    {\"name\": \"expr_exp$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_exp$macrocall$2$macrocall$2\"]},\n    {\"name\": \"expr_exp$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_exp$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_exp$macrocall$2$macrocall$1\", \"symbols\": [\"expr_exp$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_exp$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_exp$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\":  x => track(x, {\n            op:  (toStr(x[4], ' ') || '<error>').toUpperCase(),\n            opSchema: toStr(x[2]),\n        })},\n    {\"name\": \"expr_exp$macrocall$2\", \"symbols\": [\"expr_exp$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_exp$macrocall$3\", \"symbols\": [\"expr_exp\"]},\n    {\"name\": \"expr_exp$macrocall$4\", \"symbols\": [\"expr_unary_add\"]},\n    {\"name\": \"expr_exp$macrocall$1$subexpression$1\", \"symbols\": [\"expr_exp$macrocall$3\"]},\n    {\"name\": \"expr_exp$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_exp$macrocall$1$subexpression$2\", \"symbols\": [\"expr_exp$macrocall$4\"]},\n    {\"name\": \"expr_exp$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_exp$macrocall$1\", \"symbols\": [\"expr_exp$macrocall$1$subexpression$1\", \"expr_exp$macrocall$2\", \"expr_exp$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_exp$macrocall$1\", \"symbols\": [\"expr_exp$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_exp\", \"symbols\": [\"expr_exp$macrocall$1\"]},\n    {\"name\": \"expr_unary_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_plus\") ? {type: \"op_plus\"} : op_plus)]},\n    {\"name\": \"expr_unary_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_minus\") ? {type: \"op_minus\"} : op_minus)]},\n    {\"name\": \"expr_unary_add$macrocall$2$macrocall$2\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$2$subexpression$1\"]},\n    {\"name\": \"expr_unary_add$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$2\"]},\n    {\"name\": \"expr_unary_add$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_unary_add$macrocall$2$macrocall$1\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_unary_add$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_unary_add$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\":  x => track(x, {\n            op:  (toStr(x[4], ' ') || '<error>').toUpperCase(),\n            opSchema: toStr(x[2]),\n        })},\n    {\"name\": \"expr_unary_add$macrocall$2\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_unary_add$macrocall$3\", \"symbols\": [\"expr_unary_add\"]},\n    {\"name\": \"expr_unary_add$macrocall$4\", \"symbols\": [\"expr_various_constructs\"]},\n    {\"name\": \"expr_unary_add$macrocall$1$subexpression$1\", \"symbols\": [\"expr_unary_add$macrocall$3\"]},\n    {\"name\": \"expr_unary_add$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_unary_add$macrocall$1\", \"symbols\": [\"expr_unary_add$macrocall$2\", \"expr_unary_add$macrocall$1$subexpression$1\"], \"postprocess\":  x => track(x, {\n            type: 'unary',\n            ...unwrap(x[0]),\n            operand: unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_unary_add$macrocall$1\", \"symbols\": [\"expr_unary_add$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_unary_add\", \"symbols\": [\"expr_unary_add$macrocall$1\"]},\n    {\"name\": \"expr_various_constructs$macrocall$2$macrocall$2\", \"symbols\": [\"various_binaries\"]},\n    {\"name\": \"expr_various_constructs$macrocall$2$macrocall$1\", \"symbols\": [\"expr_various_constructs$macrocall$2$macrocall$2\"], \"postprocess\":  x => track(x, {\n            op: (toStr(x, ' ') || '<error>').toUpperCase()\n        }) },\n    {\"name\": \"expr_various_constructs$macrocall$2\", \"symbols\": [\"expr_various_constructs$macrocall$2$macrocall$1\"]},\n    {\"name\": \"expr_various_constructs$macrocall$3\", \"symbols\": [\"expr_various_constructs\"]},\n    {\"name\": \"expr_various_constructs$macrocall$4\", \"symbols\": [\"expr_array_index\"]},\n    {\"name\": \"expr_various_constructs$macrocall$1$subexpression$1\", \"symbols\": [\"expr_various_constructs$macrocall$3\"]},\n    {\"name\": \"expr_various_constructs$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_various_constructs$macrocall$1$subexpression$2\", \"symbols\": [\"expr_various_constructs$macrocall$4\"]},\n    {\"name\": \"expr_various_constructs$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_various_constructs$macrocall$1\", \"symbols\": [\"expr_various_constructs$macrocall$1$subexpression$1\", \"expr_various_constructs$macrocall$2\", \"expr_various_constructs$macrocall$1$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'binary',\n            left: unwrap(x[0]),\n            right: unwrap(x[2]),\n            ...unwrap(x[1]),\n        }) },\n    {\"name\": \"expr_various_constructs$macrocall$1\", \"symbols\": [\"expr_various_constructs$macrocall$4\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_various_constructs\", \"symbols\": [\"expr_various_constructs$macrocall$1\"]},\n    {\"name\": \"expr_array_index$subexpression$1\", \"symbols\": [\"expr_array_index\"]},\n    {\"name\": \"expr_array_index$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_array_index\", \"symbols\": [\"expr_array_index$subexpression$1\", (lexerAny.has(\"lbracket\") ? {type: \"lbracket\"} : lbracket), \"expr_nostar\", (lexerAny.has(\"rbracket\") ? {type: \"rbracket\"} : rbracket)], \"postprocess\":  x => track(x, {\n            type: 'arrayIndex',\n            array: unwrap(x[0]),\n            index: unwrap(x[2]),\n        }) },\n    {\"name\": \"expr_array_index\", \"symbols\": [\"expr_member\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_member$subexpression$1\", \"symbols\": [\"expr_member\"]},\n    {\"name\": \"expr_member$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_member$subexpression$2\", \"symbols\": [\"string\"]},\n    {\"name\": \"expr_member$subexpression$2\", \"symbols\": [\"int\"]},\n    {\"name\": \"expr_member\", \"symbols\": [\"expr_member$subexpression$1\", \"ops_member\", \"expr_member$subexpression$2\"], \"postprocess\":  x => track(x, {\n            type: 'member',\n            operand: unwrap(x[0]),\n            op: x[1],\n            member: unwrap(x[2])\n        }) },\n    {\"name\": \"expr_member$subexpression$3\", \"symbols\": [\"expr_member\"]},\n    {\"name\": \"expr_member$subexpression$3\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"expr_member\", \"symbols\": [\"expr_member$subexpression$3\", (lexerAny.has(\"op_cast\") ? {type: \"op_cast\"} : op_cast), \"data_type\"], \"postprocess\":  x => track(x, {\n            type: 'cast',\n            operand: unwrap(x[0]),\n            to: x[2],\n        }) },\n    {\"name\": \"expr_member\", \"symbols\": [(lexerAny.has(\"kw_cast\") ? {type: \"kw_cast\"} : kw_cast), \"lparen\", \"expr_nostar\", (lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"data_type\", \"rparen\"], \"postprocess\":  x => track(x, {\n            type: 'cast',\n            operand: unwrap(x[2]),\n            to: x[4],\n        }) },\n    {\"name\": \"expr_member\", \"symbols\": [\"data_type\", \"string\"], \"postprocess\":  x => track(x, {\n            type: 'cast',\n            operand: track(x[1], {\n                type: 'string',\n                value: unbox(x[1]),\n            }),\n            to: unbox(x[0]),\n        }) },\n    {\"name\": \"expr_member\", \"symbols\": [\"expr_dot\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_dot$subexpression$1\", \"symbols\": [\"word\"]},\n    {\"name\": \"expr_dot$subexpression$1\", \"symbols\": [\"star\"]},\n    {\"name\": \"expr_dot\", \"symbols\": [\"qname\", (lexerAny.has(\"dot\") ? {type: \"dot\"} : dot), \"expr_dot$subexpression$1\"], \"postprocess\":  x => track(x, {\n            type: 'ref',\n            table: unwrap(x[0]),\n            name: toStr(x[2])\n        }) },\n    {\"name\": \"expr_dot\", \"symbols\": [\"expr_final\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_final\", \"symbols\": [\"expr_basic\"]},\n    {\"name\": \"expr_final\", \"symbols\": [\"expr_primary\"]},\n    {\"name\": \"expr_basic\", \"symbols\": [\"expr_special_calls\"]},\n    {\"name\": \"expr_basic\", \"symbols\": [\"expr_call\"]},\n    {\"name\": \"expr_basic\", \"symbols\": [\"expr_array\"]},\n    {\"name\": \"expr_basic\", \"symbols\": [\"expr_case\"]},\n    {\"name\": \"expr_basic\", \"symbols\": [\"expr_extract\"]},\n    {\"name\": \"expr_basic\", \"symbols\": [\"word\"], \"postprocess\":  x => track(x, {\n            type: 'ref',\n            name: unwrap(x[0]),\n        }) },\n    {\"name\": \"expr_array$ebnf$1\", \"symbols\": [\"expr_subarray_items\"], \"postprocess\": id},\n    {\"name\": \"expr_array$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_array\", \"symbols\": [(lexerAny.has(\"kw_array\") ? {type: \"kw_array\"} : kw_array), (lexerAny.has(\"lbracket\") ? {type: \"lbracket\"} : lbracket), \"expr_array$ebnf$1\", (lexerAny.has(\"rbracket\") ? {type: \"rbracket\"} : rbracket)], \"postprocess\":  x => track(x, {\n            type: 'array',\n            expressions: x[2] || [],\n        }) },\n    {\"name\": \"expr_array\", \"symbols\": [(lexerAny.has(\"kw_array\") ? {type: \"kw_array\"} : kw_array), \"lparen\", \"selection\", \"rparen\"], \"postprocess\":  x => track(x, {\n            type: 'array select',\n            select: unwrap(x[2]),\n        }) },\n    {\"name\": \"expr_subarray$ebnf$1\", \"symbols\": [\"expr_subarray_items\"], \"postprocess\": id},\n    {\"name\": \"expr_subarray$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_subarray\", \"symbols\": [(lexerAny.has(\"lbracket\") ? {type: \"lbracket\"} : lbracket), \"expr_subarray$ebnf$1\", (lexerAny.has(\"rbracket\") ? {type: \"rbracket\"} : rbracket)], \"postprocess\": get(1)},\n    {\"name\": \"expr_subarray_items$macrocall$2\", \"symbols\": [\"expr_list_item\"]},\n    {\"name\": \"expr_subarray_items$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expr_subarray_items$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"expr_subarray_items$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"expr_subarray_items$macrocall$1$ebnf$1\", \"symbols\": [\"expr_subarray_items$macrocall$1$ebnf$1\", \"expr_subarray_items$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expr_subarray_items$macrocall$1\", \"symbols\": [\"expr_subarray_items$macrocall$2\", \"expr_subarray_items$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"expr_subarray_items\", \"symbols\": [\"expr_subarray_items$macrocall$1\"], \"postprocess\": x => x[0].map(unwrap)},\n    {\"name\": \"expr_subarray_items$macrocall$4\", \"symbols\": [\"expr_subarray\"]},\n    {\"name\": \"expr_subarray_items$macrocall$3$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expr_subarray_items$macrocall$3$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"expr_subarray_items$macrocall$4\"], \"postprocess\": last},\n    {\"name\": \"expr_subarray_items$macrocall$3$ebnf$1\", \"symbols\": [\"expr_subarray_items$macrocall$3$ebnf$1\", \"expr_subarray_items$macrocall$3$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expr_subarray_items$macrocall$3\", \"symbols\": [\"expr_subarray_items$macrocall$4\", \"expr_subarray_items$macrocall$3$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"expr_subarray_items\", \"symbols\": [\"expr_subarray_items$macrocall$3\"], \"postprocess\":  (x: any) => {\n            return x[0].map((v: any[]) => {\n                return track(v, {\n                    type: 'array',\n                    expressions: v[0].map(unwrap),\n                })\n            })\n        } },\n    {\"name\": \"expr_function_call$ebnf$1\", \"symbols\": [\"expr_list_raw\"], \"postprocess\": id},\n    {\"name\": \"expr_function_call$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_function_call\", \"symbols\": [\"expr_fn_name\", \"lparen\", \"expr_function_call$ebnf$1\", \"rparen\"], \"postprocess\":  x => track(x, {\n            type: 'call',\n            function: unwrap(x[0]),\n            args: x[2] || [],\n        }) },\n    {\"name\": \"expr_call$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_all\") ? {type: \"kw_all\"} : kw_all)]},\n    {\"name\": \"expr_call$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_distinct\") ? {type: \"kw_distinct\"} : kw_distinct)]},\n    {\"name\": \"expr_call$ebnf$1\", \"symbols\": [\"expr_call$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"expr_call$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_call$ebnf$2\", \"symbols\": [\"expr_list_raw\"], \"postprocess\": id},\n    {\"name\": \"expr_call$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_call$ebnf$3\", \"symbols\": [\"select_order_by\"], \"postprocess\": id},\n    {\"name\": \"expr_call$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_call$ebnf$4$subexpression$1\", \"symbols\": [\"kw_filter\", \"lparen\", (lexerAny.has(\"kw_where\") ? {type: \"kw_where\"} : kw_where), \"expr\", \"rparen\"], \"postprocess\": get(3)},\n    {\"name\": \"expr_call$ebnf$4\", \"symbols\": [\"expr_call$ebnf$4$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"expr_call$ebnf$4\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_call$ebnf$5\", \"symbols\": [\"expr_call_over\"], \"postprocess\": id},\n    {\"name\": \"expr_call$ebnf$5\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_call\", \"symbols\": [\"expr_fn_name\", \"lparen\", \"expr_call$ebnf$1\", \"expr_call$ebnf$2\", \"expr_call$ebnf$3\", \"rparen\", \"expr_call$ebnf$4\", \"expr_call$ebnf$5\"], \"postprocess\":  x => track(x, {\n            type: 'call',\n            function: unwrap(x[0]),\n            ...x[2] && {distinct: toStr(x[2])},\n            args: x[3] || [],\n            ...x[4] && {orderBy: x[4]},\n            ...x[6] && {filter: unwrap(x[6])},\n            ...x[7] && {over: unwrap(x[7])},\n        }) },\n    {\"name\": \"expr_call_over$ebnf$1$subexpression$1\", \"symbols\": [\"kw_partition\", \"kw_by\", \"expr_list_raw\"], \"postprocess\": last},\n    {\"name\": \"expr_call_over$ebnf$1\", \"symbols\": [\"expr_call_over$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"expr_call_over$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_call_over$ebnf$2\", \"symbols\": [\"select_order_by\"], \"postprocess\": id},\n    {\"name\": \"expr_call_over$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_call_over\", \"symbols\": [\"kw_over\", \"lparen\", \"expr_call_over$ebnf$1\", \"expr_call_over$ebnf$2\", \"rparen\"], \"postprocess\":  x => track(x, {\n            ...x[2] && { partitionBy: x[2] },\n            ...x[3] && { orderBy: x[3] },\n        }) },\n    {\"name\": \"expr_extract$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('extract')},\n    {\"name\": \"expr_extract\", \"symbols\": [\"expr_extract$subexpression$1\", \"lparen\", \"word\", (lexerAny.has(\"kw_from\") ? {type: \"kw_from\"} : kw_from), \"expr\", \"rparen\"], \"postprocess\":  x => track(x, {\n            type: 'extract',\n            field: asName(x[2]),\n            from: x[4],\n        }) },\n    {\"name\": \"expr_primary\", \"symbols\": [\"float\"], \"postprocess\": x => track(x, { type: 'numeric', value: unbox(x[0]) })},\n    {\"name\": \"expr_primary\", \"symbols\": [\"int\"], \"postprocess\": x => track(x, { type: 'integer', value: unbox(x[0]) })},\n    {\"name\": \"expr_primary\", \"symbols\": [\"string\"], \"postprocess\": x => track(x, { type: 'string', value: unbox(x[0]) })},\n    {\"name\": \"expr_primary\", \"symbols\": [(lexerAny.has(\"kw_true\") ? {type: \"kw_true\"} : kw_true)], \"postprocess\": x => track(x, { type: 'boolean', value: true })},\n    {\"name\": \"expr_primary\", \"symbols\": [(lexerAny.has(\"kw_false\") ? {type: \"kw_false\"} : kw_false)], \"postprocess\": x => track(x, { type: 'boolean', value: false })},\n    {\"name\": \"expr_primary\", \"symbols\": [(lexerAny.has(\"kw_null\") ? {type: \"kw_null\"} : kw_null)], \"postprocess\": x => track(x, { type: 'null' })},\n    {\"name\": \"expr_primary\", \"symbols\": [\"value_keyword\"], \"postprocess\": x => track(x, {type: 'keyword', keyword: toStr(x) })},\n    {\"name\": \"expr_primary\", \"symbols\": [(lexerAny.has(\"qparam\") ? {type: \"qparam\"} : qparam)], \"postprocess\": x => track(x, { type: 'parameter', name: toStr(x[0]) })},\n    {\"name\": \"expr_primary\", \"symbols\": [(lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default)], \"postprocess\": x => track(x, { type: 'default'})},\n    {\"name\": \"ops_like\", \"symbols\": [\"ops_like_keywors\"]},\n    {\"name\": \"ops_like\", \"symbols\": [\"ops_like_operators\"]},\n    {\"name\": \"ops_like_keywors$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not)], \"postprocess\": id},\n    {\"name\": \"ops_like_keywors$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"ops_like_keywors$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_like\") ? {type: \"kw_like\"} : kw_like)]},\n    {\"name\": \"ops_like_keywors$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_ilike\") ? {type: \"kw_ilike\"} : kw_ilike)]},\n    {\"name\": \"ops_like_keywors\", \"symbols\": [\"ops_like_keywors$ebnf$1\", \"ops_like_keywors$subexpression$1\"]},\n    {\"name\": \"ops_like_operators$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_like\") ? {type: \"op_like\"} : op_like)], \"postprocess\": () => 'LIKE'},\n    {\"name\": \"ops_like_operators\", \"symbols\": [\"ops_like_operators$subexpression$1\"]},\n    {\"name\": \"ops_like_operators$subexpression$2\", \"symbols\": [(lexerAny.has(\"op_ilike\") ? {type: \"op_ilike\"} : op_ilike)], \"postprocess\": () => 'ILIKE'},\n    {\"name\": \"ops_like_operators\", \"symbols\": [\"ops_like_operators$subexpression$2\"]},\n    {\"name\": \"ops_like_operators$subexpression$3\", \"symbols\": [(lexerAny.has(\"op_not_like\") ? {type: \"op_not_like\"} : op_not_like)], \"postprocess\": () => 'NOT LIKE'},\n    {\"name\": \"ops_like_operators\", \"symbols\": [\"ops_like_operators$subexpression$3\"]},\n    {\"name\": \"ops_like_operators$subexpression$4\", \"symbols\": [(lexerAny.has(\"op_not_ilike\") ? {type: \"op_not_ilike\"} : op_not_ilike)], \"postprocess\": () => 'NOT ILIKE'},\n    {\"name\": \"ops_like_operators\", \"symbols\": [\"ops_like_operators$subexpression$4\"]},\n    {\"name\": \"ops_in$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not)], \"postprocess\": id},\n    {\"name\": \"ops_in$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"ops_in\", \"symbols\": [\"ops_in$ebnf$1\", (lexerAny.has(\"kw_in\") ? {type: \"kw_in\"} : kw_in)]},\n    {\"name\": \"ops_between$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not)], \"postprocess\": id},\n    {\"name\": \"ops_between$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"ops_between\", \"symbols\": [\"ops_between$ebnf$1\", \"kw_between\"]},\n    {\"name\": \"ops_member$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_member\") ? {type: \"op_member\"} : op_member)]},\n    {\"name\": \"ops_member$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_membertext\") ? {type: \"op_membertext\"} : op_membertext)]},\n    {\"name\": \"ops_member\", \"symbols\": [\"ops_member$subexpression$1\"], \"postprocess\": x => unwrap(x)?.value},\n    {\"name\": \"expr_list_item\", \"symbols\": [\"expr_or_select\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_list_item\", \"symbols\": [\"expr_star\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_list_raw$macrocall$2\", \"symbols\": [\"expr_list_item\"]},\n    {\"name\": \"expr_list_raw$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expr_list_raw$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"expr_list_raw$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"expr_list_raw$macrocall$1$ebnf$1\", \"symbols\": [\"expr_list_raw$macrocall$1$ebnf$1\", \"expr_list_raw$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expr_list_raw$macrocall$1\", \"symbols\": [\"expr_list_raw$macrocall$2\", \"expr_list_raw$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"expr_list_raw\", \"symbols\": [\"expr_list_raw$macrocall$1\"], \"postprocess\": ([x]) => x.map(unwrap)},\n    {\"name\": \"expr_list_raw_many$macrocall$2\", \"symbols\": [\"expr_list_item\"]},\n    {\"name\": \"expr_list_raw_many$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"expr_list_raw_many$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"expr_list_raw_many$macrocall$1$ebnf$1\", \"symbols\": [\"expr_list_raw_many$macrocall$1$ebnf$1$subexpression$1\"]},\n    {\"name\": \"expr_list_raw_many$macrocall$1$ebnf$1$subexpression$2\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"expr_list_raw_many$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"expr_list_raw_many$macrocall$1$ebnf$1\", \"symbols\": [\"expr_list_raw_many$macrocall$1$ebnf$1\", \"expr_list_raw_many$macrocall$1$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expr_list_raw_many$macrocall$1\", \"symbols\": [\"expr_list_raw_many$macrocall$2\", \"expr_list_raw_many$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"expr_list_raw_many\", \"symbols\": [\"expr_list_raw_many$macrocall$1\"], \"postprocess\": ([x]) => x.map(unwrap)},\n    {\"name\": \"expr_or_select\", \"symbols\": [\"expr_nostar\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_or_select\", \"symbols\": [\"selection\"], \"postprocess\": unwrap},\n    {\"name\": \"expr_list_many\", \"symbols\": [\"expr_list_raw_many\"], \"postprocess\":  x => track(x, {\n            type: 'list',\n            expressions: x[0],\n        }) },\n    {\"name\": \"expr_case$ebnf$1\", \"symbols\": [\"expr_nostar\"], \"postprocess\": id},\n    {\"name\": \"expr_case$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_case$ebnf$2\", \"symbols\": []},\n    {\"name\": \"expr_case$ebnf$2\", \"symbols\": [\"expr_case$ebnf$2\", \"expr_case_whens\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expr_case$ebnf$3\", \"symbols\": [\"expr_case_else\"], \"postprocess\": id},\n    {\"name\": \"expr_case$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_case\", \"symbols\": [(lexerAny.has(\"kw_case\") ? {type: \"kw_case\"} : kw_case), \"expr_case$ebnf$1\", \"expr_case$ebnf$2\", \"expr_case$ebnf$3\", (lexerAny.has(\"kw_end\") ? {type: \"kw_end\"} : kw_end)], \"postprocess\":  x => track(x, {\n            type: 'case',\n            value: x[1],\n            whens: x[2],\n            else: x[3],\n        }) },\n    {\"name\": \"expr_case_whens\", \"symbols\": [(lexerAny.has(\"kw_when\") ? {type: \"kw_when\"} : kw_when), \"expr_nostar\", (lexerAny.has(\"kw_then\") ? {type: \"kw_then\"} : kw_then), \"expr_nostar\"], \"postprocess\":  x => track(x, {\n            when: x[1],\n            value: x[3],\n        }) },\n    {\"name\": \"expr_case_else\", \"symbols\": [(lexerAny.has(\"kw_else\") ? {type: \"kw_else\"} : kw_else), \"expr_nostar\"], \"postprocess\": last},\n    {\"name\": \"expr_fn_name$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [\"word\", (lexerAny.has(\"dot\") ? {type: \"dot\"} : dot)]},\n    {\"name\": \"expr_fn_name$subexpression$1$ebnf$1\", \"symbols\": [\"expr_fn_name$subexpression$1$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"expr_fn_name$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"expr_fn_name$subexpression$1\", \"symbols\": [\"expr_fn_name$subexpression$1$ebnf$1\", \"word_or_keyword\"], \"postprocess\":  x => track(x, {\n            name: unbox(unwrap(x[1])),\n            ...x[0] && { schema: toStr(x[0][0]) },\n        })  },\n    {\"name\": \"expr_fn_name\", \"symbols\": [\"expr_fn_name$subexpression$1\"]},\n    {\"name\": \"expr_fn_name$subexpression$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_any\") ? {type: \"kw_any\"} : kw_any)]},\n    {\"name\": \"expr_fn_name$subexpression$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_some\") ? {type: \"kw_some\"} : kw_some)]},\n    {\"name\": \"expr_fn_name$subexpression$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_all\") ? {type: \"kw_all\"} : kw_all)]},\n    {\"name\": \"expr_fn_name$subexpression$2\", \"symbols\": [\"expr_fn_name$subexpression$2$subexpression$1\"], \"postprocess\":  x => track(x, {\n            name: toStr(unwrap(x)),\n        })},\n    {\"name\": \"expr_fn_name\", \"symbols\": [\"expr_fn_name$subexpression$2\"]},\n    {\"name\": \"word_or_keyword\", \"symbols\": [\"word\"]},\n    {\"name\": \"word_or_keyword\", \"symbols\": [\"value_keyword\"], \"postprocess\": x => box(x, toStr(x))},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_catalog\") ? {type: \"kw_current_catalog\"} : kw_current_catalog)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_date\") ? {type: \"kw_current_date\"} : kw_current_date)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_role\") ? {type: \"kw_current_role\"} : kw_current_role)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_schema\") ? {type: \"kw_current_schema\"} : kw_current_schema)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_timestamp\") ? {type: \"kw_current_timestamp\"} : kw_current_timestamp)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_time\") ? {type: \"kw_current_time\"} : kw_current_time)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_localtimestamp\") ? {type: \"kw_localtimestamp\"} : kw_localtimestamp)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_localtime\") ? {type: \"kw_localtime\"} : kw_localtime)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_session_user\") ? {type: \"kw_session_user\"} : kw_session_user)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_user\") ? {type: \"kw_user\"} : kw_user)]},\n    {\"name\": \"value_keyword\", \"symbols\": [(lexerAny.has(\"kw_current_user\") ? {type: \"kw_current_user\"} : kw_current_user)]},\n    {\"name\": \"expr_special_calls\", \"symbols\": [\"spe_overlay\"]},\n    {\"name\": \"expr_special_calls\", \"symbols\": [\"spe_substring\"]},\n    {\"name\": \"spe_overlay$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('overlay')},\n    {\"name\": \"spe_overlay$subexpression$2\", \"symbols\": [(lexerAny.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"expr_nostar\"]},\n    {\"name\": \"spe_overlay$subexpression$3\", \"symbols\": [(lexerAny.has(\"kw_placing\") ? {type: \"kw_placing\"} : kw_placing), \"expr_nostar\"]},\n    {\"name\": \"spe_overlay$subexpression$4\", \"symbols\": [(lexerAny.has(\"kw_from\") ? {type: \"kw_from\"} : kw_from), \"expr_nostar\"]},\n    {\"name\": \"spe_overlay$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_for\") ? {type: \"kw_for\"} : kw_for), \"expr_nostar\"]},\n    {\"name\": \"spe_overlay$ebnf$1\", \"symbols\": [\"spe_overlay$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"spe_overlay$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"spe_overlay\", \"symbols\": [\"spe_overlay$subexpression$1\", \"spe_overlay$subexpression$2\", \"spe_overlay$subexpression$3\", \"spe_overlay$subexpression$4\", \"spe_overlay$ebnf$1\", (lexerAny.has(\"rparen\") ? {type: \"rparen\"} : rparen)], \"postprocess\":  x => track(x, {\n            type: 'overlay',\n            value: x[1][1],\n            placing: x[2][1],\n            from: x[3][1],\n            ...x[4] && {for: x[4][1]},\n        }) },\n    {\"name\": \"spe_substring$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('substring')},\n    {\"name\": \"spe_substring$subexpression$2\", \"symbols\": [(lexerAny.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"expr_nostar\"]},\n    {\"name\": \"spe_substring$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_from\") ? {type: \"kw_from\"} : kw_from), \"expr_nostar\"]},\n    {\"name\": \"spe_substring$ebnf$1\", \"symbols\": [\"spe_substring$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"spe_substring$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"spe_substring$ebnf$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_for\") ? {type: \"kw_for\"} : kw_for), \"expr_nostar\"]},\n    {\"name\": \"spe_substring$ebnf$2\", \"symbols\": [\"spe_substring$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"spe_substring$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"spe_substring\", \"symbols\": [\"spe_substring$subexpression$1\", \"spe_substring$subexpression$2\", \"spe_substring$ebnf$1\", \"spe_substring$ebnf$2\", (lexerAny.has(\"rparen\") ? {type: \"rparen\"} : rparen)], \"postprocess\":  x => track(x, {\n            type: 'substring',\n            value: x[1][1],\n            ...x[2] && {from: x[2][1]},\n            ...x[3] && {for: x[3][1]},\n        }) },\n    {\"name\": \"various_binaries\", \"symbols\": [\"kw_at\", \"kw_time\", \"kw_zone\"], \"postprocess\": () => 'AT TIME ZONE'},\n    {\"name\": \"createtable_statement$ebnf$1\", \"symbols\": [\"createtable_modifiers\"], \"postprocess\": id},\n    {\"name\": \"createtable_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createtable_statement$ebnf$2\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id},\n    {\"name\": \"createtable_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createtable_statement$ebnf$3\", \"symbols\": [\"createtable_opts\"], \"postprocess\": id},\n    {\"name\": \"createtable_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createtable_statement\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create), \"createtable_statement$ebnf$1\", (lexerAny.has(\"kw_table\") ? {type: \"kw_table\"} : kw_table), \"createtable_statement$ebnf$2\", \"qname\", \"lparen\", \"createtable_declarationlist\", \"rparen\", \"createtable_statement$ebnf$3\"], \"postprocess\":  x => {\n        \n            const cols = x[6].filter((v: any) => 'kind' in v);\n            const constraints = x[6].filter((v: any) => !('kind' in v));\n        \n            return track(x, {\n                type: 'create table',\n                ... !!x[3] ? { ifNotExists: true } : {},\n                name: x[4],\n                columns: cols,\n                ...unwrap(x[1]),\n                ...constraints.length ? { constraints } : {},\n                ...last(x),\n            });\n        } },\n    {\"name\": \"createtable_modifiers\", \"symbols\": [\"kw_unlogged\"], \"postprocess\": x => x[0] ? { unlogged: true } : {}},\n    {\"name\": \"createtable_modifiers\", \"symbols\": [\"m_locglob\"]},\n    {\"name\": \"createtable_modifiers\", \"symbols\": [\"m_tmp\"]},\n    {\"name\": \"createtable_modifiers\", \"symbols\": [\"m_locglob\", \"m_tmp\"], \"postprocess\": ([a, b]) => ({...a, ...b})},\n    {\"name\": \"m_locglob$subexpression$1\", \"symbols\": [\"kw_local\"]},\n    {\"name\": \"m_locglob$subexpression$1\", \"symbols\": [\"kw_global\"]},\n    {\"name\": \"m_locglob\", \"symbols\": [\"m_locglob$subexpression$1\"], \"postprocess\": x => ({ locality: toStr(x)})},\n    {\"name\": \"m_tmp$subexpression$1\", \"symbols\": [\"kw_temp\"]},\n    {\"name\": \"m_tmp$subexpression$1\", \"symbols\": [\"kw_temporary\"]},\n    {\"name\": \"m_tmp\", \"symbols\": [\"m_tmp$subexpression$1\"], \"postprocess\": x => ({ temporary: true})},\n    {\"name\": \"createtable_declarationlist$ebnf$1\", \"symbols\": []},\n    {\"name\": \"createtable_declarationlist$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"createtable_declaration\"], \"postprocess\": last},\n    {\"name\": \"createtable_declarationlist$ebnf$1\", \"symbols\": [\"createtable_declarationlist$ebnf$1\", \"createtable_declarationlist$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createtable_declarationlist\", \"symbols\": [\"createtable_declaration\", \"createtable_declarationlist$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"createtable_declaration$subexpression$1\", \"symbols\": [\"createtable_constraint\"]},\n    {\"name\": \"createtable_declaration$subexpression$1\", \"symbols\": [\"createtable_column\"]},\n    {\"name\": \"createtable_declaration$subexpression$1\", \"symbols\": [\"createtable_like\"]},\n    {\"name\": \"createtable_declaration\", \"symbols\": [\"createtable_declaration$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"createtable_constraint$macrocall$2\", \"symbols\": [\"createtable_constraint_def\"]},\n    {\"name\": \"createtable_constraint$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_constraint\") ? {type: \"kw_constraint\"} : kw_constraint), \"word\"]},\n    {\"name\": \"createtable_constraint$macrocall$1$ebnf$1\", \"symbols\": [\"createtable_constraint$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"createtable_constraint$macrocall$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createtable_constraint$macrocall$1\", \"symbols\": [\"createtable_constraint$macrocall$1$ebnf$1\", \"createtable_constraint$macrocall$2\"], \"postprocess\":  x => {\n            const name = x[0] && asName(x[0][1]);\n            if (!name) {\n                return track(x, unwrap(x[1]));\n            }\n            return track(x, {\n                constraintName: name,\n                ...unwrap(x[1]),\n            })\n        } },\n    {\"name\": \"createtable_constraint\", \"symbols\": [\"createtable_constraint$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"createtable_constraint_def\", \"symbols\": [\"createtable_constraint_def_unique\"]},\n    {\"name\": \"createtable_constraint_def\", \"symbols\": [\"createtable_constraint_def_check\"]},\n    {\"name\": \"createtable_constraint_def\", \"symbols\": [\"createtable_constraint_foreignkey\"]},\n    {\"name\": \"createtable_constraint_def_unique$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_unique\") ? {type: \"kw_unique\"} : kw_unique)]},\n    {\"name\": \"createtable_constraint_def_unique$subexpression$1\", \"symbols\": [\"kw_primary_key\"]},\n    {\"name\": \"createtable_constraint_def_unique\", \"symbols\": [\"createtable_constraint_def_unique$subexpression$1\", \"lparen\", \"createtable_collist\", \"rparen\"], \"postprocess\":  x => track(x, {\n            type: toStr(x[0], ' '),\n            columns: x[2].map(asName),\n        }) },\n    {\"name\": \"createtable_constraint_def_check\", \"symbols\": [(lexerAny.has(\"kw_check\") ? {type: \"kw_check\"} : kw_check), \"expr_paren\"], \"postprocess\":  x => track(x, {\n            type: 'check',\n            expr: unwrap(x[1]),\n        }) },\n    {\"name\": \"createtable_constraint_foreignkey\", \"symbols\": [(lexerAny.has(\"kw_foreign\") ? {type: \"kw_foreign\"} : kw_foreign), \"kw_key\", \"collist_paren\", \"createtable_references\"], \"postprocess\":  (x: any[]) => {\n            return track(x, {\n                type: 'foreign key',\n                localColumns: x[2].map(asName),\n                ...x[3],\n            });\n        } },\n    {\"name\": \"createtable_references$ebnf$1\", \"symbols\": []},\n    {\"name\": \"createtable_references$ebnf$1\", \"symbols\": [\"createtable_references$ebnf$1\", \"createtable_constraint_foreignkey_onsometing\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createtable_references\", \"symbols\": [(lexerAny.has(\"kw_references\") ? {type: \"kw_references\"} : kw_references), \"table_ref\", \"collist_paren\", \"createtable_references$ebnf$1\"], \"postprocess\":  (x: any[]) => {\n            return track(x, {\n                foreignTable: unwrap(x[1]),\n                foreignColumns: x[2].map(asName),\n                ...x[3].reduce((a: any, b: any) => ({...a, ...b}), {}),\n            });\n        } },\n    {\"name\": \"createtable_constraint_foreignkey_onsometing\", \"symbols\": [(lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on), \"kw_delete\", \"createtable_constraint_on_action\"], \"postprocess\": x => track(x, {onDelete:  last(x)})},\n    {\"name\": \"createtable_constraint_foreignkey_onsometing\", \"symbols\": [(lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on), \"kw_update\", \"createtable_constraint_on_action\"], \"postprocess\": x => track(x, {onUpdate: last(x)})},\n    {\"name\": \"createtable_constraint_foreignkey_onsometing$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_full\") ? {type: \"kw_full\"} : kw_full)]},\n    {\"name\": \"createtable_constraint_foreignkey_onsometing$subexpression$1\", \"symbols\": [\"kw_partial\"]},\n    {\"name\": \"createtable_constraint_foreignkey_onsometing$subexpression$1\", \"symbols\": [\"kw_simple\"]},\n    {\"name\": \"createtable_constraint_foreignkey_onsometing\", \"symbols\": [\"kw_match\", \"createtable_constraint_foreignkey_onsometing$subexpression$1\"], \"postprocess\": x => track(x, {match: toStr(last(x))})},\n    {\"name\": \"createtable_constraint_on_action$subexpression$1\", \"symbols\": [\"kw_cascade\"]},\n    {\"name\": \"createtable_constraint_on_action$subexpression$1$subexpression$1\", \"symbols\": [\"kw_no\", \"kw_action\"]},\n    {\"name\": \"createtable_constraint_on_action$subexpression$1\", \"symbols\": [\"createtable_constraint_on_action$subexpression$1$subexpression$1\"]},\n    {\"name\": \"createtable_constraint_on_action$subexpression$1\", \"symbols\": [\"kw_restrict\"]},\n    {\"name\": \"createtable_constraint_on_action$subexpression$1$subexpression$2\", \"symbols\": [(lexerAny.has(\"kw_null\") ? {type: \"kw_null\"} : kw_null)]},\n    {\"name\": \"createtable_constraint_on_action$subexpression$1$subexpression$2\", \"symbols\": [(lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default)]},\n    {\"name\": \"createtable_constraint_on_action$subexpression$1\", \"symbols\": [\"kw_set\", \"createtable_constraint_on_action$subexpression$1$subexpression$2\"]},\n    {\"name\": \"createtable_constraint_on_action\", \"symbols\": [\"createtable_constraint_on_action$subexpression$1\"], \"postprocess\": x => toStr(x, ' ')},\n    {\"name\": \"createtable_collist$ebnf$1\", \"symbols\": []},\n    {\"name\": \"createtable_collist$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"ident\"], \"postprocess\": last},\n    {\"name\": \"createtable_collist$ebnf$1\", \"symbols\": [\"createtable_collist$ebnf$1\", \"createtable_collist$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createtable_collist\", \"symbols\": [\"ident\", \"createtable_collist$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"createtable_column$ebnf$1\", \"symbols\": [\"createtable_collate\"], \"postprocess\": id},\n    {\"name\": \"createtable_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createtable_column$ebnf$2\", \"symbols\": []},\n    {\"name\": \"createtable_column$ebnf$2\", \"symbols\": [\"createtable_column$ebnf$2\", \"createtable_column_constraint\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createtable_column\", \"symbols\": [\"word\", \"data_type\", \"createtable_column$ebnf$1\", \"createtable_column$ebnf$2\"], \"postprocess\":  x => {\n            return track(x, {\n                kind: 'column',\n                name: asName(x[0]),\n                dataType: x[1],\n                ...x[2] ? { collate: x[2][1] }: {},\n                ...x[3] && x[3].length ? { constraints: x[3] }: {},\n            })\n        } },\n    {\"name\": \"createtable_like$ebnf$1\", \"symbols\": []},\n    {\"name\": \"createtable_like$ebnf$1\", \"symbols\": [\"createtable_like$ebnf$1\", \"createtable_like_opt\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createtable_like\", \"symbols\": [(lexerAny.has(\"kw_like\") ? {type: \"kw_like\"} : kw_like), \"qname\", \"createtable_like$ebnf$1\"], \"postprocess\":  x => track(x, {\n                kind: 'like table',\n                like: x[1],\n                options: x[2],\n        }) },\n    {\"name\": \"createtable_like_opt$subexpression$1\", \"symbols\": [\"kw_including\"]},\n    {\"name\": \"createtable_like_opt$subexpression$1\", \"symbols\": [\"kw_excluding\"]},\n    {\"name\": \"createtable_like_opt\", \"symbols\": [\"createtable_like_opt$subexpression$1\", \"createtable_like_opt_val\"], \"postprocess\":  x => track(x, {\n            verb: toStr(x[0]),\n            option: toStr(x[1]),\n        }) },\n    {\"name\": \"createtable_like_opt_val\", \"symbols\": [\"word\"], \"postprocess\": anyKw('defaults', 'constraints', 'indexes', 'storage', 'comments')},\n    {\"name\": \"createtable_like_opt_val\", \"symbols\": [(lexerAny.has(\"kw_all\") ? {type: \"kw_all\"} : kw_all)]},\n    {\"name\": \"createtable_column_constraint$macrocall$2\", \"symbols\": [\"createtable_column_constraint_def\"]},\n    {\"name\": \"createtable_column_constraint$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_constraint\") ? {type: \"kw_constraint\"} : kw_constraint), \"word\"]},\n    {\"name\": \"createtable_column_constraint$macrocall$1$ebnf$1\", \"symbols\": [\"createtable_column_constraint$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"createtable_column_constraint$macrocall$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createtable_column_constraint$macrocall$1\", \"symbols\": [\"createtable_column_constraint$macrocall$1$ebnf$1\", \"createtable_column_constraint$macrocall$2\"], \"postprocess\":  x => {\n            const name = x[0] && asName(x[0][1]);\n            if (!name) {\n                return track(x, unwrap(x[1]));\n            }\n            return track(x, {\n                constraintName: name,\n                ...unwrap(x[1]),\n            })\n        } },\n    {\"name\": \"createtable_column_constraint\", \"symbols\": [\"createtable_column_constraint$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"createtable_column_constraint_def\", \"symbols\": [(lexerAny.has(\"kw_unique\") ? {type: \"kw_unique\"} : kw_unique)], \"postprocess\": x => track(x, { type: 'unique' })},\n    {\"name\": \"createtable_column_constraint_def\", \"symbols\": [\"kw_primary_key\"], \"postprocess\": x => track(x, { type: 'primary key' })},\n    {\"name\": \"createtable_column_constraint_def\", \"symbols\": [\"kw_not_null\"], \"postprocess\": x => track(x, { type: 'not null' })},\n    {\"name\": \"createtable_column_constraint_def\", \"symbols\": [(lexerAny.has(\"kw_null\") ? {type: \"kw_null\"} : kw_null)], \"postprocess\": x => track(x, { type: 'null' })},\n    {\"name\": \"createtable_column_constraint_def\", \"symbols\": [(lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default), \"expr\"], \"postprocess\": x => track(x, { type: 'default', default: unwrap(x[1]) })},\n    {\"name\": \"createtable_column_constraint_def\", \"symbols\": [(lexerAny.has(\"kw_check\") ? {type: \"kw_check\"} : kw_check), \"expr_paren\"], \"postprocess\": x => track(x, { type: 'check', expr: unwrap(x[1]) })},\n    {\"name\": \"createtable_column_constraint_def\", \"symbols\": [\"createtable_references\"], \"postprocess\": x => track(x, { type: 'reference', ...unwrap(x) })},\n    {\"name\": \"createtable_column_constraint_def\", \"symbols\": [\"altercol_generated\"]},\n    {\"name\": \"createtable_collate\", \"symbols\": [(lexerAny.has(\"kw_collate\") ? {type: \"kw_collate\"} : kw_collate), \"qualified_name\"]},\n    {\"name\": \"createtable_opts$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('inherits')},\n    {\"name\": \"createtable_opts$macrocall$2\", \"symbols\": [\"qname\"]},\n    {\"name\": \"createtable_opts$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"createtable_opts$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"createtable_opts$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"createtable_opts$macrocall$1$ebnf$1\", \"symbols\": [\"createtable_opts$macrocall$1$ebnf$1\", \"createtable_opts$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createtable_opts$macrocall$1\", \"symbols\": [\"createtable_opts$macrocall$2\", \"createtable_opts$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"createtable_opts\", \"symbols\": [\"createtable_opts$subexpression$1\", \"lparen\", \"createtable_opts$macrocall$1\", \"rparen\"], \"postprocess\": x => track(x, { inherits: x[2] })},\n    {\"name\": \"createindex_statement$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_unique\") ? {type: \"kw_unique\"} : kw_unique)], \"postprocess\": id},\n    {\"name\": \"createindex_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_statement$ebnf$2\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id},\n    {\"name\": \"createindex_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_statement$ebnf$3\", \"symbols\": [\"word\"], \"postprocess\": id},\n    {\"name\": \"createindex_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_statement$ebnf$4$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_using\") ? {type: \"kw_using\"} : kw_using), \"ident\"], \"postprocess\": last},\n    {\"name\": \"createindex_statement$ebnf$4\", \"symbols\": [\"createindex_statement$ebnf$4$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"createindex_statement$ebnf$4\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_statement$ebnf$5\", \"symbols\": [\"createindex_with\"], \"postprocess\": id},\n    {\"name\": \"createindex_statement$ebnf$5\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_statement$ebnf$6\", \"symbols\": [\"createindex_tblspace\"], \"postprocess\": id},\n    {\"name\": \"createindex_statement$ebnf$6\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_statement$ebnf$7\", \"symbols\": [\"createindex_predicate\"], \"postprocess\": id},\n    {\"name\": \"createindex_statement$ebnf$7\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_statement\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create), \"createindex_statement$ebnf$1\", \"kw_index\", \"createindex_statement$ebnf$2\", \"createindex_statement$ebnf$3\", (lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on), \"table_ref\", \"createindex_statement$ebnf$4\", \"lparen\", \"createindex_expressions\", \"rparen\", \"createindex_statement$ebnf$5\", \"createindex_statement$ebnf$6\", \"createindex_statement$ebnf$7\"], \"postprocess\":  x => track(x, {\n            type: 'create index',\n            ...x[1] && { unique: true },\n            ...x[3] && { ifNotExists: true },\n            ...x[4] && { indexName: asName(x[4]) },\n            table: x[6],\n            ...x[7] && { using: asName(x[7]) },\n            expressions: x[9],\n            ...x[11] && { with: x[11] },\n            ...x[12] && { tablespace: unwrap(x[12]) },\n            ...x[13] && { where: unwrap(x[13]) },\n        }) },\n    {\"name\": \"createindex_expressions$ebnf$1\", \"symbols\": []},\n    {\"name\": \"createindex_expressions$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"createindex_expression\"], \"postprocess\": last},\n    {\"name\": \"createindex_expressions$ebnf$1\", \"symbols\": [\"createindex_expressions$ebnf$1\", \"createindex_expressions$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createindex_expressions\", \"symbols\": [\"createindex_expression\", \"createindex_expressions$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"createindex_expression$subexpression$1\", \"symbols\": [\"expr_basic\"]},\n    {\"name\": \"createindex_expression$subexpression$1\", \"symbols\": [\"expr_paren\"]},\n    {\"name\": \"createindex_expression$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_collate\") ? {type: \"kw_collate\"} : kw_collate), \"qualified_name\"], \"postprocess\": last},\n    {\"name\": \"createindex_expression$ebnf$1\", \"symbols\": [\"createindex_expression$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"createindex_expression$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_expression$ebnf$2\", \"symbols\": [\"qualified_name\"], \"postprocess\": id},\n    {\"name\": \"createindex_expression$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_expression$ebnf$3$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_asc\") ? {type: \"kw_asc\"} : kw_asc)]},\n    {\"name\": \"createindex_expression$ebnf$3$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_desc\") ? {type: \"kw_desc\"} : kw_desc)]},\n    {\"name\": \"createindex_expression$ebnf$3\", \"symbols\": [\"createindex_expression$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"createindex_expression$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_expression$ebnf$4$subexpression$1$subexpression$1\", \"symbols\": [\"kw_first\"]},\n    {\"name\": \"createindex_expression$ebnf$4$subexpression$1$subexpression$1\", \"symbols\": [\"kw_last\"]},\n    {\"name\": \"createindex_expression$ebnf$4$subexpression$1\", \"symbols\": [\"kw_nulls\", \"createindex_expression$ebnf$4$subexpression$1$subexpression$1\"], \"postprocess\": last},\n    {\"name\": \"createindex_expression$ebnf$4\", \"symbols\": [\"createindex_expression$ebnf$4$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"createindex_expression$ebnf$4\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createindex_expression\", \"symbols\": [\"createindex_expression$subexpression$1\", \"createindex_expression$ebnf$1\", \"createindex_expression$ebnf$2\", \"createindex_expression$ebnf$3\", \"createindex_expression$ebnf$4\"], \"postprocess\":  x => track(x, {\n            expression: unwrap(x[0]),\n            ...x[1] && { collate: unwrap(x[1]) },\n            ...x[2] && { opclass: unwrap(x[2]) },\n            ...x[3] && { order: unwrap(x[3]).value },\n            ...x[4] && { nulls: unwrap(x[4]) },\n        }) },\n    {\"name\": \"createindex_predicate\", \"symbols\": [(lexerAny.has(\"kw_where\") ? {type: \"kw_where\"} : kw_where), \"expr\"], \"postprocess\": last},\n    {\"name\": \"createindex_with$macrocall$2\", \"symbols\": [\"createindex_with_item\"]},\n    {\"name\": \"createindex_with$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"createindex_with$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"createindex_with$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"createindex_with$macrocall$1$ebnf$1\", \"symbols\": [\"createindex_with$macrocall$1$ebnf$1\", \"createindex_with$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createindex_with$macrocall$1\", \"symbols\": [\"createindex_with$macrocall$2\", \"createindex_with$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"createindex_with\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with), \"lparen\", \"createindex_with$macrocall$1\", \"rparen\"], \"postprocess\": get(2)},\n    {\"name\": \"createindex_with_item$subexpression$1\", \"symbols\": [\"string\"]},\n    {\"name\": \"createindex_with_item$subexpression$1\", \"symbols\": [\"int\"]},\n    {\"name\": \"createindex_with_item\", \"symbols\": [\"ident\", (lexerAny.has(\"op_eq\") ? {type: \"op_eq\"} : op_eq), \"createindex_with_item$subexpression$1\"], \"postprocess\": x => track(x, { parameter: toStr(x[0]), value: unwrap(x[2]).toString() })},\n    {\"name\": \"createindex_tblspace\", \"symbols\": [\"kw_tablespace\", \"ident\"], \"postprocess\": last},\n    {\"name\": \"createextension_statement$ebnf$1\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id},\n    {\"name\": \"createextension_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createextension_statement$ebnf$2\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with)], \"postprocess\": id},\n    {\"name\": \"createextension_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createextension_statement$ebnf$3$subexpression$1\", \"symbols\": [\"kw_schema\", \"word\"], \"postprocess\": last},\n    {\"name\": \"createextension_statement$ebnf$3\", \"symbols\": [\"createextension_statement$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"createextension_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createextension_statement$ebnf$4$subexpression$1\", \"symbols\": [\"kw_version\", \"string\"], \"postprocess\": last},\n    {\"name\": \"createextension_statement$ebnf$4\", \"symbols\": [\"createextension_statement$ebnf$4$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"createextension_statement$ebnf$4\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createextension_statement$ebnf$5$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_from\") ? {type: \"kw_from\"} : kw_from), \"string\"], \"postprocess\": last},\n    {\"name\": \"createextension_statement$ebnf$5\", \"symbols\": [\"createextension_statement$ebnf$5$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"createextension_statement$ebnf$5\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createextension_statement\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create), \"kw_extension\", \"createextension_statement$ebnf$1\", \"word\", \"createextension_statement$ebnf$2\", \"createextension_statement$ebnf$3\", \"createextension_statement$ebnf$4\", \"createextension_statement$ebnf$5\"], \"postprocess\":  x => track(x, {\n            type: 'create extension',\n            ... !!x[2] ? { ifNotExists: true } : {},\n            extension: asName(x[3]),\n            ... !!x[5] ? { schema: asName(x[5]) } : {},\n            ... !!x[6] ? { version: asLit(x[6]) } : {},\n            ... !!x[7] ? { from: asLit(x[7]) } : {},\n        }) },\n    {\"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_start_transaction\"]},\n    {\"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_commit\"]},\n    {\"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_rollback\"]},\n    {\"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_tablespace\"]},\n    {\"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_set\"]},\n    {\"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_show\"]},\n    {\"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_begin\"]},\n    {\"name\": \"simplestatements_start_transaction$subexpression$1\", \"symbols\": [\"kw_start\", \"kw_transaction\"]},\n    {\"name\": \"simplestatements_start_transaction\", \"symbols\": [\"simplestatements_start_transaction$subexpression$1\"], \"postprocess\": x => track(x, { type: 'start transaction' })},\n    {\"name\": \"simplestatements_commit\", \"symbols\": [\"kw_commit\"], \"postprocess\": x => track(x, { type: 'commit' })},\n    {\"name\": \"simplestatements_rollback\", \"symbols\": [\"kw_rollback\"], \"postprocess\": x => track(x, { type: 'rollback' })},\n    {\"name\": \"simplestatements_tablespace\", \"symbols\": [\"kw_tablespace\", \"word\"], \"postprocess\": x => track(x, {\n           type: 'tablespace',\n           tablespace: asName(x[1]),\n        }) },\n    {\"name\": \"simplestatements_set$subexpression$1\", \"symbols\": [\"simplestatements_set_simple\"]},\n    {\"name\": \"simplestatements_set$subexpression$1\", \"symbols\": [\"simplestatements_set_timezone\"]},\n    {\"name\": \"simplestatements_set\", \"symbols\": [\"kw_set\", \"simplestatements_set$subexpression$1\"], \"postprocess\": last},\n    {\"name\": \"simplestatements_set_timezone\", \"symbols\": [\"kw_time\", \"kw_zone\", \"simplestatements_set_timezone_val\"], \"postprocess\": x => track(x, { type: 'set timezone', to: x[2] })},\n    {\"name\": \"simplestatements_set_timezone_val$subexpression$1\", \"symbols\": [\"string\"]},\n    {\"name\": \"simplestatements_set_timezone_val$subexpression$1\", \"symbols\": [\"int\"]},\n    {\"name\": \"simplestatements_set_timezone_val\", \"symbols\": [\"simplestatements_set_timezone_val$subexpression$1\"], \"postprocess\": x => track(x, { type: 'value', value: unwrap(x[0]) })},\n    {\"name\": \"simplestatements_set_timezone_val\", \"symbols\": [\"kw_local\"], \"postprocess\": x => track(x, { type: 'local'})},\n    {\"name\": \"simplestatements_set_timezone_val\", \"symbols\": [(lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default)], \"postprocess\": x => track(x, { type: 'default'})},\n    {\"name\": \"simplestatements_set_timezone_val\", \"symbols\": [\"kw_interval\", \"string\", \"kw_hour\", (lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to), \"kw_minute\"], \"postprocess\": x => track(x, { type: 'interval', value: unbox(x[1]) })},\n    {\"name\": \"simplestatements_set_simple$subexpression$1\", \"symbols\": [(lexerAny.has(\"op_eq\") ? {type: \"op_eq\"} : op_eq)]},\n    {\"name\": \"simplestatements_set_simple$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to)]},\n    {\"name\": \"simplestatements_set_simple\", \"symbols\": [\"ident\", \"simplestatements_set_simple$subexpression$1\", \"simplestatements_set_val\"], \"postprocess\":  x  => track(x, {\n            type: 'set',\n            variable: asName(x[0]),\n            set: unbox(x[2]),\n        }) },\n    {\"name\": \"simplestatements_set_val\", \"symbols\": [\"simplestatements_set_val_raw\"], \"postprocess\": unwrap},\n    {\"name\": \"simplestatements_set_val\", \"symbols\": [(lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default)], \"postprocess\": x => track(x, {type: 'default'})},\n    {\"name\": \"simplestatements_set_val$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"simplestatements_set_val_raw\"]},\n    {\"name\": \"simplestatements_set_val$ebnf$1\", \"symbols\": [\"simplestatements_set_val$ebnf$1$subexpression$1\"]},\n    {\"name\": \"simplestatements_set_val$ebnf$1$subexpression$2\", \"symbols\": [\"comma\", \"simplestatements_set_val_raw\"]},\n    {\"name\": \"simplestatements_set_val$ebnf$1\", \"symbols\": [\"simplestatements_set_val$ebnf$1\", \"simplestatements_set_val$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"simplestatements_set_val\", \"symbols\": [\"simplestatements_set_val_raw\", \"simplestatements_set_val$ebnf$1\"], \"postprocess\":  x => track(x, {\n                type: 'list',\n                values: [x[0], ...(x[1] || [])]\n        }) },\n    {\"name\": \"simplestatements_set_val_raw$subexpression$1\", \"symbols\": [\"string\"]},\n    {\"name\": \"simplestatements_set_val_raw$subexpression$1\", \"symbols\": [\"int\"]},\n    {\"name\": \"simplestatements_set_val_raw\", \"symbols\": [\"simplestatements_set_val_raw$subexpression$1\"], \"postprocess\": x => track(x, { type: 'value', value: unwrap(x) })},\n    {\"name\": \"simplestatements_set_val_raw$subexpression$2\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)]},\n    {\"name\": \"simplestatements_set_val_raw$subexpression$2\", \"symbols\": [(lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on)]},\n    {\"name\": \"simplestatements_set_val_raw$subexpression$2\", \"symbols\": [(lexerAny.has(\"kw_true\") ? {type: \"kw_true\"} : kw_true)]},\n    {\"name\": \"simplestatements_set_val_raw$subexpression$2\", \"symbols\": [(lexerAny.has(\"kw_false\") ? {type: \"kw_false\"} : kw_false)]},\n    {\"name\": \"simplestatements_set_val_raw\", \"symbols\": [\"simplestatements_set_val_raw$subexpression$2\"], \"postprocess\": x => track(x, { type: 'identifier', name: unwrap(x).value })},\n    {\"name\": \"simplestatements_set_val_raw\", \"symbols\": [(lexerAny.has(\"quoted_word\") ? {type: \"quoted_word\"} : quoted_word)], \"postprocess\": x => track(x, { type: 'identifier', doubleQuoted: true, name: unwrap(x).value })},\n    {\"name\": \"simplestatements_show\", \"symbols\": [\"kw_show\", \"ident\"], \"postprocess\": x => track(x, { type: 'show', variable: asName(x[1]) })},\n    {\"name\": \"create_schema$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create), \"kw_schema\"]},\n    {\"name\": \"create_schema$ebnf$1\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id},\n    {\"name\": \"create_schema$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_schema\", \"symbols\": [\"create_schema$subexpression$1\", \"create_schema$ebnf$1\", \"ident\"], \"postprocess\":  x => track(x, {\n            type: 'create schema',\n            name: asName(x[2]),\n            ... !!x[1] ? { ifNotExists: true } : {},\n        }) },\n    {\"name\": \"raise_statement$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": anyKw('debug', 'log', 'info', 'notice', 'warning', 'exception')},\n    {\"name\": \"raise_statement$ebnf$1\", \"symbols\": [\"raise_statement$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"raise_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"raise_statement$ebnf$2$subexpression$1\", \"symbols\": [\"comma\", \"expr_list_raw\"], \"postprocess\": last},\n    {\"name\": \"raise_statement$ebnf$2\", \"symbols\": [\"raise_statement$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"raise_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"raise_statement$ebnf$3\", \"symbols\": [\"raise_using\"], \"postprocess\": id},\n    {\"name\": \"raise_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"raise_statement\", \"symbols\": [\"kw_raise\", \"raise_statement$ebnf$1\", \"string\", \"raise_statement$ebnf$2\", \"raise_statement$ebnf$3\"], \"postprocess\":  x => track(x, {\n            type: 'raise',\n            format: toStr(x[2]),\n            ...x[1] && { level: toStr(x[1]) },\n            ...x[3] && x[3].length && { formatExprs: x[3] },\n            ...x[4] && x[4].length && { using: x[4] },\n        }) },\n    {\"name\": \"raise_using$macrocall$2\", \"symbols\": [\"raise_using_one\"]},\n    {\"name\": \"raise_using$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"raise_using$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"raise_using$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"raise_using$macrocall$1$ebnf$1\", \"symbols\": [\"raise_using$macrocall$1$ebnf$1\", \"raise_using$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"raise_using$macrocall$1\", \"symbols\": [\"raise_using$macrocall$2\", \"raise_using$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"raise_using\", \"symbols\": [(lexerAny.has(\"kw_using\") ? {type: \"kw_using\"} : kw_using), \"raise_using$macrocall$1\"], \"postprocess\": last},\n    {\"name\": \"raise_using_one\", \"symbols\": [\"raise_using_what\", (lexerAny.has(\"op_eq\") ? {type: \"op_eq\"} : op_eq), \"expr\"], \"postprocess\":  x => track(x, {\n            type: toStr(x[0]),\n            value: x[2],\n        }) },\n    {\"name\": \"raise_using_what\", \"symbols\": [(lexerAny.has(\"kw_table\") ? {type: \"kw_table\"} : kw_table)]},\n    {\"name\": \"raise_using_what\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\":  anyKw('message',\n        'detail',\n        'hint',\n        'errcode',\n        'column',\n        'constraint',\n        'datatype',\n        'schema') },\n    {\"name\": \"comment_statement\", \"symbols\": [\"kw_comment\", (lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on), \"comment_what\", (lexerAny.has(\"kw_is\") ? {type: \"kw_is\"} : kw_is), \"string\"], \"postprocess\":  x => track(x, {\n            type: 'comment',\n            comment: unbox(last(x)),\n            on: unwrap(x[2]),\n        }) },\n    {\"name\": \"comment_what\", \"symbols\": [\"comment_what_col\"]},\n    {\"name\": \"comment_what\", \"symbols\": [\"comment_what_nm\"]},\n    {\"name\": \"comment_what_nm$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_table\") ? {type: \"kw_table\"} : kw_table)]},\n    {\"name\": \"comment_what_nm$subexpression$1\", \"symbols\": [\"kw_materialized\", \"kw_view\"]},\n    {\"name\": \"comment_what_nm$subexpression$1\", \"symbols\": [(lexerAny.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": anyKw('database', 'index', 'trigger', 'type', 'view')},\n    {\"name\": \"comment_what_nm\", \"symbols\": [\"comment_what_nm$subexpression$1\", \"qualified_name\"], \"postprocess\":  x => track(x, {\n            type: toStr(x[0]),\n            name: x[1],\n        }) },\n    {\"name\": \"comment_what_col\", \"symbols\": [\"kw_column\", \"qcolumn\"], \"postprocess\":  x => track(x, {\n            type: 'column',\n            column: last(x),\n        }) },\n    {\"name\": \"simplestatements_begin$ebnf$1$subexpression$1\", \"symbols\": [\"kw_transaction\"]},\n    {\"name\": \"simplestatements_begin$ebnf$1$subexpression$1\", \"symbols\": [\"kw_work\"]},\n    {\"name\": \"simplestatements_begin$ebnf$1\", \"symbols\": [\"simplestatements_begin$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"simplestatements_begin$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"simplestatements_begin$ebnf$2\", \"symbols\": []},\n    {\"name\": \"simplestatements_begin$ebnf$2$subexpression$1\", \"symbols\": [\"simplestatements_begin_isol\"]},\n    {\"name\": \"simplestatements_begin$ebnf$2$subexpression$1\", \"symbols\": [\"simplestatements_begin_writ\"]},\n    {\"name\": \"simplestatements_begin$ebnf$2$subexpression$1\", \"symbols\": [\"simplestatements_begin_def\"]},\n    {\"name\": \"simplestatements_begin$ebnf$2\", \"symbols\": [\"simplestatements_begin$ebnf$2\", \"simplestatements_begin$ebnf$2$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"simplestatements_begin\", \"symbols\": [\"kw_begin\", \"simplestatements_begin$ebnf$1\", \"simplestatements_begin$ebnf$2\"], \"postprocess\": \n        x => track(x, {\n            type: 'begin',\n            ...x[2].reduce((a: any, b: any) => ({...unwrap(a), ...unwrap(b)}), {}),\n        })\n        },\n    {\"name\": \"simplestatements_begin_isol$subexpression$1\", \"symbols\": [\"kw_isolation\", \"kw_level\"]},\n    {\"name\": \"simplestatements_begin_isol$subexpression$2\", \"symbols\": [\"kw_serializable\"]},\n    {\"name\": \"simplestatements_begin_isol$subexpression$2$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('repeatable')},\n    {\"name\": \"simplestatements_begin_isol$subexpression$2\", \"symbols\": [\"simplestatements_begin_isol$subexpression$2$subexpression$1\", \"kw_read\"]},\n    {\"name\": \"simplestatements_begin_isol$subexpression$2$subexpression$2\", \"symbols\": [\"word\"], \"postprocess\": kw('committed')},\n    {\"name\": \"simplestatements_begin_isol$subexpression$2\", \"symbols\": [\"kw_read\", \"simplestatements_begin_isol$subexpression$2$subexpression$2\"]},\n    {\"name\": \"simplestatements_begin_isol$subexpression$2$subexpression$3\", \"symbols\": [\"word\"], \"postprocess\": kw('uncommitted')},\n    {\"name\": \"simplestatements_begin_isol$subexpression$2\", \"symbols\": [\"kw_read\", \"simplestatements_begin_isol$subexpression$2$subexpression$3\"]},\n    {\"name\": \"simplestatements_begin_isol\", \"symbols\": [\"simplestatements_begin_isol$subexpression$1\", \"simplestatements_begin_isol$subexpression$2\"], \"postprocess\":  x => track(x, {\n            isolationLevel: toStr(x[1], ' '),\n        }) },\n    {\"name\": \"simplestatements_begin_writ$subexpression$1\", \"symbols\": [\"kw_read\", \"kw_write\"]},\n    {\"name\": \"simplestatements_begin_writ$subexpression$1\", \"symbols\": [\"kw_read\", (lexerAny.has(\"kw_only\") ? {type: \"kw_only\"} : kw_only)]},\n    {\"name\": \"simplestatements_begin_writ\", \"symbols\": [\"simplestatements_begin_writ$subexpression$1\"], \"postprocess\":  x => track(x, {\n            writeable: toStr(x, ' '),\n        }) },\n    {\"name\": \"simplestatements_begin_def$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not)], \"postprocess\": id},\n    {\"name\": \"simplestatements_begin_def$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"simplestatements_begin_def\", \"symbols\": [\"simplestatements_begin_def$ebnf$1\", (lexerAny.has(\"kw_deferrable\") ? {type: \"kw_deferrable\"} : kw_deferrable)], \"postprocess\":  x => track(x, {\n            deferrable: !x[0]\n        }) },\n    {\"name\": \"insert_statement$subexpression$1\", \"symbols\": [\"kw_insert\", (lexerAny.has(\"kw_into\") ? {type: \"kw_into\"} : kw_into)]},\n    {\"name\": \"insert_statement$ebnf$1\", \"symbols\": [\"collist_paren\"], \"postprocess\": id},\n    {\"name\": \"insert_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"insert_statement$ebnf$2$subexpression$1$subexpression$1\", \"symbols\": [\"kw_system\"]},\n    {\"name\": \"insert_statement$ebnf$2$subexpression$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_user\") ? {type: \"kw_user\"} : kw_user)]},\n    {\"name\": \"insert_statement$ebnf$2$subexpression$1\", \"symbols\": [\"kw_overriding\", \"insert_statement$ebnf$2$subexpression$1$subexpression$1\", \"kw_value\"], \"postprocess\": get(1)},\n    {\"name\": \"insert_statement$ebnf$2\", \"symbols\": [\"insert_statement$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"insert_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"insert_statement$ebnf$3$subexpression$1\", \"symbols\": [\"selection\"]},\n    {\"name\": \"insert_statement$ebnf$3$subexpression$1\", \"symbols\": [\"selection_paren\"]},\n    {\"name\": \"insert_statement$ebnf$3\", \"symbols\": [\"insert_statement$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"insert_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"insert_statement$ebnf$4$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on), \"kw_conflict\", \"insert_on_conflict\"], \"postprocess\": last},\n    {\"name\": \"insert_statement$ebnf$4\", \"symbols\": [\"insert_statement$ebnf$4$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"insert_statement$ebnf$4\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"insert_statement$ebnf$5$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_returning\") ? {type: \"kw_returning\"} : kw_returning), \"select_expr_list_aliased\"], \"postprocess\": last},\n    {\"name\": \"insert_statement$ebnf$5\", \"symbols\": [\"insert_statement$ebnf$5$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"insert_statement$ebnf$5\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"insert_statement\", \"symbols\": [\"insert_statement$subexpression$1\", \"table_ref_aliased\", \"insert_statement$ebnf$1\", \"insert_statement$ebnf$2\", \"insert_statement$ebnf$3\", \"insert_statement$ebnf$4\", \"insert_statement$ebnf$5\"], \"postprocess\":  x => {\n            const columns = x[2] && x[2].map(asName);\n            const overriding = toStr(x[3]);\n            const insert = unwrap(x[4]);\n            const onConflict = x[5];\n            const returning = x[6];\n            return track(x, {\n                type: 'insert',\n                into: unwrap(x[1]),\n                insert,\n                ...overriding && { overriding },\n                ...columns && { columns },\n                ...returning && { returning },\n                ...onConflict && { onConflict },\n            })\n        } },\n    {\"name\": \"insert_values$ebnf$1\", \"symbols\": []},\n    {\"name\": \"insert_values$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"insert_value\"], \"postprocess\": last},\n    {\"name\": \"insert_values$ebnf$1\", \"symbols\": [\"insert_values$ebnf$1\", \"insert_values$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"insert_values\", \"symbols\": [\"insert_value\", \"insert_values$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"insert_value\", \"symbols\": [\"lparen\", \"insert_expr_list_raw\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"insert_expr_list_raw$ebnf$1\", \"symbols\": []},\n    {\"name\": \"insert_expr_list_raw$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"expr_or_select\"], \"postprocess\": last},\n    {\"name\": \"insert_expr_list_raw$ebnf$1\", \"symbols\": [\"insert_expr_list_raw$ebnf$1\", \"insert_expr_list_raw$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"insert_expr_list_raw\", \"symbols\": [\"expr_or_select\", \"insert_expr_list_raw$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"insert_on_conflict$ebnf$1\", \"symbols\": [\"insert_on_conflict_what\"], \"postprocess\": id},\n    {\"name\": \"insert_on_conflict$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"insert_on_conflict\", \"symbols\": [\"insert_on_conflict$ebnf$1\", \"insert_on_conflict_do\"], \"postprocess\":  x => track(x, {\n            ...x[0] ? { on: unwrap(x[0]) } : {},\n            ...x[1],\n        }) },\n    {\"name\": \"insert_on_conflict_what\", \"symbols\": [\"lparen\", \"expr_list_raw\", \"rparen\"], \"postprocess\":  x => track(x, {\n            type: 'on expr',\n            exprs: x[1],\n        }) },\n    {\"name\": \"insert_on_conflict_what\", \"symbols\": [(lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on), (lexerAny.has(\"kw_constraint\") ? {type: \"kw_constraint\"} : kw_constraint), \"qname\"], \"postprocess\":  x => track(x, {\n            type: 'on constraint',\n            constraint: last(x),\n        }) },\n    {\"name\": \"insert_on_conflict_do\", \"symbols\": [(lexerAny.has(\"kw_do\") ? {type: \"kw_do\"} : kw_do), \"kw_nothing\"], \"postprocess\": x => ({ do: 'do nothing' })},\n    {\"name\": \"insert_on_conflict_do$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_do\") ? {type: \"kw_do\"} : kw_do), \"kw_update\", \"kw_set\"]},\n    {\"name\": \"insert_on_conflict_do$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_where\") ? {type: \"kw_where\"} : kw_where), \"expr\"], \"postprocess\": last},\n    {\"name\": \"insert_on_conflict_do$ebnf$1\", \"symbols\": [\"insert_on_conflict_do$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"insert_on_conflict_do$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"insert_on_conflict_do\", \"symbols\": [\"insert_on_conflict_do$subexpression$1\", \"update_set_list\", \"insert_on_conflict_do$ebnf$1\"], \"postprocess\":  x => ({\n           do: { sets: x[1] },\n           ...x[2] && { where: x[2] },\n        }) },\n    {\"name\": \"update_statement$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_from\") ? {type: \"kw_from\"} : kw_from), \"select_from_subject\"], \"postprocess\": last},\n    {\"name\": \"update_statement$ebnf$1\", \"symbols\": [\"update_statement$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"update_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"update_statement$ebnf$2\", \"symbols\": [\"select_where\"], \"postprocess\": id},\n    {\"name\": \"update_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"update_statement$ebnf$3$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_returning\") ? {type: \"kw_returning\"} : kw_returning), \"select_expr_list_aliased\"], \"postprocess\": last},\n    {\"name\": \"update_statement$ebnf$3\", \"symbols\": [\"update_statement$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"update_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"update_statement\", \"symbols\": [\"kw_update\", \"table_ref_aliased\", \"kw_set\", \"update_set_list\", \"update_statement$ebnf$1\", \"update_statement$ebnf$2\", \"update_statement$ebnf$3\"], \"postprocess\":  x => {\n            const from = unwrap(x[4]);\n            const where = unwrap(x[5]);\n            const returning = x[6];\n            return track(x, {\n                type: 'update',\n                table: unwrap(x[1]),\n                sets: x[3],\n                ...where ? {where} : {},\n                ...from ? {from} : {},\n                ...returning ? {returning} : {},\n            });\n        } },\n    {\"name\": \"update_set_list$ebnf$1\", \"symbols\": []},\n    {\"name\": \"update_set_list$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"update_set\"], \"postprocess\": last},\n    {\"name\": \"update_set_list$ebnf$1\", \"symbols\": [\"update_set_list$ebnf$1\", \"update_set_list$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"update_set_list\", \"symbols\": [\"update_set\", \"update_set_list$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            const ret = [];\n            for (const _t of [head, ...(tail || [])]) {\n                const t = unwrap(_t);\n                if (Array.isArray(t)) {\n                    ret.push(...t);\n                } else {\n                    ret.push(t);\n                }\n            }\n            return ret;\n        } },\n    {\"name\": \"update_set\", \"symbols\": [\"update_set_one\"]},\n    {\"name\": \"update_set\", \"symbols\": [\"update_set_multiple\"]},\n    {\"name\": \"update_set_one\", \"symbols\": [\"ident\", (lexerAny.has(\"op_eq\") ? {type: \"op_eq\"} : op_eq), \"expr\"], \"postprocess\":  x => box(x, {\n            column: asName(x[0]),\n            value: unwrap(x[2]),\n        }) },\n    {\"name\": \"update_set_multiple$subexpression$1\", \"symbols\": [\"lparen\", \"expr_list_raw\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"update_set_multiple\", \"symbols\": [\"collist_paren\", (lexerAny.has(\"op_eq\") ? {type: \"op_eq\"} : op_eq), \"update_set_multiple$subexpression$1\"], \"postprocess\":  x => {\n            const cols = x[0];\n            const exprs = x[2];\n            if (cols.length !== exprs.length) {\n                throw new Error('number of columns does not match number of values');\n            }\n            return box(x, cols.map((x: any, i: number) => ({\n                column: asName(x),\n                value: unwrap(exprs[i]),\n            })))\n        } },\n    {\"name\": \"altertable_statement$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id},\n    {\"name\": \"altertable_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_statement$ebnf$2\", \"symbols\": [(lexerAny.has(\"kw_only\") ? {type: \"kw_only\"} : kw_only)], \"postprocess\": id},\n    {\"name\": \"altertable_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_statement\", \"symbols\": [\"kw_alter\", (lexerAny.has(\"kw_table\") ? {type: \"kw_table\"} : kw_table), \"altertable_statement$ebnf$1\", \"altertable_statement$ebnf$2\", \"table_ref\", \"altertable_actions\"], \"postprocess\":  x => track(x, {\n            type: 'alter table',\n            ... x[2] ? {ifExists: true} : {},\n            ... x[3] ? {only: true} : {},\n            table: unwrap(x[4]),\n            changes: unbox(x[5]).map(unwrap),\n        }) },\n    {\"name\": \"altertable_actions$ebnf$1\", \"symbols\": []},\n    {\"name\": \"altertable_actions$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"altertable_action\"], \"postprocess\": last},\n    {\"name\": \"altertable_actions$ebnf$1\", \"symbols\": [\"altertable_actions$ebnf$1\", \"altertable_actions$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"altertable_actions\", \"symbols\": [\"altertable_action\", \"altertable_actions$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"altertable_action\", \"symbols\": [\"altertable_rename_table\"]},\n    {\"name\": \"altertable_action\", \"symbols\": [\"altertable_rename_column\"]},\n    {\"name\": \"altertable_action\", \"symbols\": [\"altertable_rename_constraint\"]},\n    {\"name\": \"altertable_action\", \"symbols\": [\"altertable_add_column\"]},\n    {\"name\": \"altertable_action\", \"symbols\": [\"altertable_drop_column\"]},\n    {\"name\": \"altertable_action\", \"symbols\": [\"altertable_alter_column\"]},\n    {\"name\": \"altertable_action\", \"symbols\": [\"altertable_add_constraint\"]},\n    {\"name\": \"altertable_action\", \"symbols\": [\"altertable_drop_constraint\"]},\n    {\"name\": \"altertable_action\", \"symbols\": [\"altertable_owner\"]},\n    {\"name\": \"altertable_rename_table\", \"symbols\": [\"kw_rename\", (lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to), \"word\"], \"postprocess\":  x => track(x, {\n            type: 'rename',\n            to: asName(last(x)),\n        }) },\n    {\"name\": \"altertable_rename_column$ebnf$1\", \"symbols\": [\"kw_column\"], \"postprocess\": id},\n    {\"name\": \"altertable_rename_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_rename_column\", \"symbols\": [\"kw_rename\", \"altertable_rename_column$ebnf$1\", \"ident\", (lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to), \"ident\"], \"postprocess\":  x => track(x, {\n            type: 'rename column',\n            column: asName(x[2]),\n            to: asName(last(x)),\n        }) },\n    {\"name\": \"altertable_rename_constraint\", \"symbols\": [\"kw_rename\", (lexerAny.has(\"kw_constraint\") ? {type: \"kw_constraint\"} : kw_constraint), \"ident\", (lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to), \"ident\"], \"postprocess\":  x => track(x, {\n            type: 'rename constraint',\n            constraint: asName(x[2]),\n            to: asName(last(x)),\n        }) },\n    {\"name\": \"altertable_add_column$ebnf$1\", \"symbols\": [\"kw_column\"], \"postprocess\": id},\n    {\"name\": \"altertable_add_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_add_column$ebnf$2\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id},\n    {\"name\": \"altertable_add_column$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_add_column\", \"symbols\": [\"kw_add\", \"altertable_add_column$ebnf$1\", \"altertable_add_column$ebnf$2\", \"createtable_column\"], \"postprocess\":  x => track(x, {\n            type: 'add column',\n            ... x[2] ? {ifNotExists: true} : {},\n            column: unwrap(x[3]),\n        }) },\n    {\"name\": \"altertable_drop_column$ebnf$1\", \"symbols\": [\"kw_column\"], \"postprocess\": id},\n    {\"name\": \"altertable_drop_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_drop_column$ebnf$2\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id},\n    {\"name\": \"altertable_drop_column$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_drop_column$ebnf$3$subexpression$1\", \"symbols\": [\"kw_restrict\"]},\n    {\"name\": \"altertable_drop_column$ebnf$3$subexpression$1\", \"symbols\": [\"kw_cascade\"]},\n    {\"name\": \"altertable_drop_column$ebnf$3\", \"symbols\": [\"altertable_drop_column$ebnf$3$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"altertable_drop_column$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_drop_column\", \"symbols\": [\"kw_drop\", \"altertable_drop_column$ebnf$1\", \"altertable_drop_column$ebnf$2\", \"ident\", \"altertable_drop_column$ebnf$3\"], \"postprocess\":  x => track(x, {\n            type: 'drop column',\n            ... x[2] ? {ifExists: true} : {},\n            column: asName(x[3]),\n            ... x[4] ? {behaviour: toStr(x[4], ' ')} : {},\n        }) },\n    {\"name\": \"altertable_alter_column$ebnf$1\", \"symbols\": [\"kw_column\"], \"postprocess\": id},\n    {\"name\": \"altertable_alter_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_alter_column\", \"symbols\": [\"kw_alter\", \"altertable_alter_column$ebnf$1\", \"ident\", \"altercol\"], \"postprocess\":  x => track(x, {\n            type: 'alter column',\n            column: asName(x[2]),\n            alter: unwrap(x[3])\n        }) },\n    {\"name\": \"altercol$ebnf$1$subexpression$1\", \"symbols\": [\"kw_set\", \"kw_data\"]},\n    {\"name\": \"altercol$ebnf$1\", \"symbols\": [\"altercol$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"altercol$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altercol\", \"symbols\": [\"altercol$ebnf$1\", \"kw_type\", \"data_type\"], \"postprocess\": x => track(x, { type: 'set type', dataType: unwrap(last(x)) })},\n    {\"name\": \"altercol\", \"symbols\": [\"kw_set\", (lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default), \"expr\"], \"postprocess\": x => track(x, {type: 'set default', default: unwrap(last(x)) })},\n    {\"name\": \"altercol\", \"symbols\": [\"kw_drop\", (lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default)], \"postprocess\": x => track(x, {type: 'drop default' })},\n    {\"name\": \"altercol$subexpression$1\", \"symbols\": [\"kw_set\"]},\n    {\"name\": \"altercol$subexpression$1\", \"symbols\": [\"kw_drop\"]},\n    {\"name\": \"altercol\", \"symbols\": [\"altercol$subexpression$1\", \"kw_not_null\"], \"postprocess\": x => track(x, {type: toStr(x, ' ') })},\n    {\"name\": \"altercol\", \"symbols\": [\"altercol_generated_add\"], \"postprocess\": unwrap},\n    {\"name\": \"altertable_add_constraint\", \"symbols\": [\"kw_add\", \"createtable_constraint\"], \"postprocess\":  x => track(x, {\n            type: 'add constraint',\n            constraint: unwrap(last(x)),\n        }) },\n    {\"name\": \"altertable_drop_constraint$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id},\n    {\"name\": \"altertable_drop_constraint$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_drop_constraint$ebnf$2$subexpression$1\", \"symbols\": [\"kw_restrict\"]},\n    {\"name\": \"altertable_drop_constraint$ebnf$2$subexpression$1\", \"symbols\": [\"kw_cascade\"]},\n    {\"name\": \"altertable_drop_constraint$ebnf$2\", \"symbols\": [\"altertable_drop_constraint$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"altertable_drop_constraint$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altertable_drop_constraint\", \"symbols\": [\"kw_drop\", (lexerAny.has(\"kw_constraint\") ? {type: \"kw_constraint\"} : kw_constraint), \"altertable_drop_constraint$ebnf$1\", \"ident\", \"altertable_drop_constraint$ebnf$2\"], \"postprocess\":  x => track(x, {\n            type: 'drop constraint',\n            ... x[2] ? {ifExists: true} : {},\n            constraint: asName(x[3]),\n            ... x[4] ? {behaviour: toStr(x[4], ' ')} : {},\n        }) },\n    {\"name\": \"altertable_owner\", \"symbols\": [\"kw_owner\", (lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to), \"ident\"], \"postprocess\":  x => track(x, {\n            type:'owner',\n            to: asName(last(x)),\n        }) },\n    {\"name\": \"altercol_generated_add\", \"symbols\": [\"kw_add\", \"altercol_generated\"], \"postprocess\": last},\n    {\"name\": \"altercol_generated$ebnf$1$subexpression$1\", \"symbols\": [\"kw_always\"]},\n    {\"name\": \"altercol_generated$ebnf$1$subexpression$1\", \"symbols\": [\"kw_by\", (lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default)]},\n    {\"name\": \"altercol_generated$ebnf$1\", \"symbols\": [\"altercol_generated$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"altercol_generated$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altercol_generated$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"kw_identity\"]},\n    {\"name\": \"altercol_generated$ebnf$2$subexpression$1\", \"symbols\": [\"lparen\", \"altercol_generated_seq\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"altercol_generated$ebnf$2\", \"symbols\": [\"altercol_generated$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"altercol_generated$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altercol_generated\", \"symbols\": [\"kw_generated\", \"altercol_generated$ebnf$1\", \"altercol_generated$subexpression$1\", \"altercol_generated$ebnf$2\"], \"postprocess\":  x => track(x, {\n            type: 'add generated',\n            ...x[1] && { always: toStr(x[1], ' ') },\n            ...x[3] && { sequence: unwrap(x[3]) },\n        }) },\n    {\"name\": \"altercol_generated_seq$ebnf$1$subexpression$1\", \"symbols\": [\"kw_sequence\", \"kw_name\", \"qualified_name\"]},\n    {\"name\": \"altercol_generated_seq$ebnf$1\", \"symbols\": [\"altercol_generated_seq$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"altercol_generated_seq$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"altercol_generated_seq$ebnf$2\", \"symbols\": []},\n    {\"name\": \"altercol_generated_seq$ebnf$2\", \"symbols\": [\"altercol_generated_seq$ebnf$2\", \"create_sequence_option\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"altercol_generated_seq\", \"symbols\": [\"altercol_generated_seq$ebnf$1\", \"altercol_generated_seq$ebnf$2\"], \"postprocess\":  x => {\n            const ret: any = {\n                ...x[0] && { name: unwrap(last(x[0])) },\n            };\n            setSeqOpts(ret, x[1]);\n            return track(x, ret);\n        }},\n    {\"name\": \"alterindex_statement$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id},\n    {\"name\": \"alterindex_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"alterindex_statement\", \"symbols\": [\"kw_alter\", \"kw_index\", \"alterindex_statement$ebnf$1\", \"table_ref\", \"alterindex_action\"], \"postprocess\":  x => track(x, {\n            type: 'alter index',\n            ... x[2] ? {ifExists: true} : {},\n            index: unwrap(x[3]),\n            change: unwrap(x[4]),\n        }) },\n    {\"name\": \"alterindex_action\", \"symbols\": [\"alterindex_rename\"]},\n    {\"name\": \"alterindex_action\", \"symbols\": [\"alterindex_set_tablespace\"]},\n    {\"name\": \"alterindex_rename\", \"symbols\": [\"kw_rename\", (lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to), \"word\"], \"postprocess\":  x => track(x, {\n            type: 'rename',\n            to: asName(last(x)),\n        }) },\n    {\"name\": \"alterindex_set_tablespace\", \"symbols\": [\"kw_set\", \"kw_tablespace\", \"word\"], \"postprocess\":  x => track(x, {\n            type: 'set tablespace',\n            tablespace: asName(last(x)),\n        }) },\n    {\"name\": \"delete_statement\", \"symbols\": [\"delete_delete\"]},\n    {\"name\": \"delete_statement\", \"symbols\": [\"delete_truncate\"]},\n    {\"name\": \"delete_delete$subexpression$1\", \"symbols\": [\"kw_delete\", (lexerAny.has(\"kw_from\") ? {type: \"kw_from\"} : kw_from)]},\n    {\"name\": \"delete_delete$ebnf$1\", \"symbols\": [\"select_where\"], \"postprocess\": id},\n    {\"name\": \"delete_delete$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"delete_delete$ebnf$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_returning\") ? {type: \"kw_returning\"} : kw_returning), \"select_expr_list_aliased\"], \"postprocess\": last},\n    {\"name\": \"delete_delete$ebnf$2\", \"symbols\": [\"delete_delete$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"delete_delete$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"delete_delete\", \"symbols\": [\"delete_delete$subexpression$1\", \"table_ref_aliased\", \"delete_delete$ebnf$1\", \"delete_delete$ebnf$2\"], \"postprocess\":  x => {\n            const where = x[2];\n            const returning = x[3];\n            return track(x, {\n                type: 'delete',\n                from: unwrap(x[1]),\n                ...where ? { where } : {},\n                ...returning ? { returning } : {},\n            });\n        } },\n    {\"name\": \"delete_truncate$subexpression$1$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_table\") ? {type: \"kw_table\"} : kw_table)], \"postprocess\": id},\n    {\"name\": \"delete_truncate$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"delete_truncate$subexpression$1\", \"symbols\": [\"kw_truncate\", \"delete_truncate$subexpression$1$ebnf$1\"]},\n    {\"name\": \"delete_truncate$macrocall$2\", \"symbols\": [\"table_ref\"]},\n    {\"name\": \"delete_truncate$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"delete_truncate$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"delete_truncate$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"delete_truncate$macrocall$1$ebnf$1\", \"symbols\": [\"delete_truncate$macrocall$1$ebnf$1\", \"delete_truncate$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"delete_truncate$macrocall$1\", \"symbols\": [\"delete_truncate$macrocall$2\", \"delete_truncate$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"delete_truncate$ebnf$1$subexpression$1$subexpression$1\", \"symbols\": [\"kw_restart\"]},\n    {\"name\": \"delete_truncate$ebnf$1$subexpression$1$subexpression$1\", \"symbols\": [\"kw_continue\"]},\n    {\"name\": \"delete_truncate$ebnf$1$subexpression$1\", \"symbols\": [\"delete_truncate$ebnf$1$subexpression$1$subexpression$1\", \"kw_identity\"]},\n    {\"name\": \"delete_truncate$ebnf$1\", \"symbols\": [\"delete_truncate$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"delete_truncate$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"delete_truncate$ebnf$2$subexpression$1\", \"symbols\": [\"kw_restrict\"]},\n    {\"name\": \"delete_truncate$ebnf$2$subexpression$1\", \"symbols\": [\"kw_cascade\"]},\n    {\"name\": \"delete_truncate$ebnf$2\", \"symbols\": [\"delete_truncate$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"delete_truncate$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"delete_truncate\", \"symbols\": [\"delete_truncate$subexpression$1\", \"delete_truncate$macrocall$1\", \"delete_truncate$ebnf$1\", \"delete_truncate$ebnf$2\"], \"postprocess\":  x => track(x, {\n            type: 'truncate table',\n            tables: x[1],\n            ...x[2] && { identity: toStr(x[2][0]) },\n            ... x[3] && {cascade: toStr(x[3]) },\n        }) },\n    {\"name\": \"create_sequence_statement$ebnf$1$subexpression$1\", \"symbols\": [\"kw_temp\"]},\n    {\"name\": \"create_sequence_statement$ebnf$1$subexpression$1\", \"symbols\": [\"kw_temporary\"]},\n    {\"name\": \"create_sequence_statement$ebnf$1\", \"symbols\": [\"create_sequence_statement$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"create_sequence_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_sequence_statement$ebnf$2\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id},\n    {\"name\": \"create_sequence_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_sequence_statement$ebnf$3\", \"symbols\": []},\n    {\"name\": \"create_sequence_statement$ebnf$3\", \"symbols\": [\"create_sequence_statement$ebnf$3\", \"create_sequence_option\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"create_sequence_statement\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create), \"create_sequence_statement$ebnf$1\", \"kw_sequence\", \"create_sequence_statement$ebnf$2\", \"qualified_name\", \"create_sequence_statement$ebnf$3\"], \"postprocess\":  x => {\n            const ret: any = {\n                type: 'create sequence',\n                ...x[1] && { temp: true },\n                ...x[3] && { ifNotExists: true },\n                name: unwrap(x[4]),\n                options: {},\n            };\n            setSeqOpts(ret.options, x[5]);\n            return track(x, ret);\n        }},\n    {\"name\": \"create_sequence_option\", \"symbols\": [(lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"data_type\"], \"postprocess\": x => box(x, ['as', x[1]])},\n    {\"name\": \"create_sequence_option$ebnf$1\", \"symbols\": [\"kw_by\"], \"postprocess\": id},\n    {\"name\": \"create_sequence_option$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_sequence_option\", \"symbols\": [\"kw_increment\", \"create_sequence_option$ebnf$1\", \"int\"], \"postprocess\": x => box(x, ['incrementBy', x[2]])},\n    {\"name\": \"create_sequence_option\", \"symbols\": [\"create_sequence_minvalue\"], \"postprocess\": x => box(x, ['minValue', x[0]])},\n    {\"name\": \"create_sequence_option\", \"symbols\": [\"create_sequence_maxvalue\"], \"postprocess\": x => box(x, ['maxValue', x[0]])},\n    {\"name\": \"create_sequence_option$ebnf$2\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with)], \"postprocess\": id},\n    {\"name\": \"create_sequence_option$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_sequence_option\", \"symbols\": [\"kw_start\", \"create_sequence_option$ebnf$2\", \"int\"], \"postprocess\": x => box(x, ['startWith', x[2]])},\n    {\"name\": \"create_sequence_option\", \"symbols\": [\"kw_cache\", \"int\"], \"postprocess\": x => box(x, ['cache', x[1]])},\n    {\"name\": \"create_sequence_option$ebnf$3\", \"symbols\": [\"kw_no\"], \"postprocess\": id},\n    {\"name\": \"create_sequence_option$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_sequence_option\", \"symbols\": [\"create_sequence_option$ebnf$3\", \"kw_cycle\"], \"postprocess\": x => box(x, ['cycle', toStr(x, ' ')])},\n    {\"name\": \"create_sequence_option\", \"symbols\": [\"create_sequence_owned_by\"], \"postprocess\": x => box(x, ['ownedBy', unwrap(x)])},\n    {\"name\": \"create_sequence_minvalue\", \"symbols\": [\"kw_minvalue\", \"int\"], \"postprocess\": last},\n    {\"name\": \"create_sequence_minvalue\", \"symbols\": [\"kw_no\", \"kw_minvalue\"], \"postprocess\": x => box(x, 'no minvalue')},\n    {\"name\": \"create_sequence_maxvalue\", \"symbols\": [\"kw_maxvalue\", \"int\"], \"postprocess\": last},\n    {\"name\": \"create_sequence_maxvalue\", \"symbols\": [\"kw_no\", \"kw_maxvalue\"], \"postprocess\": x => box(x, 'no maxvalue')},\n    {\"name\": \"create_sequence_owned_by$subexpression$1\", \"symbols\": [\"kw_none\"]},\n    {\"name\": \"create_sequence_owned_by$subexpression$1\", \"symbols\": [\"qcolumn\"]},\n    {\"name\": \"create_sequence_owned_by\", \"symbols\": [\"kw_owned\", \"kw_by\", \"create_sequence_owned_by$subexpression$1\"], \"postprocess\": x => box(x, unwrap(last(x)))},\n    {\"name\": \"alter_sequence_statement$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id},\n    {\"name\": \"alter_sequence_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"alter_sequence_statement\", \"symbols\": [\"kw_alter\", \"kw_sequence\", \"alter_sequence_statement$ebnf$1\", \"qualified_name\", \"alter_sequence_statement_body\"], \"postprocess\":  x => {\n            const ret: any = {\n                type: 'alter sequence',\n                ...x[2] && { ifExists: true },\n                name: unwrap(x[3]),\n                change: x[4],\n            };\n            return track(x, ret);\n        }},\n    {\"name\": \"alter_sequence_statement_body$ebnf$1\", \"symbols\": [\"alter_sequence_option\"]},\n    {\"name\": \"alter_sequence_statement_body$ebnf$1\", \"symbols\": [\"alter_sequence_statement_body$ebnf$1\", \"alter_sequence_option\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"alter_sequence_statement_body\", \"symbols\": [\"alter_sequence_statement_body$ebnf$1\"], \"postprocess\":  x => {\n            const ret: any = {\n                type: 'set options',\n            };\n            setSeqOpts(ret, x[0]);\n            return track(x, ret);\n        }},\n    {\"name\": \"alter_sequence_statement_body$subexpression$1\", \"symbols\": [\"ident\"]},\n    {\"name\": \"alter_sequence_statement_body$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_session_user\") ? {type: \"kw_session_user\"} : kw_session_user)]},\n    {\"name\": \"alter_sequence_statement_body$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_current_user\") ? {type: \"kw_current_user\"} : kw_current_user)]},\n    {\"name\": \"alter_sequence_statement_body\", \"symbols\": [\"kw_owner\", (lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to), \"alter_sequence_statement_body$subexpression$1\"], \"postprocess\": x => track(x, { type: 'owner to', owner: asName(last(x)), })},\n    {\"name\": \"alter_sequence_statement_body\", \"symbols\": [\"kw_rename\", (lexerAny.has(\"kw_to\") ? {type: \"kw_to\"} : kw_to), \"ident\"], \"postprocess\": x => track(x, { type: 'rename', newName: asName(last(x)) })},\n    {\"name\": \"alter_sequence_statement_body\", \"symbols\": [\"kw_set\", \"kw_schema\", \"ident\"], \"postprocess\": x => track(x, { type: 'set schema', newSchema: asName(last(x)) })},\n    {\"name\": \"alter_sequence_option\", \"symbols\": [\"create_sequence_option\"], \"postprocess\": unwrap},\n    {\"name\": \"alter_sequence_option$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with)], \"postprocess\": id},\n    {\"name\": \"alter_sequence_option$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"alter_sequence_option$ebnf$1$subexpression$1\", \"symbols\": [\"alter_sequence_option$ebnf$1$subexpression$1$ebnf$1\", \"int\"], \"postprocess\": last},\n    {\"name\": \"alter_sequence_option$ebnf$1\", \"symbols\": [\"alter_sequence_option$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"alter_sequence_option$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"alter_sequence_option\", \"symbols\": [\"kw_restart\", \"alter_sequence_option$ebnf$1\"], \"postprocess\": x => box(x, ['restart', typeof unbox(x[1]) === 'number' ? unbox(x[1]) : true])},\n    {\"name\": \"drop_statement$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id},\n    {\"name\": \"drop_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"drop_statement$macrocall$2\", \"symbols\": [\"qualified_name\"]},\n    {\"name\": \"drop_statement$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"drop_statement$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"drop_statement$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"drop_statement$macrocall$1$ebnf$1\", \"symbols\": [\"drop_statement$macrocall$1$ebnf$1\", \"drop_statement$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"drop_statement$macrocall$1\", \"symbols\": [\"drop_statement$macrocall$2\", \"drop_statement$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"drop_statement$ebnf$2$subexpression$1\", \"symbols\": [\"kw_cascade\"]},\n    {\"name\": \"drop_statement$ebnf$2$subexpression$1\", \"symbols\": [\"kw_restrict\"]},\n    {\"name\": \"drop_statement$ebnf$2\", \"symbols\": [\"drop_statement$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"drop_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"drop_statement\", \"symbols\": [\"kw_drop\", \"drop_what\", \"drop_statement$ebnf$1\", \"drop_statement$macrocall$1\", \"drop_statement$ebnf$2\"], \"postprocess\":  (x: any, rej: any) => {\n            const v = unwrap(x[1]);\n            return track(x, {\n                ...v,\n                ... x[2] && {ifExists: true},\n                names: x[3],\n                ... x[4] && {cascade: toStr(x[4]) },\n            });\n        }},\n    {\"name\": \"drop_what\", \"symbols\": [(lexerAny.has(\"kw_table\") ? {type: \"kw_table\"} : kw_table)], \"postprocess\": x => track(x, { type: 'drop table' })},\n    {\"name\": \"drop_what\", \"symbols\": [\"kw_sequence\"], \"postprocess\": x => track(x, { type: 'drop sequence' })},\n    {\"name\": \"drop_what\", \"symbols\": [\"kw_type\"], \"postprocess\": x => track(x, { type: 'drop type' })},\n    {\"name\": \"drop_what\", \"symbols\": [\"kw_trigger\"], \"postprocess\": x => track(x, { type: 'drop trigger' })},\n    {\"name\": \"drop_what$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_concurrently\") ? {type: \"kw_concurrently\"} : kw_concurrently)], \"postprocess\": id},\n    {\"name\": \"drop_what$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"drop_what\", \"symbols\": [\"kw_index\", \"drop_what$ebnf$1\"], \"postprocess\":  x => track(x, {\n            type: 'drop index',\n            ...x[1] && {concurrently: true },\n        }) },\n    {\"name\": \"with_statement\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with), \"with_statement_bindings\", \"with_statement_statement\"], \"postprocess\":  x => track(x, {\n            type: 'with',\n            bind: x[1],\n            in: unwrap(x[2]),\n        }) },\n    {\"name\": \"with_recursive_statement$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with), \"kw_recursive\"]},\n    {\"name\": \"with_recursive_statement\", \"symbols\": [\"with_recursive_statement$subexpression$1\", \"ident\", \"collist_paren\", (lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"lparen\", \"union_statement\", \"rparen\", \"with_statement_statement\"], \"postprocess\":  x => track(x, {\n            type: 'with recursive',\n            alias: asName(x[1]),\n            columnNames: x[2].map(asName),\n            bind: x[5],\n            in: unwrap(x[7]),\n        }) },\n    {\"name\": \"with_statement_bindings$ebnf$1\", \"symbols\": []},\n    {\"name\": \"with_statement_bindings$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"with_statement_binding\"], \"postprocess\": last},\n    {\"name\": \"with_statement_bindings$ebnf$1\", \"symbols\": [\"with_statement_bindings$ebnf$1\", \"with_statement_bindings$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"with_statement_bindings\", \"symbols\": [\"with_statement_binding\", \"with_statement_bindings$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"with_statement_binding\", \"symbols\": [\"word\", (lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"lparen\", \"with_statement_statement\", \"rparen\"], \"postprocess\":  x => track(x, {\n            alias: asName(x[0]),\n            statement: unwrap(x[3]),\n        }) },\n    {\"name\": \"with_statement_statement\", \"symbols\": [\"selection\"]},\n    {\"name\": \"with_statement_statement\", \"symbols\": [\"insert_statement\"]},\n    {\"name\": \"with_statement_statement\", \"symbols\": [\"update_statement\"]},\n    {\"name\": \"with_statement_statement\", \"symbols\": [\"delete_statement\"]},\n    {\"name\": \"createtype_statement$subexpression$1\", \"symbols\": [\"createtype_enum\"]},\n    {\"name\": \"createtype_statement$subexpression$1\", \"symbols\": [\"createtype_composite\"]},\n    {\"name\": \"createtype_statement\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create), \"kw_type\", \"qualified_name\", \"createtype_statement$subexpression$1\"], \"postprocess\":  x => track(x, {\n            name: x[2],\n            ...unwrap(x[3]),\n        }) },\n    {\"name\": \"createtype_enum$macrocall$2\", \"symbols\": [\"enum_value\"]},\n    {\"name\": \"createtype_enum$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"createtype_enum$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"createtype_enum$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"createtype_enum$macrocall$1$ebnf$1\", \"symbols\": [\"createtype_enum$macrocall$1$ebnf$1\", \"createtype_enum$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createtype_enum$macrocall$1\", \"symbols\": [\"createtype_enum$macrocall$2\", \"createtype_enum$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"createtype_enum\", \"symbols\": [(lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"kw_enum\", \"lparen\", \"createtype_enum$macrocall$1\", \"rparen\"], \"postprocess\":  x => track(x, {\n            type: 'create enum',\n            values: x[3],\n        }) },\n    {\"name\": \"enum_value\", \"symbols\": [\"string\"], \"postprocess\": x => track(x, {value: toStr(x) })},\n    {\"name\": \"createtype_composite$macrocall$2\", \"symbols\": [\"createtype_composite_attr\"]},\n    {\"name\": \"createtype_composite$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"createtype_composite$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"createtype_composite$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"createtype_composite$macrocall$1$ebnf$1\", \"symbols\": [\"createtype_composite$macrocall$1$ebnf$1\", \"createtype_composite$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"createtype_composite$macrocall$1\", \"symbols\": [\"createtype_composite$macrocall$2\", \"createtype_composite$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"createtype_composite\", \"symbols\": [(lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"lparen\", \"createtype_composite$macrocall$1\", \"rparen\"], \"postprocess\":  x => track(x, {\n            type: 'create composite type',\n            attributes: x[2],\n        }) },\n    {\"name\": \"createtype_composite_attr$ebnf$1\", \"symbols\": [\"createtable_collate\"], \"postprocess\": id},\n    {\"name\": \"createtype_composite_attr$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"createtype_composite_attr\", \"symbols\": [\"word\", \"data_type\", \"createtype_composite_attr$ebnf$1\"], \"postprocess\":  x => {\n            return track(x, {\n                name: asName(x[0]),\n                dataType: x[1],\n                ...x[2] ? { collate: x[2][1] }: {},\n            })\n        } },\n    {\"name\": \"union_left\", \"symbols\": [\"select_statement\"]},\n    {\"name\": \"union_left\", \"symbols\": [\"select_values\"]},\n    {\"name\": \"union_left\", \"symbols\": [\"selection_paren\"]},\n    {\"name\": \"union_right\", \"symbols\": [\"selection\"]},\n    {\"name\": \"union_right\", \"symbols\": [\"selection_paren\"]},\n    {\"name\": \"union_statement$subexpression$1$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_all\") ? {type: \"kw_all\"} : kw_all)], \"postprocess\": id},\n    {\"name\": \"union_statement$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"union_statement$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_union\") ? {type: \"kw_union\"} : kw_union), \"union_statement$subexpression$1$ebnf$1\"]},\n    {\"name\": \"union_statement\", \"symbols\": [\"union_left\", \"union_statement$subexpression$1\", \"union_right\"], \"postprocess\":  x => {\n            return track(x, {\n                type: toStr(x[1], ' '),\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n            });\n        } },\n    {\"name\": \"prepare$ebnf$1$subexpression$1\", \"symbols\": [\"lparen\", \"data_type_list\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"prepare$ebnf$1\", \"symbols\": [\"prepare$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"prepare$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"prepare\", \"symbols\": [\"kw_prepare\", \"ident\", \"prepare$ebnf$1\", (lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"statement_noprep\"], \"postprocess\":  x => track(x, {\n            type: 'prepare',\n            name: asName(x[1]),\n            ...x[2] && { args: x[2] },\n            statement: unwrap(last(x)),\n        }) },\n    {\"name\": \"deallocate$ebnf$1\", \"symbols\": [\"kw_prepare\"], \"postprocess\": id},\n    {\"name\": \"deallocate$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"deallocate\", \"symbols\": [\"kw_deallocate\", \"deallocate$ebnf$1\", \"deallocate_target\"], \"postprocess\":  x => track(x, {\n            type: 'deallocate',\n            target: x[2],\n        }) },\n    {\"name\": \"deallocate_target\", \"symbols\": [\"deallocate_all\"], \"postprocess\": unwrap},\n    {\"name\": \"deallocate_target\", \"symbols\": [\"deallocate_name\"], \"postprocess\": unwrap},\n    {\"name\": \"deallocate_name\", \"symbols\": [\"ident\"], \"postprocess\": x => track(x, asName(x[0]) )},\n    {\"name\": \"deallocate_all\", \"symbols\": [(lexerAny.has(\"kw_all\") ? {type: \"kw_all\"} : kw_all)], \"postprocess\": x => track(x, { option: 'all' })},\n    {\"name\": \"create_view_statements\", \"symbols\": [\"create_view\"]},\n    {\"name\": \"create_view_statements\", \"symbols\": [\"create_materialized_view\"]},\n    {\"name\": \"create_view$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_or\") ? {type: \"kw_or\"} : kw_or), \"kw_replace\"]},\n    {\"name\": \"create_view$ebnf$1\", \"symbols\": [\"create_view$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"create_view$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_view$ebnf$2$subexpression$1\", \"symbols\": [\"kw_temp\"]},\n    {\"name\": \"create_view$ebnf$2$subexpression$1\", \"symbols\": [\"kw_temporary\"]},\n    {\"name\": \"create_view$ebnf$2\", \"symbols\": [\"create_view$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"create_view$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_view$ebnf$3\", \"symbols\": [\"kw_recursive\"], \"postprocess\": id},\n    {\"name\": \"create_view$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_view$ebnf$4$subexpression$1$macrocall$2\", \"symbols\": [\"ident\"]},\n    {\"name\": \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"create_view$ebnf$4$subexpression$1$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": [\"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1\", \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"create_view$ebnf$4$subexpression$1$macrocall$1\", \"symbols\": [\"create_view$ebnf$4$subexpression$1$macrocall$2\", \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"create_view$ebnf$4$subexpression$1\", \"symbols\": [\"lparen\", \"create_view$ebnf$4$subexpression$1$macrocall$1\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"create_view$ebnf$4\", \"symbols\": [\"create_view$ebnf$4$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"create_view$ebnf$4\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_view$ebnf$5\", \"symbols\": [\"create_view_opts\"], \"postprocess\": id},\n    {\"name\": \"create_view$ebnf$5\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_view$ebnf$6$subexpression$1$subexpression$1\", \"symbols\": [\"kw_local\"]},\n    {\"name\": \"create_view$ebnf$6$subexpression$1$subexpression$1\", \"symbols\": [\"kw_cascaded\"]},\n    {\"name\": \"create_view$ebnf$6$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with), \"create_view$ebnf$6$subexpression$1$subexpression$1\", (lexerAny.has(\"kw_check\") ? {type: \"kw_check\"} : kw_check), \"kw_option\"], \"postprocess\": get(1)},\n    {\"name\": \"create_view$ebnf$6\", \"symbols\": [\"create_view$ebnf$6$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"create_view$ebnf$6\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_view\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create), \"create_view$ebnf$1\", \"create_view$ebnf$2\", \"create_view$ebnf$3\", \"kw_view\", \"qualified_name\", \"create_view$ebnf$4\", \"create_view$ebnf$5\", (lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"selection\", \"create_view$ebnf$6\"], \"postprocess\":  x => {\n            return track(x, {\n                type: 'create view',\n                ... x[1] && {orReplace: true},\n                ... x[2] && {temp: true},\n                ... x[3] && {recursive: true},\n                name: x[5],\n                ... x[6] && {columnNames: x[6].map(asName)},\n                ... x[7] && {parameters: fromEntries(x[7])},\n                query: x[9],\n                ... x[10] && { checkOption: toStr(x[10]) },\n            })\n        } },\n    {\"name\": \"create_view_opt\", \"symbols\": [\"ident\", (lexerAny.has(\"op_eq\") ? {type: \"op_eq\"} : op_eq), \"ident\"], \"postprocess\": ([a, _, b]) => [toStr(a), toStr(b)]},\n    {\"name\": \"create_view_opts$macrocall$2\", \"symbols\": [\"create_view_opt\"]},\n    {\"name\": \"create_view_opts$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"create_view_opts$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"create_view_opts$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"create_view_opts$macrocall$1$ebnf$1\", \"symbols\": [\"create_view_opts$macrocall$1$ebnf$1\", \"create_view_opts$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"create_view_opts$macrocall$1\", \"symbols\": [\"create_view_opts$macrocall$2\", \"create_view_opts$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"create_view_opts\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with), \"create_view_opts$macrocall$1\"], \"postprocess\": last},\n    {\"name\": \"create_materialized_view$ebnf$1\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id},\n    {\"name\": \"create_materialized_view$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$2\", \"symbols\": [\"ident\"]},\n    {\"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"create_materialized_view$ebnf$2$subexpression$1$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": [\"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1\", \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1\", \"symbols\": [\"create_materialized_view$ebnf$2$subexpression$1$macrocall$2\", \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"create_materialized_view$ebnf$2$subexpression$1\", \"symbols\": [\"lparen\", \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"create_materialized_view$ebnf$2\", \"symbols\": [\"create_materialized_view$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"create_materialized_view$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_materialized_view$ebnf$3\", \"symbols\": [\"create_view_opts\"], \"postprocess\": id},\n    {\"name\": \"create_materialized_view$ebnf$3\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_materialized_view$ebnf$4$subexpression$1\", \"symbols\": [\"kw_tablespace\", \"ident\"], \"postprocess\": last},\n    {\"name\": \"create_materialized_view$ebnf$4\", \"symbols\": [\"create_materialized_view$ebnf$4$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"create_materialized_view$ebnf$4\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_materialized_view$ebnf$5$subexpression$1$ebnf$1\", \"symbols\": [\"kw_no\"], \"postprocess\": id},\n    {\"name\": \"create_materialized_view$ebnf$5$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_materialized_view$ebnf$5$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with), \"create_materialized_view$ebnf$5$subexpression$1$ebnf$1\", \"kw_data\"]},\n    {\"name\": \"create_materialized_view$ebnf$5\", \"symbols\": [\"create_materialized_view$ebnf$5$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"create_materialized_view$ebnf$5\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_materialized_view\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create), \"kw_materialized\", \"kw_view\", \"create_materialized_view$ebnf$1\", \"qualified_name\", \"create_materialized_view$ebnf$2\", \"create_materialized_view$ebnf$3\", \"create_materialized_view$ebnf$4\", (lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"selection\", \"create_materialized_view$ebnf$5\"], \"postprocess\":  x => {\n            return track(x, {\n                type: 'create materialized view',\n                ... x[3] && {ifNotExists: true},\n                name: x[4],\n                ... x[5] && {columnNames: x[6].map(asName)},\n                ... x[6] && {parameters: fromEntries(x[6])},\n                ... x[7] && {tablespace: asName(x[7]) },\n                query: x[9],\n                ... x[10] && { withData: toStr(x[10][1]) !== 'no' },\n            })\n        } },\n    {\"name\": \"refresh_view_statements$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_concurrently\") ? {type: \"kw_concurrently\"} : kw_concurrently)], \"postprocess\": id},\n    {\"name\": \"refresh_view_statements$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"refresh_view_statements$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"kw_no\"], \"postprocess\": id},\n    {\"name\": \"refresh_view_statements$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"refresh_view_statements$ebnf$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_with\") ? {type: \"kw_with\"} : kw_with), \"refresh_view_statements$ebnf$2$subexpression$1$ebnf$1\", \"kw_data\"]},\n    {\"name\": \"refresh_view_statements$ebnf$2\", \"symbols\": [\"refresh_view_statements$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"refresh_view_statements$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"refresh_view_statements\", \"symbols\": [\"kw_refresh\", \"kw_materialized\", \"kw_view\", \"refresh_view_statements$ebnf$1\", \"qname\", \"refresh_view_statements$ebnf$2\"], \"postprocess\":  x => track(x, {\n            type: 'refresh materialized view',\n            ... !!x[3] ? { concurrently: true } : {},\n            name: x[4],\n            ... !!x[5] ? { withData: toStr(x[5][1]) !== 'no' } : {},\n        }) },\n    {\"name\": \"functions_statements\", \"symbols\": [\"create_func\"]},\n    {\"name\": \"functions_statements\", \"symbols\": [\"do_stm\"]},\n    {\"name\": \"functions_statements\", \"symbols\": [\"drop_func\"]},\n    {\"name\": \"create_func$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"kw_or\") ? {type: \"kw_or\"} : kw_or), \"kw_replace\"]},\n    {\"name\": \"create_func$ebnf$1\", \"symbols\": [\"create_func$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"create_func$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_func$subexpression$1$ebnf$1$macrocall$2\", \"symbols\": [\"func_argdef\"]},\n    {\"name\": \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"create_func$subexpression$1$ebnf$1$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1\", \"symbols\": [\"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1\", \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"create_func$subexpression$1$ebnf$1$macrocall$1\", \"symbols\": [\"create_func$subexpression$1$ebnf$1$macrocall$2\", \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"create_func$subexpression$1$ebnf$1\", \"symbols\": [\"create_func$subexpression$1$ebnf$1$macrocall$1\"], \"postprocess\": id},\n    {\"name\": \"create_func$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"create_func$subexpression$1\", \"symbols\": [\"lparen\", \"create_func$subexpression$1$ebnf$1\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"create_func$ebnf$2\", \"symbols\": [\"func_spec\"]},\n    {\"name\": \"create_func$ebnf$2\", \"symbols\": [\"create_func$ebnf$2\", \"func_spec\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"create_func\", \"symbols\": [(lexerAny.has(\"kw_create\") ? {type: \"kw_create\"} : kw_create), \"create_func$ebnf$1\", \"kw_function\", \"qname\", \"create_func$subexpression$1\", \"create_func$ebnf$2\"], \"postprocess\":  (x, rej) => {\n            const specs: any = {};\n            for (const s of x[5]) {\n                for (const k in s) {\n                    if (k[0] !== '_' && k in specs) {\n                        throw new Error('conflicting or redundant options ' + k);\n                    }\n                }\n                Object.assign(specs, s);\n            }\n        \n            return track(x, {\n                type: 'create function',\n                ...x[1] && {orReplace: true},\n                name: x[3],\n                arguments: x[4] ?? [],\n                ...specs,\n            });\n        } },\n    {\"name\": \"func_argdef$ebnf$1\", \"symbols\": [\"func_argopts\"], \"postprocess\": id},\n    {\"name\": \"func_argdef$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"func_argdef$ebnf$2\", \"symbols\": [\"func_argdefault\"], \"postprocess\": id},\n    {\"name\": \"func_argdef$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"func_argdef\", \"symbols\": [\"func_argdef$ebnf$1\", \"data_type\", \"func_argdef$ebnf$2\"], \"postprocess\":  x => track(x, {\n            default: x[2],\n            type: x[1],\n            ...x[0],\n        }) },\n    {\"name\": \"func_argdefault\", \"symbols\": [(lexerAny.has(\"kw_default\") ? {type: \"kw_default\"} : kw_default), \"expr\"], \"postprocess\": \n        x => x[1]\n                           },\n    {\"name\": \"func_argdefault\", \"symbols\": [(lexerAny.has(\"op_eq\") ? {type: \"op_eq\"} : op_eq), \"expr\"], \"postprocess\": x => x[1]},\n    {\"name\": \"func_argopts$ebnf$1\", \"symbols\": [\"word\"], \"postprocess\": id},\n    {\"name\": \"func_argopts$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"func_argopts\", \"symbols\": [\"func_argmod\", \"func_argopts$ebnf$1\"], \"postprocess\":  x => track(x, {\n            mode: toStr(x[0]),\n            ...x[1] && { name: asName(x[1]) },\n        }) },\n    {\"name\": \"func_argopts\", \"symbols\": [\"word\"], \"postprocess\":  (x, rej) => {\n            const name = asName(x);\n            if (name === 'out' || name === 'inout' || name === 'variadic') {\n                return rej; // avoid ambiguous syntax\n            }\n            return track(x, {name});\n        } },\n    {\"name\": \"func_argmod\", \"symbols\": [(lexerAny.has(\"kw_in\") ? {type: \"kw_in\"} : kw_in)]},\n    {\"name\": \"func_argmod\", \"symbols\": [\"kw_out\"]},\n    {\"name\": \"func_argmod\", \"symbols\": [\"kw_inout\"]},\n    {\"name\": \"func_argmod\", \"symbols\": [\"kw_variadic\"]},\n    {\"name\": \"func_spec\", \"symbols\": [\"kw_language\", \"word\"], \"postprocess\": x => track(x, { language: asName(last(x)) })},\n    {\"name\": \"func_spec\", \"symbols\": [\"func_purity\"], \"postprocess\": x => track(x, {purity: toStr(x)})},\n    {\"name\": \"func_spec$subexpression$1\", \"symbols\": [(lexerAny.has(\"codeblock\") ? {type: \"codeblock\"} : codeblock)]},\n    {\"name\": \"func_spec$subexpression$1\", \"symbols\": [\"string\"]},\n    {\"name\": \"func_spec\", \"symbols\": [(lexerAny.has(\"kw_as\") ? {type: \"kw_as\"} : kw_as), \"func_spec$subexpression$1\"], \"postprocess\": x =>({code: toStr(last(x))})},\n    {\"name\": \"func_spec$ebnf$1\", \"symbols\": [(lexerAny.has(\"kw_not\") ? {type: \"kw_not\"} : kw_not)], \"postprocess\": id},\n    {\"name\": \"func_spec$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"func_spec$subexpression$2\", \"symbols\": [\"word\"], \"postprocess\": kw('leakproof')},\n    {\"name\": \"func_spec\", \"symbols\": [\"func_spec$ebnf$1\", \"func_spec$subexpression$2\"], \"postprocess\": x => track(x, { leakproof: !x[0] })},\n    {\"name\": \"func_spec\", \"symbols\": [\"func_returns\"], \"postprocess\": x => track(x, { returns: unwrap(x) })},\n    {\"name\": \"func_spec$subexpression$3\", \"symbols\": [\"word\"], \"postprocess\": kw('called')},\n    {\"name\": \"func_spec\", \"symbols\": [\"func_spec$subexpression$3\", \"oninp\"], \"postprocess\": () => ({ onNullInput: 'call' })},\n    {\"name\": \"func_spec$subexpression$4\", \"symbols\": [\"word\"], \"postprocess\": kw('returns')},\n    {\"name\": \"func_spec\", \"symbols\": [\"func_spec$subexpression$4\", (lexerAny.has(\"kw_null\") ? {type: \"kw_null\"} : kw_null), \"oninp\"], \"postprocess\": () => ({ onNullInput: 'null' })},\n    {\"name\": \"func_spec$subexpression$5\", \"symbols\": [\"word\"], \"postprocess\": kw('strict')},\n    {\"name\": \"func_spec\", \"symbols\": [\"func_spec$subexpression$5\"], \"postprocess\": () => ({ onNullInput: 'strict' })},\n    {\"name\": \"func_purity\", \"symbols\": [\"word\"], \"postprocess\": kw('immutable')},\n    {\"name\": \"func_purity\", \"symbols\": [\"word\"], \"postprocess\": kw('stable')},\n    {\"name\": \"func_purity\", \"symbols\": [\"word\"], \"postprocess\": kw('volatile')},\n    {\"name\": \"oninp$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('input')},\n    {\"name\": \"oninp\", \"symbols\": [(lexerAny.has(\"kw_on\") ? {type: \"kw_on\"} : kw_on), (lexerAny.has(\"kw_null\") ? {type: \"kw_null\"} : kw_null), \"oninp$subexpression$1\"]},\n    {\"name\": \"func_returns\", \"symbols\": [\"kw_returns\", \"data_type\"], \"postprocess\": last},\n    {\"name\": \"func_returns$macrocall$2\", \"symbols\": [\"func_ret_table_col\"]},\n    {\"name\": \"func_returns$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"func_returns$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"func_returns$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"func_returns$macrocall$1$ebnf$1\", \"symbols\": [\"func_returns$macrocall$1$ebnf$1\", \"func_returns$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"func_returns$macrocall$1\", \"symbols\": [\"func_returns$macrocall$2\", \"func_returns$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"func_returns\", \"symbols\": [\"kw_returns\", (lexerAny.has(\"kw_table\") ? {type: \"kw_table\"} : kw_table), \"lparen\", \"func_returns$macrocall$1\", \"rparen\"], \"postprocess\":  x => track(x, {\n            kind: 'table',\n            columns: x[3],\n        }) },\n    {\"name\": \"func_ret_table_col\", \"symbols\": [\"word\", \"data_type\"], \"postprocess\": x => track(x, {name: asName(x[0]), type: x[1]})},\n    {\"name\": \"do_stm$ebnf$1$subexpression$1\", \"symbols\": [\"kw_language\", \"word\"], \"postprocess\": last},\n    {\"name\": \"do_stm$ebnf$1\", \"symbols\": [\"do_stm$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"do_stm$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"do_stm\", \"symbols\": [(lexerAny.has(\"kw_do\") ? {type: \"kw_do\"} : kw_do), \"do_stm$ebnf$1\", (lexerAny.has(\"codeblock\") ? {type: \"codeblock\"} : codeblock)], \"postprocess\":  x => track(x, {\n            type: 'do',\n            ...x[1] && { language: asName(x[1])},\n            code: x[2].value,\n        }) },\n    {\"name\": \"drop_func$ebnf$1$subexpression$1\", \"symbols\": [\"kw_if\", \"kw_exists\"]},\n    {\"name\": \"drop_func$ebnf$1\", \"symbols\": [\"drop_func$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"drop_func$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"drop_func$ebnf$2\", \"symbols\": [\"drop_func_overload\"], \"postprocess\": id},\n    {\"name\": \"drop_func$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"drop_func\", \"symbols\": [\"kw_drop\", \"kw_function\", \"drop_func$ebnf$1\", \"qname\", \"drop_func$ebnf$2\"], \"postprocess\":  x => track(x, {\n            type: 'drop function',\n            ...x[2] && {ifExists: true},\n            name: x[3],\n            ...x[4] && {arguments: x[4]},\n        }) },\n    {\"name\": \"drop_func_overload$macrocall$2\", \"symbols\": [\"drop_func_overload_col\"]},\n    {\"name\": \"drop_func_overload$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"drop_func_overload$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"drop_func_overload$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"drop_func_overload$macrocall$1$ebnf$1\", \"symbols\": [\"drop_func_overload$macrocall$1$ebnf$1\", \"drop_func_overload$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"drop_func_overload$macrocall$1\", \"symbols\": [\"drop_func_overload$macrocall$2\", \"drop_func_overload$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"drop_func_overload\", \"symbols\": [\"lparen\", \"drop_func_overload$macrocall$1\", \"rparen\"], \"postprocess\": get(1)},\n    {\"name\": \"drop_func_overload_col$ebnf$1\", \"symbols\": [\"word\"], \"postprocess\": id},\n    {\"name\": \"drop_func_overload_col$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"drop_func_overload_col\", \"symbols\": [\"drop_func_overload_col$ebnf$1\", \"qname\"], \"postprocess\":  x => track(x, {\n            type: x[1],\n            ... x[0] && {name: asName(x[0])},\n        }) },\n    {\"name\": \"main$ebnf$1\", \"symbols\": []},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"statement_separator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$2\", \"symbols\": []},\n    {\"name\": \"main$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"statement_separator\"]},\n    {\"name\": \"main$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"main$ebnf$2$subexpression$1$ebnf$1\", \"statement_separator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$2$subexpression$1\", \"symbols\": [\"main$ebnf$2$subexpression$1$ebnf$1\", \"statement\"]},\n    {\"name\": \"main$ebnf$2\", \"symbols\": [\"main$ebnf$2\", \"main$ebnf$2$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$3\", \"symbols\": []},\n    {\"name\": \"main$ebnf$3\", \"symbols\": [\"main$ebnf$3\", \"statement_separator\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main\", \"symbols\": [\"main$ebnf$1\", \"statement\", \"main$ebnf$2\", \"main$ebnf$3\"], \"postprocess\":  ([_, head, _tail]) => {\n            const tail = _tail;\n        \n            const ret = [unwrap(head), ...tail.map((x: any) => unwrap(x[1]))];\n        \n            return ret.length === 1\n                ? ret[0]\n                : ret;\n        } },\n    {\"name\": \"statement_separator\", \"symbols\": [(lexerAny.has(\"semicolon\") ? {type: \"semicolon\"} : semicolon)]},\n    {\"name\": \"statement\", \"symbols\": [\"statement_noprep\"]},\n    {\"name\": \"statement\", \"symbols\": [\"prepare\"]},\n    {\"name\": \"statement\", \"symbols\": [\"deallocate\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"selection\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"createtable_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"createextension_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"createindex_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"simplestatements_all\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"insert_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"update_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"altertable_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"alterindex_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"delete_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"create_sequence_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"alter_sequence_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"drop_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"createtype_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"create_view_statements\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"refresh_view_statements\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"create_schema\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"raise_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"comment_statement\"]},\n    {\"name\": \"statement_noprep\", \"symbols\": [\"functions_statements\"]},\n    {\"name\": \"selection\", \"symbols\": [\"select_statement\"], \"postprocess\": unwrap},\n    {\"name\": \"selection\", \"symbols\": [\"select_values\"], \"postprocess\": unwrap},\n    {\"name\": \"selection\", \"symbols\": [\"with_statement\"], \"postprocess\": unwrap},\n    {\"name\": \"selection\", \"symbols\": [\"with_recursive_statement\"], \"postprocess\": unwrap},\n    {\"name\": \"selection\", \"symbols\": [\"union_statement\"], \"postprocess\": unwrap},\n    {\"name\": \"selection_paren\", \"symbols\": [\"lparen\", \"selection\", \"rparen\"], \"postprocess\": get(1)}\n  ],\n  ParserStart: \"main\",\n};\n\nexport default grammar;\n","// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\ndeclare var start_list: any;\ndeclare var end_list: any;\ndeclare var comma: any;\ndeclare var value: any;\n\nimport {lexerAny} from './array-lexer';\n \n\n    const get = (i: number) => (x: any[]) => x[i];\n    const last = (x: any[]) => x && x[x.length - 1];\n\ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n};\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: never) => string;\n  has: (tokenType: string) => boolean;\n};\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n};\n\ntype NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n};\n\nconst grammar: Grammar = {\n  Lexer: lexerAny,\n  ParserRules: [\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"elements\"], \"postprocess\": id},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"main\", \"symbols\": [(lexerAny.has(\"start_list\") ? {type: \"start_list\"} : start_list), \"main$ebnf$1\", (lexerAny.has(\"end_list\") ? {type: \"end_list\"} : end_list)], \"postprocess\": x => x[1] || []},\n    {\"name\": \"elements$ebnf$1\", \"symbols\": []},\n    {\"name\": \"elements$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"elt\"], \"postprocess\": last},\n    {\"name\": \"elements$ebnf$1\", \"symbols\": [\"elements$ebnf$1\", \"elements$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"elements\", \"symbols\": [\"elt\", \"elements$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [head, ...(tail || [])];\n        } },\n    {\"name\": \"elt\", \"symbols\": [(lexerAny.has(\"value\") ? {type: \"value\"} : value)], \"postprocess\": x => x[0].value},\n    {\"name\": \"elt\", \"symbols\": [\"main\"], \"postprocess\": x => x[0]}\n  ],\n  ParserStart: \"main\",\n};\n\nexport default grammar;\n","import {compile} from 'moo';\n\n// build lexer\nexport const lexer = compile({\n    valueString: {\n        match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/,\n        value: x => JSON.parse(x),\n        type: x => 'value',\n    },\n    valueRaw: {\n        match: /[^\\s,\\{\\}\"](?:[^,\\{\\}\"]*[^\\s,\\{\\}\"])?/,\n        type: () => 'value',\n    },\n    comma: ',',\n    space: { match: /[\\s\\t\\n\\v\\f\\r]+/, lineBreaks: true, },\n    start_list: '{',\n    end_list: '}',\n});\n\nlexer.next = (next => () => {\n    let tok;\n    while ((tok = next.call(lexer)) && (tok.type === 'space')) {\n    }\n    return tok;\n})(lexer.next);\n\nexport const lexerAny: any = lexer;","// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\ndeclare var float: any;\ndeclare var int: any;\ndeclare var comma: any;\ndeclare var lparen: any;\ndeclare var rparen: any;\ndeclare var lcurl: any;\ndeclare var rcurl: any;\ndeclare var lbracket: any;\ndeclare var rbracket: any;\ndeclare var lcomp: any;\ndeclare var rcomp: any;\n\n    import {lexerAny} from './geometric-lexer';\n\n    const get = (i: number) => (x: any[]) => x[i];\n    const last = (x: any[]) => x && x[x.length - 1];\n    function unwrap(e: any[]): any {\n        if (Array.isArray(e) && e.length === 1) {\n            e = unwrap(e[0]);\n        }\n        if (Array.isArray(e) && !e.length) {\n            return null;\n        }\n        return e;\n    }\n\ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n};\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: never) => string;\n  has: (tokenType: string) => boolean;\n};\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n};\n\ntype NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n};\n\nconst grammar: Grammar = {\n  Lexer: lexerAny,\n  ParserRules: [\n    {\"name\": \"number$subexpression$1\", \"symbols\": [\"float\"]},\n    {\"name\": \"number$subexpression$1\", \"symbols\": [\"int\"]},\n    {\"name\": \"number\", \"symbols\": [\"number$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"float\", \"symbols\": [(lexerAny.has(\"float\") ? {type: \"float\"} : float)], \"postprocess\": args => parseFloat(unwrap(args))},\n    {\"name\": \"int\", \"symbols\": [(lexerAny.has(\"int\") ? {type: \"int\"} : int)], \"postprocess\": arg => parseInt(unwrap(arg), 10)},\n    {\"name\": \"comma\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma)], \"postprocess\": id},\n    {\"name\": \"point$macrocall$2\", \"symbols\": [\"point_content\"]},\n    {\"name\": \"point$macrocall$1$subexpression$1\", \"symbols\": [\"point$macrocall$2\"]},\n    {\"name\": \"point$macrocall$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"lparen\") ? {type: \"lparen\"} : lparen), \"point$macrocall$2\", (lexerAny.has(\"rparen\") ? {type: \"rparen\"} : rparen)], \"postprocess\": get(1)},\n    {\"name\": \"point$macrocall$1\", \"symbols\": [\"point$macrocall$1$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"point\", \"symbols\": [\"point$macrocall$1\"], \"postprocess\": unwrap},\n    {\"name\": \"point_content\", \"symbols\": [\"number\", \"comma\", \"number\"], \"postprocess\": x => ({x:x[0],y:x[2]})},\n    {\"name\": \"line\", \"symbols\": [(lexerAny.has(\"lcurl\") ? {type: \"lcurl\"} : lcurl), \"number\", \"comma\", \"number\", \"comma\", \"number\", (lexerAny.has(\"rcurl\") ? {type: \"rcurl\"} : rcurl)], \"postprocess\":  x => ({\n            a: x[1],\n            b: x[3],\n            c: x[5],\n        }) },\n    {\"name\": \"box\", \"symbols\": [\"closed_path\"], \"postprocess\":  ([x], rej) => {\n            if (x.length !== 2) {\n                return rej;\n            }\n            return x;\n        }},\n    {\"name\": \"lseg\", \"symbols\": [\"path\"], \"postprocess\":  ([x], rej) => {\n            if (x.path.length !== 2) {\n                return rej;\n            }\n            return x.path;\n        }},\n    {\"name\": \"path\", \"symbols\": [\"open_path\"], \"postprocess\": ([path]) => ({closed: false, path})},\n    {\"name\": \"path\", \"symbols\": [\"closed_path\"], \"postprocess\": ([path]) => ({closed: true, path})},\n    {\"name\": \"open_path$macrocall$2\", \"symbols\": [(lexerAny.has(\"lbracket\") ? {type: \"lbracket\"} : lbracket)]},\n    {\"name\": \"open_path$macrocall$3\", \"symbols\": [(lexerAny.has(\"rbracket\") ? {type: \"rbracket\"} : rbracket)]},\n    {\"name\": \"open_path$macrocall$1$macrocall$2\", \"symbols\": [\"point\"]},\n    {\"name\": \"open_path$macrocall$1$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"open_path$macrocall$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"open_path$macrocall$1$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"open_path$macrocall$1$macrocall$1$ebnf$1\", \"symbols\": [\"open_path$macrocall$1$macrocall$1$ebnf$1\", \"open_path$macrocall$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"open_path$macrocall$1$macrocall$1\", \"symbols\": [\"open_path$macrocall$1$macrocall$2\", \"open_path$macrocall$1$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"open_path$macrocall$1\", \"symbols\": [\"open_path$macrocall$2\", \"open_path$macrocall$1$macrocall$1\", \"open_path$macrocall$3\"], \"postprocess\": get(1)},\n    {\"name\": \"open_path\", \"symbols\": [\"open_path$macrocall$1\"], \"postprocess\": last},\n    {\"name\": \"closed_path$subexpression$1$macrocall$2\", \"symbols\": [(lexerAny.has(\"lparen\") ? {type: \"lparen\"} : lparen)]},\n    {\"name\": \"closed_path$subexpression$1$macrocall$3\", \"symbols\": [(lexerAny.has(\"rparen\") ? {type: \"rparen\"} : rparen)]},\n    {\"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$2\", \"symbols\": [\"point\"]},\n    {\"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"closed_path$subexpression$1$macrocall$1$macrocall$2\"], \"postprocess\": last},\n    {\"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1\", \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$1$macrocall$2\", \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"closed_path$subexpression$1$macrocall$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$2\", \"closed_path$subexpression$1$macrocall$1$macrocall$1\", \"closed_path$subexpression$1$macrocall$3\"], \"postprocess\": get(1)},\n    {\"name\": \"closed_path$subexpression$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$1\"], \"postprocess\": last},\n    {\"name\": \"closed_path$subexpression$1$macrocall$5\", \"symbols\": [\"point\"]},\n    {\"name\": \"closed_path$subexpression$1$macrocall$4$ebnf$1\", \"symbols\": []},\n    {\"name\": \"closed_path$subexpression$1$macrocall$4$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"comma\") ? {type: \"comma\"} : comma), \"closed_path$subexpression$1$macrocall$5\"], \"postprocess\": last},\n    {\"name\": \"closed_path$subexpression$1$macrocall$4$ebnf$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$4$ebnf$1\", \"closed_path$subexpression$1$macrocall$4$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"closed_path$subexpression$1$macrocall$4\", \"symbols\": [\"closed_path$subexpression$1$macrocall$5\", \"closed_path$subexpression$1$macrocall$4$ebnf$1\"], \"postprocess\":  ([head, tail]) => {\n            return [unwrap(head), ...(tail.map(unwrap) || [])];\n        } },\n    {\"name\": \"closed_path$subexpression$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$4\"], \"postprocess\": last},\n    {\"name\": \"closed_path\", \"symbols\": [\"closed_path$subexpression$1\"], \"postprocess\": get(0)},\n    {\"name\": \"polygon\", \"symbols\": [\"closed_path\"], \"postprocess\": get(0)},\n    {\"name\": \"circle_body\", \"symbols\": [\"point\", \"comma\", \"number\"], \"postprocess\": x => ({c: x[0], r: x[2]})},\n    {\"name\": \"circle$subexpression$1$macrocall$2\", \"symbols\": [(lexerAny.has(\"lcomp\") ? {type: \"lcomp\"} : lcomp)]},\n    {\"name\": \"circle$subexpression$1$macrocall$3\", \"symbols\": [(lexerAny.has(\"rcomp\") ? {type: \"rcomp\"} : rcomp)]},\n    {\"name\": \"circle$subexpression$1$macrocall$1\", \"symbols\": [\"circle$subexpression$1$macrocall$2\", \"circle_body\", \"circle$subexpression$1$macrocall$3\"], \"postprocess\": get(1)},\n    {\"name\": \"circle$subexpression$1\", \"symbols\": [\"circle$subexpression$1$macrocall$1\"]},\n    {\"name\": \"circle$subexpression$1$macrocall$5\", \"symbols\": [(lexerAny.has(\"lparen\") ? {type: \"lparen\"} : lparen)]},\n    {\"name\": \"circle$subexpression$1$macrocall$6\", \"symbols\": [(lexerAny.has(\"rparen\") ? {type: \"rparen\"} : rparen)]},\n    {\"name\": \"circle$subexpression$1$macrocall$4\", \"symbols\": [\"circle$subexpression$1$macrocall$5\", \"circle_body\", \"circle$subexpression$1$macrocall$6\"], \"postprocess\": get(1)},\n    {\"name\": \"circle$subexpression$1\", \"symbols\": [\"circle$subexpression$1$macrocall$4\"]},\n    {\"name\": \"circle$subexpression$1\", \"symbols\": [\"circle_body\"]},\n    {\"name\": \"circle\", \"symbols\": [\"circle$subexpression$1\"], \"postprocess\": unwrap}\n  ],\n  ParserStart: \"number\",\n};\n\nexport default grammar;\n","import {compile} from 'moo';\n\n// build lexer\nexport const lexer = compile({\n    comma: ',',\n    space: { match: /[\\s\\t\\n\\v\\f\\r]+/, lineBreaks: true, },\n    int: /\\-?\\d+(?![\\.\\d])/,\n    float: /\\-?(?:(?:\\d*\\.\\d+)|(?:\\d+\\.\\d*))/,\n    lcurl: '{',\n    rcurl: '}',\n    lparen: '(',\n    rparen: ')',\n    lbracket: '[',\n    rbracket: ']',\n    lcomp: '<',\n    rcomp: '>',\n});\n\nlexer.next = (next => () => {\n    let tok;\n    while ((tok = next.call(lexer)) && (tok.type === 'space')) {\n    }\n    return tok;\n})(lexer.next);\n\nexport const lexerAny: any = lexer;\n","// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\ndeclare var years: any;\ndeclare var months: any;\ndeclare var days: any;\ndeclare var hours: any;\ndeclare var minutes: any;\ndeclare var seconds: any;\ndeclare var milliseconds: any;\ndeclare var int: any;\ndeclare var neg: any;\ndeclare var dot: any;\ndeclare var colon: any;\n\nimport {lexerAny} from './interval-lexer';\n \ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n};\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: never) => string;\n  has: (tokenType: string) => boolean;\n};\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n};\n\ntype NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n};\n\nconst grammar: Grammar = {\n  Lexer: lexerAny,\n  ParserRules: [\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"elt\"]},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"elt\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main\", \"symbols\": [\"main$ebnf$1\"], \"postprocess\":  ([elts]) => {\n            // check unicity\n            const s = new Set();\n            for (const e of elts) {\n                const k = typeof e[1] === 'number'\n                    ? e[0]\n                    : 'time';\n                if (s.has(k)) {\n                    return 'invalid';\n                }\n                s.add(k);\n            }\n            return elts;\n        } },\n    {\"name\": \"elt\", \"symbols\": [\"time\"]},\n    {\"name\": \"elt\", \"symbols\": [\"num\", \"unit\"], \"postprocess\":  ([[n], u]) => {\n            u = u[0].type;\n            return [u, n];\n        } },\n    {\"name\": \"unit\", \"symbols\": [(lexerAny.has(\"years\") ? {type: \"years\"} : years)]},\n    {\"name\": \"unit\", \"symbols\": [(lexerAny.has(\"months\") ? {type: \"months\"} : months)]},\n    {\"name\": \"unit\", \"symbols\": [(lexerAny.has(\"days\") ? {type: \"days\"} : days)]},\n    {\"name\": \"unit\", \"symbols\": [(lexerAny.has(\"hours\") ? {type: \"hours\"} : hours)]},\n    {\"name\": \"unit\", \"symbols\": [(lexerAny.has(\"minutes\") ? {type: \"minutes\"} : minutes)]},\n    {\"name\": \"unit\", \"symbols\": [(lexerAny.has(\"seconds\") ? {type: \"seconds\"} : seconds)]},\n    {\"name\": \"unit\", \"symbols\": [(lexerAny.has(\"milliseconds\") ? {type: \"milliseconds\"} : milliseconds)]},\n    {\"name\": \"num\", \"symbols\": [\"int\"]},\n    {\"name\": \"num\", \"symbols\": [\"float\"]},\n    {\"name\": \"uint\", \"symbols\": [(lexerAny.has(\"int\") ? {type: \"int\"} : int)], \"postprocess\": ([x]) => parseInt(x, 10)},\n    {\"name\": \"int$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"neg\") ? {type: \"neg\"} : neg)]},\n    {\"name\": \"int$ebnf$1\", \"symbols\": [\"int$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"int$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"int\", \"symbols\": [\"int$ebnf$1\", (lexerAny.has(\"int\") ? {type: \"int\"} : int)], \"postprocess\": ([neg, x]) => parseInt(x, 10) * (neg ? -1 : 1)},\n    {\"name\": \"float$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"neg\") ? {type: \"neg\"} : neg)]},\n    {\"name\": \"float$ebnf$1\", \"symbols\": [\"float$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"float$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"float$ebnf$2\", \"symbols\": [(lexerAny.has(\"int\") ? {type: \"int\"} : int)], \"postprocess\": id},\n    {\"name\": \"float$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"float\", \"symbols\": [\"float$ebnf$1\", \"float$ebnf$2\", (lexerAny.has(\"dot\") ? {type: \"dot\"} : dot), (lexerAny.has(\"int\") ? {type: \"int\"} : int)], \"postprocess\": ([neg, ...v])  => parseFloat(v.map(v => v ? v.text : '0').join('')) * (neg ? -1 : 1)},\n    {\"name\": \"time$ebnf$1$subexpression$1\", \"symbols\": [(lexerAny.has(\"colon\") ? {type: \"colon\"} : colon), \"uint\"]},\n    {\"name\": \"time$ebnf$1\", \"symbols\": [\"time$ebnf$1$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"time$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"time$ebnf$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"dot\") ? {type: \"dot\"} : dot), (lexerAny.has(\"int\") ? {type: \"int\"} : int)]},\n    {\"name\": \"time$ebnf$2\", \"symbols\": [\"time$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"time$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"time\", \"symbols\": [\"uint\", (lexerAny.has(\"colon\") ? {type: \"colon\"} : colon), \"uint\", \"time$ebnf$1\", \"time$ebnf$2\"], \"postprocess\":  ([a, _, b, c, d]) => {\n            c = c && c[1];\n            d = d && d[1];\n            const ret = typeof c === 'number' ? [\n                    ['hours', a],\n                    ['minutes', b],\n                    ['seconds', c],\n                ] : [\n                    ['minutes', a],\n                    ['seconds', b],\n                ];\n            if (d) {\n                ret.push(['milliseconds', parseFloat('0.' + d) * 1000]);\n            }\n            return ret;\n        }}\n  ],\n  ParserStart: \"main\",\n};\n\nexport default grammar;\n","import {compile} from 'moo';\n\n// build lexer\nexport const lexer = compile({\n    int: /\\d+/,\n    neg: '-',\n    dot: '.',\n    years: /(?:y|yrs?|years?)\\b/,\n    months: /(?:mon(?:th)?s?)\\b/,\n    days: /(?:d|days?)\\b/,\n    hours: /(?:h|hrs?|hours?)\\b/,\n    minutes: /(?:m|mins?|minutes?)\\b/,\n    seconds: /(?:s|secs?|seconds?)\\b/,\n    milliseconds: /(?:ms|milliseconds?)\\b/,\n    space: { match: /[\\s\\t\\n\\v\\f\\r]+/, lineBreaks: true, },\n    colon: ':',\n});\n\nlexer.next = (next => () => {\n    let tok;\n    while ((tok = next.call(lexer)) && (tok.type === 'space')) {\n    }\n    return tok;\n})(lexer.next);\n\nexport const lexerAny: any = lexer;","// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\ndeclare var int: any;\ndeclare var float: any;\ndeclare var P: any;\ndeclare var T: any;\ndeclare var Y: any;\ndeclare var M: any;\ndeclare var W: any;\ndeclare var D: any;\ndeclare var H: any;\ndeclare var S: any;\n\nimport {lexerAny} from './interval-iso-lexer';\n \ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n};\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: never) => string;\n  has: (tokenType: string) => boolean;\n};\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n};\n\ntype NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n};\n\nconst grammar: Grammar = {\n  Lexer: lexerAny,\n  ParserRules: [\n    {\"name\": \"num\", \"symbols\": [(lexerAny.has(\"int\") ? {type: \"int\"} : int)]},\n    {\"name\": \"num\", \"symbols\": [(lexerAny.has(\"float\") ? {type: \"float\"} : float)]},\n    {\"name\": \"main$ebnf$1\", \"symbols\": []},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"long\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"short\"]},\n    {\"name\": \"main$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"main$ebnf$2$subexpression$1$ebnf$1\", \"short\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main$ebnf$2$subexpression$1\", \"symbols\": [(lexerAny.has(\"T\") ? {type: \"T\"} : T), \"main$ebnf$2$subexpression$1$ebnf$1\"]},\n    {\"name\": \"main$ebnf$2\", \"symbols\": [\"main$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"main$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"main\", \"symbols\": [(lexerAny.has(\"P\") ? {type: \"P\"} : P), \"main$ebnf$1\", \"main$ebnf$2\"], \"postprocess\":  ([_, a, b], rej)  => {\n            b = !b ? [] : b[1]; {}\n            if (!a.length && !b.length) {\n                return rej;\n            }\n            return !a.length ? b\n                : !b.length ? a\n                : [...a, ...b];\n        } },\n    {\"name\": \"long$subexpression$1\", \"symbols\": [(lexerAny.has(\"Y\") ? {type: \"Y\"} : Y)]},\n    {\"name\": \"long$subexpression$1\", \"symbols\": [(lexerAny.has(\"M\") ? {type: \"M\"} : M)]},\n    {\"name\": \"long$subexpression$1\", \"symbols\": [(lexerAny.has(\"W\") ? {type: \"W\"} : W)]},\n    {\"name\": \"long$subexpression$1\", \"symbols\": [(lexerAny.has(\"D\") ? {type: \"D\"} : D)]},\n    {\"name\": \"long\", \"symbols\": [\"num\", \"long$subexpression$1\"], \"postprocess\":  ([n, u]) => {\n            n = parseFloat(n[0].value);\n            u = u[0].type;\n            switch (u) {\n                case 'Y':\n                    return ['years', n];\n                case 'M':\n                    return ['months', n];\n                case 'W':\n                    return ['days', n * 7];\n                case 'D':\n                    return ['days', n];\n                default:\n                    throw new Error('Unexpected unit ' + u);\n            }\n        }},\n    {\"name\": \"short$ebnf$1\", \"symbols\": [(lexerAny.has(\"T\") ? {type: \"T\"} : T)], \"postprocess\": id},\n    {\"name\": \"short$ebnf$1\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"short$subexpression$1\", \"symbols\": [(lexerAny.has(\"H\") ? {type: \"H\"} : H)]},\n    {\"name\": \"short$subexpression$1\", \"symbols\": [(lexerAny.has(\"M\") ? {type: \"M\"} : M)]},\n    {\"name\": \"short$subexpression$1\", \"symbols\": [(lexerAny.has(\"S\") ? {type: \"S\"} : S)]},\n    {\"name\": \"short\", \"symbols\": [\"short$ebnf$1\", \"num\", \"short$subexpression$1\"], \"postprocess\":  ([_, n, u]) => {\n            n = parseFloat(n[0].value);\n            u = u[0].type;\n            switch (u) {\n                case 'H':\n                    return ['hours', n];\n                case 'M':\n                    return ['minutes', n];\n                case 'S':\n                    return ['seconds', n];\n                default:\n                    throw new Error('Unexpected unit ' + u);\n            }\n        }}\n  ],\n  ParserStart: \"num\",\n};\n\nexport default grammar;\n","import {compile} from 'moo';\n\n// build lexer\nexport const lexer = compile({\n    int: /\\-?\\d+(?![\\.\\d])/,\n    float: /\\-?(?:(?:\\d*\\.\\d+)|(?:\\d+\\.\\d*))/,\n    P: 'P',\n    Y: 'Y',\n    M: 'M',\n    W: 'W',\n    D: 'D',\n    H: 'H',\n    S: 'S',\n    T: 'T',\n});\n\nexport const lexerAny: any = lexer;","import { IAstPartialMapper, AstDefaultMapper } from './ast-mapper';\nimport { astVisitor, IAstVisitor, IAstFullVisitor } from './ast-visitor';\nimport { NotSupported, nil, ReplaceReturnType, NoExtraProperties } from './utils';\nimport { TableConstraint, JoinClause, ColumnConstraint, AlterSequenceStatement, CreateSequenceStatement, AlterSequenceSetOptions, CreateSequenceOptions, QName, SetGlobalValue, AlterColumnAddGenerated, QColumn, Name, OrderByStatement, QNameAliased } from './syntax/ast';\nimport { literal } from './pg-escape';\nimport { sqlKeywords } from './keywords';\n\n\n\nexport type IAstToSql = { readonly [key in keyof IAstPartialMapper]-?: ReplaceReturnType<IAstPartialMapper[key], string> }\n\nconst kwSet = new Set(sqlKeywords.map(x => x.toLowerCase()));\n\n\nlet ret: string[] = [];\n\n\nfunction name<T extends Name>(nm: NoExtraProperties<Name, T>) {\n    return ident(nm.name);\n}\n\nfunction ident(nm: string, forceDoubleQuote?: boolean) {\n    if (!forceDoubleQuote) {\n        // only add quotes if has upper cases, or if it is a keyword.\n        const low = nm.toLowerCase();\n        if (low === nm && !kwSet.has(low) && /^[a-z][a-z0-9_]*$/.test(low)) {\n            return nm;\n        }\n    }\n    return '\"' + nm + '\"';\n}\n\nfunction list<T>(elems: T[], act: (e: T) => any, addParen: boolean) {\n    if (addParen) {\n        ret.push('(');\n    }\n    let first = true;\n    for (const e of elems) {\n        if (!first) {\n            ret.push(', ');\n        }\n        first = false;\n        act(e);\n    }\n    if (addParen) {\n        ret.push(')');\n    }\n}\n\n\nfunction addConstraint(c: ColumnConstraint | TableConstraint, m: IAstVisitor) {\n    switch (c.type) {\n        case 'foreign key':\n            ret.push(' foreign key ('\n                , ...c.localColumns.map(name).join(', ')\n                , ')');\n        // 👈 There is no \"break\" here... that's not an error, we want to fall throught the 'reference' case\n        case 'reference':\n            ret.push(' REFERENCES ');\n            m.tableRef(c.foreignTable);\n            ret.push('('\n                , ...c.foreignColumns.map(name).join(', ')\n                , ') ');\n            if (c.match) {\n                ret.push(' MATCH ', c.match.toUpperCase());\n            }\n            if (c.onDelete) {\n                ret.push(' ON DELETE ', c.onDelete);\n            }\n            if (c.onUpdate) {\n                ret.push(' ON UPDATE ', c.onUpdate);\n            }\n            break;\n        case 'primary key':\n        case 'unique':\n            ret.push(' ', c.type, ' ');\n            if ('columns' in c) {\n                ret.push('('\n                    , ...c.columns.map(name).join(', ')\n                    , ') ');\n            }\n            break;\n        case 'check':\n            ret.push(' check ');\n            m.expr(c.expr);\n            break;\n        case 'not null':\n        case 'null':\n            ret.push(' ', c.type, ' ');\n            break;\n        case 'default':\n            ret.push(' default ');\n            m.expr(c.default);\n            break;\n        case 'add generated':\n            ret.push(' GENERATED ');\n            visitGenerated(m, c);\n            break;\n        default:\n            throw NotSupported.never(c)\n    }\n    ret.push(' ');\n}\nfunction visitQualifiedName(cs: QName, forceDoubleQuote?: boolean) {\n    if (cs.schema) {\n        ret.push(ident(cs.schema), '.');\n    }\n    ret.push(ident(cs.name, forceDoubleQuote), ' ');\n}\n\nfunction visitQualifiedNameAliased(cs: QNameAliased) {\n    visitQualifiedName(cs);\n    if (cs.alias) {\n        ret.push(' AS ', ident(cs.alias), ' ');\n    }\n}\n\nfunction visitOrderBy(m: IAstVisitor, orderBy: OrderByStatement[]) {\n    ret.push(' ORDER BY ');\n    list(orderBy, e => {\n        m.expr(e.by);\n        if (e.order) {\n            ret.push(' ', e.order, ' ');\n        }\n        if (e.nulls) {\n            ret.push(' NULLS ', e.nulls, ' ')\n        }\n    }, false);\n}\n\nfunction visitSetVal(set: SetGlobalValue) {\n\n    switch (set.type) {\n        case 'default':\n            ret.push('DEFAULT ');\n            break;\n        case 'identifier':\n            ret.push(set.name);\n            break;\n        case 'list':\n            let first = true;\n            for (const v of set.values) {\n                if (!first) {\n                    ret.push(', ');\n                }\n                first = false;\n                visitSetVal(v);\n            }\n            break;\n        case 'value':\n            ret.push(typeof set.value === 'number' ? set.value.toString() : literal(set.value));\n            break;\n        default:\n            throw NotSupported.never(set);\n    }\n}\n\nfunction visitGenerated(m: IAstVisitor, alter: AlterColumnAddGenerated) {\n    if (alter.always) {\n        ret.push(alter.always.toUpperCase(), ' ');\n    }\n    ret.push('AS IDENTITY ');\n    if (alter.sequence) {\n        ret.push('(');\n        if (alter.sequence.name) {\n            ret.push('SEQUENCE NAME ');\n            visitQualifiedName(alter.sequence.name);\n            ret.push(' ');\n        }\n        visitSeqOpts(m, alter.sequence);\n        ret.push(') ');\n    }\n}\nfunction visitSeqOpts(m: IAstVisitor, cs: AlterSequenceSetOptions | CreateSequenceOptions) {\n    if (cs.as) {\n        ret.push('AS ');\n        m.dataType(cs.as);\n        ret.push(' ');\n    }\n    if (typeof cs.incrementBy === 'number') {\n        ret.push('INCREMENT BY ', cs.incrementBy.toString(), ' ');\n    }\n    if (cs.minValue === 'no minvalue') {\n        ret.push('NO MINVALUE ');\n    }\n    if (typeof cs.minValue === 'number') {\n        ret.push('MINVALUE ', cs.minValue.toString(), ' ');\n    }\n    if (cs.maxValue === 'no maxvalue') {\n        ret.push('NO MAXVALUE ');\n    }\n    if (typeof cs.maxValue === 'number') {\n        ret.push('MAXVALUE ', cs.maxValue.toString(), ' ');\n    }\n    if (typeof cs.startWith === 'number') {\n        ret.push('START WITH ', cs.startWith.toString(), ' ');\n    }\n    if (typeof cs.cache === 'number') {\n        ret.push('CACHE ', cs.cache.toString(), ' ');\n    }\n    if (cs.cycle) {\n        ret.push(cs.cycle, ' ');\n    }\n    if (cs.ownedBy === 'none') {\n        ret.push('OWNED BY NONE ');\n    } else if (cs.ownedBy) {\n        ret.push('OWNED BY ');\n        visitQColumn(cs.ownedBy);\n    }\n\n    if ('restart' in cs) {\n        if (cs.restart === true) {\n            ret.push('RESTART ')\n        } else if (cs.restart) {\n            ret.push('RESTART WITH ', cs.restart.toString(), ' ');\n        }\n    }\n}\n\nfunction visitQColumn(col: QColumn) {\n    if (col.schema) {\n        ret.push(ident(col.schema), '.');\n    }\n    ret.push(ident(col.table), '.', ident(col.column), ' ');\n}\n\nfunction join(m: IAstVisitor, j: JoinClause | nil, tbl: () => void) {\n    if (!j) {\n        tbl();\n        return;\n    }\n    ret.push(j.type, ' ');\n    tbl();\n    if (j.on) {\n        ret.push('ON ')\n        m.expr(j.on);\n    }\n    if (j.using) {\n        ret.push('USING (');\n        list(j.using, x => ret.push(name(x)), false);\n        ret.push(') ');\n    }\n    ret.push(' ');\n}\n\nfunction visitOp(v: { op: string; opSchema?: string; }) {\n    if (v.opSchema) {\n        ret.push(' operator(', ident(v.opSchema), '.', v.op, ') ');\n    } else {\n        ret.push(' ', v.op, ' ');\n    }\n}\n\nconst visitor = astVisitor<IAstFullVisitor>(m => ({\n\n    addColumn: (...args) => {\n        ret.push(' ADD COLUMN ');\n        if (args[0].ifNotExists) {\n            ret.push('IF NOT EXISTS ');\n        }\n        m.super().addColumn(...args);\n    },\n\n    createExtension: e => {\n        ret.push('CREATE EXTENSION ');\n        if (e.ifNotExists) {\n            ret.push(' IF NOT EXISTS ');\n        }\n        ret.push(name(e.extension));\n        if (!e.from && !e.version && !e.schema) {\n            return;\n        }\n        ret.push(' WITH');\n        if (e.schema) {\n            ret.push(' SCHEMA ', name(e.schema));\n        }\n        if (e.version) {\n            ret.push(' VERSION ', literal(e.version.value));\n        }\n        if (e.from) {\n            ret.push(' FROM ', literal(e.from.value));\n        }\n    },\n\n    tablespace: t => {\n        ret.push('TABLESPACE ', name(t.tablespace));\n    },\n\n    addConstraint: c => {\n        ret.push(' ADD ');\n        const cname = c.constraint.constraintName;\n        if (cname) {\n            ret.push(' CONSTRAINT ', name(cname), ' ');\n        }\n        addConstraint(c.constraint, m);\n    },\n\n    alterColumn: (c, t) => {\n        ret.push(' ALTER COLUMN ', name(c.column), ' ');\n        m.super().alterColumn(c, t);\n    },\n\n    setColumnDefault: (a, t, c) => {\n        ret.push(' SET DEFAULT ');\n        m.expr(a.default);\n        if (a.updateExisting) {\n            throw new Error('Not implemented: updateExisting on set column default');\n        }\n    },\n\n    createEnum: t => {\n        ret.push('CREATE TYPE ');\n        visitQualifiedName(t.name);\n        ret.push(' AS ENUM ');\n        list(t.values, x => ret.push(literal(x.value)), true);\n        ret.push(' ');\n    },\n\n    createCompositeType: c => {\n        ret.push('CREATE TYPE ');\n        visitQualifiedName(c.name);\n        ret.push(' AS ');\n        list(c.attributes, x => {\n            ret.push(name(x.name), ' ');\n            m.dataType(x.dataType);\n            if (x.collate) {\n                ret.push('COLLATE ');\n                visitQualifiedName(x.collate);\n            }\n        }, true);\n        ret.push(' ');\n    },\n\n    setTableOwner: o => {\n        ret.push(' OWNER TO ', name(o.to));\n    },\n\n    alterColumnSimple: c => ret.push(c.type),\n\n\n\n    alterColumnAddGenerated: (alter) => {\n        ret.push(' ADD GENERATED ');\n        visitGenerated(m, alter)\n    },\n\n    setColumnType: t => {\n        ret.push(' SET DATA TYPE ');\n        m.dataType(t.dataType);\n        ret.push(' ');\n    },\n\n    alterTable: t => {\n        ret.push('ALTER TABLE ');\n        if (t.ifExists) {\n            ret.push(' IF EXISTS ');\n        }\n        if (t.only) {\n            ret.push(' ONLY ');\n        }\n        visitQualifiedNameAliased(t.table);\n        list(t.changes, change => m.tableAlteration(change, t.table), false);\n    },\n\n    alterIndex: t => {\n        ret.push('ALTER INDEX ');\n        if (t.ifExists) {\n            ret.push(' IF EXISTS ');\n        }\n        visitQualifiedNameAliased(t.index);\n        switch (t.change.type) {\n            case 'rename':\n                ret.push(' RENAME TO ');\n                visitQualifiedName(t.change.to);\n                ret.push(' ');\n                break;\n            case 'set tablespace':\n                ret.push(' SET TABLESPACE ');\n                visitQualifiedName(t.change.tablespace);\n                ret.push(' ');\n                break;\n            default:\n                throw NotSupported.never(t.change, 'Alter index type not supported: ');\n        }\n    },\n\n    tableAlteration: (change, table) => {\n        switch (change.type) {\n            case 'add column':\n                return m.addColumn(change, table);\n            case 'add constraint':\n                return m.addConstraint(change, table);\n            case 'alter column':\n                return m.alterColumn(change, table);\n            case 'rename':\n                return m.renameTable(change, table);\n            case 'rename column':\n                return m.renameColumn(change, table);\n            case 'rename constraint':\n                return m.renameConstraint(change, table);\n            case 'drop column':\n                return m.dropColumn(change, table);\n            case 'drop constraint':\n                return m.dropConstraint(change, table);\n            case 'owner':\n                return m.setTableOwner(change, table);\n            default:\n                throw NotSupported.never(change);\n        }\n    },\n\n    array: v => {\n        ret.push(v.type === 'array' ? 'ARRAY[' : '(');\n        list(v.expressions, e => m.expr(e), false);\n        ret.push(v.type === 'array' ? ']' : ')');\n    },\n\n    arrayIndex: v => {\n        m.expr(v.array);\n        ret.push('[');\n        m.expr(v.index);\n        ret.push('] ');\n    },\n\n    expr: e => {\n        if (e.type === 'ref') {\n            m.ref(e);\n            return;\n        }\n        // lists can become incorrect with an additional set of parentheses\n        if (e.type === 'list') {\n            m.super().expr(e);\n            return;\n        }\n\n        // this forces to respect precedence\n        // (however, it will introduce lots of unecessary parenthesis)\n        ret.push('(');\n        m.super().expr(e);\n        ret.push(')');\n    },\n\n    callOverlay: o => {\n        ret.push('OVERLAY(');\n        m.expr(o.value);\n        ret.push(' PLACING ');\n        m.expr(o.placing);\n        ret.push(' FROM ');\n        m.expr(o.from);\n        if (o.for) {\n            ret.push(' FOR ');\n            m.expr(o.for);\n        }\n        ret.push(')');\n    },\n\n    callSubstring: s => {\n        ret.push('SUBSTRING(');\n        m.expr(s.value);\n        if (s.from) {\n            ret.push(' FROM ');\n            m.expr(s.from);\n        }\n        if (s.for) {\n            ret.push(' FOR ');\n            m.expr(s.for);\n        }\n        ret.push(')');\n    },\n\n    binary: v => {\n        m.expr(v.left);\n        visitOp(v);\n        m.expr(v.right);\n    },\n\n    call: v => {\n        visitQualifiedName(v.function);\n        ret.push('(');\n        if (v.distinct) {\n            ret.push(v.distinct, ' ');\n        }\n        list(v.args, e => m.expr(e), false);\n        if (v.orderBy) {\n            visitOrderBy(m, v.orderBy);\n        }\n        ret.push(') ');\n        if (v.filter) {\n            ret.push('filter (where ');\n            m.expr(v.filter);\n            ret.push(') ');\n        }\n        if (v.over) {\n            ret.push('over (');\n            if (v.over.partitionBy) {\n                ret.push('PARTITION BY ');\n                list(v.over.partitionBy, x => m.expr(x), false);\n                ret.push(' ');\n            }\n            if (v.over.orderBy) {\n                visitOrderBy(m, v.over.orderBy);\n                ret.push(' ');\n            }\n            ret.push(') ');\n        }\n    },\n\n    case: c => {\n        ret.push('CASE ')\n        if (c.value) {\n            m.expr(c.value);\n        }\n\n        for (const e of c.whens) {\n            ret.push(' WHEN ');\n            m.expr(e.when);\n            ret.push(' THEN ')\n            m.expr(e.value);\n        }\n\n        if (c.else) {\n            ret.push(' ELSE ');\n            m.expr(c.else);\n        }\n        ret.push(' END ');\n    },\n\n    cast: c => {\n        m.expr(c.operand);\n        ret.push('::');\n        m.dataType(c.to);\n    },\n\n    constant: c => {\n        switch (c.type) {\n            case 'boolean':\n                ret.push(c.value ? 'true' : 'false');\n                break;\n            case 'integer':\n                ret.push(c.value.toString(10));\n                break;\n            case 'numeric':\n                ret.push(c.value.toString());\n                if (Number.isInteger(c.value)) {\n                    ret.push('.');\n                }\n                break;\n            case 'null':\n                ret.push('null');\n                break;\n            case 'constant':\n                break;\n            case 'string':\n                ret.push(literal(c.value));\n                break;\n            default:\n                throw NotSupported.never(c);\n        }\n    },\n\n    valueKeyword: v => {\n        ret.push(v.keyword, ' ');\n    },\n\n    comment: c => {\n        ret.push('COMMENT ON ', c.on.type.toUpperCase(), ' ');\n        switch (c.on.type) {\n            case 'column':\n                visitQColumn(c.on.column);\n                break;\n            default:\n                visitQualifiedName(c.on.name);\n                break;\n        }\n        ret.push(' IS ', literal(c.comment), ' ');\n    },\n\n    extract: v => {\n        ret.push('EXTRACT (', v.field.name.toUpperCase(), ' FROM ');\n        m.expr(v.from);\n        ret.push(') ');\n    },\n\n    createColumn: c => {\n        ret.push(name(c.name), ' ');\n        m.dataType(c.dataType);\n        ret.push(' ');\n        if (c.collate) {\n            ret.push('COLLATE ');\n            visitQualifiedName(c.collate);\n        }\n        for (const cst of c.constraints ?? []) {\n            m.constraint(cst);\n        }\n    },\n\n    begin: beg => {\n        ret.push('BEGIN ');\n        if (beg.isolationLevel) {\n            ret.push('ISOLATION LEVEL ', beg.isolationLevel.toUpperCase(), ' ');\n        }\n        if (beg.writeable) {\n            ret.push(beg.writeable.toUpperCase(), ' ');\n        }\n        if (typeof beg.deferrable === 'boolean') {\n            if (!beg.deferrable) {\n                ret.push('NOT ');\n            }\n            ret.push('DEFERRABLE ');\n        }\n    },\n\n    alterSequence: cs => {\n        ret.push('ALTER SEQUENCE ');\n        if (cs.ifExists) {\n            ret.push('IF EXISTS ');\n        }\n        visitQualifiedName(cs.name);\n        switch (cs.change.type) {\n            case 'set options':\n                visitSeqOpts(m, cs.change);\n                break;\n            case 'rename':\n                ret.push('RENAME TO ', name(cs.change.newName), ' ');\n                break;\n            case 'set schema':\n                ret.push('SET SCHEMA ', name(cs.change.newSchema), ' ');\n                break;\n            case 'owner to':\n                const own = cs.change.owner;\n                ret.push('OWNER TO ', name(cs.change.owner), ' ');\n                break;\n            default:\n                throw NotSupported.never(cs.change);\n        }\n    },\n\n    createSequence: cs => {\n        ret.push('CREATE ');\n        if (cs.temp) {\n            ret.push('TEMPORARY ');\n        }\n        ret.push('SEQUENCE ');\n        if (cs.ifNotExists) {\n            ret.push('IF NOT EXISTS ');\n        }\n        visitQualifiedName(cs.name);\n        visitSeqOpts(m, cs.options);\n    },\n\n\n    drop: val => {\n        ret.push(val.type.toUpperCase(), ' ');\n        if (val.concurrently) {\n            ret.push('CONCURRENTLY ');\n        }\n        if (val.ifExists) {\n            ret.push('IF EXISTS ');\n        }\n        list(val.names, x => m.tableRef(x), false);\n        if (val.cascade) {\n            ret.push(val.cascade.toUpperCase(), ' ');\n        }\n    },\n\n    constraint: cst => {\n        if (cst.constraintName) {\n            ret.push(' CONSTRAINT ', name(cst.constraintName), ' ');\n        }\n        addConstraint(cst, m);\n    },\n\n    do: d => {\n        ret.push('DO');\n        if (d.language) {\n            ret.push(' LANGUAGE ', d.language.name);\n        }\n        ret.push(' $$', d.code, '$$');\n    },\n\n    createFunction: c => {\n        ret.push(c.orReplace ? 'CREATE OR REPLACE FUNCTION ' : 'CREATE FUNCTION ');\n\n        visitQualifiedName(c.name);\n\n        // args\n        list(c.arguments, a => {\n            if (a.mode) {\n                ret.push(a.mode, ' ');\n            }\n            if (a.name) {\n                ret.push(name(a.name), ' ');\n            }\n            m.dataType(a.type);\n            if (a.default) {\n                ret.push(\" = \");\n                m.expr(a.default);\n            }\n        }, true);\n\n        // ret type\n        if (c.returns) {\n            switch (c.returns.kind) {\n                case 'table':\n                    ret.push(' RETURNS TABLE ');\n                    list(c.returns.columns, t => {\n                        ret.push(name(t.name), ' ');\n                        m.dataType(t.type);\n                    }, true);\n                    break;\n                case undefined:\n                case null:\n                case 'array':\n                    ret.push(' RETURNS ');\n                    m.dataType(c.returns);\n                    break;\n                default:\n                    throw NotSupported.never(c.returns);\n            }\n        }\n\n        ret.push(' AS $$', c.code ?? '', '$$');\n\n        // function settings\n        if (c.language) {\n            ret.push('LANGUAGE ', c.language.name, ' ');\n        }\n        if (c.purity) {\n            ret.push(c.purity.toUpperCase(), ' ');\n        }\n        if (typeof c.leakproof === 'boolean') {\n            ret.push(c.leakproof ? 'LEAKPROOF ' : 'NOT LEAKPROOF ');\n        }\n        switch (c.onNullInput) {\n            case 'call':\n                ret.push('CALLED ON NULL INPUT ');\n                break;\n            case 'null':\n                ret.push('RETURNS NULL ON NULL INPUT ');\n                break;\n            case 'strict':\n                ret.push('STRICT ');\n                break;\n            case null:\n            case undefined:\n                break;\n            default:\n                throw NotSupported.never(c.onNullInput);\n        }\n    },\n\n\n    dropFunction: d => {\n        ret.push('DROP FUNCTION ');\n        if (d.ifExists) {\n            ret.push('IF EXISTS ');\n        }\n        visitQualifiedName(d.name);\n\n        if (d.arguments) {\n            list(d.arguments, a => {\n                if (a.name) {\n                    visitQualifiedName(a.name);\n                    ret.push(' ');\n                }\n                m.dataType(a.type);\n            }, true);\n        }\n        ret.push(' ');\n    },\n\n    with: w => {\n        ret.push('WITH ');\n        list(w.bind, b => {\n            ret.push(name(b.alias), ' AS (');\n            m.statement(b.statement);\n            ret.push(') ');\n        }, false);\n\n        m.statement(w.in);\n    },\n\n    withRecursive: val => {\n        ret.push('WITH RECURSIVE '\n            , name(val.alias)\n            , '('\n            , ...val.columnNames.map(name).join(', ')\n            , ') AS (');\n        m.union(val.bind);\n        ret.push(') ');\n        m.statement(val.in);\n    },\n\n\n    setGlobal: g => {\n        ret.push('SET ', name(g.variable), ' = ');\n        visitSetVal(g.set);\n    },\n\n    setTimezone: g => {\n        ret.push('SET TIME ZONE ');\n        switch (g.to.type) {\n            case 'default':\n            case 'local':\n                ret.push(g.to.type.toUpperCase(), ' ');\n                break;\n            case 'value':\n                ret.push(typeof g.to.value === 'string'\n                    ? literal(g.to.value)\n                    : g.to.value.toString(10));\n                break;\n            case 'interval':\n                ret.push('INTERVAL ', literal(g.to.value), ' HOUR TO MINUTE');\n                break;\n            default:\n                throw NotSupported.never(g.to);\n        }\n    },\n\n    dataType: d => {\n        if (d?.kind === 'array') {\n            m.dataType(d.arrayOf!)\n            ret.push('[]');\n            return;\n        }\n        if (!d?.name) {\n            ret.push('unkown');\n            return;\n        }\n        let appendConfig = true;\n        if (d.schema) {\n            visitQualifiedName(d, d.doubleQuoted);\n        } else {\n            // see https://www.postgresql.org/docs/13/datatype.html\n            // & issue https://github.com/oguimbal/pgsql-ast-parser/issues/38\n            if (d.doubleQuoted) {\n                visitQualifiedName(d, true);\n            } else {\n                switch (d.name) {\n                    case 'double precision':\n                    case 'character varying':\n                    case 'bit varying':\n                        ret.push(d.name, ' ');\n                        break;\n                    case 'time without time zone':\n                    case 'timestamp without time zone':\n                    case 'time with time zone':\n                    case 'timestamp with time zone':\n                        const parts = d.name.split(' ');\n\n                        ret.push(parts.shift()!);\n                        if (d.config?.length) {\n                            list(d.config, v => ret.push(v.toString(10)), true);\n                        }\n                        ret.push(' ');\n\n                        ret.push(parts.join(' '), ' ');\n                        appendConfig = false;\n                        break;\n                    default:\n                        visitQualifiedName(d);\n                        break;\n                }\n            }\n        }\n\n        if (appendConfig && d.config?.length) {\n            list(d.config, v => ret.push(v.toString(10)), true);\n        }\n    },\n\n    createIndex: c => {\n        ret.push(c.unique ? 'CREATE UNIQUE INDEX ' : 'CREATE INDEX ');\n        if (c.ifNotExists) {\n            ret.push(' IF NOT EXISTS ');\n        }\n        if (c.indexName) {\n            ret.push(name(c.indexName), ' ');\n        }\n        ret.push('ON ');\n        m.tableRef(c.table);\n        if (c.using) {\n            ret.push('USING ', name(c.using), ' ');\n        }\n        list(c.expressions, e => {\n            m.expr(e.expression);\n            ret.push(' ');\n            if (e.collate) {\n                ret.push('COLLATE ');\n                visitQualifiedName(e.collate);\n            }\n            if (e.opclass) {\n                visitQualifiedName(e.opclass);\n            }\n            if (e.order) {\n                ret.push(e.order, ' ');\n            }\n            if (e.nulls) {\n                ret.push('nulls ', e.nulls, ' ');\n            }\n        }, true);\n        if (c.with) {\n            ret.push('WITH ');\n            list(c.with, w => {\n                ret.push(w.parameter, ' = ', literal(w.value));\n            }, true);\n        }\n        if (c.tablespace) {\n            ret.push('TABLESPACE ', ident(c.tablespace));\n        }\n        if (c.where) {\n            ret.push(' WHERE ');\n            m.expr(c.where);\n        }\n        ret.push(' ');\n    },\n\n    createTable: t => {\n        ret.push('CREATE ');\n        if (t.locality) {\n            ret.push(t.locality.toUpperCase(), ' ');\n        }\n        if (t.temporary) {\n            ret.push('TEMPORARY ');\n        }\n        if (t.unlogged) {\n            ret.push('UNLOGGED ');\n        }\n        ret.push(t.ifNotExists ? 'TABLE IF NOT EXISTS ' : 'TABLE ');\n        m.tableRef(t.name);\n        ret.push('(');\n        list(t.columns, c => {\n            switch (c.kind) {\n                case 'column':\n                    return m.createColumn(c);\n                case 'like table':\n                    return m.likeTable(c);\n                default:\n                    throw NotSupported.never(c);\n            }\n        }, false);\n        if (t.constraints) {\n            ret.push(', ');\n            list(t.constraints, c => {\n                const cname = c.constraintName;\n                if (cname) {\n                    ret.push('CONSTRAINT ', name(cname), ' ');\n                }\n                addConstraint(c, m);\n            }, false)\n        }\n        ret.push(') ');\n        if (t.inherits?.length) {\n            ret.push(' INHERITS ');\n            list(t.inherits, i => visitQualifiedName(i), true);\n        }\n    },\n\n    likeTable: l => {\n        ret.push(' LIKE ');\n        m.tableRef(l.like);\n        ret.push(' ');\n        for (const { verb, option } of l.options) {\n            ret.push(verb.toUpperCase(), ' ', option.toUpperCase(), ' ');\n        }\n    },\n\n    createSchema: s => {\n        ret.push(s.ifNotExists ? 'CREATE SCHEMA IF NOT EXISTS ' : 'CREATE SCHEMA ');\n        ret.push(name(s.name));\n    },\n\n    truncateTable: t => {\n        ret.push('TRUNCATE TABLE ');\n        let first = true;\n        for (const tbl of t.tables) {\n            if (!first) {\n                ret.push(', ');\n            }\n            first = false;\n            m.tableRef(tbl);\n        }\n        if (t.identity) {\n            switch (t.identity) {\n                case 'restart':\n                    ret.push(' RESTART IDENTITY ');\n                    break;\n                case 'continue':\n                    ret.push(' CONTINUE IDENTITY ');\n                    break;\n            }\n        }\n        if (t.cascade) {\n            ret.push(' ', t.cascade, ' ');\n        }\n    },\n\n    delete: t => {\n        ret.push('DELETE FROM ');\n        m.tableRef(t.from);\n        if (t.where) {\n            ret.push(' WHERE ');\n            m.expr(t.where);\n        }\n\n        if (t.returning) {\n            ret.push(' RETURNING ');\n            list(t.returning, r => m.selectionColumn(r), false);\n        }\n        ret.push(' ');\n    },\n\n    dropColumn: t => {\n        ret.push(' DROP COLUMN ');\n        if (t.ifExists) {\n            ret.push(' IF EXISTS ');\n        }\n        ret.push(name(t.column));\n        if (t.behaviour) {\n            ret.push(' ', t.behaviour);\n        }\n        ret.push(' ');\n    },\n\n    dropConstraint: t => {\n        ret.push(' DROP CONSTRAINT ');\n        if (t.ifExists) {\n            ret.push(' IF EXISTS ');\n        }\n        ret.push(name(t.constraint));\n        if (t.behaviour) {\n            ret.push(' ', t.behaviour.toUpperCase(), ' ');\n        }\n    },\n\n    from: t => m.super().from(t),\n\n    fromCall: s => {\n\n        join(m, s.join, () => {\n            m.call(s);\n            if (s.withOrdinality) {\n                ret.push(' WITH ORDINALITY')\n            }\n            if (s.alias) {\n                ret.push(' AS ', name<Name>(s.alias), ' ');\n                const len = s.alias.columns?.length ?? 0;\n                if (len > 0) {\n                    ret.push('(')\n                    for (let ix = 0; ix < len; ++ix) {\n                        if (ix !== 0) {\n                            ret.push(', ')\n                        }\n                        ret.push(name(s.alias.columns![ix]));\n                    }\n                    ret.push(')')\n                }\n            }\n        });\n\n        ret.push(' ');\n    },\n\n    fromStatement: s => {\n\n        // todo: use 's.db' if defined\n        join(m, s.join, () => {\n            ret.push('(');\n            m.select(s.statement);\n            ret.push(') ');\n            if (s.alias) {\n                ret.push(' AS ', ident(s.alias));\n                if (s.columnNames) {\n                    list(s.columnNames, c => ret.push(name(c)), true);\n                }\n                ret.push(' ');\n            }\n        });\n\n        ret.push(' ');\n    },\n\n    values: s => {\n        ret.push('VALUES ');\n        list(s.values, vlist => {\n            list(vlist, e => {\n                m.expr(e);\n            }, true);\n        }, false);\n    },\n\n    fromTable: s => {\n        join(m, s.join, () => {\n            m.tableRef(s.name);\n            if (s.name.columnNames) {\n                if (!s.name.alias) {\n                    throw new Error('Cannot specify aliased column names without an alias');\n                }\n                list(s.name.columnNames, c => ret.push(name(c)), true);\n            }\n        });\n    },\n\n    join: j => {\n        throw new Error('Should not happen 💀');\n    },\n\n    insert: i => {\n        ret.push('INSERT INTO ');\n        m.tableRef(i.into);\n\n        if (i.columns) {\n            ret.push(\n                '('\n                , i.columns.map(name).join(', ')\n                , ')'\n            );\n        }\n        ret.push(' ');\n        if (i.overriding) {\n            ret.push('OVERRIDING ', i.overriding.toUpperCase(), ' VALUE ');\n        }\n\n        m.select(i.insert);\n        ret.push(' ');\n\n        if (i.onConflict) {\n            ret.push('ON CONFLICT ');\n            const on = i.onConflict.on;\n            switch (on?.type) {\n                case 'on expr':\n                    list(on.exprs, e => m.expr(e), true);\n                    break;\n                case 'on constraint':\n                    ret.push('ON CONSTRAINT ');\n                    visitQualifiedName(on.constraint);\n                case null:\n                case undefined:\n                    break;\n                default:\n                    throw NotSupported.never(on);\n            }\n            if (i.onConflict.do === 'do nothing') {\n                ret.push(' DO NOTHING');\n            } else {\n                ret.push(' DO UPDATE SET ');\n                list(i.onConflict.do.sets, s => m.set(s), false);\n                if (i.onConflict.where) {\n                    ret.push(' WHERE ');\n                    m.expr(i.onConflict.where);\n                }\n            }\n            ret.push(' ');\n        }\n\n        if (i.returning) {\n            ret.push(' RETURNING ');\n            list(i.returning, r => m.selectionColumn(r), false);\n        }\n    },\n\n    raise: r => {\n        ret.push('RAISE ');\n        if (r.level) {\n            ret.push(r.level.toUpperCase(), ' ');\n        }\n        ret.push(literal(r.format), ' ');\n\n        if (r.formatExprs?.length) {\n            ret.push(', ');\n            list(r.formatExprs, e => m.expr(e), false);\n        }\n        if (r.using?.length) {\n            ret.push(' USING ');\n            list(r.using, ({ type, value }) => {\n                ret.push(type.toUpperCase(), '=');\n                m.expr(value);\n            }, false);\n        }\n        ret.push(' ');\n    },\n\n    default: () => {\n        ret.push(' DEFAULT ');\n    },\n\n    member: e => {\n        m.expr(e.operand);\n        ret.push(e.op);\n        ret.push(typeof e.member === 'number'\n            ? e.member.toString(10)\n            : literal(e.member));\n    },\n\n    ref: r => {\n        if (r.table) {\n            visitQualifiedName(r.table);\n            ret.push('.');\n        }\n        ret.push(r.name === '*' ? '*' : ident(r.name));\n    },\n\n    parameter: p => {\n        ret.push(p.name);\n    },\n\n    renameColumn: r => {\n        ret.push(' RENAME COLUMN '\n            , name(r.column)\n            , ' TO '\n            , name(r.to));\n    },\n\n    renameConstraint: r => {\n        ret.push(' RENAME CONSTRAINT '\n            , name(r.constraint)\n            , ' TO '\n            , name(r.to));\n    },\n\n    renameTable: r => {\n        ret.push(' RENAME TO '\n            , name(r.to));\n    },\n\n    createView: c => {\n        ret.push('CREATE ');\n        if (c.orReplace) {\n            ret.push('OR REPLACE ');\n        }\n        if (c.temp) {\n            ret.push('TEMP ');\n        }\n        if (c.recursive) {\n            ret.push('RECURSIVE ');\n        }\n        ret.push('VIEW ');\n        m.tableRef(c.name);\n        if (c.columnNames) {\n            list(c.columnNames, c => ret.push(name(c)), true);\n        }\n        const opts = c.parameters && Object.entries(c.parameters);\n        if (opts?.length) {\n            ret.push(' WITH ');\n            list(opts, ([k, v]) => ret.push(k, '=', v), false);\n        }\n        ret.push(' AS ');\n        m.select(c.query);\n        if (c.checkOption) {\n            ret.push(' WITH ', c.checkOption.toUpperCase(), ' CHECK OPTION');\n        }\n    },\n\n    createMaterializedView: c => {\n        ret.push('CREATE MATERIALIZED VIEW ');\n        if (c.ifNotExists) {\n            ret.push('IF NOT EXISTS ');\n        }\n        m.tableRef(c.name);\n        if (c.columnNames) {\n            list(c.columnNames, c => ret.push(name(c)), true);\n        }\n        const opts = c.parameters && Object.entries(c.parameters);\n        if (opts?.length) {\n            ret.push(' WITH ');\n            list(opts, ([k, v]) => ret.push(k, '=', v), false);\n        }\n        if (c.tablespace) {\n            ret.push(' TABLESPACE ', name(c.tablespace));\n        }\n        ret.push(' AS ');\n        m.select(c.query);\n        if (typeof c.withData === 'boolean') {\n            ret.push(c.withData ? ' WITH DATA' : ' WITH NO DATA');\n        }\n    },\n\n    refreshMaterializedView: val => {\n        ret.push('REFRESH MATERIALIZED VIEW ');\n        if (val.concurrently) {\n            ret.push('CONCURRENTLY ');\n        }\n        m.tableRef(val.name);\n        if (typeof val.withData === 'boolean') {\n            ret.push(val.withData ? ' WITH DATA' : ' WITH NO DATA');\n        }\n    },\n\n    select: s => m.super().select(s),\n\n    selection: s => {\n        ret.push('SELECT ');\n\n        if (s.distinct) {\n            if (typeof s.distinct === 'string') {\n                ret.push(s.distinct.toUpperCase());\n            } else {\n                ret.push(' DISTINCT ON ');\n                list(s.distinct, v => m.expr(v), true);\n            }\n            ret.push(' ');\n        }\n\n        if (s.columns) {\n            list(s.columns, c => m.selectionColumn(c), false);\n        }\n        ret.push(' ');\n        if (s.from) {\n            ret.push('FROM ');\n            const tblCnt = s.from.length\n            for (let i = 0; i < tblCnt; i++) {\n                const f = s.from[i];\n                if (i > 0 && !f.join) {\n                    // implicit cross join (https://www.postgresql.org/docs/9.5/sql-select.html#SQL-FROM)\n                    ret.push(',')\n                }\n                m.from(f);\n            }\n            ret.push(' ');\n        }\n\n        if (s.where) {\n            ret.push('WHERE ');\n            m.expr(s.where);\n            ret.push(' ');\n        }\n\n        if (s.groupBy) {\n            ret.push('GROUP BY ');\n            list(s.groupBy, e => m.expr(e), false);\n            ret.push(' ');\n\n            if (s.having) {\n                ret.push(' HAVING ');\n                m.expr(s.having);\n                ret.push(' ');\n            }\n        }\n\n        if (s.orderBy) {\n            visitOrderBy(m, s.orderBy);\n            ret.push(' ');\n        }\n\n        if (s.limit) {\n            if (s.limit.offset) {\n                ret.push(`OFFSET `);\n                m.expr(s.limit.offset);\n\n            }\n            if (s.limit.limit) {\n                ret.push(`LIMIT `);\n                m.expr(s.limit.limit);\n            }\n        }\n\n        if (s.for) {\n            ret.push('FOR ', s.for.type.toUpperCase());\n            if (s.skip) {\n                ret.push(' ', s.skip.type.toUpperCase());\n            }\n        }\n    },\n\n    show: s => {\n        ret.push('SHOW ', name(s.variable));\n    },\n\n    prepare: s => {\n        ret.push('PREPARE ', name(s.name));\n        if (s.args?.length) {\n            list(s.args, a => m.dataType(a), true);\n        }\n        ret.push(' AS ');\n        m.statement(s.statement);\n    },\n\n    deallocate: s => {\n        ret.push('DEALLOCATE ');\n        if ('name' in s.target) {\n            ret.push(s.target.name);\n            return;\n        }\n        ret.push('ALL')\n    },\n\n    arraySelect: s => {\n        ret.push('array(');\n        m.select(s.select);\n        ret.push(')');\n    },\n\n    union: s => {\n        ret.push('(');\n        m.statement(s.left);\n        ret.push(') ', s.type.toUpperCase(), ' ');\n        if (s.right.type === 'union' || s.right.type === 'union all') {\n            m.union(s.right);\n        } else {\n            ret.push('(');\n            m.statement(s.right);\n            ret.push(')');\n        }\n    },\n\n    selectionColumn: c => {\n        m.expr(c.expr);\n        if (c.alias) {\n            ret.push(' AS ', name(c.alias));\n        }\n        ret.push(' ');\n    },\n\n    set: s => {\n        ret.push(name(s.column), ' = ');\n        m.expr(s.value);\n        ret.push(' ');\n    },\n\n\n    statement: s => m.super().statement(s),\n\n    tableRef: r => {\n        visitQualifiedName(r);\n        if (r.alias) {\n            ret.push(' AS ', ident(r.alias));\n        }\n        ret.push(' ');\n    },\n\n\n    ternary: t => {\n        m.expr(t.value);\n        ret.push(' ', t.op, ' ');\n        m.expr(t.lo);\n        ret.push(' AND ');\n        m.expr(t.hi);\n        ret.push(' ');\n    },\n\n    transaction: t => {\n        ret.push(t.type);\n    },\n\n    unary: t => {\n        switch (t.op) {\n            case '+':\n            case '-':\n                // prefix ops\n                visitOp(t);\n                m.expr(t.operand);\n                break;\n            case 'NOT':\n                // prefix ops\n                ret.push(t.op);\n                ret.push(' ');\n                m.expr(t.operand);\n                break;\n            default:\n                // postfix ops\n                m.expr(t.operand);\n                ret.push(' ');\n                ret.push(t.op);\n        }\n    },\n\n    update: u => {\n        ret.push('UPDATE ');\n        m.tableRef(u.table);\n        ret.push(' SET ');\n        list(u.sets, s => m.set(s), false);\n        ret.push(' ');\n        if (u.from) {\n            ret.push('FROM ');\n            m.from(u.from);\n            ret.push(' ');\n        }\n        if (u.where) {\n            ret.push('WHERE ');\n            m.expr(u.where);\n            ret.push(' ');\n        }\n        if (u.returning) {\n            ret.push(' RETURNING ');\n            list(u.returning, r => m.selectionColumn(r), false);\n            ret.push(' ');\n        }\n    },\n\n}))\n\nexport const toSql = {} as IAstToSql;\nconst proto = AstDefaultMapper.prototype as any;\nfor (const k of Object.getOwnPropertyNames(proto)) {\n    const orig = proto[k] as Function;\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    (toSql as any)[k] = function (...args: []) {\n        try {\n            (visitor as any)[k].apply(visitor, args);\n            return ret.join('').trim();\n        } finally {\n            ret = [];\n        }\n    };\n}\n","// stolen from https://github.com/segmentio/pg-escape/blob/master/index.js\n\nexport function literal(val: string) {\n    if (null == val) return 'NULL';\n    if (Array.isArray(val)) {\n        var vals: any[] = val.map(literal)\n        return \"(\" + vals.join(\", \") + \")\"\n    }\n    var backslash = ~val.indexOf('\\\\');\n    var prefix = backslash ? 'E' : '';\n    val = val.replace(/'/g, \"''\");\n    val = val.replace(/\\\\/g, '\\\\\\\\');\n    return prefix + \"'\" + val + \"'\";\n};\n","// import { IType } from '../../interfaces';\nimport { nil } from '../utils';\n\nexport function locationOf(node: PGNode): NodeLocation {\n    const n = node._location;\n    if (!n) {\n        throw new Error('This statement has not been parsed using location tracking (which has a small performance hit). ')\n    }\n    return n;\n}\n\nexport type Statement = SelectStatement\n    | CreateTableStatement\n    | CreateSequenceStatement\n    | CreateIndexStatement\n    | CreateExtensionStatement\n    | CommitStatement\n    | InsertStatement\n    | UpdateStatement\n    | ShowStatement\n    | PrepareStatement\n    | DeallocateStatement\n    | DeleteStatement\n    | WithStatement\n    | RollbackStatement\n    | TablespaceStatement\n    | CreateViewStatement\n    | CreateMaterializedViewStatement\n    | RefreshMaterializedViewStatement\n    | AlterTableStatement\n    | AlterIndexStatement\n    | AlterSequenceStatement\n    | SetGlobalStatement\n    | SetTimezone\n    | CreateEnumType\n    | CreateCompositeType\n    | TruncateTableStatement\n    | DropStatement\n    | CommentStatement\n    | CreateSchemaStatement\n    | WithRecursiveStatement\n    | RaiseStatement\n    | ValuesStatement\n    | CreateFunctionStatement\n    | DropFunctionStatement\n    | DoStatement\n    | BeginStatement\n    | StartTransactionStatement;\n\nexport interface PGNode {\n    _location?: NodeLocation;\n}\n\nexport interface PGComment extends PGNode {\n    comment: string;\n}\n\nexport interface BeginStatement extends PGNode {\n    type: 'begin';\n    isolationLevel?: 'serializable' | 'repeatable read' | 'read committed' | 'read uncommitted';\n    writeable?: 'read write' | 'read only';\n    deferrable?: boolean;\n}\n\nexport interface DoStatement extends PGNode {\n    type: 'do';\n    language?: Name;\n    code: string;\n}\n\nexport interface CreateFunctionStatement extends PGNode {\n    type: 'create function';\n    name: QName;\n    code?: string;\n    orReplace?: boolean;\n    language?: Name;\n    arguments: FunctionArgument[];\n    returns?: DataTypeDef | ReturnsTable;\n    purity?: 'immutable' | 'stable' | 'volatile';\n    leakproof?: boolean;\n    onNullInput?: 'call' | 'null' | 'strict';\n}\n\nexport interface DropFunctionStatement extends PGNode {\n    type: 'drop function';\n    ifExists?: boolean;\n    name: QName;\n    arguments?: { name?: Name; type: DataTypeDef }[];\n}\n\nexport interface ReturnsTable extends PGNode {\n    kind: 'table';\n    columns: { name: Name; type: DataTypeDef }[];\n}\n\nexport type FunctionArgumentMode = 'in' | 'out' | 'inout' | 'variadic';\n\nexport interface FunctionArgument extends PGNode {\n    name?: Name;\n    type: DataTypeDef;\n    default?: Expr;\n    mode?: FunctionArgumentMode;\n}\n\nexport interface CommentStatement extends PGNode {\n    type: 'comment';\n    comment: string;\n    /** This is not exhaustive compared to https://www.postgresql.org/docs/13/sql-comment.html\n     * But this is what's supported. File an issue if you want more.\n     */\n    on: {\n        type: 'table' | 'database' | 'index' | 'materialized view' | 'trigger' | 'type' | 'view';\n        name: QName;\n    } | {\n        type: 'column';\n        column: QColumn;\n    };\n}\n\nexport interface RaiseStatement extends PGNode {\n    type: 'raise';\n    level?: 'debug' | 'log' | 'info' | 'notice' | 'warning' | 'exception';\n    format: string;\n    formatExprs?: Expr[] | nil;\n    using?: {\n        type: 'message'\n        | 'detail'\n        | 'hint'\n        | 'errcode'\n        | 'column'\n        | 'constraint'\n        | 'datatype'\n        | 'table'\n        | 'schema';\n        value: Expr;\n    }[] | nil;\n}\n\nexport interface CreateSchemaStatement extends PGNode {\n    type: 'create schema';\n    name: Name;\n    ifNotExists?: boolean;\n}\n\nexport interface PrepareStatement extends PGNode {\n    type: 'prepare';\n    name: Name;\n    args?: DataTypeDef[] | nil;\n    statement: Statement;\n}\n\nexport interface DeallocateStatement extends PGNode {\n    type: 'deallocate';\n    target: Name | DeallocateStatementOpt;\n}\n\nexport interface DeallocateStatementOpt extends PGNode {\n    option: 'all';\n}\n\nexport interface CreateEnumType extends PGNode {\n    type: 'create enum',\n    name: QName;\n    values: Literal[];\n}\n\nexport interface CreateCompositeType extends PGNode {\n    type: 'create composite type';\n    name: QName;\n    attributes: CompositeTypeAttribute[];\n}\n\nexport interface CompositeTypeAttribute extends PGNode {\n    name: Name;\n    dataType: DataTypeDef;\n    collate?: Name;\n}\n\nexport interface Literal extends PGNode {\n    value: string\n}\n\n\nexport interface ShowStatement extends PGNode {\n    type: 'show';\n    variable: Name;\n}\n\nexport interface TruncateTableStatement extends PGNode {\n    type: 'truncate table';\n    tables: QName[];\n    identity?: 'restart' | 'continue';\n    cascade?: 'cascade' | 'restrict';\n}\n\nexport interface DropStatement extends PGNode {\n    type: 'drop table' | 'drop sequence' | 'drop index' | 'drop type' | 'drop trigger';\n    names: QName[];\n    ifExists?: boolean;\n    cascade?: 'cascade' | 'restrict';\n    concurrently?: boolean;\n}\n\nexport interface NodeLocation {\n    /** Location of the last \";\" prior to this statement */\n    start: number;\n    /** Location of the first \";\" after this statement (if any) */\n    end: number;\n}\n\nexport interface StartTransactionStatement extends PGNode {\n    type: 'start transaction';\n}\nexport interface CommitStatement extends PGNode {\n    type: 'commit';\n}\nexport interface RollbackStatement extends PGNode {\n    type: 'rollback';\n}\n\nexport interface TablespaceStatement extends PGNode {\n    type: 'tablespace';\n    tablespace: Name;\n}\n\n\nexport interface DeleteStatement extends PGNode {\n    type: 'delete';\n    from: QNameAliased;\n    returning?: SelectedColumn[] | nil;\n    where?: Expr | nil;\n}\n\nexport interface InsertStatement extends PGNode {\n    type: 'insert';\n    into: QNameAliased;\n    returning?: SelectedColumn[] | nil;\n    columns?: Name[] | nil;\n    overriding?: 'system' | 'user';\n    insert: SelectStatement;\n    onConflict?: OnConflictAction | nil;\n}\n\nexport interface OnConflictAction extends PGNode {\n    on?: OnConflictOnExpr | OnConflictOnConstraint;\n    do: 'do nothing' | {\n        sets: SetStatement[];\n    };\n    where?: Expr;\n}\n\nexport interface OnConflictOnExpr extends PGNode {\n    type: 'on expr';\n    exprs: Expr[];\n}\nexport interface OnConflictOnConstraint extends PGNode {\n    type: 'on constraint';\n    constraint: QName;\n}\n\nexport interface AlterIndexStatement extends PGNode {\n    type: 'alter index';\n    index: QNameAliased;\n    ifExists?: boolean;\n    change: IndexAlteration;\n}\n\nexport type IndexAlteration\n    = IndexAlterationRename\n    | IndexAlterationSetTablespace\n\n\nexport interface IndexAlterationRename {\n    type: 'rename';\n    to: QName;\n}\n\nexport interface IndexAlterationSetTablespace  {\n    type: 'set tablespace';\n    tablespace: QName;\n}\n\nexport interface AlterTableStatement extends PGNode {\n    type: 'alter table';\n    table: QNameAliased;\n    only?: boolean;\n    ifExists?: boolean;\n    changes: TableAlteration[];\n}\n\nexport interface TableAlterationRename extends PGNode {\n    type: 'rename';\n    to: Name;\n}\n\nexport interface TableAlterationRenameColumn extends PGNode {\n    type: 'rename column';\n    column: Name;\n    to: Name;\n}\nexport interface TableAlterationRenameConstraint extends PGNode {\n    type: 'rename constraint';\n    constraint: Name;\n    to: Name;\n}\nexport interface TableAlterationAddColumn extends PGNode {\n    type: 'add column';\n    ifNotExists?: boolean;\n    column: CreateColumnDef;\n}\n\nexport interface TableAlterationDropColumn extends PGNode {\n    type: 'drop column';\n    ifExists?: boolean;\n    column: Name;\n    behaviour?: 'cascade' | 'restrict';\n}\n\nexport interface TableAlterationDropConstraint extends PGNode {\n    type: 'drop constraint';\n    ifExists?: boolean;\n    constraint: Name;\n    behaviour?: 'cascade' | 'restrict';\n}\n\nexport interface TableAlterationAlterColumn extends PGNode {\n    type: 'alter column',\n    column: Name;\n    alter: AlterColumn\n}\n\nexport interface TableAlterationAddConstraint extends PGNode {\n    type: 'add constraint',\n    constraint: TableConstraint;\n}\n\nexport type TableAlteration = TableAlterationRename\n    | TableAlterationRenameColumn\n    | TableAlterationRenameConstraint\n    | TableAlterationAddColumn\n    | TableAlterationDropColumn\n    | TableAlterationAlterColumn\n    | TableAlterationAddConstraint\n    | TableAlterationOwner\n    | TableAlterationDropConstraint\n\n\nexport interface TableAlterationOwner extends PGNode {\n    type: 'owner';\n    to: Name;\n}\n\nexport interface AlterColumnSetType extends PGNode {\n    type: 'set type';\n    dataType: DataTypeDef;\n}\n\nexport interface AlterColumnSetDefault extends PGNode {\n    type: 'set default';\n    default: Expr;\n    updateExisting?: boolean;\n}\n\nexport interface AlterColumnAddGenerated extends PGNode {\n    type: 'add generated',\n    always?: 'always' | 'by default';\n    constraintName?: Name;\n    sequence?: {\n        name?: QName;\n    } & CreateSequenceOptions;\n}\n\nexport interface AlterColumnSimple extends PGNode {\n    type: 'drop default' | 'set not null' | 'drop not null';\n};\n\nexport type AlterColumn = AlterColumnSetType\n    | AlterColumnSetDefault\n    | AlterColumnAddGenerated\n    | AlterColumnSimple;\n\n\n/**\n * FROM https://www.postgresql.org/docs/12/ddl-constraints.html\n *\n * Restricting and cascading deletes are the two most common options.\n * RESTRICT prevents deletion of a referenced row.\n * NO ACTION means that if any referencing rows still exist when the constraint is checked,\n * an error is raised; this is the default behavior if you do not specify anything.\n * (The essential difference between these two choices is that NO ACTION allows the check to be deferred until later in the transaction, whereas RESTRICT does not.)\n * CASCADE specifies that when a referenced row is deleted,\n * row(s) referencing it should be automatically deleted as well.\n * There are two other options: SET NULL and SET DEFAULT.\n * These cause the referencing column(s) in the referencing row(s) to be set to nulls or their default values, respectively, when the referenced row is deleted.\n * Note that these do not excuse you from observing any constraints.\n * For example, if an action specifies SET DEFAULT but the default value would not satisfy the foreign key constraint, the operation will fail.\n */\nexport type ConstraintAction = 'cascade'\n    | 'no action'\n    | 'restrict'\n    | 'set null'\n    | 'set default';\n\nexport interface CreateIndexStatement extends PGNode {\n    type: 'create index';\n    table: QName;\n    using?: Name;\n    expressions: IndexExpression[];\n    where?: Expr;\n    unique?: true;\n    ifNotExists?: true;\n    indexName?: Name;\n    tablespace?: string;\n    with?: CreateIndexWith[];\n}\n\nexport interface CreateIndexWith extends PGNode {\n    parameter: string;\n    value: string;\n}\n\nexport interface CreateExtensionStatement extends PGNode {\n    type: 'create extension';\n    extension: Name;\n    ifNotExists?: true;\n    schema?: Name;\n    version?: Literal;\n    from?: Literal;\n}\n\nexport interface IndexExpression extends PGNode {\n    expression: Expr;\n    opclass?: QName;\n    collate?: QName;\n    order?: 'asc' | 'desc';\n    nulls?: 'first' | 'last';\n}\n\n\nexport interface CreateViewStatementBase extends PGNode {\n    columnNames?: Name[];\n    name: QName;\n    query: SelectStatement;\n    parameters?: { [name: string]: string };\n}\nexport interface CreateViewStatement extends CreateViewStatementBase {\n    type: 'create view';\n    orReplace?: boolean;\n    recursive?: boolean;\n    temp?: boolean;\n    checkOption?: 'local' | 'cascaded';\n}\n\nexport interface CreateMaterializedViewStatement extends CreateViewStatementBase {\n    type: 'create materialized view';\n    tablespace?: Name;\n    withData?: boolean;\n    ifNotExists?: boolean;\n}\n\nexport interface RefreshMaterializedViewStatement extends PGNode {\n    type: 'refresh materialized view';\n    name: QName;\n    concurrently?: boolean;\n    withData?: boolean;\n}\n\n\nexport interface CreateTableStatement extends PGNode {\n    type: 'create table';\n    name: QName;\n    temporary?: boolean;\n    unlogged?: boolean;\n    locality?: 'global' | 'local';\n    ifNotExists?: true;\n    columns: (CreateColumnDef | CreateColumnsLikeTable)[];\n    /** Constraints not defined inline */\n    constraints?: TableConstraint[];\n    inherits?: QName[];\n}\n\nexport interface CreateColumnsLikeTable extends PGNode {\n    kind: 'like table';\n    like: QName;\n    options: CreateColumnsLikeTableOpt[];\n}\n\nexport interface CreateColumnsLikeTableOpt extends PGNode {\n    verb: 'including' | 'excluding';\n    option: 'defaults' | 'constraints' | 'indexes' | 'storage' | 'comments' | 'all';\n}\n\nexport interface CreateColumnDef extends PGNode {\n    kind: 'column';\n    name: Name;\n    dataType: DataTypeDef;\n    constraints?: ColumnConstraint[];\n    collate?: QName;\n}\n\nexport interface Name extends PGNode {\n    name: string;\n}\n\nexport interface TableAliasName extends Name, PGNode {\n    columns?: Name[];\n}\n\nexport interface QName extends Name, PGNode {\n    schema?: string;\n}\n\nexport interface QColumn extends PGNode {\n    table: string;\n    column: string;\n    schema?: string;\n}\n\nexport type DataTypeDef = ArrayDataTypeDef | BasicDataTypeDef;\n\nexport interface ArrayDataTypeDef extends PGNode {\n    kind: 'array';\n    arrayOf: DataTypeDef;\n}\n\nexport interface BasicDataTypeDef extends QName, PGNode {\n    kind?: undefined;\n    /** Allows to differenciate types like 'double precision' from their double-quoted counterparts */\n    doubleQuoted?: true;\n    /** varchar(length), numeric(precision, scale), ... */\n    config?: number[];\n}\n\nexport type ColumnConstraint\n    = ColumnConstraintSimple\n    | ColumnConstraintDefault\n    | AlterColumnAddGenerated\n    | ColumnConstraintReference\n    | ColumnConstraintCheck;\n\nexport interface ColumnConstraintSimple extends PGNode {\n    type: 'unique'\n    | 'primary key'\n    | 'not null'\n    | 'null';\n    constraintName?: Name;\n}\n\nexport interface ColumnConstraintReference extends TableReference, PGNode {\n    type: 'reference';\n    constraintName?: Name;\n}\n\nexport interface ColumnConstraintDefault extends PGNode {\n    type: 'default';\n    default: Expr;\n    constraintName?: Name;\n}\n\nexport interface ColumnConstraintForeignKey extends TableReference, PGNode {\n    type: 'foreign key';\n    constraintName?: Name;\n}\n\nexport interface TableReference {\n    foreignTable: QName;\n    foreignColumns: Name[];\n    onDelete?: ConstraintAction;\n    onUpdate?: ConstraintAction;\n    match?: 'full' | 'partial' | 'simple';\n}\n\n\n\n// todo: add EXECLUDE\nexport type TableConstraint\n    = TableConstraintUnique\n    | TableConstraintForeignKey\n    | TableConstraintCheck;\n\nexport type TableConstraintCheck = ColumnConstraintCheck;\nexport interface TableConstraintUnique extends PGNode {\n    type: 'primary key' | 'unique';\n    constraintName?: Name;\n    columns: Name[];\n}\n\nexport interface TableConstraintForeignKey extends ColumnConstraintForeignKey {\n    localColumns: Name[];\n}\n\nexport interface ColumnConstraintCheck extends PGNode {\n    type: 'check';\n    constraintName?: Name;\n    expr: Expr;\n}\n\nexport type WithStatementBinding = SelectStatement\n    | WithStatement\n    | WithRecursiveStatement\n    | InsertStatement\n    | UpdateStatement\n    | DeleteStatement;\n\nexport interface WithStatement extends PGNode {\n    type: 'with';\n    bind: {\n        alias: Name;\n        statement: WithStatementBinding;\n    }[];\n    in: WithStatementBinding;\n}\n\nexport interface WithRecursiveStatement extends PGNode {\n    type: 'with recursive';\n    alias: Name;\n    columnNames: Name[];\n    bind: SelectFromUnion;\n    in: WithStatementBinding;\n}\n\nexport type SelectStatement = SelectFromStatement\n    | SelectFromUnion\n    | ValuesStatement\n    | WithStatement\n    | WithRecursiveStatement;\n\nexport interface SelectFromStatement extends PGNode {\n    type: 'select',\n    columns?: SelectedColumn[] | nil;\n    from?: From[] | nil;\n    where?: Expr | nil;\n    groupBy?: Expr[] | nil;\n    having?: Expr | nil;\n    limit?: LimitStatement | nil;\n    orderBy?: OrderByStatement[] | nil;\n    distinct?: 'all' | 'distinct' | Expr[] | nil;\n    for?: ForStatement;\n    skip?: SkipClause;\n}\n\nexport interface SelectFromUnion extends PGNode {\n    type: 'union' | 'union all',\n    left: SelectStatement;\n    right: SelectStatement;\n}\n\nexport interface OrderByStatement extends PGNode {\n    by: Expr;\n    order?: 'ASC' | 'DESC' | nil;\n    nulls?: 'FIRST' | 'LAST' | nil;\n}\n\nexport interface ForStatement extends PGNode {\n    type: 'update' | 'no key update' | 'share' | 'key share';\n}\n\nexport interface SkipClause extends PGNode {\n    type: 'nowait' | 'skip locked' \n}\n\nexport interface LimitStatement extends PGNode {\n    limit?: Expr | nil;\n    offset?: Expr | nil;\n}\n\n\nexport interface UpdateStatement extends PGNode {\n    type: 'update';\n    table: QNameAliased;\n    sets: SetStatement[];\n    where?: Expr | nil;\n    from?: From | nil;\n    returning?: SelectedColumn[] | nil;\n}\n\nexport interface SetStatement extends PGNode {\n    column: Name;\n    value: Expr;\n}\n\nexport interface SelectedColumn extends PGNode {\n    expr: Expr;\n    alias?: Name;\n}\n\nexport type From = FromTable\n    | FromStatement\n    | FromCall\n\n\nexport interface FromCall extends ExprCall, PGNode {\n    alias?: TableAliasName;\n    join?: JoinClause | nil;\n    withOrdinality?: boolean;\n};\n\n\n\nexport interface ValuesStatement extends PGNode {\n    type: 'values';\n    values: Expr[][];\n}\n\n\n\nexport interface QNameAliased extends QName, PGNode {\n    alias?: string;\n}\n\nexport interface QNameMapped extends QNameAliased {\n    columnNames?: Name[] | nil;\n}\n\nexport interface FromTable extends PGNode {\n    type: 'table',\n    name: QNameMapped;\n    join?: JoinClause | nil;\n}\n\nexport interface FromStatement extends PGNode {\n    type: 'statement';\n    statement: SelectStatement;\n    alias: string;\n    columnNames?: Name[] | nil;\n    db?: null | nil;\n    join?: JoinClause | nil;\n}\n\nexport interface JoinClause extends PGNode {\n    type: JoinType;\n    on?: Expr | nil;\n    using?: Name[] | nil;\n}\n\nexport type JoinType = 'INNER JOIN'\n    | 'LEFT JOIN'\n    | 'RIGHT JOIN'\n    | 'FULL JOIN'\n    | 'CROSS JOIN';\n\nexport type Expr = ExprRef\n    | ExprParameter\n    | ExprList\n    | ExprArrayFromSelect\n    | ExprNull\n    | ExprExtract\n    | ExprInteger\n    | ExprDefault\n    | ExprMember\n    | ExprValueKeyword\n    | ExprArrayIndex\n    | ExprNumeric\n    | ExprString\n    | ExprCase\n    | ExprBinary\n    | ExprUnary\n    | ExprCast\n    | ExprBool\n    | ExprCall\n    | SelectStatement\n    | WithStatement\n    | ExprConstant\n    | ExprTernary\n    | ExprOverlay\n    | ExprSubstring;\n\n\n/**\n * Handle special syntax: overlay('12345678' placing 'ab' from 2 for 4)\n */\nexport interface ExprOverlay extends PGNode {\n    type: 'overlay';\n    value: Expr;\n    placing: Expr;\n    from: Expr;\n    for?: Expr | nil;\n}\n\n\n/** Handle special syntax: substring('val' from 2 for 3) */\nexport interface ExprSubstring extends PGNode {\n    type: 'substring';\n    value: Expr;\n    from?: Expr | nil;\n    for?: Expr | nil;\n}\n\n// === https://www.postgresql.org/docs/12/functions.html\nexport type LogicOperator = 'OR' | 'AND';\nexport type EqualityOperator = 'IN' | 'NOT IN' | 'LIKE' | 'NOT LIKE' | 'ILIKE' | 'NOT ILIKE' | '=' | '!=';\n// see https://www.postgresql.org/docs/12/functions-math.html\nexport type MathOpsBinary = '|' | '&' | '>>' | '^' | '#' | '<<' | '>>';\nexport type ComparisonOperator = '>' | '>=' | '<' | '<=' | '@>' | '<@' | '?' | '?|' | '?&' | '#>>' | '~' | '~*' | '!~' | '!~*' | '@@';\nexport type AdditiveOperator = '||' | '-' | '#-' | '&&' | '+';\nexport type MultiplicativeOperator = '*' | '%' | '/';\nexport type ConstructOperator = 'AT TIME ZONE';\nexport type BinaryOperator = LogicOperator\n    | EqualityOperator\n    | ComparisonOperator\n    | AdditiveOperator\n    | MultiplicativeOperator\n    | MathOpsBinary\n    | ConstructOperator;\n\nexport interface ExprBinary extends PGNode {\n    type: 'binary';\n    left: Expr;\n    right: Expr;\n    op: BinaryOperator;\n    opSchema?: string;\n}\n\nexport interface ExprConstant extends PGNode {\n    type: 'constant';\n    dataType: DataTypeDef, // | IType;\n    value: any;\n}\n\nexport type ExprLiteral = ExprConstant | ExprInteger | ExprNumeric | ExprString | ExprBool | ExprNull;\n\n\nexport interface ExprTernary extends PGNode {\n    type: 'ternary';\n    value: Expr;\n    lo: Expr;\n    hi: Expr;\n    op: 'BETWEEN' | 'NOT BETWEEN';\n}\n\nexport interface ExprCast extends PGNode {\n    type: 'cast';\n    to: DataTypeDef;\n    operand: Expr;\n}\n\n\nexport type UnaryOperator = '+' | '-' | 'NOT' | 'IS NULL' | 'IS NOT NULL' | 'IS TRUE' | 'IS FALSE' | 'IS NOT TRUE' | 'IS NOT FALSE';\nexport interface ExprUnary extends PGNode {\n    type: 'unary';\n    operand: Expr;\n    op: UnaryOperator;\n    opSchema?: string;\n}\n\nexport interface ExprRef extends PGNode {\n    type: 'ref';\n    table?: QName;\n    name: string | '*';\n}\n\nexport interface ExprParameter extends PGNode {\n    type: 'parameter';\n    name: string;\n}\n\n\nexport interface ExprMember extends PGNode {\n    type: 'member';\n    operand: Expr;\n    op: '->' | '->>';\n    member: string | number;\n}\n\nexport interface ExprValueKeyword extends PGNode {\n    type: 'keyword',\n    keyword: ValueKeyword;\n}\n\nexport type ValueKeyword = 'current_catalog'\n    | 'current_date'\n    | 'current_role'\n    | 'current_schema'\n    | 'current_timestamp'\n    | 'current_time'\n    | 'localtimestamp'\n    | 'localtime'\n    | 'session_user'\n    | 'user'\n    | 'current_user'\n    | 'distinct';\n\n\n/**\n * Function calls.\n *\n * For aggregation functions, see https://www.postgresql.org/docs/13/sql-expressions.html#SYNTAX-AGGREGATES\n */\nexport interface ExprCall extends PGNode {\n    type: 'call';\n    /** Function name */\n    function: QName;\n    /** Arguments list */\n    args: Expr[];\n    /** [AGGREGATION FUNCTIONS] Distinct clause specified ? */\n    distinct?: 'all' | 'distinct';\n    /** [AGGREGATION FUNCTIONS] Inner order by clause */\n    orderBy?: OrderByStatement[] | nil;\n    /** [AGGREGATION FUNCTIONS] Filter clause */\n    filter?: Expr | nil;\n    /** [AGGREGATION FUNCTIONS] OVER clause */\n    over?: CallOver | nil;\n}\n\nexport interface CallOver extends PGNode {\n    orderBy?: OrderByStatement[] | nil;\n    partitionBy?: Expr[] | nil;\n}\n\n\nexport interface ExprExtract extends PGNode {\n    type: 'extract';\n    field: Name;\n    from: Expr;\n}\n\nexport interface ExprList extends PGNode {\n    type: 'list' | 'array';\n    expressions: Expr[];\n}\n\nexport interface ExprArrayFromSelect extends PGNode {\n    type: 'array select';\n    select: SelectStatement;\n}\n\nexport interface ExprArrayIndex extends PGNode {\n    type: 'arrayIndex',\n    array: Expr;\n    index: Expr;\n}\n\nexport interface ExprNull extends PGNode {\n    type: 'null';\n}\n\nexport interface ExprInteger extends PGNode {\n    type: 'integer';\n    value: number;\n}\n\nexport interface ExprDefault extends PGNode {\n    type: 'default';\n}\n\nexport interface ExprNumeric extends PGNode {\n    type: 'numeric';\n    value: number;\n}\n\nexport interface ExprString extends PGNode {\n    type: 'string';\n    value: string;\n}\n\nexport interface ExprBool extends PGNode {\n    type: 'boolean';\n    value: boolean;\n}\n\nexport interface ExprCase extends PGNode {\n    type: 'case';\n    value?: Expr | nil;\n    whens: ExprWhen[];\n    else?: Expr | nil;\n}\n\nexport interface ExprWhen extends PGNode {\n    when: Expr;\n    value: Expr;\n}\n\nexport interface SetGlobalStatement extends PGNode {\n    type: 'set';\n    variable: Name;\n    set: SetGlobalValue;\n}\nexport interface SetTimezone extends PGNode {\n    type: 'set timezone',\n    to: SetTimezoneValue;\n}\n\nexport type SetTimezoneValue = {\n    type: 'value';\n    value: number | string;\n} | {\n    type: 'local' | 'default';\n} | {\n    type: 'interval';\n    value: string;\n};\n\ntype SetGlobalValueRaw = {\n    type: 'value',\n    value: number | string;\n} | {\n    type: 'identifier',\n    doubleQuoted?: true;\n    name: string;\n};\nexport type SetGlobalValue\n    = SetGlobalValueRaw\n    | { type: 'default' }\n    | {\n        type: 'list',\n        values: SetGlobalValueRaw[],\n    }\n\nexport interface CreateSequenceStatement extends PGNode {\n    type: 'create sequence';\n    name: QName,\n    temp?: boolean;\n    ifNotExists?: boolean;\n    options: CreateSequenceOptions;\n}\n\nexport interface CreateSequenceOptions extends PGNode {\n    as?: DataTypeDef;\n    incrementBy?: number;\n    minValue?: 'no minvalue' | number;\n    maxValue?: 'no maxvalue' | number;\n    startWith?: number;\n    cache?: number;\n    cycle?: 'cycle' | 'no cycle';\n    ownedBy?: 'none' | QColumn;\n}\n\n\n\nexport interface AlterSequenceStatement extends PGNode {\n    type: 'alter sequence';\n    name: QName;\n    ifExists?: boolean;\n    change: AlterSequenceChange;\n}\n\nexport type AlterSequenceChange\n    = AlterSequenceSetOptions\n    | AlterSequenceOwnerTo\n    | AlterSequenceRename\n    | AlterSequenceSetSchema;\n\nexport interface AlterSequenceSetOptions extends CreateSequenceOptions, PGNode {\n    type: 'set options';\n    restart?: true | number;\n}\n\nexport interface AlterSequenceOwnerTo extends PGNode {\n    type: 'owner to';\n    owner: Name;\n}\n\nexport interface AlterSequenceRename extends PGNode {\n    type: 'rename';\n    newName: Name;\n}\n\nexport interface AlterSequenceSetSchema extends PGNode {\n    type: 'set schema';\n    newSchema: Name;\n}\n\nexport type GeometricLiteral\n    = Point\n    | Line\n    | Segment\n    | Box\n    | Path\n    | Polygon\n    | Circle;\n\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\n/** Line  aX+bY+c */\nexport interface Line {\n    a: number;\n    b: number;\n    c: number;\n}\n\nexport type Segment = [Point, Point];\nexport type Box = [Point, Point];\n\nexport interface Path {\n    closed: boolean;\n    path: Point[];\n}\n\nexport type Polygon = Point[];\n\nexport interface Circle {\n    c: Point;\n    r: number;\n}\n\nexport interface Interval {\n    years?: number;\n    months?: number;\n    days?: number;\n    hours?: number;\n    minutes?: number;\n    seconds?: number;\n    milliseconds?: number;\n}\n","'use strict';\n\nvar crypto = require('crypto');\n\n/**\n * Exported function\n *\n * Options:\n *\n *  - `algorithm` hash algo to be used by this instance: *'sha1', 'md5'\n *  - `excludeValues` {true|*false} hash object keys, values ignored\n *  - `encoding` hash encoding, supports 'buffer', '*hex', 'binary', 'base64'\n *  - `ignoreUnknown` {true|*false} ignore unknown object types\n *  - `replacer` optional function that replaces values before hashing\n *  - `respectFunctionProperties` {*true|false} consider function properties when hashing\n *  - `respectFunctionNames` {*true|false} consider 'name' property of functions for hashing\n *  - `respectType` {*true|false} Respect special properties (prototype, constructor)\n *    when hashing to distinguish between types\n *  - `unorderedArrays` {true|*false} Sort all arrays before hashing\n *  - `unorderedSets` {*true|false} Sort `Set` and `Map` instances before hashing\n *  * = default\n *\n * @param {object} object value to hash\n * @param {object} options hashing options\n * @return {string} hash value\n * @api public\n */\nexports = module.exports = objectHash;\n\nfunction objectHash(object, options){\n  options = applyDefaults(object, options);\n\n  return hash(object, options);\n}\n\n/**\n * Exported sugar methods\n *\n * @param {object} object value to hash\n * @return {string} hash value\n * @api public\n */\nexports.sha1 = function(object){\n  return objectHash(object);\n};\nexports.keys = function(object){\n  return objectHash(object, {excludeValues: true, algorithm: 'sha1', encoding: 'hex'});\n};\nexports.MD5 = function(object){\n  return objectHash(object, {algorithm: 'md5', encoding: 'hex'});\n};\nexports.keysMD5 = function(object){\n  return objectHash(object, {algorithm: 'md5', encoding: 'hex', excludeValues: true});\n};\n\n// Internals\nvar hashes = crypto.getHashes ? crypto.getHashes().slice() : ['sha1', 'md5'];\nhashes.push('passthrough');\nvar encodings = ['buffer', 'hex', 'binary', 'base64'];\n\nfunction applyDefaults(object, sourceOptions){\n  sourceOptions = sourceOptions || {};\n\n  // create a copy rather than mutating\n  var options = {};\n  options.algorithm = sourceOptions.algorithm || 'sha1';\n  options.encoding = sourceOptions.encoding || 'hex';\n  options.excludeValues = sourceOptions.excludeValues ? true : false;\n  options.algorithm = options.algorithm.toLowerCase();\n  options.encoding = options.encoding.toLowerCase();\n  options.ignoreUnknown = sourceOptions.ignoreUnknown !== true ? false : true; // default to false\n  options.respectType = sourceOptions.respectType === false ? false : true; // default to true\n  options.respectFunctionNames = sourceOptions.respectFunctionNames === false ? false : true;\n  options.respectFunctionProperties = sourceOptions.respectFunctionProperties === false ? false : true;\n  options.unorderedArrays = sourceOptions.unorderedArrays !== true ? false : true; // default to false\n  options.unorderedSets = sourceOptions.unorderedSets === false ? false : true; // default to false\n  options.unorderedObjects = sourceOptions.unorderedObjects === false ? false : true; // default to true\n  options.replacer = sourceOptions.replacer || undefined;\n  options.excludeKeys = sourceOptions.excludeKeys || undefined;\n\n  if(typeof object === 'undefined') {\n    throw new Error('Object argument required.');\n  }\n\n  // if there is a case-insensitive match in the hashes list, accept it\n  // (i.e. SHA256 for sha256)\n  for (var i = 0; i < hashes.length; ++i) {\n    if (hashes[i].toLowerCase() === options.algorithm.toLowerCase()) {\n      options.algorithm = hashes[i];\n    }\n  }\n\n  if(hashes.indexOf(options.algorithm) === -1){\n    throw new Error('Algorithm \"' + options.algorithm + '\"  not supported. ' +\n      'supported values: ' + hashes.join(', '));\n  }\n\n  if(encodings.indexOf(options.encoding) === -1 &&\n     options.algorithm !== 'passthrough'){\n    throw new Error('Encoding \"' + options.encoding + '\"  not supported. ' +\n      'supported values: ' + encodings.join(', '));\n  }\n\n  return options;\n}\n\n/** Check if the given function is a native function */\nfunction isNativeFunction(f) {\n  if ((typeof f) !== 'function') {\n    return false;\n  }\n  var exp = /^function\\s+\\w*\\s*\\(\\s*\\)\\s*{\\s+\\[native code\\]\\s+}$/i;\n  return exp.exec(Function.prototype.toString.call(f)) != null;\n}\n\nfunction hash(object, options) {\n  var hashingStream;\n\n  if (options.algorithm !== 'passthrough') {\n    hashingStream = crypto.createHash(options.algorithm);\n  } else {\n    hashingStream = new PassThrough();\n  }\n\n  if (typeof hashingStream.write === 'undefined') {\n    hashingStream.write = hashingStream.update;\n    hashingStream.end   = hashingStream.update;\n  }\n\n  var hasher = typeHasher(options, hashingStream);\n  hasher.dispatch(object);\n  if (!hashingStream.update) {\n    hashingStream.end('');\n  }\n\n  if (hashingStream.digest) {\n    return hashingStream.digest(options.encoding === 'buffer' ? undefined : options.encoding);\n  }\n\n  var buf = hashingStream.read();\n  if (options.encoding === 'buffer') {\n    return buf;\n  }\n\n  return buf.toString(options.encoding);\n}\n\n/**\n * Expose streaming API\n *\n * @param {object} object  Value to serialize\n * @param {object} options  Options, as for hash()\n * @param {object} stream  A stream to write the serializiation to\n * @api public\n */\nexports.writeToStream = function(object, options, stream) {\n  if (typeof stream === 'undefined') {\n    stream = options;\n    options = {};\n  }\n\n  options = applyDefaults(object, options);\n\n  return typeHasher(options, stream).dispatch(object);\n};\n\nfunction typeHasher(options, writeTo, context){\n  context = context || [];\n  var write = function(str) {\n    if (writeTo.update) {\n      return writeTo.update(str, 'utf8');\n    } else {\n      return writeTo.write(str, 'utf8');\n    }\n  };\n\n  return {\n    dispatch: function(value){\n      if (options.replacer) {\n        value = options.replacer(value);\n      }\n\n      var type = typeof value;\n      if (value === null) {\n        type = 'null';\n      }\n\n      //console.log(\"[DEBUG] Dispatch: \", value, \"->\", type, \" -> \", \"_\" + type);\n\n      return this['_' + type](value);\n    },\n    _object: function(object) {\n      var pattern = (/\\[object (.*)\\]/i);\n      var objString = Object.prototype.toString.call(object);\n      var objType = pattern.exec(objString);\n      if (!objType) { // object type did not match [object ...]\n        objType = 'unknown:[' + objString + ']';\n      } else {\n        objType = objType[1]; // take only the class name\n      }\n\n      objType = objType.toLowerCase();\n\n      var objectNumber = null;\n\n      if ((objectNumber = context.indexOf(object)) >= 0) {\n        return this.dispatch('[CIRCULAR:' + objectNumber + ']');\n      } else {\n        context.push(object);\n      }\n\n      if (typeof Buffer !== 'undefined' && Buffer.isBuffer && Buffer.isBuffer(object)) {\n        write('buffer:');\n        return write(object);\n      }\n\n      if(objType !== 'object' && objType !== 'function' && objType !== 'asyncfunction') {\n        if(this['_' + objType]) {\n          this['_' + objType](object);\n        } else if (options.ignoreUnknown) {\n          return write('[' + objType + ']');\n        } else {\n          throw new Error('Unknown object type \"' + objType + '\"');\n        }\n      }else{\n        var keys = Object.keys(object);\n        if (options.unorderedObjects) {\n          keys = keys.sort();\n        }\n        // Make sure to incorporate special properties, so\n        // Types with different prototypes will produce\n        // a different hash and objects derived from\n        // different functions (`new Foo`, `new Bar`) will\n        // produce different hashes.\n        // We never do this for native functions since some\n        // seem to break because of that.\n        if (options.respectType !== false && !isNativeFunction(object)) {\n          keys.splice(0, 0, 'prototype', '__proto__', 'constructor');\n        }\n\n        if (options.excludeKeys) {\n          keys = keys.filter(function(key) { return !options.excludeKeys(key); });\n        }\n\n        write('object:' + keys.length + ':');\n        var self = this;\n        return keys.forEach(function(key){\n          self.dispatch(key);\n          write(':');\n          if(!options.excludeValues) {\n            self.dispatch(object[key]);\n          }\n          write(',');\n        });\n      }\n    },\n    _array: function(arr, unordered){\n      unordered = typeof unordered !== 'undefined' ? unordered :\n        options.unorderedArrays !== false; // default to options.unorderedArrays\n\n      var self = this;\n      write('array:' + arr.length + ':');\n      if (!unordered || arr.length <= 1) {\n        return arr.forEach(function(entry) {\n          return self.dispatch(entry);\n        });\n      }\n\n      // the unordered case is a little more complicated:\n      // since there is no canonical ordering on objects,\n      // i.e. {a:1} < {a:2} and {a:1} > {a:2} are both false,\n      // we first serialize each entry using a PassThrough stream\n      // before sorting.\n      // also: we can’t use the same context array for all entries\n      // since the order of hashing should *not* matter. instead,\n      // we keep track of the additions to a copy of the context array\n      // and add all of them to the global context array when we’re done\n      var contextAdditions = [];\n      var entries = arr.map(function(entry) {\n        var strm = new PassThrough();\n        var localContext = context.slice(); // make copy\n        var hasher = typeHasher(options, strm, localContext);\n        hasher.dispatch(entry);\n        // take only what was added to localContext and append it to contextAdditions\n        contextAdditions = contextAdditions.concat(localContext.slice(context.length));\n        return strm.read().toString();\n      });\n      context = context.concat(contextAdditions);\n      entries.sort();\n      return this._array(entries, false);\n    },\n    _date: function(date){\n      return write('date:' + date.toJSON());\n    },\n    _symbol: function(sym){\n      return write('symbol:' + sym.toString());\n    },\n    _error: function(err){\n      return write('error:' + err.toString());\n    },\n    _boolean: function(bool){\n      return write('bool:' + bool.toString());\n    },\n    _string: function(string){\n      write('string:' + string.length + ':');\n      write(string.toString());\n    },\n    _function: function(fn){\n      write('fn:');\n      if (isNativeFunction(fn)) {\n        this.dispatch('[native]');\n      } else {\n        this.dispatch(fn.toString());\n      }\n\n      if (options.respectFunctionNames !== false) {\n        // Make sure we can still distinguish native functions\n        // by their name, otherwise String and Function will\n        // have the same hash\n        this.dispatch(\"function-name:\" + String(fn.name));\n      }\n\n      if (options.respectFunctionProperties) {\n        this._object(fn);\n      }\n    },\n    _number: function(number){\n      return write('number:' + number.toString());\n    },\n    _xml: function(xml){\n      return write('xml:' + xml.toString());\n    },\n    _null: function() {\n      return write('Null');\n    },\n    _undefined: function() {\n      return write('Undefined');\n    },\n    _regexp: function(regex){\n      return write('regex:' + regex.toString());\n    },\n    _uint8array: function(arr){\n      write('uint8array:');\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _uint8clampedarray: function(arr){\n      write('uint8clampedarray:');\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _int8array: function(arr){\n      write('uint8array:');\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _uint16array: function(arr){\n      write('uint16array:');\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _int16array: function(arr){\n      write('uint16array:');\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _uint32array: function(arr){\n      write('uint32array:');\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _int32array: function(arr){\n      write('uint32array:');\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _float32array: function(arr){\n      write('float32array:');\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _float64array: function(arr){\n      write('float64array:');\n      return this.dispatch(Array.prototype.slice.call(arr));\n    },\n    _arraybuffer: function(arr){\n      write('arraybuffer:');\n      return this.dispatch(new Uint8Array(arr));\n    },\n    _url: function(url) {\n      return write('url:' + url.toString(), 'utf8');\n    },\n    _map: function(map) {\n      write('map:');\n      var arr = Array.from(map);\n      return this._array(arr, options.unorderedSets !== false);\n    },\n    _set: function(set) {\n      write('set:');\n      var arr = Array.from(set);\n      return this._array(arr, options.unorderedSets !== false);\n    },\n    _file: function(file) {\n      write('file:');\n      return this.dispatch([file.name, file.size, file.type, file.lastModfied]);\n    },\n    _blob: function() {\n      if (options.ignoreUnknown) {\n        return write('[blob]');\n      }\n\n      throw Error('Hashing Blob objects is currently not supported\\n' +\n        '(see https://github.com/puleos/object-hash/issues/26)\\n' +\n        'Use \"options.replacer\" or \"options.ignoreUnknown\"\\n');\n    },\n    _domwindow: function() { return write('domwindow'); },\n    _bigint: function(number){\n      return write('bigint:' + number.toString());\n    },\n    /* Node.js standard native objects */\n    _process: function() { return write('process'); },\n    _timer: function() { return write('timer'); },\n    _pipe: function() { return write('pipe'); },\n    _tcp: function() { return write('tcp'); },\n    _udp: function() { return write('udp'); },\n    _tty: function() { return write('tty'); },\n    _statwatcher: function() { return write('statwatcher'); },\n    _securecontext: function() { return write('securecontext'); },\n    _connection: function() { return write('connection'); },\n    _zlib: function() { return write('zlib'); },\n    _context: function() { return write('context'); },\n    _nodescript: function() { return write('nodescript'); },\n    _httpparser: function() { return write('httpparser'); },\n    _dataview: function() { return write('dataview'); },\n    _signal: function() { return write('signal'); },\n    _fsevent: function() { return write('fsevent'); },\n    _tlswrap: function() { return write('tlswrap'); },\n  };\n}\n\n// Mini-implementation of stream.PassThrough\n// We are far from having need for the full implementation, and we can\n// make assumptions like \"many writes, then only one final read\"\n// and we can ignore encoding specifics\nfunction PassThrough() {\n  return {\n    buf: '',\n\n    write: function(b) {\n      this.buf += b;\n    },\n\n    end: function(b) {\n      this.buf += b;\n    },\n\n    read: function() {\n      return this.buf;\n    }\n  };\n}\n","/**\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar DELETE = 'delete';\n\n// Constants describing the size of trie nodes.\nvar SHIFT = 5; // Resulted in best performance after ______?\nvar SIZE = 1 << SHIFT;\nvar MASK = SIZE - 1;\n\n// A consistent shared value representing \"not set\" which equals nothing other\n// than itself, and nothing that could be provided externally.\nvar NOT_SET = {};\n\n// Boolean references, Rough equivalent of `bool &`.\nfunction MakeRef() {\n  return { value: false };\n}\n\nfunction SetRef(ref) {\n  if (ref) {\n    ref.value = true;\n  }\n}\n\n// A function which returns a value representing an \"owner\" for transient writes\n// to tries. The return value will only ever equal itself, and will not equal\n// the return of any subsequent call of this function.\nfunction OwnerID() {}\n\nfunction ensureSize(iter) {\n  if (iter.size === undefined) {\n    iter.size = iter.__iterate(returnTrue);\n  }\n  return iter.size;\n}\n\nfunction wrapIndex(iter, index) {\n  // This implements \"is array index\" which the ECMAString spec defines as:\n  //\n  //     A String property name P is an array index if and only if\n  //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n  //     to 2^32−1.\n  //\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n  if (typeof index !== 'number') {\n    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n    if ('' + uint32Index !== index || uint32Index === 4294967295) {\n      return NaN;\n    }\n    index = uint32Index;\n  }\n  return index < 0 ? ensureSize(iter) + index : index;\n}\n\nfunction returnTrue() {\n  return true;\n}\n\nfunction wholeSlice(begin, end, size) {\n  return (\n    ((begin === 0 && !isNeg(begin)) ||\n      (size !== undefined && begin <= -size)) &&\n    (end === undefined || (size !== undefined && end >= size))\n  );\n}\n\nfunction resolveBegin(begin, size) {\n  return resolveIndex(begin, size, 0);\n}\n\nfunction resolveEnd(end, size) {\n  return resolveIndex(end, size, size);\n}\n\nfunction resolveIndex(index, size, defaultIndex) {\n  // Sanitize indices using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  return index === undefined\n    ? defaultIndex\n    : isNeg(index)\n    ? size === Infinity\n      ? size\n      : Math.max(0, size + index) | 0\n    : size === undefined || size === index\n    ? index\n    : Math.min(size, index) | 0;\n}\n\nfunction isNeg(value) {\n  // Account for -0 which is negative, but not less than 0.\n  return value < 0 || (value === 0 && 1 / value === -Infinity);\n}\n\nvar IS_COLLECTION_SYMBOL = '@@__IMMUTABLE_ITERABLE__@@';\n\nfunction isCollection(maybeCollection) {\n  return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);\n}\n\nvar IS_KEYED_SYMBOL = '@@__IMMUTABLE_KEYED__@@';\n\nfunction isKeyed(maybeKeyed) {\n  return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);\n}\n\nvar IS_INDEXED_SYMBOL = '@@__IMMUTABLE_INDEXED__@@';\n\nfunction isIndexed(maybeIndexed) {\n  return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);\n}\n\nfunction isAssociative(maybeAssociative) {\n  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n}\n\nvar Collection = function Collection(value) {\n  return isCollection(value) ? value : Seq(value);\n};\n\nvar KeyedCollection = /*@__PURE__*/(function (Collection) {\n  function KeyedCollection(value) {\n    return isKeyed(value) ? value : KeyedSeq(value);\n  }\n\n  if ( Collection ) KeyedCollection.__proto__ = Collection;\n  KeyedCollection.prototype = Object.create( Collection && Collection.prototype );\n  KeyedCollection.prototype.constructor = KeyedCollection;\n\n  return KeyedCollection;\n}(Collection));\n\nvar IndexedCollection = /*@__PURE__*/(function (Collection) {\n  function IndexedCollection(value) {\n    return isIndexed(value) ? value : IndexedSeq(value);\n  }\n\n  if ( Collection ) IndexedCollection.__proto__ = Collection;\n  IndexedCollection.prototype = Object.create( Collection && Collection.prototype );\n  IndexedCollection.prototype.constructor = IndexedCollection;\n\n  return IndexedCollection;\n}(Collection));\n\nvar SetCollection = /*@__PURE__*/(function (Collection) {\n  function SetCollection(value) {\n    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n  }\n\n  if ( Collection ) SetCollection.__proto__ = Collection;\n  SetCollection.prototype = Object.create( Collection && Collection.prototype );\n  SetCollection.prototype.constructor = SetCollection;\n\n  return SetCollection;\n}(Collection));\n\nCollection.Keyed = KeyedCollection;\nCollection.Indexed = IndexedCollection;\nCollection.Set = SetCollection;\n\nvar IS_SEQ_SYMBOL = '@@__IMMUTABLE_SEQ__@@';\n\nfunction isSeq(maybeSeq) {\n  return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);\n}\n\nvar IS_RECORD_SYMBOL = '@@__IMMUTABLE_RECORD__@@';\n\nfunction isRecord(maybeRecord) {\n  return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);\n}\n\nfunction isImmutable(maybeImmutable) {\n  return isCollection(maybeImmutable) || isRecord(maybeImmutable);\n}\n\nvar IS_ORDERED_SYMBOL = '@@__IMMUTABLE_ORDERED__@@';\n\nfunction isOrdered(maybeOrdered) {\n  return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);\n}\n\nvar ITERATE_KEYS = 0;\nvar ITERATE_VALUES = 1;\nvar ITERATE_ENTRIES = 2;\n\nvar REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nvar ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\nvar Iterator = function Iterator(next) {\n  this.next = next;\n};\n\nIterator.prototype.toString = function toString () {\n  return '[Iterator]';\n};\n\nIterator.KEYS = ITERATE_KEYS;\nIterator.VALUES = ITERATE_VALUES;\nIterator.ENTRIES = ITERATE_ENTRIES;\n\nIterator.prototype.inspect = Iterator.prototype.toSource = function () {\n  return this.toString();\n};\nIterator.prototype[ITERATOR_SYMBOL] = function () {\n  return this;\n};\n\nfunction iteratorValue(type, k, v, iteratorResult) {\n  var value = type === 0 ? k : type === 1 ? v : [k, v];\n  iteratorResult\n    ? (iteratorResult.value = value)\n    : (iteratorResult = {\n        value: value,\n        done: false,\n      });\n  return iteratorResult;\n}\n\nfunction iteratorDone() {\n  return { value: undefined, done: true };\n}\n\nfunction hasIterator(maybeIterable) {\n  if (Array.isArray(maybeIterable)) {\n    // IE11 trick as it does not support `Symbol.iterator`\n    return true;\n  }\n\n  return !!getIteratorFn(maybeIterable);\n}\n\nfunction isIterator(maybeIterator) {\n  return maybeIterator && typeof maybeIterator.next === 'function';\n}\n\nfunction getIterator(iterable) {\n  var iteratorFn = getIteratorFn(iterable);\n  return iteratorFn && iteratorFn.call(iterable);\n}\n\nfunction getIteratorFn(iterable) {\n  var iteratorFn =\n    iterable &&\n    ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nfunction isEntriesIterable(maybeIterable) {\n  var iteratorFn = getIteratorFn(maybeIterable);\n  return iteratorFn && iteratorFn === maybeIterable.entries;\n}\n\nfunction isKeysIterable(maybeIterable) {\n  var iteratorFn = getIteratorFn(maybeIterable);\n  return iteratorFn && iteratorFn === maybeIterable.keys;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isArrayLike(value) {\n  if (Array.isArray(value) || typeof value === 'string') {\n    return true;\n  }\n\n  return (\n    value &&\n    typeof value === 'object' &&\n    Number.isInteger(value.length) &&\n    value.length >= 0 &&\n    (value.length === 0\n      ? // Only {length: 0} is considered Array-like.\n        Object.keys(value).length === 1\n      : // An object is only Array-like if it has a property where the last value\n        // in the array-like may be found (which could be undefined).\n        value.hasOwnProperty(value.length - 1))\n  );\n}\n\nvar Seq = /*@__PURE__*/(function (Collection) {\n  function Seq(value) {\n    return value === undefined || value === null\n      ? emptySequence()\n      : isImmutable(value)\n      ? value.toSeq()\n      : seqFromValue(value);\n  }\n\n  if ( Collection ) Seq.__proto__ = Collection;\n  Seq.prototype = Object.create( Collection && Collection.prototype );\n  Seq.prototype.constructor = Seq;\n\n  Seq.prototype.toSeq = function toSeq () {\n    return this;\n  };\n\n  Seq.prototype.toString = function toString () {\n    return this.__toString('Seq {', '}');\n  };\n\n  Seq.prototype.cacheResult = function cacheResult () {\n    if (!this._cache && this.__iterateUncached) {\n      this._cache = this.entrySeq().toArray();\n      this.size = this._cache.length;\n    }\n    return this;\n  };\n\n  // abstract __iterateUncached(fn, reverse)\n\n  Seq.prototype.__iterate = function __iterate (fn, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      while (i !== size) {\n        var entry = cache[reverse ? size - ++i : i++];\n        if (fn(entry[1], entry[0], this) === false) {\n          break;\n        }\n      }\n      return i;\n    }\n    return this.__iterateUncached(fn, reverse);\n  };\n\n  // abstract __iteratorUncached(type, reverse)\n\n  Seq.prototype.__iterator = function __iterator (type, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var entry = cache[reverse ? size - ++i : i++];\n        return iteratorValue(type, entry[0], entry[1]);\n      });\n    }\n    return this.__iteratorUncached(type, reverse);\n  };\n\n  return Seq;\n}(Collection));\n\nvar KeyedSeq = /*@__PURE__*/(function (Seq) {\n  function KeyedSeq(value) {\n    return value === undefined || value === null\n      ? emptySequence().toKeyedSeq()\n      : isCollection(value)\n      ? isKeyed(value)\n        ? value.toSeq()\n        : value.fromEntrySeq()\n      : isRecord(value)\n      ? value.toSeq()\n      : keyedSeqFromValue(value);\n  }\n\n  if ( Seq ) KeyedSeq.__proto__ = Seq;\n  KeyedSeq.prototype = Object.create( Seq && Seq.prototype );\n  KeyedSeq.prototype.constructor = KeyedSeq;\n\n  KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {\n    return this;\n  };\n\n  return KeyedSeq;\n}(Seq));\n\nvar IndexedSeq = /*@__PURE__*/(function (Seq) {\n  function IndexedSeq(value) {\n    return value === undefined || value === null\n      ? emptySequence()\n      : isCollection(value)\n      ? isKeyed(value)\n        ? value.entrySeq()\n        : value.toIndexedSeq()\n      : isRecord(value)\n      ? value.toSeq().entrySeq()\n      : indexedSeqFromValue(value);\n  }\n\n  if ( Seq ) IndexedSeq.__proto__ = Seq;\n  IndexedSeq.prototype = Object.create( Seq && Seq.prototype );\n  IndexedSeq.prototype.constructor = IndexedSeq;\n\n  IndexedSeq.of = function of (/*...values*/) {\n    return IndexedSeq(arguments);\n  };\n\n  IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {\n    return this;\n  };\n\n  IndexedSeq.prototype.toString = function toString () {\n    return this.__toString('Seq [', ']');\n  };\n\n  return IndexedSeq;\n}(Seq));\n\nvar SetSeq = /*@__PURE__*/(function (Seq) {\n  function SetSeq(value) {\n    return (\n      isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)\n    ).toSetSeq();\n  }\n\n  if ( Seq ) SetSeq.__proto__ = Seq;\n  SetSeq.prototype = Object.create( Seq && Seq.prototype );\n  SetSeq.prototype.constructor = SetSeq;\n\n  SetSeq.of = function of (/*...values*/) {\n    return SetSeq(arguments);\n  };\n\n  SetSeq.prototype.toSetSeq = function toSetSeq () {\n    return this;\n  };\n\n  return SetSeq;\n}(Seq));\n\nSeq.isSeq = isSeq;\nSeq.Keyed = KeyedSeq;\nSeq.Set = SetSeq;\nSeq.Indexed = IndexedSeq;\n\nSeq.prototype[IS_SEQ_SYMBOL] = true;\n\n// #pragma Root Sequences\n\nvar ArraySeq = /*@__PURE__*/(function (IndexedSeq) {\n  function ArraySeq(array) {\n    this._array = array;\n    this.size = array.length;\n  }\n\n  if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;\n  ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ArraySeq.prototype.constructor = ArraySeq;\n\n  ArraySeq.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n  };\n\n  ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    while (i !== size) {\n      var ii = reverse ? size - ++i : i++;\n      if (fn(array[ii], ii, this) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ArraySeq.prototype.__iterator = function __iterator (type, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var ii = reverse ? size - ++i : i++;\n      return iteratorValue(type, ii, array[ii]);\n    });\n  };\n\n  return ArraySeq;\n}(IndexedSeq));\n\nvar ObjectSeq = /*@__PURE__*/(function (KeyedSeq) {\n  function ObjectSeq(object) {\n    var keys = Object.keys(object).concat(\n      Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []\n    );\n    this._object = object;\n    this._keys = keys;\n    this.size = keys.length;\n  }\n\n  if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;\n  ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ObjectSeq.prototype.constructor = ObjectSeq;\n\n  ObjectSeq.prototype.get = function get (key, notSetValue) {\n    if (notSetValue !== undefined && !this.has(key)) {\n      return notSetValue;\n    }\n    return this._object[key];\n  };\n\n  ObjectSeq.prototype.has = function has (key) {\n    return hasOwnProperty.call(this._object, key);\n  };\n\n  ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    while (i !== size) {\n      var key = keys[reverse ? size - ++i : i++];\n      if (fn(object[key], key, this) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var key = keys[reverse ? size - ++i : i++];\n      return iteratorValue(type, key, object[key]);\n    });\n  };\n\n  return ObjectSeq;\n}(KeyedSeq));\nObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;\n\nvar CollectionSeq = /*@__PURE__*/(function (IndexedSeq) {\n  function CollectionSeq(collection) {\n    this._collection = collection;\n    this.size = collection.length || collection.size;\n  }\n\n  if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;\n  CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  CollectionSeq.prototype.constructor = CollectionSeq;\n\n  CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    var iterations = 0;\n    if (isIterator(iterator)) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n    }\n    return iterations;\n  };\n\n  CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    if (!isIterator(iterator)) {\n      return new Iterator(iteratorDone);\n    }\n    var iterations = 0;\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done ? step : iteratorValue(type, iterations++, step.value);\n    });\n  };\n\n  return CollectionSeq;\n}(IndexedSeq));\n\n// # pragma Helper functions\n\nvar EMPTY_SEQ;\n\nfunction emptySequence() {\n  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n}\n\nfunction keyedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq.fromEntrySeq();\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of [k, v] entries, or keyed object: ' +\n      value\n  );\n}\n\nfunction indexedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values: ' + value\n  );\n}\n\nfunction seqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return isEntriesIterable(value)\n      ? seq.fromEntrySeq()\n      : isKeysIterable(value)\n      ? seq.toSetSeq()\n      : seq;\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values, or keyed object: ' + value\n  );\n}\n\nfunction maybeIndexedSeqFromValue(value) {\n  return isArrayLike(value)\n    ? new ArraySeq(value)\n    : hasIterator(value)\n    ? new CollectionSeq(value)\n    : undefined;\n}\n\nvar IS_MAP_SYMBOL = '@@__IMMUTABLE_MAP__@@';\n\nfunction isMap(maybeMap) {\n  return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);\n}\n\nfunction isOrderedMap(maybeOrderedMap) {\n  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n}\n\nfunction isValueObject(maybeValue) {\n  return Boolean(\n    maybeValue &&\n      typeof maybeValue.equals === 'function' &&\n      typeof maybeValue.hashCode === 'function'\n  );\n}\n\n/**\n * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n *\n * NaN is considered the same as NaN, however -0 and 0 are considered the same\n * value, which is different from the algorithm described by\n * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n *\n * This is extended further to allow Objects to describe the values they\n * represent, by way of `valueOf` or `equals` (and `hashCode`).\n *\n * Note: because of this extension, the key equality of Immutable.Map and the\n * value equality of Immutable.Set will differ from ES6 Map and Set.\n *\n * ### Defining custom values\n *\n * The easiest way to describe the value an object represents is by implementing\n * `valueOf`. For example, `Date` represents a value by returning a unix\n * timestamp for `valueOf`:\n *\n *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n *     var date2 = new Date(1234567890000);\n *     date1.valueOf(); // 1234567890000\n *     assert( date1 !== date2 );\n *     assert( Immutable.is( date1, date2 ) );\n *\n * Note: overriding `valueOf` may have other implications if you use this object\n * where JavaScript expects a primitive, such as implicit string coercion.\n *\n * For more complex types, especially collections, implementing `valueOf` may\n * not be performant. An alternative is to implement `equals` and `hashCode`.\n *\n * `equals` takes another object, presumably of similar type, and returns true\n * if it is equal. Equality is symmetrical, so the same result should be\n * returned if this and the argument are flipped.\n *\n *     assert( a.equals(b) === b.equals(a) );\n *\n * `hashCode` returns a 32bit integer number representing the object which will\n * be used to determine how to store the value object in a Map or Set. You must\n * provide both or neither methods, one must not exist without the other.\n *\n * Also, an important relationship between these methods must be upheld: if two\n * values are equal, they *must* return the same hashCode. If the values are not\n * equal, they might have the same hashCode; this is called a hash collision,\n * and while undesirable for performance reasons, it is acceptable.\n *\n *     if (a.equals(b)) {\n *       assert( a.hashCode() === b.hashCode() );\n *     }\n *\n * All Immutable collections are Value Objects: they implement `equals()`\n * and `hashCode()`.\n */\nfunction is(valueA, valueB) {\n  if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n    return true;\n  }\n  if (!valueA || !valueB) {\n    return false;\n  }\n  if (\n    typeof valueA.valueOf === 'function' &&\n    typeof valueB.valueOf === 'function'\n  ) {\n    valueA = valueA.valueOf();\n    valueB = valueB.valueOf();\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n  }\n  return !!(\n    isValueObject(valueA) &&\n    isValueObject(valueB) &&\n    valueA.equals(valueB)\n  );\n}\n\nvar imul =\n  typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2\n    ? Math.imul\n    : function imul(a, b) {\n        a |= 0; // int\n        b |= 0; // int\n        var c = a & 0xffff;\n        var d = b & 0xffff;\n        // Shift by 0 fixes the sign on the high part.\n        return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int\n      };\n\n// v8 has an optimization for storing 31-bit signed numbers.\n// Values which have either 00 or 11 as the high order bits qualify.\n// This function drops the highest order bit in a signed number, maintaining\n// the sign bit.\nfunction smi(i32) {\n  return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);\n}\n\nvar defaultValueOf = Object.prototype.valueOf;\n\nfunction hash(o) {\n  if (o == null) {\n    return hashNullish(o);\n  }\n\n  if (typeof o.hashCode === 'function') {\n    // Drop any high bits from accidentally long hash codes.\n    return smi(o.hashCode(o));\n  }\n\n  var v = valueOf(o);\n\n  if (v == null) {\n    return hashNullish(v);\n  }\n\n  switch (typeof v) {\n    case 'boolean':\n      // The hash values for built-in constants are a 1 value for each 5-byte\n      // shift region expect for the first, which encodes the value. This\n      // reduces the odds of a hash collision for these common values.\n      return v ? 0x42108421 : 0x42108420;\n    case 'number':\n      return hashNumber(v);\n    case 'string':\n      return v.length > STRING_HASH_CACHE_MIN_STRLEN\n        ? cachedHashString(v)\n        : hashString(v);\n    case 'object':\n    case 'function':\n      return hashJSObj(v);\n    case 'symbol':\n      return hashSymbol(v);\n    default:\n      if (typeof v.toString === 'function') {\n        return hashString(v.toString());\n      }\n      throw new Error('Value type ' + typeof v + ' cannot be hashed.');\n  }\n}\n\nfunction hashNullish(nullish) {\n  return nullish === null ? 0x42108422 : /* undefined */ 0x42108423;\n}\n\n// Compress arbitrarily large numbers into smi hashes.\nfunction hashNumber(n) {\n  if (n !== n || n === Infinity) {\n    return 0;\n  }\n  var hash = n | 0;\n  if (hash !== n) {\n    hash ^= n * 0xffffffff;\n  }\n  while (n > 0xffffffff) {\n    n /= 0xffffffff;\n    hash ^= n;\n  }\n  return smi(hash);\n}\n\nfunction cachedHashString(string) {\n  var hashed = stringHashCache[string];\n  if (hashed === undefined) {\n    hashed = hashString(string);\n    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n      STRING_HASH_CACHE_SIZE = 0;\n      stringHashCache = {};\n    }\n    STRING_HASH_CACHE_SIZE++;\n    stringHashCache[string] = hashed;\n  }\n  return hashed;\n}\n\n// http://jsperf.com/hashing-strings\nfunction hashString(string) {\n  // This is the hash from JVM\n  // The hash code for a string is computed as\n  // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n  // where s[i] is the ith character of the string and n is the length of\n  // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n  // (exclusive) by dropping high bits.\n  var hashed = 0;\n  for (var ii = 0; ii < string.length; ii++) {\n    hashed = (31 * hashed + string.charCodeAt(ii)) | 0;\n  }\n  return smi(hashed);\n}\n\nfunction hashSymbol(sym) {\n  var hashed = symbolMap[sym];\n  if (hashed !== undefined) {\n    return hashed;\n  }\n\n  hashed = nextHash();\n\n  symbolMap[sym] = hashed;\n\n  return hashed;\n}\n\nfunction hashJSObj(obj) {\n  var hashed;\n  if (usingWeakMap) {\n    hashed = weakMap.get(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = obj[UID_HASH_KEY];\n  if (hashed !== undefined) {\n    return hashed;\n  }\n\n  if (!canDefineProperty) {\n    hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n    if (hashed !== undefined) {\n      return hashed;\n    }\n\n    hashed = getIENodeHash(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = nextHash();\n\n  if (usingWeakMap) {\n    weakMap.set(obj, hashed);\n  } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n    throw new Error('Non-extensible objects are not allowed as keys.');\n  } else if (canDefineProperty) {\n    Object.defineProperty(obj, UID_HASH_KEY, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: hashed,\n    });\n  } else if (\n    obj.propertyIsEnumerable !== undefined &&\n    obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable\n  ) {\n    // Since we can't define a non-enumerable property on the object\n    // we'll hijack one of the less-used non-enumerable properties to\n    // save our hash on it. Since this is a function it will not show up in\n    // `JSON.stringify` which is what we want.\n    obj.propertyIsEnumerable = function () {\n      return this.constructor.prototype.propertyIsEnumerable.apply(\n        this,\n        arguments\n      );\n    };\n    obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;\n  } else if (obj.nodeType !== undefined) {\n    // At this point we couldn't get the IE `uniqueID` to use as a hash\n    // and we couldn't use a non-enumerable property to exploit the\n    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n    // itself.\n    obj[UID_HASH_KEY] = hashed;\n  } else {\n    throw new Error('Unable to set a non-enumerable property on object.');\n  }\n\n  return hashed;\n}\n\n// Get references to ES5 object methods.\nvar isExtensible = Object.isExtensible;\n\n// True if Object.defineProperty works as expected. IE8 fails this test.\nvar canDefineProperty = (function () {\n  try {\n    Object.defineProperty({}, '@', {});\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n// and avoid memory leaks from the IE cloneNode bug.\nfunction getIENodeHash(node) {\n  if (node && node.nodeType > 0) {\n    switch (node.nodeType) {\n      case 1: // Element\n        return node.uniqueID;\n      case 9: // Document\n        return node.documentElement && node.documentElement.uniqueID;\n    }\n  }\n}\n\nfunction valueOf(obj) {\n  return obj.valueOf !== defaultValueOf && typeof obj.valueOf === 'function'\n    ? obj.valueOf(obj)\n    : obj;\n}\n\nfunction nextHash() {\n  var nextHash = ++_objHashUID;\n  if (_objHashUID & 0x40000000) {\n    _objHashUID = 0;\n  }\n  return nextHash;\n}\n\n// If possible, use a WeakMap.\nvar usingWeakMap = typeof WeakMap === 'function';\nvar weakMap;\nif (usingWeakMap) {\n  weakMap = new WeakMap();\n}\n\nvar symbolMap = Object.create(null);\n\nvar _objHashUID = 0;\n\nvar UID_HASH_KEY = '__immutablehash__';\nif (typeof Symbol === 'function') {\n  UID_HASH_KEY = Symbol(UID_HASH_KEY);\n}\n\nvar STRING_HASH_CACHE_MIN_STRLEN = 16;\nvar STRING_HASH_CACHE_MAX_SIZE = 255;\nvar STRING_HASH_CACHE_SIZE = 0;\nvar stringHashCache = {};\n\nvar ToKeyedSequence = /*@__PURE__*/(function (KeyedSeq) {\n  function ToKeyedSequence(indexed, useKeys) {\n    this._iter = indexed;\n    this._useKeys = useKeys;\n    this.size = indexed.size;\n  }\n\n  if ( KeyedSeq ) ToKeyedSequence.__proto__ = KeyedSeq;\n  ToKeyedSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n\n  ToKeyedSequence.prototype.get = function get (key, notSetValue) {\n    return this._iter.get(key, notSetValue);\n  };\n\n  ToKeyedSequence.prototype.has = function has (key) {\n    return this._iter.has(key);\n  };\n\n  ToKeyedSequence.prototype.valueSeq = function valueSeq () {\n    return this._iter.valueSeq();\n  };\n\n  ToKeyedSequence.prototype.reverse = function reverse () {\n    var this$1$1 = this;\n\n    var reversedSequence = reverseFactory(this, true);\n    if (!this._useKeys) {\n      reversedSequence.valueSeq = function () { return this$1$1._iter.toSeq().reverse(); };\n    }\n    return reversedSequence;\n  };\n\n  ToKeyedSequence.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    var mappedSequence = mapFactory(this, mapper, context);\n    if (!this._useKeys) {\n      mappedSequence.valueSeq = function () { return this$1$1._iter.toSeq().map(mapper, context); };\n    }\n    return mappedSequence;\n  };\n\n  ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._iter.__iterate(function (v, k) { return fn(v, k, this$1$1); }, reverse);\n  };\n\n  ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    return this._iter.__iterator(type, reverse);\n  };\n\n  return ToKeyedSequence;\n}(KeyedSeq));\nToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;\n\nvar ToIndexedSequence = /*@__PURE__*/(function (IndexedSeq) {\n  function ToIndexedSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( IndexedSeq ) ToIndexedSequence.__proto__ = IndexedSeq;\n  ToIndexedSequence.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n\n  ToIndexedSequence.prototype.includes = function includes (value) {\n    return this._iter.includes(value);\n  };\n\n  ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(this);\n    return this._iter.__iterate(\n      function (v) { return fn(v, reverse ? this$1$1.size - ++i : i++, this$1$1); },\n      reverse\n    );\n  };\n\n  ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1$1 = this;\n\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    var i = 0;\n    reverse && ensureSize(this);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(\n            type,\n            reverse ? this$1$1.size - ++i : i++,\n            step.value,\n            step\n          );\n    });\n  };\n\n  return ToIndexedSequence;\n}(IndexedSeq));\n\nvar ToSetSequence = /*@__PURE__*/(function (SetSeq) {\n  function ToSetSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( SetSeq ) ToSetSequence.__proto__ = SetSeq;\n  ToSetSequence.prototype = Object.create( SetSeq && SetSeq.prototype );\n  ToSetSequence.prototype.constructor = ToSetSequence;\n\n  ToSetSequence.prototype.has = function has (key) {\n    return this._iter.includes(key);\n  };\n\n  ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._iter.__iterate(function (v) { return fn(v, v, this$1$1); }, reverse);\n  };\n\n  ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(type, step.value, step.value, step);\n    });\n  };\n\n  return ToSetSequence;\n}(SetSeq));\n\nvar FromEntriesSequence = /*@__PURE__*/(function (KeyedSeq) {\n  function FromEntriesSequence(entries) {\n    this._iter = entries;\n    this.size = entries.size;\n  }\n\n  if ( KeyedSeq ) FromEntriesSequence.__proto__ = KeyedSeq;\n  FromEntriesSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n\n  FromEntriesSequence.prototype.entrySeq = function entrySeq () {\n    return this._iter.toSeq();\n  };\n\n  FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._iter.__iterate(function (entry) {\n      // Check if entry exists first so array access doesn't throw for holes\n      // in the parent iteration.\n      if (entry) {\n        validateEntry(entry);\n        var indexedCollection = isCollection(entry);\n        return fn(\n          indexedCollection ? entry.get(1) : entry[1],\n          indexedCollection ? entry.get(0) : entry[0],\n          this$1$1\n        );\n      }\n    }, reverse);\n  };\n\n  FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return iteratorValue(\n            type,\n            indexedCollection ? entry.get(0) : entry[0],\n            indexedCollection ? entry.get(1) : entry[1],\n            step\n          );\n        }\n      }\n    });\n  };\n\n  return FromEntriesSequence;\n}(KeyedSeq));\n\nToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\nfunction flipFactory(collection) {\n  var flipSequence = makeSequence(collection);\n  flipSequence._iter = collection;\n  flipSequence.size = collection.size;\n  flipSequence.flip = function () { return collection; };\n  flipSequence.reverse = function () {\n    var reversedSequence = collection.reverse.apply(this); // super.reverse()\n    reversedSequence.flip = function () { return collection.reverse(); };\n    return reversedSequence;\n  };\n  flipSequence.has = function (key) { return collection.includes(key); };\n  flipSequence.includes = function (key) { return collection.has(key); };\n  flipSequence.cacheResult = cacheResultThrough;\n  flipSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    return collection.__iterate(function (v, k) { return fn(k, v, this$1$1) !== false; }, reverse);\n  };\n  flipSequence.__iteratorUncached = function (type, reverse) {\n    if (type === ITERATE_ENTRIES) {\n      var iterator = collection.__iterator(type, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (!step.done) {\n          var k = step.value[0];\n          step.value[0] = step.value[1];\n          step.value[1] = k;\n        }\n        return step;\n      });\n    }\n    return collection.__iterator(\n      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n      reverse\n    );\n  };\n  return flipSequence;\n}\n\nfunction mapFactory(collection, mapper, context) {\n  var mappedSequence = makeSequence(collection);\n  mappedSequence.size = collection.size;\n  mappedSequence.has = function (key) { return collection.has(key); };\n  mappedSequence.get = function (key, notSetValue) {\n    var v = collection.get(key, NOT_SET);\n    return v === NOT_SET\n      ? notSetValue\n      : mapper.call(context, v, key, collection);\n  };\n  mappedSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    return collection.__iterate(\n      function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1$1) !== false; },\n      reverse\n    );\n  };\n  mappedSequence.__iteratorUncached = function (type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var key = entry[0];\n      return iteratorValue(\n        type,\n        key,\n        mapper.call(context, entry[1], key, collection),\n        step\n      );\n    });\n  };\n  return mappedSequence;\n}\n\nfunction reverseFactory(collection, useKeys) {\n  var this$1$1 = this;\n\n  var reversedSequence = makeSequence(collection);\n  reversedSequence._iter = collection;\n  reversedSequence.size = collection.size;\n  reversedSequence.reverse = function () { return collection; };\n  if (collection.flip) {\n    reversedSequence.flip = function () {\n      var flipSequence = flipFactory(collection);\n      flipSequence.reverse = function () { return collection.flip(); };\n      return flipSequence;\n    };\n  }\n  reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };\n  reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };\n  reversedSequence.includes = function (value) { return collection.includes(value); };\n  reversedSequence.cacheResult = cacheResultThrough;\n  reversedSequence.__iterate = function (fn, reverse) {\n    var this$1$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(collection);\n    return collection.__iterate(\n      function (v, k) { return fn(v, useKeys ? k : reverse ? this$1$1.size - ++i : i++, this$1$1); },\n      !reverse\n    );\n  };\n  reversedSequence.__iterator = function (type, reverse) {\n    var i = 0;\n    reverse && ensureSize(collection);\n    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      return iteratorValue(\n        type,\n        useKeys ? entry[0] : reverse ? this$1$1.size - ++i : i++,\n        entry[1],\n        step\n      );\n    });\n  };\n  return reversedSequence;\n}\n\nfunction filterFactory(collection, predicate, context, useKeys) {\n  var filterSequence = makeSequence(collection);\n  if (useKeys) {\n    filterSequence.has = function (key) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n    };\n    filterSequence.get = function (key, notSetValue) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && predicate.call(context, v, key, collection)\n        ? v\n        : notSetValue;\n    };\n  }\n  filterSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1$1);\n      }\n    }, reverse);\n    return iterations;\n  };\n  filterSequence.__iteratorUncached = function (type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterations = 0;\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        var value = entry[1];\n        if (predicate.call(context, value, key, collection)) {\n          return iteratorValue(type, useKeys ? key : iterations++, value, step);\n        }\n      }\n    });\n  };\n  return filterSequence;\n}\n\nfunction countByFactory(collection, grouper, context) {\n  var groups = Map().asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });\n  });\n  return groups.asImmutable();\n}\n\nfunction groupByFactory(collection, grouper, context) {\n  var isKeyedIter = isKeyed(collection);\n  var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(\n      grouper.call(context, v, k, collection),\n      function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }\n    );\n  });\n  var coerce = collectionClass(collection);\n  return groups.map(function (arr) { return reify(collection, coerce(arr)); }).asImmutable();\n}\n\nfunction partitionFactory(collection, predicate, context) {\n  var isKeyedIter = isKeyed(collection);\n  var groups = [[], []];\n  collection.__iterate(function (v, k) {\n    groups[predicate.call(context, v, k, collection) ? 1 : 0].push(\n      isKeyedIter ? [k, v] : v\n    );\n  });\n  var coerce = collectionClass(collection);\n  return groups.map(function (arr) { return reify(collection, coerce(arr)); });\n}\n\nfunction sliceFactory(collection, begin, end, useKeys) {\n  var originalSize = collection.size;\n\n  if (wholeSlice(begin, end, originalSize)) {\n    return collection;\n  }\n\n  var resolvedBegin = resolveBegin(begin, originalSize);\n  var resolvedEnd = resolveEnd(end, originalSize);\n\n  // begin or end will be NaN if they were provided as negative numbers and\n  // this collection's size is unknown. In that case, cache first so there is\n  // a known size and these do not resolve to NaN.\n  if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n  }\n\n  // Note: resolvedEnd is undefined when the original sequence's length is\n  // unknown and this slice did not supply an end and should contain all\n  // elements after resolvedBegin.\n  // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n  var resolvedSize = resolvedEnd - resolvedBegin;\n  var sliceSize;\n  if (resolvedSize === resolvedSize) {\n    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n  }\n\n  var sliceSeq = makeSequence(collection);\n\n  // If collection.size is undefined, the size of the realized sliceSeq is\n  // unknown at this point unless the number of items to slice is 0\n  sliceSeq.size =\n    sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;\n\n  if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n    sliceSeq.get = function (index, notSetValue) {\n      index = wrapIndex(this, index);\n      return index >= 0 && index < sliceSize\n        ? collection.get(index + resolvedBegin, notSetValue)\n        : notSetValue;\n    };\n  }\n\n  sliceSeq.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    if (sliceSize === 0) {\n      return 0;\n    }\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var skipped = 0;\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k) {\n      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n        iterations++;\n        return (\n          fn(v, useKeys ? k : iterations - 1, this$1$1) !== false &&\n          iterations !== sliceSize\n        );\n      }\n    });\n    return iterations;\n  };\n\n  sliceSeq.__iteratorUncached = function (type, reverse) {\n    if (sliceSize !== 0 && reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    // Don't bother instantiating parent iterator if taking 0.\n    if (sliceSize === 0) {\n      return new Iterator(iteratorDone);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var skipped = 0;\n    var iterations = 0;\n    return new Iterator(function () {\n      while (skipped++ < resolvedBegin) {\n        iterator.next();\n      }\n      if (++iterations > sliceSize) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (useKeys || type === ITERATE_VALUES || step.done) {\n        return step;\n      }\n      if (type === ITERATE_KEYS) {\n        return iteratorValue(type, iterations - 1, undefined, step);\n      }\n      return iteratorValue(type, iterations - 1, step.value[1], step);\n    });\n  };\n\n  return sliceSeq;\n}\n\nfunction takeWhileFactory(collection, predicate, context) {\n  var takeSequence = makeSequence(collection);\n  takeSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    collection.__iterate(\n      function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1$1); }\n    );\n    return iterations;\n  };\n  takeSequence.__iteratorUncached = function (type, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterating = true;\n    return new Iterator(function () {\n      if (!iterating) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var k = entry[0];\n      var v = entry[1];\n      if (!predicate.call(context, v, k, this$1$1)) {\n        iterating = false;\n        return iteratorDone();\n      }\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return takeSequence;\n}\n\nfunction skipWhileFactory(collection, predicate, context, useKeys) {\n  var skipSequence = makeSequence(collection);\n  skipSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1$1);\n      }\n    });\n    return iterations;\n  };\n  skipSequence.__iteratorUncached = function (type, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var skipping = true;\n    var iterations = 0;\n    return new Iterator(function () {\n      var step;\n      var k;\n      var v;\n      do {\n        step = iterator.next();\n        if (step.done) {\n          if (useKeys || type === ITERATE_VALUES) {\n            return step;\n          }\n          if (type === ITERATE_KEYS) {\n            return iteratorValue(type, iterations++, undefined, step);\n          }\n          return iteratorValue(type, iterations++, step.value[1], step);\n        }\n        var entry = step.value;\n        k = entry[0];\n        v = entry[1];\n        skipping && (skipping = predicate.call(context, v, k, this$1$1));\n      } while (skipping);\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return skipSequence;\n}\n\nfunction concatFactory(collection, values) {\n  var isKeyedCollection = isKeyed(collection);\n  var iters = [collection]\n    .concat(values)\n    .map(function (v) {\n      if (!isCollection(v)) {\n        v = isKeyedCollection\n          ? keyedSeqFromValue(v)\n          : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedCollection) {\n        v = KeyedCollection(v);\n      }\n      return v;\n    })\n    .filter(function (v) { return v.size !== 0; });\n\n  if (iters.length === 0) {\n    return collection;\n  }\n\n  if (iters.length === 1) {\n    var singleton = iters[0];\n    if (\n      singleton === collection ||\n      (isKeyedCollection && isKeyed(singleton)) ||\n      (isIndexed(collection) && isIndexed(singleton))\n    ) {\n      return singleton;\n    }\n  }\n\n  var concatSeq = new ArraySeq(iters);\n  if (isKeyedCollection) {\n    concatSeq = concatSeq.toKeyedSeq();\n  } else if (!isIndexed(collection)) {\n    concatSeq = concatSeq.toSetSeq();\n  }\n  concatSeq = concatSeq.flatten(true);\n  concatSeq.size = iters.reduce(function (sum, seq) {\n    if (sum !== undefined) {\n      var size = seq.size;\n      if (size !== undefined) {\n        return sum + size;\n      }\n    }\n  }, 0);\n  return concatSeq;\n}\n\nfunction flattenFactory(collection, depth, useKeys) {\n  var flatSequence = makeSequence(collection);\n  flatSequence.__iterateUncached = function (fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    var stopped = false;\n    function flatDeep(iter, currentDepth) {\n      iter.__iterate(function (v, k) {\n        if ((!depth || currentDepth < depth) && isCollection(v)) {\n          flatDeep(v, currentDepth + 1);\n        } else {\n          iterations++;\n          if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {\n            stopped = true;\n          }\n        }\n        return !stopped;\n      }, reverse);\n    }\n    flatDeep(collection, 0);\n    return iterations;\n  };\n  flatSequence.__iteratorUncached = function (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var stack = [];\n    var iterations = 0;\n    return new Iterator(function () {\n      while (iterator) {\n        var step = iterator.next();\n        if (step.done !== false) {\n          iterator = stack.pop();\n          continue;\n        }\n        var v = step.value;\n        if (type === ITERATE_ENTRIES) {\n          v = v[1];\n        }\n        if ((!depth || stack.length < depth) && isCollection(v)) {\n          stack.push(iterator);\n          iterator = v.__iterator(type, reverse);\n        } else {\n          return useKeys ? step : iteratorValue(type, iterations++, v, step);\n        }\n      }\n      return iteratorDone();\n    });\n  };\n  return flatSequence;\n}\n\nfunction flatMapFactory(collection, mapper, context) {\n  var coerce = collectionClass(collection);\n  return collection\n    .toSeq()\n    .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })\n    .flatten(true);\n}\n\nfunction interposeFactory(collection, separator) {\n  var interposedSequence = makeSequence(collection);\n  interposedSequence.size = collection.size && collection.size * 2 - 1;\n  interposedSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(\n      function (v) { return (!iterations || fn(separator, iterations++, this$1$1) !== false) &&\n        fn(v, iterations++, this$1$1) !== false; },\n      reverse\n    );\n    return iterations;\n  };\n  interposedSequence.__iteratorUncached = function (type, reverse) {\n    var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n    var iterations = 0;\n    var step;\n    return new Iterator(function () {\n      if (!step || iterations % 2) {\n        step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n      }\n      return iterations % 2\n        ? iteratorValue(type, iterations++, separator)\n        : iteratorValue(type, iterations++, step.value, step);\n    });\n  };\n  return interposedSequence;\n}\n\nfunction sortFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  var isKeyedCollection = isKeyed(collection);\n  var index = 0;\n  var entries = collection\n    .toSeq()\n    .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })\n    .valueSeq()\n    .toArray();\n  entries\n    .sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; })\n    .forEach(\n      isKeyedCollection\n        ? function (v, i) {\n            entries[i].length = 2;\n          }\n        : function (v, i) {\n            entries[i] = v[1];\n          }\n    );\n  return isKeyedCollection\n    ? KeyedSeq(entries)\n    : isIndexed(collection)\n    ? IndexedSeq(entries)\n    : SetSeq(entries);\n}\n\nfunction maxFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  if (mapper) {\n    var entry = collection\n      .toSeq()\n      .map(function (v, k) { return [v, mapper(v, k, collection)]; })\n      .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });\n    return entry && entry[0];\n  }\n  return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });\n}\n\nfunction maxCompare(comparator, a, b) {\n  var comp = comparator(b, a);\n  // b is considered the new max if the comparator declares them equal, but\n  // they are not equal and b is in fact a nullish value.\n  return (\n    (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||\n    comp > 0\n  );\n}\n\nfunction zipWithFactory(keyIter, zipper, iters, zipAll) {\n  var zipSequence = makeSequence(keyIter);\n  var sizes = new ArraySeq(iters).map(function (i) { return i.size; });\n  zipSequence.size = zipAll ? sizes.max() : sizes.min();\n  // Note: this a generic base implementation of __iterate in terms of\n  // __iterator which may be more generically useful in the future.\n  zipSequence.__iterate = function (fn, reverse) {\n    /* generic:\n    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      iterations++;\n      if (fn(step.value[1], step.value[0], this) === false) {\n        break;\n      }\n    }\n    return iterations;\n    */\n    // indexed:\n    var iterator = this.__iterator(ITERATE_VALUES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      if (fn(step.value, iterations++, this) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n  zipSequence.__iteratorUncached = function (type, reverse) {\n    var iterators = iters.map(\n      function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }\n    );\n    var iterations = 0;\n    var isDone = false;\n    return new Iterator(function () {\n      var steps;\n      if (!isDone) {\n        steps = iterators.map(function (i) { return i.next(); });\n        isDone = zipAll ? steps.every(function (s) { return s.done; }) : steps.some(function (s) { return s.done; });\n      }\n      if (isDone) {\n        return iteratorDone();\n      }\n      return iteratorValue(\n        type,\n        iterations++,\n        zipper.apply(\n          null,\n          steps.map(function (s) { return s.value; })\n        )\n      );\n    });\n  };\n  return zipSequence;\n}\n\n// #pragma Helper Functions\n\nfunction reify(iter, seq) {\n  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n}\n\nfunction validateEntry(entry) {\n  if (entry !== Object(entry)) {\n    throw new TypeError('Expected [K, V] tuple: ' + entry);\n  }\n}\n\nfunction collectionClass(collection) {\n  return isKeyed(collection)\n    ? KeyedCollection\n    : isIndexed(collection)\n    ? IndexedCollection\n    : SetCollection;\n}\n\nfunction makeSequence(collection) {\n  return Object.create(\n    (isKeyed(collection)\n      ? KeyedSeq\n      : isIndexed(collection)\n      ? IndexedSeq\n      : SetSeq\n    ).prototype\n  );\n}\n\nfunction cacheResultThrough() {\n  if (this._iter.cacheResult) {\n    this._iter.cacheResult();\n    this.size = this._iter.size;\n    return this;\n  }\n  return Seq.prototype.cacheResult.call(this);\n}\n\nfunction defaultComparator(a, b) {\n  if (a === undefined && b === undefined) {\n    return 0;\n  }\n\n  if (a === undefined) {\n    return 1;\n  }\n\n  if (b === undefined) {\n    return -1;\n  }\n\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction arrCopy(arr, offset) {\n  offset = offset || 0;\n  var len = Math.max(0, arr.length - offset);\n  var newArr = new Array(len);\n  for (var ii = 0; ii < len; ii++) {\n    newArr[ii] = arr[ii + offset];\n  }\n  return newArr;\n}\n\nfunction invariant(condition, error) {\n  if (!condition) { throw new Error(error); }\n}\n\nfunction assertNotInfinite(size) {\n  invariant(\n    size !== Infinity,\n    'Cannot perform this action with an infinite size.'\n  );\n}\n\nfunction coerceKeyPath(keyPath) {\n  if (isArrayLike(keyPath) && typeof keyPath !== 'string') {\n    return keyPath;\n  }\n  if (isOrdered(keyPath)) {\n    return keyPath.toArray();\n  }\n  throw new TypeError(\n    'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath\n  );\n}\n\nvar toString = Object.prototype.toString;\n\nfunction isPlainObject(value) {\n  // The base prototype's toString deals with Argument objects and native namespaces like Math\n  if (\n    !value ||\n    typeof value !== 'object' ||\n    toString.call(value) !== '[object Object]'\n  ) {\n    return false;\n  }\n\n  var proto = Object.getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n\n  // Iteratively going up the prototype chain is needed for cross-realm environments (differing contexts, iframes, etc)\n  var parentProto = proto;\n  var nextProto = Object.getPrototypeOf(proto);\n  while (nextProto !== null) {\n    parentProto = nextProto;\n    nextProto = Object.getPrototypeOf(parentProto);\n  }\n  return parentProto === proto;\n}\n\n/**\n * Returns true if the value is a potentially-persistent data structure, either\n * provided by Immutable.js or a plain Array or Object.\n */\nfunction isDataStructure(value) {\n  return (\n    typeof value === 'object' &&\n    (isImmutable(value) || Array.isArray(value) || isPlainObject(value))\n  );\n}\n\nfunction quoteString(value) {\n  try {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  } catch (_ignoreError) {\n    return JSON.stringify(value);\n  }\n}\n\nfunction has(collection, key) {\n  return isImmutable(collection)\n    ? collection.has(key)\n    : isDataStructure(collection) && hasOwnProperty.call(collection, key);\n}\n\nfunction get(collection, key, notSetValue) {\n  return isImmutable(collection)\n    ? collection.get(key, notSetValue)\n    : !has(collection, key)\n    ? notSetValue\n    : typeof collection.get === 'function'\n    ? collection.get(key)\n    : collection[key];\n}\n\nfunction shallowCopy(from) {\n  if (Array.isArray(from)) {\n    return arrCopy(from);\n  }\n  var to = {};\n  for (var key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      to[key] = from[key];\n    }\n  }\n  return to;\n}\n\nfunction remove(collection, key) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.remove) {\n      throw new TypeError(\n        'Cannot update immutable value without .remove() method: ' + collection\n      );\n    }\n    return collection.remove(key);\n  }\n  if (!hasOwnProperty.call(collection, key)) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  if (Array.isArray(collectionCopy)) {\n    collectionCopy.splice(key, 1);\n  } else {\n    delete collectionCopy[key];\n  }\n  return collectionCopy;\n}\n\nfunction set(collection, key, value) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.set) {\n      throw new TypeError(\n        'Cannot update immutable value without .set() method: ' + collection\n      );\n    }\n    return collection.set(key, value);\n  }\n  if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  collectionCopy[key] = value;\n  return collectionCopy;\n}\n\nfunction updateIn$1(collection, keyPath, notSetValue, updater) {\n  if (!updater) {\n    updater = notSetValue;\n    notSetValue = undefined;\n  }\n  var updatedValue = updateInDeeply(\n    isImmutable(collection),\n    collection,\n    coerceKeyPath(keyPath),\n    0,\n    notSetValue,\n    updater\n  );\n  return updatedValue === NOT_SET ? notSetValue : updatedValue;\n}\n\nfunction updateInDeeply(\n  inImmutable,\n  existing,\n  keyPath,\n  i,\n  notSetValue,\n  updater\n) {\n  var wasNotSet = existing === NOT_SET;\n  if (i === keyPath.length) {\n    var existingValue = wasNotSet ? notSetValue : existing;\n    var newValue = updater(existingValue);\n    return newValue === existingValue ? existing : newValue;\n  }\n  if (!wasNotSet && !isDataStructure(existing)) {\n    throw new TypeError(\n      'Cannot update within non-data-structure value in path [' +\n        keyPath.slice(0, i).map(quoteString) +\n        ']: ' +\n        existing\n    );\n  }\n  var key = keyPath[i];\n  var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);\n  var nextUpdated = updateInDeeply(\n    nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),\n    nextExisting,\n    keyPath,\n    i + 1,\n    notSetValue,\n    updater\n  );\n  return nextUpdated === nextExisting\n    ? existing\n    : nextUpdated === NOT_SET\n    ? remove(existing, key)\n    : set(\n        wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,\n        key,\n        nextUpdated\n      );\n}\n\nfunction setIn$1(collection, keyPath, value) {\n  return updateIn$1(collection, keyPath, NOT_SET, function () { return value; });\n}\n\nfunction setIn(keyPath, v) {\n  return setIn$1(this, keyPath, v);\n}\n\nfunction removeIn(collection, keyPath) {\n  return updateIn$1(collection, keyPath, function () { return NOT_SET; });\n}\n\nfunction deleteIn(keyPath) {\n  return removeIn(this, keyPath);\n}\n\nfunction update$1(collection, key, notSetValue, updater) {\n  return updateIn$1(collection, [key], notSetValue, updater);\n}\n\nfunction update(key, notSetValue, updater) {\n  return arguments.length === 1\n    ? key(this)\n    : update$1(this, key, notSetValue, updater);\n}\n\nfunction updateIn(keyPath, notSetValue, updater) {\n  return updateIn$1(this, keyPath, notSetValue, updater);\n}\n\nfunction merge$1() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeIntoKeyedWith(this, iters);\n}\n\nfunction mergeWith$1(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  if (typeof merger !== 'function') {\n    throw new TypeError('Invalid merger function: ' + merger);\n  }\n  return mergeIntoKeyedWith(this, iters, merger);\n}\n\nfunction mergeIntoKeyedWith(collection, collections, merger) {\n  var iters = [];\n  for (var ii = 0; ii < collections.length; ii++) {\n    var collection$1 = KeyedCollection(collections[ii]);\n    if (collection$1.size !== 0) {\n      iters.push(collection$1);\n    }\n  }\n  if (iters.length === 0) {\n    return collection;\n  }\n  if (\n    collection.toSeq().size === 0 &&\n    !collection.__ownerID &&\n    iters.length === 1\n  ) {\n    return collection.constructor(iters[0]);\n  }\n  return collection.withMutations(function (collection) {\n    var mergeIntoCollection = merger\n      ? function (value, key) {\n          update$1(collection, key, NOT_SET, function (oldVal) { return oldVal === NOT_SET ? value : merger(oldVal, value, key); }\n          );\n        }\n      : function (value, key) {\n          collection.set(key, value);\n        };\n    for (var ii = 0; ii < iters.length; ii++) {\n      iters[ii].forEach(mergeIntoCollection);\n    }\n  });\n}\n\nfunction merge(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeWithSources(collection, sources);\n}\n\nfunction mergeWith(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeWithSources(collection, sources, merger);\n}\n\nfunction mergeDeep$1(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(collection, sources);\n}\n\nfunction mergeDeepWith$1(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeDeepWithSources(collection, sources, merger);\n}\n\nfunction mergeDeepWithSources(collection, sources, merger) {\n  return mergeWithSources(collection, sources, deepMergerWith(merger));\n}\n\nfunction mergeWithSources(collection, sources, merger) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot merge into non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    return typeof merger === 'function' && collection.mergeWith\n      ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))\n      : collection.merge\n      ? collection.merge.apply(collection, sources)\n      : collection.concat.apply(collection, sources);\n  }\n  var isArray = Array.isArray(collection);\n  var merged = collection;\n  var Collection = isArray ? IndexedCollection : KeyedCollection;\n  var mergeItem = isArray\n    ? function (value) {\n        // Copy on write\n        if (merged === collection) {\n          merged = shallowCopy(merged);\n        }\n        merged.push(value);\n      }\n    : function (value, key) {\n        var hasVal = hasOwnProperty.call(merged, key);\n        var nextVal =\n          hasVal && merger ? merger(merged[key], value, key) : value;\n        if (!hasVal || nextVal !== merged[key]) {\n          // Copy on write\n          if (merged === collection) {\n            merged = shallowCopy(merged);\n          }\n          merged[key] = nextVal;\n        }\n      };\n  for (var i = 0; i < sources.length; i++) {\n    Collection(sources[i]).forEach(mergeItem);\n  }\n  return merged;\n}\n\nfunction deepMergerWith(merger) {\n  function deepMerger(oldValue, newValue, key) {\n    return isDataStructure(oldValue) &&\n      isDataStructure(newValue) &&\n      areMergeable(oldValue, newValue)\n      ? mergeWithSources(oldValue, [newValue], deepMerger)\n      : merger\n      ? merger(oldValue, newValue, key)\n      : newValue;\n  }\n  return deepMerger;\n}\n\n/**\n * It's unclear what the desired behavior is for merging two collections that\n * fall into separate categories between keyed, indexed, or set-like, so we only\n * consider them mergeable if they fall into the same category.\n */\nfunction areMergeable(oldDataStructure, newDataStructure) {\n  var oldSeq = Seq(oldDataStructure);\n  var newSeq = Seq(newDataStructure);\n  // This logic assumes that a sequence can only fall into one of the three\n  // categories mentioned above (since there's no `isSetLike()` method).\n  return (\n    isIndexed(oldSeq) === isIndexed(newSeq) &&\n    isKeyed(oldSeq) === isKeyed(newSeq)\n  );\n}\n\nfunction mergeDeep() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeDeepWithSources(this, iters);\n}\n\nfunction mergeDeepWith(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(this, iters, merger);\n}\n\nfunction mergeIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });\n}\n\nfunction mergeDeepIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }\n  );\n}\n\nfunction withMutations(fn) {\n  var mutable = this.asMutable();\n  fn(mutable);\n  return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n}\n\nfunction asMutable() {\n  return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n}\n\nfunction asImmutable() {\n  return this.__ensureOwner();\n}\n\nfunction wasAltered() {\n  return this.__altered;\n}\n\nvar Map = /*@__PURE__*/(function (KeyedCollection) {\n  function Map(value) {\n    return value === undefined || value === null\n      ? emptyMap()\n      : isMap(value) && !isOrdered(value)\n      ? value\n      : emptyMap().withMutations(function (map) {\n          var iter = KeyedCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v, k) { return map.set(k, v); });\n        });\n  }\n\n  if ( KeyedCollection ) Map.__proto__ = KeyedCollection;\n  Map.prototype = Object.create( KeyedCollection && KeyedCollection.prototype );\n  Map.prototype.constructor = Map;\n\n  Map.of = function of () {\n    var keyValues = [], len = arguments.length;\n    while ( len-- ) keyValues[ len ] = arguments[ len ];\n\n    return emptyMap().withMutations(function (map) {\n      for (var i = 0; i < keyValues.length; i += 2) {\n        if (i + 1 >= keyValues.length) {\n          throw new Error('Missing value for key: ' + keyValues[i]);\n        }\n        map.set(keyValues[i], keyValues[i + 1]);\n      }\n    });\n  };\n\n  Map.prototype.toString = function toString () {\n    return this.__toString('Map {', '}');\n  };\n\n  // @pragma Access\n\n  Map.prototype.get = function get (k, notSetValue) {\n    return this._root\n      ? this._root.get(0, undefined, k, notSetValue)\n      : notSetValue;\n  };\n\n  // @pragma Modification\n\n  Map.prototype.set = function set (k, v) {\n    return updateMap(this, k, v);\n  };\n\n  Map.prototype.remove = function remove (k) {\n    return updateMap(this, k, NOT_SET);\n  };\n\n  Map.prototype.deleteAll = function deleteAll (keys) {\n    var collection = Collection(keys);\n\n    if (collection.size === 0) {\n      return this;\n    }\n\n    return this.withMutations(function (map) {\n      collection.forEach(function (key) { return map.remove(key); });\n    });\n  };\n\n  Map.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._root = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyMap();\n  };\n\n  // @pragma Composition\n\n  Map.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator));\n  };\n\n  Map.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator, mapper));\n  };\n\n  Map.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    return this.withMutations(function (map) {\n      map.forEach(function (value, key) {\n        map.set(key, mapper.call(context, value, key, this$1$1));\n      });\n    });\n  };\n\n  // @pragma Mutability\n\n  Map.prototype.__iterator = function __iterator (type, reverse) {\n    return new MapIterator(this, type, reverse);\n  };\n\n  Map.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    this._root &&\n      this._root.iterate(function (entry) {\n        iterations++;\n        return fn(entry[1], entry[0], this$1$1);\n      }, reverse);\n    return iterations;\n  };\n\n  Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeMap(this.size, this._root, ownerID, this.__hash);\n  };\n\n  return Map;\n}(KeyedCollection));\n\nMap.isMap = isMap;\n\nvar MapPrototype = Map.prototype;\nMapPrototype[IS_MAP_SYMBOL] = true;\nMapPrototype[DELETE] = MapPrototype.remove;\nMapPrototype.removeAll = MapPrototype.deleteAll;\nMapPrototype.setIn = setIn;\nMapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;\nMapPrototype.update = update;\nMapPrototype.updateIn = updateIn;\nMapPrototype.merge = MapPrototype.concat = merge$1;\nMapPrototype.mergeWith = mergeWith$1;\nMapPrototype.mergeDeep = mergeDeep;\nMapPrototype.mergeDeepWith = mergeDeepWith;\nMapPrototype.mergeIn = mergeIn;\nMapPrototype.mergeDeepIn = mergeDeepIn;\nMapPrototype.withMutations = withMutations;\nMapPrototype.wasAltered = wasAltered;\nMapPrototype.asImmutable = asImmutable;\nMapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;\nMapPrototype['@@transducer/step'] = function (result, arr) {\n  return result.set(arr[0], arr[1]);\n};\nMapPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\n// #pragma Trie Nodes\n\nvar ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n  this.ownerID = ownerID;\n  this.entries = entries;\n};\n\nArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && entries.length === 1) {\n    return; // undefined\n  }\n\n  if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n    return createNodes(ownerID, entries, key, value);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new ArrayMapNode(ownerID, newEntries);\n};\n\nvar BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n  this.ownerID = ownerID;\n  this.bitmap = bitmap;\n  this.nodes = nodes;\n};\n\nBitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n  var bitmap = this.bitmap;\n  return (bitmap & bit) === 0\n    ? notSetValue\n    : this.nodes[popCount(bitmap & (bit - 1))].get(\n        shift + SHIFT,\n        keyHash,\n        key,\n        notSetValue\n      );\n};\n\nBitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var bit = 1 << keyHashFrag;\n  var bitmap = this.bitmap;\n  var exists = (bitmap & bit) !== 0;\n\n  if (!exists && value === NOT_SET) {\n    return this;\n  }\n\n  var idx = popCount(bitmap & (bit - 1));\n  var nodes = this.nodes;\n  var node = exists ? nodes[idx] : undefined;\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n\n  if (newNode === node) {\n    return this;\n  }\n\n  if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n  }\n\n  if (\n    exists &&\n    !newNode &&\n    nodes.length === 2 &&\n    isLeafNode(nodes[idx ^ 1])\n  ) {\n    return nodes[idx ^ 1];\n  }\n\n  if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n    return newNode;\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;\n  var newNodes = exists\n    ? newNode\n      ? setAt(nodes, idx, newNode, isEditable)\n      : spliceOut(nodes, idx, isEditable)\n    : spliceIn(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.bitmap = newBitmap;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n};\n\nvar HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n  this.ownerID = ownerID;\n  this.count = count;\n  this.nodes = nodes;\n};\n\nHashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var node = this.nodes[idx];\n  return node\n    ? node.get(shift + SHIFT, keyHash, key, notSetValue)\n    : notSetValue;\n};\n\nHashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var removed = value === NOT_SET;\n  var nodes = this.nodes;\n  var node = nodes[idx];\n\n  if (removed && !node) {\n    return this;\n  }\n\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n  if (newNode === node) {\n    return this;\n  }\n\n  var newCount = this.count;\n  if (!node) {\n    newCount++;\n  } else if (!newNode) {\n    newCount--;\n    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n      return packNodes(ownerID, nodes, newCount, idx);\n    }\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newNodes = setAt(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.count = newCount;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new HashArrayMapNode(ownerID, newCount, newNodes);\n};\n\nvar HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entries = entries;\n};\n\nHashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nHashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n\n  var removed = value === NOT_SET;\n\n  if (keyHash !== this.keyHash) {\n    if (removed) {\n      return this;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n  }\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && len === 2) {\n    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n};\n\nvar ValueNode = function ValueNode(ownerID, keyHash, entry) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entry = entry;\n};\n\nValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n};\n\nValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n  var keyMatch = is(key, this.entry[0]);\n  if (keyMatch ? value === this.entry[1] : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n\n  if (removed) {\n    SetRef(didChangeSize);\n    return; // undefined\n  }\n\n  if (keyMatch) {\n    if (ownerID && ownerID === this.ownerID) {\n      this.entry[1] = value;\n      return this;\n    }\n    return new ValueNode(ownerID, this.keyHash, [key, value]);\n  }\n\n  SetRef(didChangeSize);\n  return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n};\n\n// #pragma Iterators\n\nArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate =\n  function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  };\n\nBitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate =\n  function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  };\n\n// eslint-disable-next-line no-unused-vars\nValueNode.prototype.iterate = function (fn, reverse) {\n  return fn(this.entry);\n};\n\nvar MapIterator = /*@__PURE__*/(function (Iterator) {\n  function MapIterator(map, type, reverse) {\n    this._type = type;\n    this._reverse = reverse;\n    this._stack = map._root && mapIteratorFrame(map._root);\n  }\n\n  if ( Iterator ) MapIterator.__proto__ = Iterator;\n  MapIterator.prototype = Object.create( Iterator && Iterator.prototype );\n  MapIterator.prototype.constructor = MapIterator;\n\n  MapIterator.prototype.next = function next () {\n    var type = this._type;\n    var stack = this._stack;\n    while (stack) {\n      var node = stack.node;\n      var index = stack.index++;\n      var maxIndex = (void 0);\n      if (node.entry) {\n        if (index === 0) {\n          return mapIteratorValue(type, node.entry);\n        }\n      } else if (node.entries) {\n        maxIndex = node.entries.length - 1;\n        if (index <= maxIndex) {\n          return mapIteratorValue(\n            type,\n            node.entries[this._reverse ? maxIndex - index : index]\n          );\n        }\n      } else {\n        maxIndex = node.nodes.length - 1;\n        if (index <= maxIndex) {\n          var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n          if (subNode) {\n            if (subNode.entry) {\n              return mapIteratorValue(type, subNode.entry);\n            }\n            stack = this._stack = mapIteratorFrame(subNode, stack);\n          }\n          continue;\n        }\n      }\n      stack = this._stack = this._stack.__prev;\n    }\n    return iteratorDone();\n  };\n\n  return MapIterator;\n}(Iterator));\n\nfunction mapIteratorValue(type, entry) {\n  return iteratorValue(type, entry[0], entry[1]);\n}\n\nfunction mapIteratorFrame(node, prev) {\n  return {\n    node: node,\n    index: 0,\n    __prev: prev,\n  };\n}\n\nfunction makeMap(size, root, ownerID, hash) {\n  var map = Object.create(MapPrototype);\n  map.size = size;\n  map._root = root;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_MAP;\nfunction emptyMap() {\n  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n}\n\nfunction updateMap(map, k, v) {\n  var newRoot;\n  var newSize;\n  if (!map._root) {\n    if (v === NOT_SET) {\n      return map;\n    }\n    newSize = 1;\n    newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n  } else {\n    var didChangeSize = MakeRef();\n    var didAlter = MakeRef();\n    newRoot = updateNode(\n      map._root,\n      map.__ownerID,\n      0,\n      undefined,\n      k,\n      v,\n      didChangeSize,\n      didAlter\n    );\n    if (!didAlter.value) {\n      return map;\n    }\n    newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);\n  }\n  if (map.__ownerID) {\n    map.size = newSize;\n    map._root = newRoot;\n    map.__hash = undefined;\n    map.__altered = true;\n    return map;\n  }\n  return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n}\n\nfunction updateNode(\n  node,\n  ownerID,\n  shift,\n  keyHash,\n  key,\n  value,\n  didChangeSize,\n  didAlter\n) {\n  if (!node) {\n    if (value === NOT_SET) {\n      return node;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return new ValueNode(ownerID, keyHash, [key, value]);\n  }\n  return node.update(\n    ownerID,\n    shift,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n}\n\nfunction isLeafNode(node) {\n  return (\n    node.constructor === ValueNode || node.constructor === HashCollisionNode\n  );\n}\n\nfunction mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n  if (node.keyHash === keyHash) {\n    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n  }\n\n  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n  var newNode;\n  var nodes =\n    idx1 === idx2\n      ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]\n      : ((newNode = new ValueNode(ownerID, keyHash, entry)),\n        idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n  return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n}\n\nfunction createNodes(ownerID, entries, key, value) {\n  if (!ownerID) {\n    ownerID = new OwnerID();\n  }\n  var node = new ValueNode(ownerID, hash(key), [key, value]);\n  for (var ii = 0; ii < entries.length; ii++) {\n    var entry = entries[ii];\n    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n  }\n  return node;\n}\n\nfunction packNodes(ownerID, nodes, count, excluding) {\n  var bitmap = 0;\n  var packedII = 0;\n  var packedNodes = new Array(count);\n  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n    var node = nodes[ii];\n    if (node !== undefined && ii !== excluding) {\n      bitmap |= bit;\n      packedNodes[packedII++] = node;\n    }\n  }\n  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n}\n\nfunction expandNodes(ownerID, nodes, bitmap, including, node) {\n  var count = 0;\n  var expandedNodes = new Array(SIZE);\n  for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n  }\n  expandedNodes[including] = node;\n  return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n}\n\nfunction popCount(x) {\n  x -= (x >> 1) & 0x55555555;\n  x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n  x = (x + (x >> 4)) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n}\n\nfunction setAt(array, idx, val, canEdit) {\n  var newArray = canEdit ? array : arrCopy(array);\n  newArray[idx] = val;\n  return newArray;\n}\n\nfunction spliceIn(array, idx, val, canEdit) {\n  var newLen = array.length + 1;\n  if (canEdit && idx + 1 === newLen) {\n    array[idx] = val;\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      newArray[ii] = val;\n      after = -1;\n    } else {\n      newArray[ii] = array[ii + after];\n    }\n  }\n  return newArray;\n}\n\nfunction spliceOut(array, idx, canEdit) {\n  var newLen = array.length - 1;\n  if (canEdit && idx === newLen) {\n    array.pop();\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      after = 1;\n    }\n    newArray[ii] = array[ii + after];\n  }\n  return newArray;\n}\n\nvar MAX_ARRAY_MAP_SIZE = SIZE / 4;\nvar MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\nvar MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\nvar IS_LIST_SYMBOL = '@@__IMMUTABLE_LIST__@@';\n\nfunction isList(maybeList) {\n  return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);\n}\n\nvar List = /*@__PURE__*/(function (IndexedCollection) {\n  function List(value) {\n    var empty = emptyList();\n    if (value === undefined || value === null) {\n      return empty;\n    }\n    if (isList(value)) {\n      return value;\n    }\n    var iter = IndexedCollection(value);\n    var size = iter.size;\n    if (size === 0) {\n      return empty;\n    }\n    assertNotInfinite(size);\n    if (size > 0 && size < SIZE) {\n      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n    }\n    return empty.withMutations(function (list) {\n      list.setSize(size);\n      iter.forEach(function (v, i) { return list.set(i, v); });\n    });\n  }\n\n  if ( IndexedCollection ) List.__proto__ = IndexedCollection;\n  List.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );\n  List.prototype.constructor = List;\n\n  List.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  List.prototype.toString = function toString () {\n    return this.__toString('List [', ']');\n  };\n\n  // @pragma Access\n\n  List.prototype.get = function get (index, notSetValue) {\n    index = wrapIndex(this, index);\n    if (index >= 0 && index < this.size) {\n      index += this._origin;\n      var node = listNodeFor(this, index);\n      return node && node.array[index & MASK];\n    }\n    return notSetValue;\n  };\n\n  // @pragma Modification\n\n  List.prototype.set = function set (index, value) {\n    return updateList(this, index, value);\n  };\n\n  List.prototype.remove = function remove (index) {\n    return !this.has(index)\n      ? this\n      : index === 0\n      ? this.shift()\n      : index === this.size - 1\n      ? this.pop()\n      : this.splice(index, 1);\n  };\n\n  List.prototype.insert = function insert (index, value) {\n    return this.splice(index, 0, value);\n  };\n\n  List.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = this._origin = this._capacity = 0;\n      this._level = SHIFT;\n      this._root = this._tail = this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyList();\n  };\n\n  List.prototype.push = function push (/*...values*/) {\n    var values = arguments;\n    var oldSize = this.size;\n    return this.withMutations(function (list) {\n      setListBounds(list, 0, oldSize + values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(oldSize + ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.pop = function pop () {\n    return setListBounds(this, 0, -1);\n  };\n\n  List.prototype.unshift = function unshift (/*...values*/) {\n    var values = arguments;\n    return this.withMutations(function (list) {\n      setListBounds(list, -values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.shift = function shift () {\n    return setListBounds(this, 1);\n  };\n\n  // @pragma Composition\n\n  List.prototype.concat = function concat (/*...collections*/) {\n    var arguments$1 = arguments;\n\n    var seqs = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var argument = arguments$1[i];\n      var seq = IndexedCollection(\n        typeof argument !== 'string' && hasIterator(argument)\n          ? argument\n          : [argument]\n      );\n      if (seq.size !== 0) {\n        seqs.push(seq);\n      }\n    }\n    if (seqs.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && seqs.length === 1) {\n      return this.constructor(seqs[0]);\n    }\n    return this.withMutations(function (list) {\n      seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });\n    });\n  };\n\n  List.prototype.setSize = function setSize (size) {\n    return setListBounds(this, 0, size);\n  };\n\n  List.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    return this.withMutations(function (list) {\n      for (var i = 0; i < this$1$1.size; i++) {\n        list.set(i, mapper.call(context, list.get(i), i, this$1$1));\n      }\n    });\n  };\n\n  // @pragma Iteration\n\n  List.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    if (wholeSlice(begin, end, size)) {\n      return this;\n    }\n    return setListBounds(\n      this,\n      resolveBegin(begin, size),\n      resolveEnd(end, size)\n    );\n  };\n\n  List.prototype.__iterator = function __iterator (type, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    return new Iterator(function () {\n      var value = values();\n      return value === DONE\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? --index : index++, value);\n    });\n  };\n\n  List.prototype.__iterate = function __iterate (fn, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    var value;\n    while ((value = values()) !== DONE) {\n      if (fn(value, reverse ? --index : index++, this) === false) {\n        break;\n      }\n    }\n    return index;\n  };\n\n  List.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyList();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeList(\n      this._origin,\n      this._capacity,\n      this._level,\n      this._root,\n      this._tail,\n      ownerID,\n      this.__hash\n    );\n  };\n\n  return List;\n}(IndexedCollection));\n\nList.isList = isList;\n\nvar ListPrototype = List.prototype;\nListPrototype[IS_LIST_SYMBOL] = true;\nListPrototype[DELETE] = ListPrototype.remove;\nListPrototype.merge = ListPrototype.concat;\nListPrototype.setIn = setIn;\nListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;\nListPrototype.update = update;\nListPrototype.updateIn = updateIn;\nListPrototype.mergeIn = mergeIn;\nListPrototype.mergeDeepIn = mergeDeepIn;\nListPrototype.withMutations = withMutations;\nListPrototype.wasAltered = wasAltered;\nListPrototype.asImmutable = asImmutable;\nListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;\nListPrototype['@@transducer/step'] = function (result, arr) {\n  return result.push(arr);\n};\nListPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\nvar VNode = function VNode(array, ownerID) {\n  this.array = array;\n  this.ownerID = ownerID;\n};\n\n// TODO: seems like these methods are very similar\n\nVNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {\n  if (index === level ? 1 << level : this.array.length === 0) {\n    return this;\n  }\n  var originIndex = (index >>> level) & MASK;\n  if (originIndex >= this.array.length) {\n    return new VNode([], ownerID);\n  }\n  var removingFirst = originIndex === 0;\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[originIndex];\n    newChild =\n      oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && removingFirst) {\n      return this;\n    }\n  }\n  if (removingFirst && !newChild) {\n    return this;\n  }\n  var editable = editableVNode(this, ownerID);\n  if (!removingFirst) {\n    for (var ii = 0; ii < originIndex; ii++) {\n      editable.array[ii] = undefined;\n    }\n  }\n  if (newChild) {\n    editable.array[originIndex] = newChild;\n  }\n  return editable;\n};\n\nVNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {\n  if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n    return this;\n  }\n  var sizeIndex = ((index - 1) >>> level) & MASK;\n  if (sizeIndex >= this.array.length) {\n    return this;\n  }\n\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[sizeIndex];\n    newChild =\n      oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n      return this;\n    }\n  }\n\n  var editable = editableVNode(this, ownerID);\n  editable.array.splice(sizeIndex + 1);\n  if (newChild) {\n    editable.array[sizeIndex] = newChild;\n  }\n  return editable;\n};\n\nvar DONE = {};\n\nfunction iterateList(list, reverse) {\n  var left = list._origin;\n  var right = list._capacity;\n  var tailPos = getTailOffset(right);\n  var tail = list._tail;\n\n  return iterateNodeOrLeaf(list._root, list._level, 0);\n\n  function iterateNodeOrLeaf(node, level, offset) {\n    return level === 0\n      ? iterateLeaf(node, offset)\n      : iterateNode(node, level, offset);\n  }\n\n  function iterateLeaf(node, offset) {\n    var array = offset === tailPos ? tail && tail.array : node && node.array;\n    var from = offset > left ? 0 : left - offset;\n    var to = right - offset;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      if (from === to) {\n        return DONE;\n      }\n      var idx = reverse ? --to : from++;\n      return array && array[idx];\n    };\n  }\n\n  function iterateNode(node, level, offset) {\n    var values;\n    var array = node && node.array;\n    var from = offset > left ? 0 : (left - offset) >> level;\n    var to = ((right - offset) >> level) + 1;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      while (true) {\n        if (values) {\n          var value = values();\n          if (value !== DONE) {\n            return value;\n          }\n          values = null;\n        }\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        values = iterateNodeOrLeaf(\n          array && array[idx],\n          level - SHIFT,\n          offset + (idx << level)\n        );\n      }\n    };\n  }\n}\n\nfunction makeList(origin, capacity, level, root, tail, ownerID, hash) {\n  var list = Object.create(ListPrototype);\n  list.size = capacity - origin;\n  list._origin = origin;\n  list._capacity = capacity;\n  list._level = level;\n  list._root = root;\n  list._tail = tail;\n  list.__ownerID = ownerID;\n  list.__hash = hash;\n  list.__altered = false;\n  return list;\n}\n\nvar EMPTY_LIST;\nfunction emptyList() {\n  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n}\n\nfunction updateList(list, index, value) {\n  index = wrapIndex(list, index);\n\n  if (index !== index) {\n    return list;\n  }\n\n  if (index >= list.size || index < 0) {\n    return list.withMutations(function (list) {\n      index < 0\n        ? setListBounds(list, index).set(0, value)\n        : setListBounds(list, 0, index + 1).set(index, value);\n    });\n  }\n\n  index += list._origin;\n\n  var newTail = list._tail;\n  var newRoot = list._root;\n  var didAlter = MakeRef();\n  if (index >= getTailOffset(list._capacity)) {\n    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n  } else {\n    newRoot = updateVNode(\n      newRoot,\n      list.__ownerID,\n      list._level,\n      index,\n      value,\n      didAlter\n    );\n  }\n\n  if (!didAlter.value) {\n    return list;\n  }\n\n  if (list.__ownerID) {\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n}\n\nfunction updateVNode(node, ownerID, level, index, value, didAlter) {\n  var idx = (index >>> level) & MASK;\n  var nodeHas = node && idx < node.array.length;\n  if (!nodeHas && value === undefined) {\n    return node;\n  }\n\n  var newNode;\n\n  if (level > 0) {\n    var lowerNode = node && node.array[idx];\n    var newLowerNode = updateVNode(\n      lowerNode,\n      ownerID,\n      level - SHIFT,\n      index,\n      value,\n      didAlter\n    );\n    if (newLowerNode === lowerNode) {\n      return node;\n    }\n    newNode = editableVNode(node, ownerID);\n    newNode.array[idx] = newLowerNode;\n    return newNode;\n  }\n\n  if (nodeHas && node.array[idx] === value) {\n    return node;\n  }\n\n  if (didAlter) {\n    SetRef(didAlter);\n  }\n\n  newNode = editableVNode(node, ownerID);\n  if (value === undefined && idx === newNode.array.length - 1) {\n    newNode.array.pop();\n  } else {\n    newNode.array[idx] = value;\n  }\n  return newNode;\n}\n\nfunction editableVNode(node, ownerID) {\n  if (ownerID && node && ownerID === node.ownerID) {\n    return node;\n  }\n  return new VNode(node ? node.array.slice() : [], ownerID);\n}\n\nfunction listNodeFor(list, rawIndex) {\n  if (rawIndex >= getTailOffset(list._capacity)) {\n    return list._tail;\n  }\n  if (rawIndex < 1 << (list._level + SHIFT)) {\n    var node = list._root;\n    var level = list._level;\n    while (node && level > 0) {\n      node = node.array[(rawIndex >>> level) & MASK];\n      level -= SHIFT;\n    }\n    return node;\n  }\n}\n\nfunction setListBounds(list, begin, end) {\n  // Sanitize begin & end using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  if (begin !== undefined) {\n    begin |= 0;\n  }\n  if (end !== undefined) {\n    end |= 0;\n  }\n  var owner = list.__ownerID || new OwnerID();\n  var oldOrigin = list._origin;\n  var oldCapacity = list._capacity;\n  var newOrigin = oldOrigin + begin;\n  var newCapacity =\n    end === undefined\n      ? oldCapacity\n      : end < 0\n      ? oldCapacity + end\n      : oldOrigin + end;\n  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n    return list;\n  }\n\n  // If it's going to end after it starts, it's empty.\n  if (newOrigin >= newCapacity) {\n    return list.clear();\n  }\n\n  var newLevel = list._level;\n  var newRoot = list._root;\n\n  // New origin might need creating a higher root.\n  var offsetShift = 0;\n  while (newOrigin + offsetShift < 0) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [undefined, newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n    offsetShift += 1 << newLevel;\n  }\n  if (offsetShift) {\n    newOrigin += offsetShift;\n    oldOrigin += offsetShift;\n    newCapacity += offsetShift;\n    oldCapacity += offsetShift;\n  }\n\n  var oldTailOffset = getTailOffset(oldCapacity);\n  var newTailOffset = getTailOffset(newCapacity);\n\n  // New size might need creating a higher root.\n  while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n  }\n\n  // Locate or create the new tail.\n  var oldTail = list._tail;\n  var newTail =\n    newTailOffset < oldTailOffset\n      ? listNodeFor(list, newCapacity - 1)\n      : newTailOffset > oldTailOffset\n      ? new VNode([], owner)\n      : oldTail;\n\n  // Merge Tail into tree.\n  if (\n    oldTail &&\n    newTailOffset > oldTailOffset &&\n    newOrigin < oldCapacity &&\n    oldTail.array.length\n  ) {\n    newRoot = editableVNode(newRoot, owner);\n    var node = newRoot;\n    for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n      var idx = (oldTailOffset >>> level) & MASK;\n      node = node.array[idx] = editableVNode(node.array[idx], owner);\n    }\n    node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n  }\n\n  // If the size has been reduced, there's a chance the tail needs to be trimmed.\n  if (newCapacity < oldCapacity) {\n    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n  }\n\n  // If the new origin is within the tail, then we do not need a root.\n  if (newOrigin >= newTailOffset) {\n    newOrigin -= newTailOffset;\n    newCapacity -= newTailOffset;\n    newLevel = SHIFT;\n    newRoot = null;\n    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n    offsetShift = 0;\n\n    // Identify the new top root node of the subtree of the old root.\n    while (newRoot) {\n      var beginIndex = (newOrigin >>> newLevel) & MASK;\n      if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {\n        break;\n      }\n      if (beginIndex) {\n        offsetShift += (1 << newLevel) * beginIndex;\n      }\n      newLevel -= SHIFT;\n      newRoot = newRoot.array[beginIndex];\n    }\n\n    // Trim the new sides of the new root.\n    if (newRoot && newOrigin > oldOrigin) {\n      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n    }\n    if (newRoot && newTailOffset < oldTailOffset) {\n      newRoot = newRoot.removeAfter(\n        owner,\n        newLevel,\n        newTailOffset - offsetShift\n      );\n    }\n    if (offsetShift) {\n      newOrigin -= offsetShift;\n      newCapacity -= offsetShift;\n    }\n  }\n\n  if (list.__ownerID) {\n    list.size = newCapacity - newOrigin;\n    list._origin = newOrigin;\n    list._capacity = newCapacity;\n    list._level = newLevel;\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n}\n\nfunction getTailOffset(size) {\n  return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;\n}\n\nvar OrderedMap = /*@__PURE__*/(function (Map) {\n  function OrderedMap(value) {\n    return value === undefined || value === null\n      ? emptyOrderedMap()\n      : isOrderedMap(value)\n      ? value\n      : emptyOrderedMap().withMutations(function (map) {\n          var iter = KeyedCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v, k) { return map.set(k, v); });\n        });\n  }\n\n  if ( Map ) OrderedMap.__proto__ = Map;\n  OrderedMap.prototype = Object.create( Map && Map.prototype );\n  OrderedMap.prototype.constructor = OrderedMap;\n\n  OrderedMap.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedMap.prototype.toString = function toString () {\n    return this.__toString('OrderedMap {', '}');\n  };\n\n  // @pragma Access\n\n  OrderedMap.prototype.get = function get (k, notSetValue) {\n    var index = this._map.get(k);\n    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n  };\n\n  // @pragma Modification\n\n  OrderedMap.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._map.clear();\n      this._list.clear();\n      this.__altered = true;\n      return this;\n    }\n    return emptyOrderedMap();\n  };\n\n  OrderedMap.prototype.set = function set (k, v) {\n    return updateOrderedMap(this, k, v);\n  };\n\n  OrderedMap.prototype.remove = function remove (k) {\n    return updateOrderedMap(this, k, NOT_SET);\n  };\n\n  OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._list.__iterate(\n      function (entry) { return entry && fn(entry[1], entry[0], this$1$1); },\n      reverse\n    );\n  };\n\n  OrderedMap.prototype.__iterator = function __iterator (type, reverse) {\n    return this._list.fromEntrySeq().__iterator(type, reverse);\n  };\n\n  OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    var newList = this._list.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyOrderedMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      this._map = newMap;\n      this._list = newList;\n      return this;\n    }\n    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n  };\n\n  return OrderedMap;\n}(Map));\n\nOrderedMap.isOrderedMap = isOrderedMap;\n\nOrderedMap.prototype[IS_ORDERED_SYMBOL] = true;\nOrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\nfunction makeOrderedMap(map, list, ownerID, hash) {\n  var omap = Object.create(OrderedMap.prototype);\n  omap.size = map ? map.size : 0;\n  omap._map = map;\n  omap._list = list;\n  omap.__ownerID = ownerID;\n  omap.__hash = hash;\n  omap.__altered = false;\n  return omap;\n}\n\nvar EMPTY_ORDERED_MAP;\nfunction emptyOrderedMap() {\n  return (\n    EMPTY_ORDERED_MAP ||\n    (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))\n  );\n}\n\nfunction updateOrderedMap(omap, k, v) {\n  var map = omap._map;\n  var list = omap._list;\n  var i = map.get(k);\n  var has = i !== undefined;\n  var newMap;\n  var newList;\n  if (v === NOT_SET) {\n    // removed\n    if (!has) {\n      return omap;\n    }\n    if (list.size >= SIZE && list.size >= map.size * 2) {\n      newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });\n      newMap = newList\n        .toKeyedSeq()\n        .map(function (entry) { return entry[0]; })\n        .flip()\n        .toMap();\n      if (omap.__ownerID) {\n        newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n      }\n    } else {\n      newMap = map.remove(k);\n      newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n    }\n  } else if (has) {\n    if (v === list.get(i)[1]) {\n      return omap;\n    }\n    newMap = map;\n    newList = list.set(i, [k, v]);\n  } else {\n    newMap = map.set(k, list.size);\n    newList = list.set(list.size, [k, v]);\n  }\n  if (omap.__ownerID) {\n    omap.size = newMap.size;\n    omap._map = newMap;\n    omap._list = newList;\n    omap.__hash = undefined;\n    omap.__altered = true;\n    return omap;\n  }\n  return makeOrderedMap(newMap, newList);\n}\n\nvar IS_STACK_SYMBOL = '@@__IMMUTABLE_STACK__@@';\n\nfunction isStack(maybeStack) {\n  return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);\n}\n\nvar Stack = /*@__PURE__*/(function (IndexedCollection) {\n  function Stack(value) {\n    return value === undefined || value === null\n      ? emptyStack()\n      : isStack(value)\n      ? value\n      : emptyStack().pushAll(value);\n  }\n\n  if ( IndexedCollection ) Stack.__proto__ = IndexedCollection;\n  Stack.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );\n  Stack.prototype.constructor = Stack;\n\n  Stack.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Stack.prototype.toString = function toString () {\n    return this.__toString('Stack [', ']');\n  };\n\n  // @pragma Access\n\n  Stack.prototype.get = function get (index, notSetValue) {\n    var head = this._head;\n    index = wrapIndex(this, index);\n    while (head && index--) {\n      head = head.next;\n    }\n    return head ? head.value : notSetValue;\n  };\n\n  Stack.prototype.peek = function peek () {\n    return this._head && this._head.value;\n  };\n\n  // @pragma Modification\n\n  Stack.prototype.push = function push (/*...values*/) {\n    var arguments$1 = arguments;\n\n    if (arguments.length === 0) {\n      return this;\n    }\n    var newSize = this.size + arguments.length;\n    var head = this._head;\n    for (var ii = arguments.length - 1; ii >= 0; ii--) {\n      head = {\n        value: arguments$1[ii],\n        next: head,\n      };\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pushAll = function pushAll (iter) {\n    iter = IndexedCollection(iter);\n    if (iter.size === 0) {\n      return this;\n    }\n    if (this.size === 0 && isStack(iter)) {\n      return iter;\n    }\n    assertNotInfinite(iter.size);\n    var newSize = this.size;\n    var head = this._head;\n    iter.__iterate(function (value) {\n      newSize++;\n      head = {\n        value: value,\n        next: head,\n      };\n    }, /* reverse */ true);\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pop = function pop () {\n    return this.slice(1);\n  };\n\n  Stack.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._head = undefined;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyStack();\n  };\n\n  Stack.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    var resolvedBegin = resolveBegin(begin, this.size);\n    var resolvedEnd = resolveEnd(end, this.size);\n    if (resolvedEnd !== this.size) {\n      // super.slice(begin, end);\n      return IndexedCollection.prototype.slice.call(this, begin, end);\n    }\n    var newSize = this.size - resolvedBegin;\n    var head = this._head;\n    while (resolvedBegin--) {\n      head = head.next;\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  // @pragma Mutability\n\n  Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyStack();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeStack(this.size, this._head, ownerID, this.__hash);\n  };\n\n  // @pragma Iteration\n\n  Stack.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterate(\n        function (v, k) { return fn(v, k, this$1$1); },\n        reverse\n      );\n    }\n    var iterations = 0;\n    var node = this._head;\n    while (node) {\n      if (fn(node.value, iterations++, this) === false) {\n        break;\n      }\n      node = node.next;\n    }\n    return iterations;\n  };\n\n  Stack.prototype.__iterator = function __iterator (type, reverse) {\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterator(type, reverse);\n    }\n    var iterations = 0;\n    var node = this._head;\n    return new Iterator(function () {\n      if (node) {\n        var value = node.value;\n        node = node.next;\n        return iteratorValue(type, iterations++, value);\n      }\n      return iteratorDone();\n    });\n  };\n\n  return Stack;\n}(IndexedCollection));\n\nStack.isStack = isStack;\n\nvar StackPrototype = Stack.prototype;\nStackPrototype[IS_STACK_SYMBOL] = true;\nStackPrototype.shift = StackPrototype.pop;\nStackPrototype.unshift = StackPrototype.push;\nStackPrototype.unshiftAll = StackPrototype.pushAll;\nStackPrototype.withMutations = withMutations;\nStackPrototype.wasAltered = wasAltered;\nStackPrototype.asImmutable = asImmutable;\nStackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;\nStackPrototype['@@transducer/step'] = function (result, arr) {\n  return result.unshift(arr);\n};\nStackPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\nfunction makeStack(size, head, ownerID, hash) {\n  var map = Object.create(StackPrototype);\n  map.size = size;\n  map._head = head;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_STACK;\nfunction emptyStack() {\n  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n}\n\nvar IS_SET_SYMBOL = '@@__IMMUTABLE_SET__@@';\n\nfunction isSet(maybeSet) {\n  return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);\n}\n\nfunction isOrderedSet(maybeOrderedSet) {\n  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n}\n\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (\n    !isCollection(b) ||\n    (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||\n    (a.__hash !== undefined &&\n      b.__hash !== undefined &&\n      a.__hash !== b.__hash) ||\n    isKeyed(a) !== isKeyed(b) ||\n    isIndexed(a) !== isIndexed(b) ||\n    isOrdered(a) !== isOrdered(b)\n  ) {\n    return false;\n  }\n\n  if (a.size === 0 && b.size === 0) {\n    return true;\n  }\n\n  var notAssociative = !isAssociative(a);\n\n  if (isOrdered(a)) {\n    var entries = a.entries();\n    return (\n      b.every(function (v, k) {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done\n    );\n  }\n\n  var flipped = false;\n\n  if (a.size === undefined) {\n    if (b.size === undefined) {\n      if (typeof a.cacheResult === 'function') {\n        a.cacheResult();\n      }\n    } else {\n      flipped = true;\n      var _ = a;\n      a = b;\n      b = _;\n    }\n  }\n\n  var allEqual = true;\n  var bSize = b.__iterate(function (v, k) {\n    if (\n      notAssociative\n        ? !a.has(v)\n        : flipped\n        ? !is(v, a.get(k, NOT_SET))\n        : !is(a.get(k, NOT_SET), v)\n    ) {\n      allEqual = false;\n      return false;\n    }\n  });\n\n  return allEqual && a.size === bSize;\n}\n\nfunction mixin(ctor, methods) {\n  var keyCopier = function (key) {\n    ctor.prototype[key] = methods[key];\n  };\n  Object.keys(methods).forEach(keyCopier);\n  Object.getOwnPropertySymbols &&\n    Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n  return ctor;\n}\n\nfunction toJS(value) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  if (!isCollection(value)) {\n    if (!isDataStructure(value)) {\n      return value;\n    }\n    value = Seq(value);\n  }\n  if (isKeyed(value)) {\n    var result$1 = {};\n    value.__iterate(function (v, k) {\n      result$1[k] = toJS(v);\n    });\n    return result$1;\n  }\n  var result = [];\n  value.__iterate(function (v) {\n    result.push(toJS(v));\n  });\n  return result;\n}\n\nvar Set = /*@__PURE__*/(function (SetCollection) {\n  function Set(value) {\n    return value === undefined || value === null\n      ? emptySet()\n      : isSet(value) && !isOrdered(value)\n      ? value\n      : emptySet().withMutations(function (set) {\n          var iter = SetCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v) { return set.add(v); });\n        });\n  }\n\n  if ( SetCollection ) Set.__proto__ = SetCollection;\n  Set.prototype = Object.create( SetCollection && SetCollection.prototype );\n  Set.prototype.constructor = Set;\n\n  Set.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Set.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  Set.intersect = function intersect (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.intersect.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.union = function union (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.union.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.prototype.toString = function toString () {\n    return this.__toString('Set {', '}');\n  };\n\n  // @pragma Access\n\n  Set.prototype.has = function has (value) {\n    return this._map.has(value);\n  };\n\n  // @pragma Modification\n\n  Set.prototype.add = function add (value) {\n    return updateSet(this, this._map.set(value, value));\n  };\n\n  Set.prototype.remove = function remove (value) {\n    return updateSet(this, this._map.remove(value));\n  };\n\n  Set.prototype.clear = function clear () {\n    return updateSet(this, this._map.clear());\n  };\n\n  // @pragma Composition\n\n  Set.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    // keep track if the set is altered by the map function\n    var didChanges = false;\n\n    var newMap = updateSet(\n      this,\n      this._map.mapEntries(function (ref) {\n        var v = ref[1];\n\n        var mapped = mapper.call(context, v, v, this$1$1);\n\n        if (mapped !== v) {\n          didChanges = true;\n        }\n\n        return [mapped, mapped];\n      }, context)\n    );\n\n    return didChanges ? newMap : this;\n  };\n\n  Set.prototype.union = function union () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    iters = iters.filter(function (x) { return x.size !== 0; });\n    if (iters.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n      return this.constructor(iters[0]);\n    }\n    return this.withMutations(function (set) {\n      for (var ii = 0; ii < iters.length; ii++) {\n        if (typeof iters[ii] === 'string') {\n          set.add(iters[ii]);\n        } else {\n          SetCollection(iters[ii]).forEach(function (value) { return set.add(value); });\n        }\n      }\n    });\n  };\n\n  Set.prototype.intersect = function intersect () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (!iters.every(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.subtract = function subtract () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (iters.some(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator));\n  };\n\n  Set.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator, mapper));\n  };\n\n  Set.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered();\n  };\n\n  Set.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._map.__iterate(function (k) { return fn(k, k, this$1$1); }, reverse);\n  };\n\n  Set.prototype.__iterator = function __iterator (type, reverse) {\n    return this._map.__iterator(type, reverse);\n  };\n\n  Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return this.__empty();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      return this;\n    }\n    return this.__make(newMap, ownerID);\n  };\n\n  return Set;\n}(SetCollection));\n\nSet.isSet = isSet;\n\nvar SetPrototype = Set.prototype;\nSetPrototype[IS_SET_SYMBOL] = true;\nSetPrototype[DELETE] = SetPrototype.remove;\nSetPrototype.merge = SetPrototype.concat = SetPrototype.union;\nSetPrototype.withMutations = withMutations;\nSetPrototype.asImmutable = asImmutable;\nSetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;\nSetPrototype['@@transducer/step'] = function (result, arr) {\n  return result.add(arr);\n};\nSetPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\nSetPrototype.__empty = emptySet;\nSetPrototype.__make = makeSet;\n\nfunction updateSet(set, newMap) {\n  if (set.__ownerID) {\n    set.size = newMap.size;\n    set._map = newMap;\n    return set;\n  }\n  return newMap === set._map\n    ? set\n    : newMap.size === 0\n    ? set.__empty()\n    : set.__make(newMap);\n}\n\nfunction makeSet(map, ownerID) {\n  var set = Object.create(SetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_SET;\nfunction emptySet() {\n  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n}\n\n/**\n * Returns a lazy seq of nums from start (inclusive) to end\n * (exclusive), by step, where start defaults to 0, step to 1, and end to\n * infinity. When start is equal to end, returns empty list.\n */\nvar Range = /*@__PURE__*/(function (IndexedSeq) {\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      return new Range(start, end, step);\n    }\n    invariant(step !== 0, 'Cannot step a Range by 0');\n    start = start || 0;\n    if (end === undefined) {\n      end = Infinity;\n    }\n    step = step === undefined ? 1 : Math.abs(step);\n    if (end < start) {\n      step = -step;\n    }\n    this._start = start;\n    this._end = end;\n    this._step = step;\n    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n    if (this.size === 0) {\n      if (EMPTY_RANGE) {\n        return EMPTY_RANGE;\n      }\n      EMPTY_RANGE = this;\n    }\n  }\n\n  if ( IndexedSeq ) Range.__proto__ = IndexedSeq;\n  Range.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  Range.prototype.constructor = Range;\n\n  Range.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Range []';\n    }\n    return (\n      'Range [ ' +\n      this._start +\n      '...' +\n      this._end +\n      (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]'\n    );\n  };\n\n  Range.prototype.get = function get (index, notSetValue) {\n    return this.has(index)\n      ? this._start + wrapIndex(this, index) * this._step\n      : notSetValue;\n  };\n\n  Range.prototype.includes = function includes (searchValue) {\n    var possibleIndex = (searchValue - this._start) / this._step;\n    return (\n      possibleIndex >= 0 &&\n      possibleIndex < this.size &&\n      possibleIndex === Math.floor(possibleIndex)\n    );\n  };\n\n  Range.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    begin = resolveBegin(begin, this.size);\n    end = resolveEnd(end, this.size);\n    if (end <= begin) {\n      return new Range(0, 0);\n    }\n    return new Range(\n      this.get(begin, this._end),\n      this.get(end, this._end),\n      this._step\n    );\n  };\n\n  Range.prototype.indexOf = function indexOf (searchValue) {\n    var offsetValue = searchValue - this._start;\n    if (offsetValue % this._step === 0) {\n      var index = offsetValue / this._step;\n      if (index >= 0 && index < this.size) {\n        return index;\n      }\n    }\n    return -1;\n  };\n\n  Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    return this.indexOf(searchValue);\n  };\n\n  Range.prototype.__iterate = function __iterate (fn, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    while (i !== size) {\n      if (fn(value, reverse ? size - ++i : i++, this) === false) {\n        break;\n      }\n      value += reverse ? -step : step;\n    }\n    return i;\n  };\n\n  Range.prototype.__iterator = function __iterator (type, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var v = value;\n      value += reverse ? -step : step;\n      return iteratorValue(type, reverse ? size - ++i : i++, v);\n    });\n  };\n\n  Range.prototype.equals = function equals (other) {\n    return other instanceof Range\n      ? this._start === other._start &&\n          this._end === other._end &&\n          this._step === other._step\n      : deepEqual(this, other);\n  };\n\n  return Range;\n}(IndexedSeq));\n\nvar EMPTY_RANGE;\n\nfunction getIn$1(collection, searchKeyPath, notSetValue) {\n  var keyPath = coerceKeyPath(searchKeyPath);\n  var i = 0;\n  while (i !== keyPath.length) {\n    collection = get(collection, keyPath[i++], NOT_SET);\n    if (collection === NOT_SET) {\n      return notSetValue;\n    }\n  }\n  return collection;\n}\n\nfunction getIn(searchKeyPath, notSetValue) {\n  return getIn$1(this, searchKeyPath, notSetValue);\n}\n\nfunction hasIn$1(collection, keyPath) {\n  return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;\n}\n\nfunction hasIn(searchKeyPath) {\n  return hasIn$1(this, searchKeyPath);\n}\n\nfunction toObject() {\n  assertNotInfinite(this.size);\n  var object = {};\n  this.__iterate(function (v, k) {\n    object[k] = v;\n  });\n  return object;\n}\n\n// Note: all of these methods are deprecated.\nCollection.isIterable = isCollection;\nCollection.isKeyed = isKeyed;\nCollection.isIndexed = isIndexed;\nCollection.isAssociative = isAssociative;\nCollection.isOrdered = isOrdered;\n\nCollection.Iterator = Iterator;\n\nmixin(Collection, {\n  // ### Conversion to other types\n\n  toArray: function toArray() {\n    assertNotInfinite(this.size);\n    var array = new Array(this.size || 0);\n    var useTuples = isKeyed(this);\n    var i = 0;\n    this.__iterate(function (v, k) {\n      // Keyed collections produce an array of tuples.\n      array[i++] = useTuples ? [k, v] : v;\n    });\n    return array;\n  },\n\n  toIndexedSeq: function toIndexedSeq() {\n    return new ToIndexedSequence(this);\n  },\n\n  toJS: function toJS$1() {\n    return toJS(this);\n  },\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, true);\n  },\n\n  toMap: function toMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return Map(this.toKeyedSeq());\n  },\n\n  toObject: toObject,\n\n  toOrderedMap: function toOrderedMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedMap(this.toKeyedSeq());\n  },\n\n  toOrderedSet: function toOrderedSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSet: function toSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return Set(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSetSeq: function toSetSeq() {\n    return new ToSetSequence(this);\n  },\n\n  toSeq: function toSeq() {\n    return isIndexed(this)\n      ? this.toIndexedSeq()\n      : isKeyed(this)\n      ? this.toKeyedSeq()\n      : this.toSetSeq();\n  },\n\n  toStack: function toStack() {\n    // Use Late Binding here to solve the circular dependency.\n    return Stack(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toList: function toList() {\n    // Use Late Binding here to solve the circular dependency.\n    return List(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  // ### Common JavaScript methods and properties\n\n  toString: function toString() {\n    return '[Collection]';\n  },\n\n  __toString: function __toString(head, tail) {\n    if (this.size === 0) {\n      return head + tail;\n    }\n    return (\n      head +\n      ' ' +\n      this.toSeq().map(this.__toStringMapper).join(', ') +\n      ' ' +\n      tail\n    );\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  concat: function concat() {\n    var values = [], len = arguments.length;\n    while ( len-- ) values[ len ] = arguments[ len ];\n\n    return reify(this, concatFactory(this, values));\n  },\n\n  includes: function includes(searchValue) {\n    return this.some(function (value) { return is(value, searchValue); });\n  },\n\n  entries: function entries() {\n    return this.__iterator(ITERATE_ENTRIES);\n  },\n\n  every: function every(predicate, context) {\n    assertNotInfinite(this.size);\n    var returnValue = true;\n    this.__iterate(function (v, k, c) {\n      if (!predicate.call(context, v, k, c)) {\n        returnValue = false;\n        return false;\n      }\n    });\n    return returnValue;\n  },\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, true));\n  },\n\n  partition: function partition(predicate, context) {\n    return partitionFactory(this, predicate, context);\n  },\n\n  find: function find(predicate, context, notSetValue) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[1] : notSetValue;\n  },\n\n  forEach: function forEach(sideEffect, context) {\n    assertNotInfinite(this.size);\n    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n  },\n\n  join: function join(separator) {\n    assertNotInfinite(this.size);\n    separator = separator !== undefined ? '' + separator : ',';\n    var joined = '';\n    var isFirst = true;\n    this.__iterate(function (v) {\n      isFirst ? (isFirst = false) : (joined += separator);\n      joined += v !== null && v !== undefined ? v.toString() : '';\n    });\n    return joined;\n  },\n\n  keys: function keys() {\n    return this.__iterator(ITERATE_KEYS);\n  },\n\n  map: function map(mapper, context) {\n    return reify(this, mapFactory(this, mapper, context));\n  },\n\n  reduce: function reduce$1(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      false\n    );\n  },\n\n  reduceRight: function reduceRight(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      true\n    );\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, true));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, true));\n  },\n\n  some: function some(predicate, context) {\n    assertNotInfinite(this.size);\n    var returnValue = false;\n    this.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        returnValue = true;\n        return false;\n      }\n    });\n    return returnValue;\n  },\n\n  sort: function sort(comparator) {\n    return reify(this, sortFactory(this, comparator));\n  },\n\n  values: function values() {\n    return this.__iterator(ITERATE_VALUES);\n  },\n\n  // ### More sequential methods\n\n  butLast: function butLast() {\n    return this.slice(0, -1);\n  },\n\n  isEmpty: function isEmpty() {\n    return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });\n  },\n\n  count: function count(predicate, context) {\n    return ensureSize(\n      predicate ? this.toSeq().filter(predicate, context) : this\n    );\n  },\n\n  countBy: function countBy(grouper, context) {\n    return countByFactory(this, grouper, context);\n  },\n\n  equals: function equals(other) {\n    return deepEqual(this, other);\n  },\n\n  entrySeq: function entrySeq() {\n    var collection = this;\n    if (collection._cache) {\n      // We cache as an entries array, so we can just return the cache!\n      return new ArraySeq(collection._cache);\n    }\n    var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();\n    entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };\n    return entriesSequence;\n  },\n\n  filterNot: function filterNot(predicate, context) {\n    return this.filter(not(predicate), context);\n  },\n\n  findEntry: function findEntry(predicate, context, notSetValue) {\n    var found = notSetValue;\n    this.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        found = [k, v];\n        return false;\n      }\n    });\n    return found;\n  },\n\n  findKey: function findKey(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry && entry[0];\n  },\n\n  findLast: function findLast(predicate, context, notSetValue) {\n    return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n  },\n\n  findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .findEntry(predicate, context, notSetValue);\n  },\n\n  findLastKey: function findLastKey(predicate, context) {\n    return this.toKeyedSeq().reverse().findKey(predicate, context);\n  },\n\n  first: function first(notSetValue) {\n    return this.find(returnTrue, null, notSetValue);\n  },\n\n  flatMap: function flatMap(mapper, context) {\n    return reify(this, flatMapFactory(this, mapper, context));\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, true));\n  },\n\n  fromEntrySeq: function fromEntrySeq() {\n    return new FromEntriesSequence(this);\n  },\n\n  get: function get(searchKey, notSetValue) {\n    return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);\n  },\n\n  getIn: getIn,\n\n  groupBy: function groupBy(grouper, context) {\n    return groupByFactory(this, grouper, context);\n  },\n\n  has: function has(searchKey) {\n    return this.get(searchKey, NOT_SET) !== NOT_SET;\n  },\n\n  hasIn: hasIn,\n\n  isSubset: function isSubset(iter) {\n    iter = typeof iter.includes === 'function' ? iter : Collection(iter);\n    return this.every(function (value) { return iter.includes(value); });\n  },\n\n  isSuperset: function isSuperset(iter) {\n    iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);\n    return iter.isSubset(this);\n  },\n\n  keyOf: function keyOf(searchValue) {\n    return this.findKey(function (value) { return is(value, searchValue); });\n  },\n\n  keySeq: function keySeq() {\n    return this.toSeq().map(keyMapper).toIndexedSeq();\n  },\n\n  last: function last(notSetValue) {\n    return this.toSeq().reverse().first(notSetValue);\n  },\n\n  lastKeyOf: function lastKeyOf(searchValue) {\n    return this.toKeyedSeq().reverse().keyOf(searchValue);\n  },\n\n  max: function max(comparator) {\n    return maxFactory(this, comparator);\n  },\n\n  maxBy: function maxBy(mapper, comparator) {\n    return maxFactory(this, comparator, mapper);\n  },\n\n  min: function min(comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator\n    );\n  },\n\n  minBy: function minBy(mapper, comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator,\n      mapper\n    );\n  },\n\n  rest: function rest() {\n    return this.slice(1);\n  },\n\n  skip: function skip(amount) {\n    return amount === 0 ? this : this.slice(Math.max(0, amount));\n  },\n\n  skipLast: function skipLast(amount) {\n    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, true));\n  },\n\n  skipUntil: function skipUntil(predicate, context) {\n    return this.skipWhile(not(predicate), context);\n  },\n\n  sortBy: function sortBy(mapper, comparator) {\n    return reify(this, sortFactory(this, comparator, mapper));\n  },\n\n  take: function take(amount) {\n    return this.slice(0, Math.max(0, amount));\n  },\n\n  takeLast: function takeLast(amount) {\n    return this.slice(-Math.max(0, amount));\n  },\n\n  takeWhile: function takeWhile(predicate, context) {\n    return reify(this, takeWhileFactory(this, predicate, context));\n  },\n\n  takeUntil: function takeUntil(predicate, context) {\n    return this.takeWhile(not(predicate), context);\n  },\n\n  update: function update(fn) {\n    return fn(this);\n  },\n\n  valueSeq: function valueSeq() {\n    return this.toIndexedSeq();\n  },\n\n  // ### Hashable Object\n\n  hashCode: function hashCode() {\n    return this.__hash || (this.__hash = hashCollection(this));\n  },\n\n  // ### Internal\n\n  // abstract __iterate(fn, reverse)\n\n  // abstract __iterator(type, reverse)\n});\n\nvar CollectionPrototype = Collection.prototype;\nCollectionPrototype[IS_COLLECTION_SYMBOL] = true;\nCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\nCollectionPrototype.toJSON = CollectionPrototype.toArray;\nCollectionPrototype.__toStringMapper = quoteString;\nCollectionPrototype.inspect = CollectionPrototype.toSource = function () {\n  return this.toString();\n};\nCollectionPrototype.chain = CollectionPrototype.flatMap;\nCollectionPrototype.contains = CollectionPrototype.includes;\n\nmixin(KeyedCollection, {\n  // ### More sequential methods\n\n  flip: function flip() {\n    return reify(this, flipFactory(this));\n  },\n\n  mapEntries: function mapEntries(mapper, context) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    return reify(\n      this,\n      this.toSeq()\n        .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1$1); })\n        .fromEntrySeq()\n    );\n  },\n\n  mapKeys: function mapKeys(mapper, context) {\n    var this$1$1 = this;\n\n    return reify(\n      this,\n      this.toSeq()\n        .flip()\n        .map(function (k, v) { return mapper.call(context, k, v, this$1$1); })\n        .flip()\n    );\n  },\n});\n\nvar KeyedCollectionPrototype = KeyedCollection.prototype;\nKeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;\nKeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nKeyedCollectionPrototype.toJSON = toObject;\nKeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };\n\nmixin(IndexedCollection, {\n  // ### Conversion to other types\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, false);\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, false));\n  },\n\n  findIndex: function findIndex(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  indexOf: function indexOf(searchValue) {\n    var key = this.keyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  lastIndexOf: function lastIndexOf(searchValue) {\n    var key = this.lastKeyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, false));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, false));\n  },\n\n  splice: function splice(index, removeNum /*, ...values*/) {\n    var numArgs = arguments.length;\n    removeNum = Math.max(removeNum || 0, 0);\n    if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n      return this;\n    }\n    // If index is negative, it should resolve relative to the size of the\n    // collection. However size may be expensive to compute if not cached, so\n    // only call count() if the number is in fact negative.\n    index = resolveBegin(index, index < 0 ? this.count() : this.size);\n    var spliced = this.slice(0, index);\n    return reify(\n      this,\n      numArgs === 1\n        ? spliced\n        : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n    );\n  },\n\n  // ### More collection methods\n\n  findLastIndex: function findLastIndex(predicate, context) {\n    var entry = this.findLastEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  first: function first(notSetValue) {\n    return this.get(0, notSetValue);\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, false));\n  },\n\n  get: function get(index, notSetValue) {\n    index = wrapIndex(this, index);\n    return index < 0 ||\n      this.size === Infinity ||\n      (this.size !== undefined && index > this.size)\n      ? notSetValue\n      : this.find(function (_, key) { return key === index; }, undefined, notSetValue);\n  },\n\n  has: function has(index) {\n    index = wrapIndex(this, index);\n    return (\n      index >= 0 &&\n      (this.size !== undefined\n        ? this.size === Infinity || index < this.size\n        : this.indexOf(index) !== -1)\n    );\n  },\n\n  interpose: function interpose(separator) {\n    return reify(this, interposeFactory(this, separator));\n  },\n\n  interleave: function interleave(/*...collections*/) {\n    var collections = [this].concat(arrCopy(arguments));\n    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n    var interleaved = zipped.flatten(true);\n    if (zipped.size) {\n      interleaved.size = zipped.size * collections.length;\n    }\n    return reify(this, interleaved);\n  },\n\n  keySeq: function keySeq() {\n    return Range(0, this.size);\n  },\n\n  last: function last(notSetValue) {\n    return this.get(-1, notSetValue);\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, false));\n  },\n\n  zip: function zip(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections));\n  },\n\n  zipAll: function zipAll(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections, true));\n  },\n\n  zipWith: function zipWith(zipper /*, ...collections */) {\n    var collections = arrCopy(arguments);\n    collections[0] = this;\n    return reify(this, zipWithFactory(this, zipper, collections));\n  },\n});\n\nvar IndexedCollectionPrototype = IndexedCollection.prototype;\nIndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;\nIndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;\n\nmixin(SetCollection, {\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  get: function get(value, notSetValue) {\n    return this.has(value) ? value : notSetValue;\n  },\n\n  includes: function includes(value) {\n    return this.has(value);\n  },\n\n  // ### More sequential methods\n\n  keySeq: function keySeq() {\n    return this.valueSeq();\n  },\n});\n\nvar SetCollectionPrototype = SetCollection.prototype;\nSetCollectionPrototype.has = CollectionPrototype.includes;\nSetCollectionPrototype.contains = SetCollectionPrototype.includes;\nSetCollectionPrototype.keys = SetCollectionPrototype.values;\n\n// Mixin subclasses\n\nmixin(KeyedSeq, KeyedCollectionPrototype);\nmixin(IndexedSeq, IndexedCollectionPrototype);\nmixin(SetSeq, SetCollectionPrototype);\n\n// #pragma Helper functions\n\nfunction reduce(collection, reducer, reduction, context, useFirst, reverse) {\n  assertNotInfinite(collection.size);\n  collection.__iterate(function (v, k, c) {\n    if (useFirst) {\n      useFirst = false;\n      reduction = v;\n    } else {\n      reduction = reducer.call(context, reduction, v, k, c);\n    }\n  }, reverse);\n  return reduction;\n}\n\nfunction keyMapper(v, k) {\n  return k;\n}\n\nfunction entryMapper(v, k) {\n  return [k, v];\n}\n\nfunction not(predicate) {\n  return function () {\n    return !predicate.apply(this, arguments);\n  };\n}\n\nfunction neg(predicate) {\n  return function () {\n    return -predicate.apply(this, arguments);\n  };\n}\n\nfunction defaultZipper() {\n  return arrCopy(arguments);\n}\n\nfunction defaultNegComparator(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\nfunction hashCollection(collection) {\n  if (collection.size === Infinity) {\n    return 0;\n  }\n  var ordered = isOrdered(collection);\n  var keyed = isKeyed(collection);\n  var h = ordered ? 1 : 0;\n  var size = collection.__iterate(\n    keyed\n      ? ordered\n        ? function (v, k) {\n            h = (31 * h + hashMerge(hash(v), hash(k))) | 0;\n          }\n        : function (v, k) {\n            h = (h + hashMerge(hash(v), hash(k))) | 0;\n          }\n      : ordered\n      ? function (v) {\n          h = (31 * h + hash(v)) | 0;\n        }\n      : function (v) {\n          h = (h + hash(v)) | 0;\n        }\n  );\n  return murmurHashOfSize(size, h);\n}\n\nfunction murmurHashOfSize(size, h) {\n  h = imul(h, 0xcc9e2d51);\n  h = imul((h << 15) | (h >>> -15), 0x1b873593);\n  h = imul((h << 13) | (h >>> -13), 5);\n  h = ((h + 0xe6546b64) | 0) ^ size;\n  h = imul(h ^ (h >>> 16), 0x85ebca6b);\n  h = imul(h ^ (h >>> 13), 0xc2b2ae35);\n  h = smi(h ^ (h >>> 16));\n  return h;\n}\n\nfunction hashMerge(a, b) {\n  return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int\n}\n\nvar OrderedSet = /*@__PURE__*/(function (Set) {\n  function OrderedSet(value) {\n    return value === undefined || value === null\n      ? emptyOrderedSet()\n      : isOrderedSet(value)\n      ? value\n      : emptyOrderedSet().withMutations(function (set) {\n          var iter = SetCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v) { return set.add(v); });\n        });\n  }\n\n  if ( Set ) OrderedSet.__proto__ = Set;\n  OrderedSet.prototype = Object.create( Set && Set.prototype );\n  OrderedSet.prototype.constructor = OrderedSet;\n\n  OrderedSet.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedSet.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  OrderedSet.prototype.toString = function toString () {\n    return this.__toString('OrderedSet {', '}');\n  };\n\n  return OrderedSet;\n}(Set));\n\nOrderedSet.isOrderedSet = isOrderedSet;\n\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SYMBOL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\nOrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;\n\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\n\nfunction makeOrderedSet(map, ownerID) {\n  var set = Object.create(OrderedSetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n  return (\n    EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))\n  );\n}\n\nvar PairSorting = {\n  LeftThenRight: -1,\n  RightThenLeft: +1,\n};\n\nfunction throwOnInvalidDefaultValues(defaultValues) {\n  if (isRecord(defaultValues)) {\n    throw new Error(\n      'Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.'\n    );\n  }\n\n  if (isImmutable(defaultValues)) {\n    throw new Error(\n      'Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.'\n    );\n  }\n\n  if (defaultValues === null || typeof defaultValues !== 'object') {\n    throw new Error(\n      'Can not call `Record` with a non-object as default values. Use a plain javascript object instead.'\n    );\n  }\n}\n\nvar Record = function Record(defaultValues, name) {\n  var hasInitialized;\n\n  throwOnInvalidDefaultValues(defaultValues);\n\n  var RecordType = function Record(values) {\n    var this$1$1 = this;\n\n    if (values instanceof RecordType) {\n      return values;\n    }\n    if (!(this instanceof RecordType)) {\n      return new RecordType(values);\n    }\n    if (!hasInitialized) {\n      hasInitialized = true;\n      var keys = Object.keys(defaultValues);\n      var indices = (RecordTypePrototype._indices = {});\n      // Deprecated: left to attempt not to break any external code which\n      // relies on a ._name property existing on record instances.\n      // Use Record.getDescriptiveName() instead\n      RecordTypePrototype._name = name;\n      RecordTypePrototype._keys = keys;\n      RecordTypePrototype._defaultValues = defaultValues;\n      for (var i = 0; i < keys.length; i++) {\n        var propName = keys[i];\n        indices[propName] = i;\n        if (RecordTypePrototype[propName]) {\n          /* eslint-disable no-console */\n          typeof console === 'object' &&\n            console.warn &&\n            console.warn(\n              'Cannot define ' +\n                recordName(this) +\n                ' with property \"' +\n                propName +\n                '\" since that property name is part of the Record API.'\n            );\n          /* eslint-enable no-console */\n        } else {\n          setProp(RecordTypePrototype, propName);\n        }\n      }\n    }\n    this.__ownerID = undefined;\n    this._values = List().withMutations(function (l) {\n      l.setSize(this$1$1._keys.length);\n      KeyedCollection(values).forEach(function (v, k) {\n        l.set(this$1$1._indices[k], v === this$1$1._defaultValues[k] ? undefined : v);\n      });\n    });\n    return this;\n  };\n\n  var RecordTypePrototype = (RecordType.prototype =\n    Object.create(RecordPrototype));\n  RecordTypePrototype.constructor = RecordType;\n\n  if (name) {\n    RecordType.displayName = name;\n  }\n\n  return RecordType;\n};\n\nRecord.prototype.toString = function toString () {\n  var str = recordName(this) + ' { ';\n  var keys = this._keys;\n  var k;\n  for (var i = 0, l = keys.length; i !== l; i++) {\n    k = keys[i];\n    str += (i ? ', ' : '') + k + ': ' + quoteString(this.get(k));\n  }\n  return str + ' }';\n};\n\nRecord.prototype.equals = function equals (other) {\n  return (\n    this === other ||\n    (isRecord(other) && recordSeq(this).equals(recordSeq(other)))\n  );\n};\n\nRecord.prototype.hashCode = function hashCode () {\n  return recordSeq(this).hashCode();\n};\n\n// @pragma Access\n\nRecord.prototype.has = function has (k) {\n  return this._indices.hasOwnProperty(k);\n};\n\nRecord.prototype.get = function get (k, notSetValue) {\n  if (!this.has(k)) {\n    return notSetValue;\n  }\n  var index = this._indices[k];\n  var value = this._values.get(index);\n  return value === undefined ? this._defaultValues[k] : value;\n};\n\n// @pragma Modification\n\nRecord.prototype.set = function set (k, v) {\n  if (this.has(k)) {\n    var newValues = this._values.set(\n      this._indices[k],\n      v === this._defaultValues[k] ? undefined : v\n    );\n    if (newValues !== this._values && !this.__ownerID) {\n      return makeRecord(this, newValues);\n    }\n  }\n  return this;\n};\n\nRecord.prototype.remove = function remove (k) {\n  return this.set(k);\n};\n\nRecord.prototype.clear = function clear () {\n  var newValues = this._values.clear().setSize(this._keys.length);\n\n  return this.__ownerID ? this : makeRecord(this, newValues);\n};\n\nRecord.prototype.wasAltered = function wasAltered () {\n  return this._values.wasAltered();\n};\n\nRecord.prototype.toSeq = function toSeq () {\n  return recordSeq(this);\n};\n\nRecord.prototype.toJS = function toJS$1 () {\n  return toJS(this);\n};\n\nRecord.prototype.entries = function entries () {\n  return this.__iterator(ITERATE_ENTRIES);\n};\n\nRecord.prototype.__iterator = function __iterator (type, reverse) {\n  return recordSeq(this).__iterator(type, reverse);\n};\n\nRecord.prototype.__iterate = function __iterate (fn, reverse) {\n  return recordSeq(this).__iterate(fn, reverse);\n};\n\nRecord.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n  if (ownerID === this.__ownerID) {\n    return this;\n  }\n  var newValues = this._values.__ensureOwner(ownerID);\n  if (!ownerID) {\n    this.__ownerID = ownerID;\n    this._values = newValues;\n    return this;\n  }\n  return makeRecord(this, newValues, ownerID);\n};\n\nRecord.isRecord = isRecord;\nRecord.getDescriptiveName = recordName;\nvar RecordPrototype = Record.prototype;\nRecordPrototype[IS_RECORD_SYMBOL] = true;\nRecordPrototype[DELETE] = RecordPrototype.remove;\nRecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;\nRecordPrototype.getIn = getIn;\nRecordPrototype.hasIn = CollectionPrototype.hasIn;\nRecordPrototype.merge = merge$1;\nRecordPrototype.mergeWith = mergeWith$1;\nRecordPrototype.mergeIn = mergeIn;\nRecordPrototype.mergeDeep = mergeDeep;\nRecordPrototype.mergeDeepWith = mergeDeepWith;\nRecordPrototype.mergeDeepIn = mergeDeepIn;\nRecordPrototype.setIn = setIn;\nRecordPrototype.update = update;\nRecordPrototype.updateIn = updateIn;\nRecordPrototype.withMutations = withMutations;\nRecordPrototype.asMutable = asMutable;\nRecordPrototype.asImmutable = asImmutable;\nRecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;\nRecordPrototype.toJSON = RecordPrototype.toObject =\n  CollectionPrototype.toObject;\nRecordPrototype.inspect = RecordPrototype.toSource = function () {\n  return this.toString();\n};\n\nfunction makeRecord(likeRecord, values, ownerID) {\n  var record = Object.create(Object.getPrototypeOf(likeRecord));\n  record._values = values;\n  record.__ownerID = ownerID;\n  return record;\n}\n\nfunction recordName(record) {\n  return record.constructor.displayName || record.constructor.name || 'Record';\n}\n\nfunction recordSeq(record) {\n  return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));\n}\n\nfunction setProp(prototype, name) {\n  try {\n    Object.defineProperty(prototype, name, {\n      get: function () {\n        return this.get(name);\n      },\n      set: function (value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      },\n    });\n  } catch (error) {\n    // Object.defineProperty failed. Probably IE8.\n  }\n}\n\n/**\n * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n * undefined, returns an infinite sequence of `value`.\n */\nvar Repeat = /*@__PURE__*/(function (IndexedSeq) {\n  function Repeat(value, times) {\n    if (!(this instanceof Repeat)) {\n      return new Repeat(value, times);\n    }\n    this._value = value;\n    this.size = times === undefined ? Infinity : Math.max(0, times);\n    if (this.size === 0) {\n      if (EMPTY_REPEAT) {\n        return EMPTY_REPEAT;\n      }\n      EMPTY_REPEAT = this;\n    }\n  }\n\n  if ( IndexedSeq ) Repeat.__proto__ = IndexedSeq;\n  Repeat.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  Repeat.prototype.constructor = Repeat;\n\n  Repeat.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Repeat []';\n    }\n    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n  };\n\n  Repeat.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._value : notSetValue;\n  };\n\n  Repeat.prototype.includes = function includes (searchValue) {\n    return is(this._value, searchValue);\n  };\n\n  Repeat.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    return wholeSlice(begin, end, size)\n      ? this\n      : new Repeat(\n          this._value,\n          resolveEnd(end, size) - resolveBegin(begin, size)\n        );\n  };\n\n  Repeat.prototype.reverse = function reverse () {\n    return this;\n  };\n\n  Repeat.prototype.indexOf = function indexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return 0;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return this.size;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.__iterate = function __iterate (fn, reverse) {\n    var size = this.size;\n    var i = 0;\n    while (i !== size) {\n      if (fn(this._value, reverse ? size - ++i : i++, this) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  Repeat.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    return new Iterator(function () { return i === size\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? size - ++i : i++, this$1$1._value); }\n    );\n  };\n\n  Repeat.prototype.equals = function equals (other) {\n    return other instanceof Repeat\n      ? is(this._value, other._value)\n      : deepEqual(other);\n  };\n\n  return Repeat;\n}(IndexedSeq));\n\nvar EMPTY_REPEAT;\n\nfunction fromJS(value, converter) {\n  return fromJSWith(\n    [],\n    converter || defaultConverter,\n    value,\n    '',\n    converter && converter.length > 2 ? [] : undefined,\n    { '': value }\n  );\n}\n\nfunction fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n  if (\n    typeof value !== 'string' &&\n    !isImmutable(value) &&\n    (isArrayLike(value) || hasIterator(value) || isPlainObject(value))\n  ) {\n    if (~stack.indexOf(value)) {\n      throw new TypeError('Cannot convert circular structure to Immutable');\n    }\n    stack.push(value);\n    keyPath && key !== '' && keyPath.push(key);\n    var converted = converter.call(\n      parentValue,\n      key,\n      Seq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }\n      ),\n      keyPath && keyPath.slice()\n    );\n    stack.pop();\n    keyPath && keyPath.pop();\n    return converted;\n  }\n  return value;\n}\n\nfunction defaultConverter(k, v) {\n  // Effectively the opposite of \"Collection.toSeq()\"\n  return isIndexed(v) ? v.toList() : isKeyed(v) ? v.toMap() : v.toSet();\n}\n\nvar version = \"4.3.4\";\n\nvar Immutable = {\n  version: version,\n\n  Collection: Collection,\n  // Note: Iterable is deprecated\n  Iterable: Collection,\n\n  Seq: Seq,\n  Map: Map,\n  OrderedMap: OrderedMap,\n  List: List,\n  Stack: Stack,\n  Set: Set,\n  OrderedSet: OrderedSet,\n  PairSorting: PairSorting,\n\n  Record: Record,\n  Range: Range,\n  Repeat: Repeat,\n\n  is: is,\n  fromJS: fromJS,\n  hash: hash,\n\n  isImmutable: isImmutable,\n  isCollection: isCollection,\n  isKeyed: isKeyed,\n  isIndexed: isIndexed,\n  isAssociative: isAssociative,\n  isOrdered: isOrdered,\n  isValueObject: isValueObject,\n  isPlainObject: isPlainObject,\n  isSeq: isSeq,\n  isList: isList,\n  isMap: isMap,\n  isOrderedMap: isOrderedMap,\n  isStack: isStack,\n  isSet: isSet,\n  isOrderedSet: isOrderedSet,\n  isRecord: isRecord,\n\n  get: get,\n  getIn: getIn$1,\n  has: has,\n  hasIn: hasIn$1,\n  merge: merge,\n  mergeDeep: mergeDeep$1,\n  mergeWith: mergeWith,\n  mergeDeepWith: mergeDeepWith$1,\n  remove: remove,\n  removeIn: removeIn,\n  set: set,\n  setIn: setIn$1,\n  update: update$1,\n  updateIn: updateIn$1,\n};\n\n// Note: Iterable is deprecated\nvar Iterable = Collection;\n\nexport default Immutable;\nexport { Collection, Iterable, List, Map, OrderedMap, OrderedSet, PairSorting, Range, Record, Repeat, Seq, Set, Stack, fromJS, get, getIn$1 as getIn, has, hasIn$1 as hasIn, hash, is, isAssociative, isCollection, isImmutable, isIndexed, isKeyed, isList, isMap, isOrdered, isOrderedMap, isOrderedSet, isPlainObject, isRecord, isSeq, isSet, isStack, isValueObject, merge, mergeDeep$1 as mergeDeep, mergeDeepWith$1 as mergeDeepWith, mergeWith, remove, removeIn, set, setIn$1 as setIn, update$1 as update, updateIn$1 as updateIn, version };\n","//! moment.js\n//! version : 2.29.4\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks() {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback(callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return (\n            input instanceof Array ||\n            Object.prototype.toString.call(input) === '[object Array]'\n        );\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return (\n            input != null &&\n            Object.prototype.toString.call(input) === '[object Object]'\n        );\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return Object.getOwnPropertyNames(obj).length === 0;\n        } else {\n            var k;\n            for (k in obj) {\n                if (hasOwnProp(obj, k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return (\n            typeof input === 'number' ||\n            Object.prototype.toString.call(input) === '[object Number]'\n        );\n    }\n\n    function isDate(input) {\n        return (\n            input instanceof Date ||\n            Object.prototype.toString.call(input) === '[object Date]'\n        );\n    }\n\n    function map(arr, fn) {\n        var res = [],\n            i,\n            arrLen = arr.length;\n        for (i = 0; i < arrLen; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty: false,\n            unusedTokens: [],\n            unusedInput: [],\n            overflow: -2,\n            charsLeftOver: 0,\n            nullInput: false,\n            invalidEra: null,\n            invalidMonth: null,\n            invalidFormat: false,\n            userInvalidated: false,\n            iso: false,\n            parsedDateParts: [],\n            era: null,\n            meridiem: null,\n            rfc2822: false,\n            weekdayMismatch: false,\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this),\n                len = t.length >>> 0,\n                i;\n\n            for (i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m),\n                parsedParts = some.call(flags.parsedDateParts, function (i) {\n                    return i != null;\n                }),\n                isNowValid =\n                    !isNaN(m._d.getTime()) &&\n                    flags.overflow < 0 &&\n                    !flags.empty &&\n                    !flags.invalidEra &&\n                    !flags.invalidMonth &&\n                    !flags.invalidWeekday &&\n                    !flags.weekdayMismatch &&\n                    !flags.nullInput &&\n                    !flags.invalidFormat &&\n                    !flags.userInvalidated &&\n                    (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid =\n                    isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            } else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid(flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        } else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = (hooks.momentProperties = []),\n        updateInProgress = false;\n\n    function copyConfig(to, from) {\n        var i,\n            prop,\n            val,\n            momentPropertiesLen = momentProperties.length;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentPropertiesLen > 0) {\n            for (i = 0; i < momentPropertiesLen; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment(obj) {\n        return (\n            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)\n        );\n    }\n\n    function warn(msg) {\n        if (\n            hooks.suppressDeprecationWarnings === false &&\n            typeof console !== 'undefined' &&\n            console.warn\n        ) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [],\n                    arg,\n                    i,\n                    key,\n                    argLen = arguments.length;\n                for (i = 0; i < argLen; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (key in arguments[0]) {\n                            if (hasOwnProp(arguments[0], key)) {\n                                arg += key + ': ' + arguments[0][key] + ', ';\n                            }\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(\n                    msg +\n                        '\\nArguments: ' +\n                        Array.prototype.slice.call(args).join('') +\n                        '\\n' +\n                        new Error().stack\n                );\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return (\n            (typeof Function !== 'undefined' && input instanceof Function) ||\n            Object.prototype.toString.call(input) === '[object Function]'\n        );\n    }\n\n    function set(config) {\n        var prop, i;\n        for (i in config) {\n            if (hasOwnProp(config, i)) {\n                prop = config[i];\n                if (isFunction(prop)) {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' +\n                /\\d{1,2}/.source\n        );\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig),\n            prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (\n                hasOwnProp(parentConfig, prop) &&\n                !hasOwnProp(childConfig, prop) &&\n                isObject(parentConfig[prop])\n            ) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i,\n                res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay: '[Today at] LT',\n        nextDay: '[Tomorrow at] LT',\n        nextWeek: 'dddd [at] LT',\n        lastDay: '[Yesterday at] LT',\n        lastWeek: '[Last] dddd [at] LT',\n        sameElse: 'L',\n    };\n\n    function calendar(key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (\n            (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +\n            absNumber\n        );\n    }\n\n    var formattingTokens =\n            /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n        formatFunctions = {},\n        formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken(token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(\n                    func.apply(this, arguments),\n                    token\n                );\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens),\n            i,\n            length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '',\n                i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i])\n                    ? array[i].call(mom, format)\n                    : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] =\n            formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(\n                localFormattingTokens,\n                replaceLongDateFormatTokens\n            );\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var defaultLongDateFormat = {\n        LTS: 'h:mm:ss A',\n        LT: 'h:mm A',\n        L: 'MM/DD/YYYY',\n        LL: 'MMMM D, YYYY',\n        LLL: 'MMMM D, YYYY h:mm A',\n        LLLL: 'dddd, MMMM D, YYYY h:mm A',\n    };\n\n    function longDateFormat(key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper\n            .match(formattingTokens)\n            .map(function (tok) {\n                if (\n                    tok === 'MMMM' ||\n                    tok === 'MM' ||\n                    tok === 'DD' ||\n                    tok === 'dddd'\n                ) {\n                    return tok.slice(1);\n                }\n                return tok;\n            })\n            .join('');\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate() {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d',\n        defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal(number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        ss: '%d seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        w: 'a week',\n        ww: '%d weeks',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years',\n    };\n\n    function relativeTime(number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return isFunction(output)\n            ? output(number, withoutSuffix, string, isFuture)\n            : output.replace(/%d/i, number);\n    }\n\n    function pastFuture(diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias(unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string'\n            ? aliases[units] || aliases[units.toLowerCase()]\n            : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [],\n            u;\n        for (u in unitsObj) {\n            if (hasOwnProp(unitsObj, u)) {\n                units.push({ unit: u, priority: priorities[u] });\n            }\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    function absFloor(number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    function makeGetSet(unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get(mom, unit) {\n        return mom.isValid()\n            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()\n            : NaN;\n    }\n\n    function set$1(mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (\n                unit === 'FullYear' &&\n                isLeapYear(mom.year()) &&\n                mom.month() === 1 &&\n                mom.date() === 29\n            ) {\n                value = toInt(value);\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](\n                    value,\n                    mom.month(),\n                    daysInMonth(value, mom.month())\n                );\n            } else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet(units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n    function stringSet(units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units),\n                i,\n                prioritizedLen = prioritized.length;\n            for (i = 0; i < prioritizedLen; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    var match1 = /\\d/, //       0 - 9\n        match2 = /\\d\\d/, //      00 - 99\n        match3 = /\\d{3}/, //     000 - 999\n        match4 = /\\d{4}/, //    0000 - 9999\n        match6 = /[+-]?\\d{6}/, // -999999 - 999999\n        match1to2 = /\\d\\d?/, //       0 - 99\n        match3to4 = /\\d\\d\\d\\d?/, //     999 - 9999\n        match5to6 = /\\d\\d\\d\\d\\d\\d?/, //   99999 - 999999\n        match1to3 = /\\d{1,3}/, //       0 - 999\n        match1to4 = /\\d{1,4}/, //       0 - 9999\n        match1to6 = /[+-]?\\d{1,6}/, // -999999 - 999999\n        matchUnsigned = /\\d+/, //       0 - inf\n        matchSigned = /[+-]?\\d+/, //    -inf - inf\n        matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z\n        matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n        matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n        // any word (or two) characters or numbers including two/three word month in arabic.\n        // includes scottish gaelic two word and hyphenated months\n        matchWord =\n            /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i,\n        regexes;\n\n    regexes = {};\n\n    function addRegexToken(token, regex, strictRegex) {\n        regexes[token] = isFunction(regex)\n            ? regex\n            : function (isStrict, localeData) {\n                  return isStrict && strictRegex ? strictRegex : regex;\n              };\n    }\n\n    function getParseRegexForToken(token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(\n            s\n                .replace('\\\\', '')\n                .replace(\n                    /\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g,\n                    function (matched, p1, p2, p3, p4) {\n                        return p1 || p2 || p3 || p4;\n                    }\n                )\n        );\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken(token, callback) {\n        var i,\n            func = callback,\n            tokenLen;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        tokenLen = token.length;\n        for (i = 0; i < tokenLen; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken(token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n        WEEK = 7,\n        WEEKDAY = 8;\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1\n            ? isLeapYear(year)\n                ? 29\n                : 28\n            : 31 - ((modMonth % 7) % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M', match1to2);\n    addRegexToken('MM', match1to2, match2);\n    addRegexToken('MMM', function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var defaultLocaleMonths =\n            'January_February_March_April_May_June_July_August_September_October_November_December'.split(\n                '_'\n            ),\n        defaultLocaleMonthsShort =\n            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n        MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/,\n        defaultMonthsShortRegex = matchWord,\n        defaultMonthsRegex = matchWord;\n\n    function localeMonths(m, format) {\n        if (!m) {\n            return isArray(this._months)\n                ? this._months\n                : this._months['standalone'];\n        }\n        return isArray(this._months)\n            ? this._months[m.month()]\n            : this._months[\n                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\n                      ? 'format'\n                      : 'standalone'\n              ][m.month()];\n    }\n\n    function localeMonthsShort(m, format) {\n        if (!m) {\n            return isArray(this._monthsShort)\n                ? this._monthsShort\n                : this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort)\n            ? this._monthsShort[m.month()]\n            : this._monthsShort[\n                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'\n              ][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse(monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp(\n                    '^' + this.months(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n                this._shortMonthsParse[i] = new RegExp(\n                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex =\n                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'MMMM' &&\n                this._longMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'MMM' &&\n                this._shortMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth(mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth(value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth() {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    function monthsShortRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict\n                ? this._monthsShortStrictRegex\n                : this._monthsShortRegex;\n        }\n    }\n\n    function monthsRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict\n                ? this._monthsStrictRegex\n                : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._monthsShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? zeroFill(y, 4) : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY', 4], 0, 'year');\n    addFormatToken(0, ['YYYYY', 5], 0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y', matchSigned);\n    addRegexToken('YY', match1to2, match2);\n    addRegexToken('YYYY', match1to4, match4);\n    addRegexToken('YYYYY', match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] =\n            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear() {\n        return isLeapYear(this.year());\n    }\n\n    function createDate(y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate(y) {\n        var date, args;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear,\n            resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear,\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek,\n            resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear,\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w', match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W', match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(\n        ['w', 'ww', 'W', 'WW'],\n        function (input, week, config, token) {\n            week[token.substr(0, 1)] = toInt(input);\n        }\n    );\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek(mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow: 0, // Sunday is the first day of the week.\n        doy: 6, // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek() {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear() {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek(input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek(input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d', match1to2);\n    addRegexToken('e', match1to2);\n    addRegexToken('E', match1to2);\n    addRegexToken('dd', function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd', function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd', function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays(ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays =\n            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n        defaultWeekdaysRegex = matchWord,\n        defaultWeekdaysShortRegex = matchWord,\n        defaultWeekdaysMinRegex = matchWord;\n\n    function localeWeekdays(m, format) {\n        var weekdays = isArray(this._weekdays)\n            ? this._weekdays\n            : this._weekdays[\n                  m && m !== true && this._weekdays.isFormat.test(format)\n                      ? 'format'\n                      : 'standalone'\n              ];\n        return m === true\n            ? shiftWeekdays(weekdays, this._week.dow)\n            : m\n            ? weekdays[m.day()]\n            : weekdays;\n    }\n\n    function localeWeekdaysShort(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : m\n            ? this._weekdaysShort[m.day()]\n            : this._weekdaysShort;\n    }\n\n    function localeWeekdaysMin(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : m\n            ? this._weekdaysMin[m.day()]\n            : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse(weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._shortWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._minWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n            }\n            if (!this._weekdaysParse[i]) {\n                regex =\n                    '^' +\n                    this.weekdays(mom, '') +\n                    '|^' +\n                    this.weekdaysShort(mom, '') +\n                    '|^' +\n                    this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'dddd' &&\n                this._fullWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'ddd' &&\n                this._shortWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'dd' &&\n                this._minWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    function weekdaysRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict\n                ? this._weekdaysStrictRegex\n                : this._weekdaysRegex;\n        }\n    }\n\n    function weekdaysShortRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict\n                ? this._weekdaysShortStrictRegex\n                : this._weekdaysShortRegex;\n        }\n    }\n\n    function weekdaysMinRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict\n                ? this._weekdaysMinStrictRegex\n                : this._weekdaysMinRegex;\n        }\n    }\n\n    function computeWeekdaysParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [],\n            shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom,\n            minp,\n            shortp,\n            longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = regexEscape(this.weekdaysMin(mom, ''));\n            shortp = regexEscape(this.weekdaysShort(mom, ''));\n            longp = regexEscape(this.weekdays(mom, ''));\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysMinStrictRegex = new RegExp(\n            '^(' + minPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return (\n            '' +\n            hFormat.apply(this) +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return (\n            '' +\n            this.hours() +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    function meridiem(token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(\n                this.hours(),\n                this.minutes(),\n                lowercase\n            );\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem(isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a', matchMeridiem);\n    addRegexToken('A', matchMeridiem);\n    addRegexToken('H', match1to2);\n    addRegexToken('h', match1to2);\n    addRegexToken('k', match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM(input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return (input + '').toLowerCase().charAt(0) === 'p';\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i,\n        // Setting the hour should keep the time, because the user explicitly\n        // specified which hour they want. So trying to maintain the same hour (in\n        // a new timezone) makes sense. Adding/subtracting hours does not follow\n        // this rule.\n        getSetHour = makeGetSet('Hours', true);\n\n    function localeMeridiem(hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse,\n    };\n\n    // internal storage for locale config files\n    var locales = {},\n        localeFamilies = {},\n        globalLocale;\n\n    function commonPrefix(arr1, arr2) {\n        var i,\n            minl = Math.min(arr1.length, arr2.length);\n        for (i = 0; i < minl; i += 1) {\n            if (arr1[i] !== arr2[i]) {\n                return i;\n            }\n        }\n        return minl;\n    }\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0,\n            j,\n            next,\n            locale,\n            split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (\n                    next &&\n                    next.length >= j &&\n                    commonPrefix(split, next) >= j - 1\n                ) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function isLocaleNameSane(name) {\n        // Prevent names that look like filesystem paths, i.e contain '/' or '\\'\n        return name.match('^[^/\\\\\\\\]*$') != null;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null,\n            aliasedRequire;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (\n            locales[name] === undefined &&\n            typeof module !== 'undefined' &&\n            module &&\n            module.exports &&\n            isLocaleNameSane(name)\n        ) {\n            try {\n                oldLocale = globalLocale._abbr;\n                aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {\n                // mark as not found to avoid repeating expensive file require call causing high CPU\n                // when trying to find en-US, en_US, en-us for every format call\n                locales[name] = null; // null means not found\n            }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale(key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            } else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            } else {\n                if (typeof console !== 'undefined' && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn(\n                        'Locale ' + key + ' not found. Did you forget to load it?'\n                    );\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale(name, config) {\n        if (config !== null) {\n            var locale,\n                parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple(\n                    'defineLocaleOverride',\n                    'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'\n                );\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config,\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale,\n                tmpLocale,\n                parentConfig = baseConfig;\n\n            if (locales[name] != null && locales[name].parentLocale != null) {\n                // Update existing child locale in-place to avoid memory-leaks\n                locales[name].set(mergeConfigs(locales[name]._config, config));\n            } else {\n                // MERGE\n                tmpLocale = loadLocale(name);\n                if (tmpLocale != null) {\n                    parentConfig = tmpLocale._config;\n                }\n                config = mergeConfigs(parentConfig, config);\n                if (tmpLocale == null) {\n                    // updateLocale is called for creating a new locale\n                    // Set abbr so it will have a name (getters return\n                    // undefined otherwise).\n                    config.abbr = name;\n                }\n                locale = new Locale(config);\n                locale.parentLocale = locales[name];\n                locales[name] = locale;\n            }\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                    if (name === getSetGlobalLocale()) {\n                        getSetGlobalLocale(name);\n                    }\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale(key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow(m) {\n        var overflow,\n            a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH] < 0 || a[MONTH] > 11\n                    ? MONTH\n                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])\n                    ? DATE\n                    : a[HOUR] < 0 ||\n                      a[HOUR] > 24 ||\n                      (a[HOUR] === 24 &&\n                          (a[MINUTE] !== 0 ||\n                              a[SECOND] !== 0 ||\n                              a[MILLISECOND] !== 0))\n                    ? HOUR\n                    : a[MINUTE] < 0 || a[MINUTE] > 59\n                    ? MINUTE\n                    : a[SECOND] < 0 || a[SECOND] > 59\n                    ? SECOND\n                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999\n                    ? MILLISECOND\n                    : -1;\n\n            if (\n                getParsingFlags(m)._overflowDayOfYear &&\n                (overflow < YEAR || overflow > DATE)\n            ) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex =\n            /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        basicIsoRegex =\n            /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n        isoDates = [\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n            ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n            ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n            ['YYYY-DDD', /\\d{4}-\\d{3}/],\n            ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n            ['YYYYYYMMDD', /[+-]\\d{10}/],\n            ['YYYYMMDD', /\\d{8}/],\n            ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n            ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n            ['YYYYDDD', /\\d{7}/],\n            ['YYYYMM', /\\d{6}/, false],\n            ['YYYY', /\\d{4}/, false],\n        ],\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n            ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n            ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /\\d\\d:\\d\\d/],\n            ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n            ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n            ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n            ['HHmm', /\\d\\d\\d\\d/],\n            ['HH', /\\d\\d/],\n        ],\n        aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n        rfc2822 =\n            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n        obsOffsets = {\n            UT: 0,\n            GMT: 0,\n            EDT: -4 * 60,\n            EST: -5 * 60,\n            CDT: -5 * 60,\n            CST: -6 * 60,\n            MDT: -6 * 60,\n            MST: -7 * 60,\n            PDT: -7 * 60,\n            PST: -8 * 60,\n        };\n\n    // date from iso format\n    function configFromISO(config) {\n        var i,\n            l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime,\n            dateFormat,\n            timeFormat,\n            tzFormat,\n            isoDatesLen = isoDates.length,\n            isoTimesLen = isoTimes.length;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n            for (i = 0, l = isoDatesLen; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimesLen; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    function extractFromRFC2822Strings(\n        yearStr,\n        monthStr,\n        dayStr,\n        hourStr,\n        minuteStr,\n        secondStr\n    ) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10),\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s\n            .replace(/\\([^()]*\\)|[\\n\\t]/g, ' ')\n            .replace(/(\\s\\s+)/g, ' ')\n            .replace(/^\\s\\s*/, '')\n            .replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(\n                    parsedInput[0],\n                    parsedInput[1],\n                    parsedInput[2]\n                ).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10),\n                m = hm % 100,\n                h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i)),\n            parsedArray;\n        if (match) {\n            parsedArray = extractFromRFC2822Strings(\n                match[4],\n                match[3],\n                match[2],\n                match[5],\n                match[6],\n                match[7]\n            );\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        if (config._strict) {\n            config._isValid = false;\n        } else {\n            // Final attempt, use Input Fallback\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [\n                nowValue.getUTCFullYear(),\n                nowValue.getUTCMonth(),\n                nowValue.getUTCDate(),\n            ];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray(config) {\n        var i,\n            date,\n            input = [],\n            currentDate,\n            expectedWeekday,\n            yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (\n                config._dayOfYear > daysInYear(yearToUse) ||\n                config._dayOfYear === 0\n            ) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] =\n                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (\n            config._a[HOUR] === 24 &&\n            config._a[MINUTE] === 0 &&\n            config._a[SECOND] === 0 &&\n            config._a[MILLISECOND] === 0\n        ) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(\n            null,\n            input\n        );\n        expectedWeekday = config._useUTC\n            ? config._d.getUTCDay()\n            : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (\n            config._w &&\n            typeof config._w.d !== 'undefined' &&\n            config._w.d !== expectedWeekday\n        ) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(\n                w.GG,\n                config._a[YEAR],\n                weekOfYear(createLocal(), 1, 4).year\n            );\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i,\n            parsedInput,\n            tokens,\n            token,\n            skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0,\n            era,\n            tokenLen;\n\n        tokens =\n            expandFormat(config._f, config._locale).match(formattingTokens) || [];\n        tokenLen = tokens.length;\n        for (i = 0; i < tokenLen; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) ||\n                [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(\n                    string.indexOf(parsedInput) + parsedInput.length\n                );\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                } else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            } else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver =\n            stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (\n            config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0\n        ) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(\n            config._locale,\n            config._a[HOUR],\n            config._meridiem\n        );\n\n        // handle era\n        era = getParsingFlags(config).era;\n        if (era !== null) {\n            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);\n        }\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n    function meridiemFixWrap(locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n            scoreToBeat,\n            i,\n            currentScore,\n            validFormatFound,\n            bestFormatIsValid = false,\n            configfLen = config._f.length;\n\n        if (configfLen === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < configfLen; i++) {\n            currentScore = 0;\n            validFormatFound = false;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (isValid(tempConfig)) {\n                validFormatFound = true;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (!bestFormatIsValid) {\n                if (\n                    scoreToBeat == null ||\n                    currentScore < scoreToBeat ||\n                    validFormatFound\n                ) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                    if (validFormatFound) {\n                        bestFormatIsValid = true;\n                    }\n                }\n            } else {\n                if (currentScore < scoreToBeat) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                }\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i),\n            dayOrDate = i.day === undefined ? i.date : i.day;\n        config._a = map(\n            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],\n            function (obj) {\n                return obj && parseInt(obj, 10);\n            }\n        );\n\n        configFromArray(config);\n    }\n\n    function createFromConfig(config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig(config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({ nullInput: true });\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        } else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC(input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (format === true || format === false) {\n            strict = format;\n            format = undefined;\n        }\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if (\n            (isObject(input) && isObjectEmpty(input)) ||\n            (isArray(input) && input.length === 0)\n        ) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other < this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        ),\n        prototypeMax = deprecate(\n            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other > this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +new Date();\n    };\n\n    var ordering = [\n        'year',\n        'quarter',\n        'month',\n        'week',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'millisecond',\n    ];\n\n    function isDurationValid(m) {\n        var key,\n            unitHasDecimal = false,\n            i,\n            orderLen = ordering.length;\n        for (key in m) {\n            if (\n                hasOwnProp(m, key) &&\n                !(\n                    indexOf.call(ordering, key) !== -1 &&\n                    (m[key] == null || !isNaN(m[key]))\n                )\n            ) {\n                return false;\n            }\n        }\n\n        for (i = 0; i < orderLen; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds =\n            +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days + weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months + quarters * 3 + years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration(obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (\n                (dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))\n            ) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // FORMATTING\n\n    function offset(token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset(),\n                sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return (\n                sign +\n                zeroFill(~~(offset / 60), 2) +\n                separator +\n                zeroFill(~~offset % 60, 2)\n            );\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z', matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher),\n            chunk,\n            parts,\n            minutes;\n\n        if (matches === null) {\n            return null;\n        }\n\n        chunk = matches[matches.length - 1] || [];\n        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff =\n                (isMoment(input) || isDate(input)\n                    ? input.valueOf()\n                    : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset(m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset());\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset(input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(\n                        this,\n                        createDuration(input - offset, 'm'),\n                        1,\n                        false\n                    );\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone(input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC(keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal(keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset() {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            } else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset(input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime() {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted() {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {},\n            other;\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted =\n                this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal() {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset() {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc() {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        // and further modified to allow for strings containing both week and day\n        isoRegex =\n            /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration(input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months,\n            };\n        } else if (isNumber(input) || !isNaN(+input)) {\n            duration = {};\n            if (key) {\n                duration[key] = +input;\n            } else {\n                duration.milliseconds = +input;\n            }\n        } else if ((match = aspNetRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match\n            };\n        } else if ((match = isoRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: parseIso(match[2], sign),\n                M: parseIso(match[3], sign),\n                w: parseIso(match[4], sign),\n                d: parseIso(match[5], sign),\n                h: parseIso(match[6], sign),\n                m: parseIso(match[7], sign),\n                s: parseIso(match[8], sign),\n            };\n        } else if (duration == null) {\n            // checks for null or undefined\n            duration = {};\n        } else if (\n            typeof duration === 'object' &&\n            ('from' in duration || 'to' in duration)\n        ) {\n            diffRes = momentsDifference(\n                createLocal(duration.from),\n                createLocal(duration.to)\n            );\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n            ret._isValid = input._isValid;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso(inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months =\n            other.month() - base.month() + (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +base.clone().add(res.months, 'M');\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return { milliseconds: 0, months: 0 };\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(\n                    name,\n                    'moment().' +\n                        name +\n                        '(period, number) is deprecated. Please use moment().' +\n                        name +\n                        '(number, period). ' +\n                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'\n                );\n                tmp = val;\n                val = period;\n                period = tmp;\n            }\n\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract(mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add = createAdder(1, 'add'),\n        subtract = createAdder(-1, 'subtract');\n\n    function isString(input) {\n        return typeof input === 'string' || input instanceof String;\n    }\n\n    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n    function isMomentInput(input) {\n        return (\n            isMoment(input) ||\n            isDate(input) ||\n            isString(input) ||\n            isNumber(input) ||\n            isNumberOrStringArray(input) ||\n            isMomentInputObject(input) ||\n            input === null ||\n            input === undefined\n        );\n    }\n\n    function isMomentInputObject(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'years',\n                'year',\n                'y',\n                'months',\n                'month',\n                'M',\n                'days',\n                'day',\n                'd',\n                'dates',\n                'date',\n                'D',\n                'hours',\n                'hour',\n                'h',\n                'minutes',\n                'minute',\n                'm',\n                'seconds',\n                'second',\n                's',\n                'milliseconds',\n                'millisecond',\n                'ms',\n            ],\n            i,\n            property,\n            propertyLen = properties.length;\n\n        for (i = 0; i < propertyLen; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function isNumberOrStringArray(input) {\n        var arrayTest = isArray(input),\n            dataTypeTest = false;\n        if (arrayTest) {\n            dataTypeTest =\n                input.filter(function (item) {\n                    return !isNumber(item) && isString(input);\n                }).length === 0;\n        }\n        return arrayTest && dataTypeTest;\n    }\n\n    function isCalendarSpec(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'sameDay',\n                'nextDay',\n                'lastDay',\n                'nextWeek',\n                'lastWeek',\n                'sameElse',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6\n            ? 'sameElse'\n            : diff < -1\n            ? 'lastWeek'\n            : diff < 0\n            ? 'lastDay'\n            : diff < 1\n            ? 'sameDay'\n            : diff < 2\n            ? 'nextDay'\n            : diff < 7\n            ? 'nextWeek'\n            : 'sameElse';\n    }\n\n    function calendar$1(time, formats) {\n        // Support for single parameter, formats only overload to the calendar function\n        if (arguments.length === 1) {\n            if (!arguments[0]) {\n                time = undefined;\n                formats = undefined;\n            } else if (isMomentInput(arguments[0])) {\n                time = arguments[0];\n                formats = undefined;\n            } else if (isCalendarSpec(arguments[0])) {\n                formats = arguments[0];\n                time = undefined;\n            }\n        }\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse',\n            output =\n                formats &&\n                (isFunction(formats[format])\n                    ? formats[format].call(this, now)\n                    : formats[format]);\n\n        return this.format(\n            output || this.localeData().calendar(format, this, createLocal(now))\n        );\n    }\n\n    function clone() {\n        return new Moment(this);\n    }\n\n    function isAfter(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween(from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (\n            (inclusivity[0] === '('\n                ? this.isAfter(localFrom, units)\n                : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')'\n                ? this.isBefore(localTo, units)\n                : !this.isAfter(localTo, units))\n        );\n    }\n\n    function isSame(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return (\n                this.clone().startOf(units).valueOf() <= inputMs &&\n                inputMs <= this.clone().endOf(units).valueOf()\n            );\n        }\n    }\n\n    function isSameOrAfter(input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore(input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff(input, units, asFloat) {\n        var that, zoneDelta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year':\n                output = monthDiff(this, that) / 12;\n                break;\n            case 'month':\n                output = monthDiff(this, that);\n                break;\n            case 'quarter':\n                output = monthDiff(this, that) / 3;\n                break;\n            case 'second':\n                output = (this - that) / 1e3;\n                break; // 1000\n            case 'minute':\n                output = (this - that) / 6e4;\n                break; // 1000 * 60\n            case 'hour':\n                output = (this - that) / 36e5;\n                break; // 1000 * 60 * 60\n            case 'day':\n                output = (this - that - zoneDelta) / 864e5;\n                break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week':\n                output = (this - that - zoneDelta) / 6048e5;\n                break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default:\n                output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff(a, b) {\n        if (a.date() < b.date()) {\n            // end-of-month calculations work correct when the start month has more\n            // days than the end month.\n            return -monthDiff(b, a);\n        }\n        // difference in months\n        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2,\n            adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString() {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true,\n            m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(\n                m,\n                utc\n                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'\n                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'\n            );\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)\n                    .toISOString()\n                    .replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(\n            m,\n            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n        );\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect() {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment',\n            zone = '',\n            prefix,\n            year,\n            datetime,\n            suffix;\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        prefix = '[' + func + '(\"]';\n        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n        datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format(inputString) {\n        if (!inputString) {\n            inputString = this.isUtc()\n                ? hooks.defaultFormatUtc\n                : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ to: this, from: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow(withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ from: this, to: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow(withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale(key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData() {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000,\n        MS_PER_MINUTE = 60 * MS_PER_SECOND,\n        MS_PER_HOUR = 60 * MS_PER_MINUTE,\n        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return ((dividend % divisor) + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(\n                    this.year(),\n                    this.month() - (this.month() % 3),\n                    1\n                );\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - this.weekday()\n                );\n                break;\n            case 'isoWeek':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - (this.isoWeekday() - 1)\n                );\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(\n                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                    MS_PER_HOUR\n                );\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month() - (this.month() % 3) + 3,\n                        1\n                    ) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - this.weekday() + 7\n                    ) - 1;\n                break;\n            case 'isoWeek':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - (this.isoWeekday() - 1) + 7\n                    ) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time +=\n                    MS_PER_HOUR -\n                    mod$1(\n                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                        MS_PER_HOUR\n                    ) -\n                    1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf() {\n        return this._d.valueOf() - (this._offset || 0) * 60000;\n    }\n\n    function unix() {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate() {\n        return new Date(this.valueOf());\n    }\n\n    function toArray() {\n        var m = this;\n        return [\n            m.year(),\n            m.month(),\n            m.date(),\n            m.hour(),\n            m.minute(),\n            m.second(),\n            m.millisecond(),\n        ];\n    }\n\n    function toObject() {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds(),\n        };\n    }\n\n    function toJSON() {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2() {\n        return isValid(this);\n    }\n\n    function parsingFlags() {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt() {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict,\n        };\n    }\n\n    addFormatToken('N', 0, 0, 'eraAbbr');\n    addFormatToken('NN', 0, 0, 'eraAbbr');\n    addFormatToken('NNN', 0, 0, 'eraAbbr');\n    addFormatToken('NNNN', 0, 0, 'eraName');\n    addFormatToken('NNNNN', 0, 0, 'eraNarrow');\n\n    addFormatToken('y', ['y', 1], 'yo', 'eraYear');\n    addFormatToken('y', ['yy', 2], 0, 'eraYear');\n    addFormatToken('y', ['yyy', 3], 0, 'eraYear');\n    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');\n\n    addRegexToken('N', matchEraAbbr);\n    addRegexToken('NN', matchEraAbbr);\n    addRegexToken('NNN', matchEraAbbr);\n    addRegexToken('NNNN', matchEraName);\n    addRegexToken('NNNNN', matchEraNarrow);\n\n    addParseToken(\n        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],\n        function (input, array, config, token) {\n            var era = config._locale.erasParse(input, token, config._strict);\n            if (era) {\n                getParsingFlags(config).era = era;\n            } else {\n                getParsingFlags(config).invalidEra = input;\n            }\n        }\n    );\n\n    addRegexToken('y', matchUnsigned);\n    addRegexToken('yy', matchUnsigned);\n    addRegexToken('yyy', matchUnsigned);\n    addRegexToken('yyyy', matchUnsigned);\n    addRegexToken('yo', matchEraYearOrdinal);\n\n    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);\n    addParseToken(['yo'], function (input, array, config, token) {\n        var match;\n        if (config._locale._eraYearOrdinalRegex) {\n            match = input.match(config._locale._eraYearOrdinalRegex);\n        }\n\n        if (config._locale.eraYearOrdinalParse) {\n            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);\n        } else {\n            array[YEAR] = parseInt(input, 10);\n        }\n    });\n\n    function localeEras(m, format) {\n        var i,\n            l,\n            date,\n            eras = this._eras || getLocale('en')._eras;\n        for (i = 0, l = eras.length; i < l; ++i) {\n            switch (typeof eras[i].since) {\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].since).startOf('day');\n                    eras[i].since = date.valueOf();\n                    break;\n            }\n\n            switch (typeof eras[i].until) {\n                case 'undefined':\n                    eras[i].until = +Infinity;\n                    break;\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].until).startOf('day').valueOf();\n                    eras[i].until = date.valueOf();\n                    break;\n            }\n        }\n        return eras;\n    }\n\n    function localeErasParse(eraName, format, strict) {\n        var i,\n            l,\n            eras = this.eras(),\n            name,\n            abbr,\n            narrow;\n        eraName = eraName.toUpperCase();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            name = eras[i].name.toUpperCase();\n            abbr = eras[i].abbr.toUpperCase();\n            narrow = eras[i].narrow.toUpperCase();\n\n            if (strict) {\n                switch (format) {\n                    case 'N':\n                    case 'NN':\n                    case 'NNN':\n                        if (abbr === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNN':\n                        if (name === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNNN':\n                        if (narrow === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                }\n            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {\n                return eras[i];\n            }\n        }\n    }\n\n    function localeErasConvertYear(era, year) {\n        var dir = era.since <= era.until ? +1 : -1;\n        if (year === undefined) {\n            return hooks(era.since).year();\n        } else {\n            return hooks(era.since).year() + (year - era.offset) * dir;\n        }\n    }\n\n    function getEraName() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].name;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].name;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraNarrow() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].narrow;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].narrow;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraAbbr() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].abbr;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].abbr;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraYear() {\n        var i,\n            l,\n            dir,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            dir = eras[i].since <= eras[i].until ? +1 : -1;\n\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (\n                (eras[i].since <= val && val <= eras[i].until) ||\n                (eras[i].until <= val && val <= eras[i].since)\n            ) {\n                return (\n                    (this.year() - hooks(eras[i].since).year()) * dir +\n                    eras[i].offset\n                );\n            }\n        }\n\n        return this.year();\n    }\n\n    function erasNameRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNameRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNameRegex : this._erasRegex;\n    }\n\n    function erasAbbrRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasAbbrRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasAbbrRegex : this._erasRegex;\n    }\n\n    function erasNarrowRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNarrowRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNarrowRegex : this._erasRegex;\n    }\n\n    function matchEraAbbr(isStrict, locale) {\n        return locale.erasAbbrRegex(isStrict);\n    }\n\n    function matchEraName(isStrict, locale) {\n        return locale.erasNameRegex(isStrict);\n    }\n\n    function matchEraNarrow(isStrict, locale) {\n        return locale.erasNarrowRegex(isStrict);\n    }\n\n    function matchEraYearOrdinal(isStrict, locale) {\n        return locale._eraYearOrdinalRegex || matchUnsigned;\n    }\n\n    function computeErasParse() {\n        var abbrPieces = [],\n            namePieces = [],\n            narrowPieces = [],\n            mixedPieces = [],\n            i,\n            l,\n            eras = this.eras();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            namePieces.push(regexEscape(eras[i].name));\n            abbrPieces.push(regexEscape(eras[i].abbr));\n            narrowPieces.push(regexEscape(eras[i].narrow));\n\n            mixedPieces.push(regexEscape(eras[i].name));\n            mixedPieces.push(regexEscape(eras[i].abbr));\n            mixedPieces.push(regexEscape(eras[i].narrow));\n        }\n\n        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');\n        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');\n        this._erasNarrowRegex = new RegExp(\n            '^(' + narrowPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken(token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg', 'weekYear');\n    addWeekYearFormatToken('ggggg', 'weekYear');\n    addWeekYearFormatToken('GGGG', 'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n    // PARSING\n\n    addRegexToken('G', matchSigned);\n    addRegexToken('g', matchSigned);\n    addRegexToken('GG', match1to2, match2);\n    addRegexToken('gg', match1to2, match2);\n    addRegexToken('GGGG', match1to4, match4);\n    addRegexToken('gggg', match1to4, match4);\n    addRegexToken('GGGGG', match1to6, match6);\n    addRegexToken('ggggg', match1to6, match6);\n\n    addWeekParseToken(\n        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],\n        function (input, week, config, token) {\n            week[token.substr(0, 2)] = toInt(input);\n        }\n    );\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.week(),\n            this.weekday(),\n            this.localeData()._week.dow,\n            this.localeData()._week.doy\n        );\n    }\n\n    function getSetISOWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.isoWeek(),\n            this.isoWeekday(),\n            1,\n            4\n        );\n    }\n\n    function getISOWeeksInYear() {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getISOWeeksInISOWeekYear() {\n        return weeksInYear(this.isoWeekYear(), 1, 4);\n    }\n\n    function getWeeksInYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getWeeksInWeekYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter(input) {\n        return input == null\n            ? Math.ceil((this.month() + 1) / 3)\n            : this.month((input - 1) * 3 + (this.month() % 3));\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D', match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict\n            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse\n            : locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD', match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear(input) {\n        var dayOfYear =\n            Math.round(\n                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5\n            ) + 1;\n        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m', match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s', match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S', match1to3, match1);\n    addRegexToken('SS', match1to3, match2);\n    addRegexToken('SSS', match1to3, match3);\n\n    var token, getSetMillisecond;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n\n    getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z', 0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr() {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName() {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add = add;\n    proto.calendar = calendar$1;\n    proto.clone = clone;\n    proto.diff = diff;\n    proto.endOf = endOf;\n    proto.format = format;\n    proto.from = from;\n    proto.fromNow = fromNow;\n    proto.to = to;\n    proto.toNow = toNow;\n    proto.get = stringGet;\n    proto.invalidAt = invalidAt;\n    proto.isAfter = isAfter;\n    proto.isBefore = isBefore;\n    proto.isBetween = isBetween;\n    proto.isSame = isSame;\n    proto.isSameOrAfter = isSameOrAfter;\n    proto.isSameOrBefore = isSameOrBefore;\n    proto.isValid = isValid$2;\n    proto.lang = lang;\n    proto.locale = locale;\n    proto.localeData = localeData;\n    proto.max = prototypeMax;\n    proto.min = prototypeMin;\n    proto.parsingFlags = parsingFlags;\n    proto.set = stringSet;\n    proto.startOf = startOf;\n    proto.subtract = subtract;\n    proto.toArray = toArray;\n    proto.toObject = toObject;\n    proto.toDate = toDate;\n    proto.toISOString = toISOString;\n    proto.inspect = inspect;\n    if (typeof Symbol !== 'undefined' && Symbol.for != null) {\n        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {\n            return 'Moment<' + this.format() + '>';\n        };\n    }\n    proto.toJSON = toJSON;\n    proto.toString = toString;\n    proto.unix = unix;\n    proto.valueOf = valueOf;\n    proto.creationData = creationData;\n    proto.eraName = getEraName;\n    proto.eraNarrow = getEraNarrow;\n    proto.eraAbbr = getEraAbbr;\n    proto.eraYear = getEraYear;\n    proto.year = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week = proto.weeks = getSetWeek;\n    proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n    proto.weeksInYear = getWeeksInYear;\n    proto.weeksInWeekYear = getWeeksInWeekYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;\n    proto.date = getSetDayOfMonth;\n    proto.day = proto.days = getSetDayOfWeek;\n    proto.weekday = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset = getSetOffset;\n    proto.utc = setOffsetToUTC;\n    proto.local = setOffsetToLocal;\n    proto.parseZone = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST = isDaylightSavingTime;\n    proto.isLocal = isLocal;\n    proto.isUtcOffset = isUtcOffset;\n    proto.isUtc = isUtc;\n    proto.isUTC = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates = deprecate(\n        'dates accessor is deprecated. Use date instead.',\n        getSetDayOfMonth\n    );\n    proto.months = deprecate(\n        'months accessor is deprecated. Use month instead',\n        getSetMonth\n    );\n    proto.years = deprecate(\n        'years accessor is deprecated. Use year instead',\n        getSetYear\n    );\n    proto.zone = deprecate(\n        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',\n        getSetZone\n    );\n    proto.isDSTShifted = deprecate(\n        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',\n        isDaylightSavingTimeShifted\n    );\n\n    function createUnix(input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone() {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat(string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar = calendar;\n    proto$1.longDateFormat = longDateFormat;\n    proto$1.invalidDate = invalidDate;\n    proto$1.ordinal = ordinal;\n    proto$1.preparse = preParsePostFormat;\n    proto$1.postformat = preParsePostFormat;\n    proto$1.relativeTime = relativeTime;\n    proto$1.pastFuture = pastFuture;\n    proto$1.set = set;\n    proto$1.eras = localeEras;\n    proto$1.erasParse = localeErasParse;\n    proto$1.erasConvertYear = localeErasConvertYear;\n    proto$1.erasAbbrRegex = erasAbbrRegex;\n    proto$1.erasNameRegex = erasNameRegex;\n    proto$1.erasNarrowRegex = erasNarrowRegex;\n\n    proto$1.months = localeMonths;\n    proto$1.monthsShort = localeMonthsShort;\n    proto$1.monthsParse = localeMonthsParse;\n    proto$1.monthsRegex = monthsRegex;\n    proto$1.monthsShortRegex = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays = localeWeekdays;\n    proto$1.weekdaysMin = localeWeekdaysMin;\n    proto$1.weekdaysShort = localeWeekdaysShort;\n    proto$1.weekdaysParse = localeWeekdaysParse;\n\n    proto$1.weekdaysRegex = weekdaysRegex;\n    proto$1.weekdaysShortRegex = weekdaysShortRegex;\n    proto$1.weekdaysMinRegex = weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1(format, index, field, setter) {\n        var locale = getLocale(),\n            utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl(format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i,\n            out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl(localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0,\n            i,\n            out = [];\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths(format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort(format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        eras: [\n            {\n                since: '0001-01-01',\n                until: +Infinity,\n                offset: 1,\n                name: 'Anno Domini',\n                narrow: 'AD',\n                abbr: 'AD',\n            },\n            {\n                since: '0000-12-31',\n                until: -Infinity,\n                offset: 1,\n                name: 'Before Christ',\n                narrow: 'BC',\n                abbr: 'BC',\n            },\n        ],\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal: function (number) {\n            var b = number % 10,\n                output =\n                    toInt((number % 100) / 10) === 1\n                        ? 'th'\n                        : b === 1\n                        ? 'st'\n                        : b === 2\n                        ? 'nd'\n                        : b === 3\n                        ? 'rd'\n                        : 'th';\n            return number + output;\n        },\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate(\n        'moment.lang is deprecated. Use moment.locale instead.',\n        getSetGlobalLocale\n    );\n    hooks.langData = deprecate(\n        'moment.langData is deprecated. Use moment.localeData instead.',\n        getLocale\n    );\n\n    var mathAbs = Math.abs;\n\n    function abs() {\n        var data = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.months = mathAbs(data.months);\n        data.years = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1(duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days += direction * other._days;\n        duration._months += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1(input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1(input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil(number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble() {\n        var milliseconds = this._milliseconds,\n            days = this._days,\n            months = this._months,\n            data = this._data,\n            seconds,\n            minutes,\n            hours,\n            years,\n            monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (\n            !(\n                (milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0)\n            )\n        ) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds = absFloor(milliseconds / 1000);\n        data.seconds = seconds % 60;\n\n        minutes = absFloor(seconds / 60);\n        data.minutes = minutes % 60;\n\n        hours = absFloor(minutes / 60);\n        data.hours = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days = days;\n        data.months = months;\n        data.years = years;\n\n        return this;\n    }\n\n    function daysToMonths(days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return (days * 4800) / 146097;\n    }\n\n    function monthsToDays(months) {\n        // the reverse of daysToMonths\n        return (months * 146097) / 4800;\n    }\n\n    function as(units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days,\n            months,\n            milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':\n                    return months;\n                case 'quarter':\n                    return months / 3;\n                case 'year':\n                    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week':\n                    return days / 7 + milliseconds / 6048e5;\n                case 'day':\n                    return days + milliseconds / 864e5;\n                case 'hour':\n                    return days * 24 + milliseconds / 36e5;\n                case 'minute':\n                    return days * 1440 + milliseconds / 6e4;\n                case 'second':\n                    return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond':\n                    return Math.floor(days * 864e5) + milliseconds;\n                default:\n                    throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1() {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs(alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms'),\n        asSeconds = makeAs('s'),\n        asMinutes = makeAs('m'),\n        asHours = makeAs('h'),\n        asDays = makeAs('d'),\n        asWeeks = makeAs('w'),\n        asMonths = makeAs('M'),\n        asQuarters = makeAs('Q'),\n        asYears = makeAs('y');\n\n    function clone$1() {\n        return createDuration(this);\n    }\n\n    function get$2(units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds'),\n        seconds = makeGetter('seconds'),\n        minutes = makeGetter('minutes'),\n        hours = makeGetter('hours'),\n        days = makeGetter('days'),\n        months = makeGetter('months'),\n        years = makeGetter('years');\n\n    function weeks() {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round,\n        thresholds = {\n            ss: 44, // a few seconds to seconds\n            s: 45, // seconds to minute\n            m: 45, // minutes to hour\n            h: 22, // hours to day\n            d: 26, // days to month/week\n            w: null, // weeks to month\n            M: 11, // months to year\n        };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {\n        var duration = createDuration(posNegDuration).abs(),\n            seconds = round(duration.as('s')),\n            minutes = round(duration.as('m')),\n            hours = round(duration.as('h')),\n            days = round(duration.as('d')),\n            months = round(duration.as('M')),\n            weeks = round(duration.as('w')),\n            years = round(duration.as('y')),\n            a =\n                (seconds <= thresholds.ss && ['s', seconds]) ||\n                (seconds < thresholds.s && ['ss', seconds]) ||\n                (minutes <= 1 && ['m']) ||\n                (minutes < thresholds.m && ['mm', minutes]) ||\n                (hours <= 1 && ['h']) ||\n                (hours < thresholds.h && ['hh', hours]) ||\n                (days <= 1 && ['d']) ||\n                (days < thresholds.d && ['dd', days]);\n\n        if (thresholds.w != null) {\n            a =\n                a ||\n                (weeks <= 1 && ['w']) ||\n                (weeks < thresholds.w && ['ww', weeks]);\n        }\n        a = a ||\n            (months <= 1 && ['M']) ||\n            (months < thresholds.M && ['MM', months]) ||\n            (years <= 1 && ['y']) || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding(roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof roundingFunction === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold(threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize(argWithSuffix, argThresholds) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var withSuffix = false,\n            th = thresholds,\n            locale,\n            output;\n\n        if (typeof argWithSuffix === 'object') {\n            argThresholds = argWithSuffix;\n            argWithSuffix = false;\n        }\n        if (typeof argWithSuffix === 'boolean') {\n            withSuffix = argWithSuffix;\n        }\n        if (typeof argThresholds === 'object') {\n            th = Object.assign({}, thresholds, argThresholds);\n            if (argThresholds.s != null && argThresholds.ss == null) {\n                th.ss = argThresholds.s - 1;\n            }\n        }\n\n        locale = this.localeData();\n        output = relativeTime$1(this, !withSuffix, th, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return (x > 0) - (x < 0) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000,\n            days = abs$1(this._days),\n            months = abs$1(this._months),\n            minutes,\n            hours,\n            years,\n            s,\n            total = this.asSeconds(),\n            totalSign,\n            ymSign,\n            daysSign,\n            hmsSign;\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes = absFloor(seconds / 60);\n        hours = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n\n        totalSign = total < 0 ? '-' : '';\n        ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return (\n            totalSign +\n            'P' +\n            (years ? ymSign + years + 'Y' : '') +\n            (months ? ymSign + months + 'M' : '') +\n            (days ? daysSign + days + 'D' : '') +\n            (hours || minutes || seconds ? 'T' : '') +\n            (hours ? hmsSign + hours + 'H' : '') +\n            (minutes ? hmsSign + minutes + 'M' : '') +\n            (seconds ? hmsSign + s + 'S' : '')\n        );\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid = isValid$1;\n    proto$2.abs = abs;\n    proto$2.add = add$1;\n    proto$2.subtract = subtract$1;\n    proto$2.as = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds = asSeconds;\n    proto$2.asMinutes = asMinutes;\n    proto$2.asHours = asHours;\n    proto$2.asDays = asDays;\n    proto$2.asWeeks = asWeeks;\n    proto$2.asMonths = asMonths;\n    proto$2.asQuarters = asQuarters;\n    proto$2.asYears = asYears;\n    proto$2.valueOf = valueOf$1;\n    proto$2._bubble = bubble;\n    proto$2.clone = clone$1;\n    proto$2.get = get$2;\n    proto$2.milliseconds = milliseconds;\n    proto$2.seconds = seconds;\n    proto$2.minutes = minutes;\n    proto$2.hours = hours;\n    proto$2.days = days;\n    proto$2.weeks = weeks;\n    proto$2.months = months;\n    proto$2.years = years;\n    proto$2.humanize = humanize;\n    proto$2.toISOString = toISOString$1;\n    proto$2.toString = toISOString$1;\n    proto$2.toJSON = toISOString$1;\n    proto$2.locale = locale;\n    proto$2.localeData = localeData;\n\n    proto$2.toIsoString = deprecate(\n        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',\n        toISOString$1\n    );\n    proto$2.lang = lang;\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    //! moment.js\n\n    hooks.version = '2.29.4';\n\n    setHookCallback(createLocal);\n\n    hooks.fn = proto;\n    hooks.min = min;\n    hooks.max = max;\n    hooks.now = now;\n    hooks.utc = createUTC;\n    hooks.unix = createUnix;\n    hooks.months = listMonths;\n    hooks.isDate = isDate;\n    hooks.locale = getSetGlobalLocale;\n    hooks.invalid = createInvalid;\n    hooks.duration = createDuration;\n    hooks.isMoment = isMoment;\n    hooks.weekdays = listWeekdays;\n    hooks.parseZone = createInZone;\n    hooks.localeData = getLocale;\n    hooks.isDuration = isDuration;\n    hooks.monthsShort = listMonthsShort;\n    hooks.weekdaysMin = listWeekdaysMin;\n    hooks.defineLocale = defineLocale;\n    hooks.updateLocale = updateLocale;\n    hooks.locales = listLocales;\n    hooks.weekdaysShort = listWeekdaysShort;\n    hooks.normalizeUnits = normalizeUnits;\n    hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat = getCalendarFormat;\n    hooks.prototype = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD', // <input type=\"date\" />\n        TIME: 'HH:mm', // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss', // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS', // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW', // <input type=\"week\" />\n        MONTH: 'YYYY-MM', // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n","'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n","'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    walker = insert(this, walker, nodes[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n","'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n","'use strict';\n\nvar at; // The index of the current character\nvar ch; // The current character\nvar escapee = {\n\t'\"': '\"',\n\t'\\\\': '\\\\',\n\t'/': '/',\n\tb: '\\b',\n\tf: '\\f',\n\tn: '\\n',\n\tr: '\\r',\n\tt: '\\t'\n};\nvar text;\n\n// Call error when something is wrong.\nfunction error(m) {\n\tthrow {\n\t\tname: 'SyntaxError',\n\t\tmessage: m,\n\t\tat: at,\n\t\ttext: text\n\t};\n}\n\nfunction next(c) {\n\t// If a c parameter is provided, verify that it matches the current character.\n\tif (c && c !== ch) {\n\t\terror(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n\t}\n\n\t// Get the next character. When there are no more characters, return the empty string.\n\n\tch = text.charAt(at);\n\tat += 1;\n\treturn ch;\n}\n\nfunction number() {\n\t// Parse a number value.\n\tvar num;\n\tvar str = '';\n\n\tif (ch === '-') {\n\t\tstr = '-';\n\t\tnext('-');\n\t}\n\twhile (ch >= '0' && ch <= '9') {\n\t\tstr += ch;\n\t\tnext();\n\t}\n\tif (ch === '.') {\n\t\tstr += '.';\n\t\twhile (next() && ch >= '0' && ch <= '9') {\n\t\t\tstr += ch;\n\t\t}\n\t}\n\tif (ch === 'e' || ch === 'E') {\n\t\tstr += ch;\n\t\tnext();\n\t\tif (ch === '-' || ch === '+') {\n\t\t\tstr += ch;\n\t\t\tnext();\n\t\t}\n\t\twhile (ch >= '0' && ch <= '9') {\n\t\t\tstr += ch;\n\t\t\tnext();\n\t\t}\n\t}\n\tnum = Number(str);\n\tif (!isFinite(num)) {\n\t\terror('Bad number');\n\t}\n\treturn num;\n}\n\nfunction string() {\n\t// Parse a string value.\n\tvar hex;\n\tvar i;\n\tvar str = '';\n\tvar uffff;\n\n\t// When parsing for string values, we must look for \" and \\ characters.\n\tif (ch === '\"') {\n\t\twhile (next()) {\n\t\t\tif (ch === '\"') {\n\t\t\t\tnext();\n\t\t\t\treturn str;\n\t\t\t} else if (ch === '\\\\') {\n\t\t\t\tnext();\n\t\t\t\tif (ch === 'u') {\n\t\t\t\t\tuffff = 0;\n\t\t\t\t\tfor (i = 0; i < 4; i += 1) {\n\t\t\t\t\t\thex = parseInt(next(), 16);\n\t\t\t\t\t\tif (!isFinite(hex)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuffff = (uffff * 16) + hex;\n\t\t\t\t\t}\n\t\t\t\t\tstr += String.fromCharCode(uffff);\n\t\t\t\t} else if (typeof escapee[ch] === 'string') {\n\t\t\t\t\tstr += escapee[ch];\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr += ch;\n\t\t\t}\n\t\t}\n\t}\n\terror('Bad string');\n}\n\n// Skip whitespace.\nfunction white() {\n\twhile (ch && ch <= ' ') {\n\t\tnext();\n\t}\n}\n\n// true, false, or null.\nfunction word() {\n\tswitch (ch) {\n\t\tcase 't':\n\t\t\tnext('t');\n\t\t\tnext('r');\n\t\t\tnext('u');\n\t\t\tnext('e');\n\t\t\treturn true;\n\t\tcase 'f':\n\t\t\tnext('f');\n\t\t\tnext('a');\n\t\t\tnext('l');\n\t\t\tnext('s');\n\t\t\tnext('e');\n\t\t\treturn false;\n\t\tcase 'n':\n\t\t\tnext('n');\n\t\t\tnext('u');\n\t\t\tnext('l');\n\t\t\tnext('l');\n\t\t\treturn null;\n\t\tdefault:\n\t\t\terror(\"Unexpected '\" + ch + \"'\");\n\t}\n}\n\n// Parse an array value.\nfunction array() {\n\tvar arr = [];\n\n\tif (ch === '[') {\n\t\tnext('[');\n\t\twhite();\n\t\tif (ch === ']') {\n\t\t\tnext(']');\n\t\t\treturn arr; // empty array\n\t\t}\n\t\twhile (ch) {\n\t\t\tarr.push(value()); // eslint-disable-line no-use-before-define\n\t\t\twhite();\n\t\t\tif (ch === ']') {\n\t\t\t\tnext(']');\n\t\t\t\treturn arr;\n\t\t\t}\n\t\t\tnext(',');\n\t\t\twhite();\n\t\t}\n\t}\n\terror('Bad array');\n}\n\n// Parse an object value.\nfunction object() {\n\tvar key;\n\tvar obj = {};\n\n\tif (ch === '{') {\n\t\tnext('{');\n\t\twhite();\n\t\tif (ch === '}') {\n\t\t\tnext('}');\n\t\t\treturn obj; // empty object\n\t\t}\n\t\twhile (ch) {\n\t\t\tkey = string();\n\t\t\twhite();\n\t\t\tnext(':');\n\t\t\tif (Object.prototype.hasOwnProperty.call(obj, key)) {\n\t\t\t\terror('Duplicate key \"' + key + '\"');\n\t\t\t}\n\t\t\tobj[key] = value(); // eslint-disable-line no-use-before-define\n\t\t\twhite();\n\t\t\tif (ch === '}') {\n\t\t\t\tnext('}');\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t\tnext(',');\n\t\t\twhite();\n\t\t}\n\t}\n\terror('Bad object');\n}\n\n// Parse a JSON value. It could be an object, an array, a string, a number, or a word.\nfunction value() {\n\twhite();\n\tswitch (ch) {\n\t\tcase '{':\n\t\t\treturn object();\n\t\tcase '[':\n\t\t\treturn array();\n\t\tcase '\"':\n\t\t\treturn string();\n\t\tcase '-':\n\t\t\treturn number();\n\t\tdefault:\n\t\t\treturn ch >= '0' && ch <= '9' ? number() : word();\n\t}\n}\n\n// Return the json_parse function. It will have access to all of the above functions and variables.\nmodule.exports = function (source, reviver) {\n\tvar result;\n\n\ttext = source;\n\tat = 0;\n\tch = ' ';\n\tresult = value();\n\twhite();\n\tif (ch) {\n\t\terror('Syntax error');\n\t}\n\n\t// If there is a reviver function, we recursively walk the new structure,\n\t// passing each name/value pair to the reviver function for possible\n\t// transformation, starting with a temporary root object that holds the result\n\t// in an empty key. If there is not a reviver function, we simply return the\n\t// result.\n\n\treturn typeof reviver === 'function' ? (function walk(holder, key) {\n\t\tvar k;\n\t\tvar v;\n\t\tvar val = holder[key];\n\t\tif (val && typeof val === 'object') {\n\t\t\tfor (k in value) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(val, k)) {\n\t\t\t\t\tv = walk(val, k);\n\t\t\t\t\tif (typeof v === 'undefined') {\n\t\t\t\t\t\tdelete val[k];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tval[k] = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn reviver.call(holder, key, val);\n\t}({ '': result }, '')) : result;\n};\n","'use strict';\n\nvar escapable = /[\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = { // table of character substitutions\n\t'\\b': '\\\\b',\n\t'\\t': '\\\\t',\n\t'\\n': '\\\\n',\n\t'\\f': '\\\\f',\n\t'\\r': '\\\\r',\n\t'\"': '\\\\\"',\n\t'\\\\': '\\\\\\\\'\n};\nvar rep;\n\nfunction quote(string) {\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape sequences.\n\n\tescapable.lastIndex = 0;\n\treturn escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t\tvar c = meta[a];\n\t\treturn typeof c === 'string' ? c\n\t\t\t: '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t}) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n\t// Produce a string from holder[key].\n\tvar i; // The loop counter.\n\tvar k; // The member key.\n\tvar v; // The member value.\n\tvar length;\n\tvar mind = gap;\n\tvar partial;\n\tvar value = holder[key];\n\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\tif (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n\t\tvalue = value.toJSON(key);\n\t}\n\n\t// If we were called with a replacer function, then call the replacer to obtain a replacement value.\n\tif (typeof rep === 'function') {\n\t\tvalue = rep.call(holder, key, value);\n\t}\n\n\t// What happens next depends on the value's type.\n\tswitch (typeof value) {\n\t\tcase 'string':\n\t\t\treturn quote(value);\n\n\t\tcase 'number':\n\t\t\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\t\treturn isFinite(value) ? String(value) : 'null';\n\n\t\tcase 'boolean':\n\t\tcase 'null':\n\t\t\t// If the value is a boolean or null, convert it to a string. Note:\n\t\t\t// typeof null does not produce 'null'. The case is included here in\n\t\t\t// the remote chance that this gets fixed someday.\n\t\t\treturn String(value);\n\n\t\tcase 'object':\n\t\t\tif (!value) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tgap += indent;\n\t\t\tpartial = [];\n\n\t\t\t// Array.isArray\n\t\t\tif (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\t\t\tlength = value.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tpartial[i] = str(i, value) || 'null';\n\t\t\t\t}\n\n\t\t\t\t// Join all of the elements together, separated with commas, and wrap them in brackets.\n\t\t\t\tv = partial.length === 0 ? '[]' : gap\n\t\t\t\t\t? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n\t\t\t\t\t: '[' + partial.join(',') + ']';\n\t\t\t\tgap = mind;\n\t\t\t\treturn v;\n\t\t\t}\n\n\t\t\t// If the replacer is an array, use it to select the members to be stringified.\n\t\t\tif (rep && typeof rep === 'object') {\n\t\t\t\tlength = rep.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tk = rep[i];\n\t\t\t\t\tif (typeof k === 'string') {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise, iterate through all of the keys in the object.\n\t\t\t\tfor (k in value) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, k)) {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Join all of the member texts together, separated with commas, and wrap them in braces.\n\n\t\t\tv = partial.length === 0 ? '{}' : gap\n\t\t\t\t? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n\t\t\t\t: '{' + partial.join(',') + '}';\n\t\t\tgap = mind;\n\t\t\treturn v;\n\t\tdefault:\n\t}\n}\n\nmodule.exports = function (value, replacer, space) {\n\tvar i;\n\tgap = '';\n\tindent = '';\n\n\t// If the space parameter is a number, make an indent string containing that many spaces.\n\tif (typeof space === 'number') {\n\t\tfor (i = 0; i < space; i += 1) {\n\t\t\tindent += ' ';\n\t\t}\n\t} else if (typeof space === 'string') {\n\t\t// If the space parameter is a string, it will be used as the indent string.\n\t\tindent = space;\n\t}\n\n\t// If there is a replacer, it must be a function or an array. Otherwise, throw an error.\n\trep = replacer;\n\tif (\n\t\treplacer\n\t\t&& typeof replacer !== 'function'\n\t\t&& (typeof replacer !== 'object' || typeof replacer.length !== 'number')\n\t) {\n\t\tthrow new Error('JSON.stringify');\n\t}\n\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\treturn str('', { '': value });\n};\n","'use strict';\n\nexports.parse = require('./lib/parse');\nexports.stringify = require('./lib/stringify');\n","'use strict';\n\nvar json = typeof JSON !== 'undefined' ? JSON : require('jsonify');\n\nvar isArray = Array.isArray || function (x) {\n\treturn {}.toString.call(x) === '[object Array]';\n};\n\nvar objectKeys = Object.keys || function (obj) {\n\tvar has = Object.prototype.hasOwnProperty || function () { return true; };\n\tvar keys = [];\n\tfor (var key in obj) {\n\t\tif (has.call(obj, key)) { keys.push(key); }\n\t}\n\treturn keys;\n};\n\nmodule.exports = function (obj, opts) {\n\tif (!opts) { opts = {}; }\n\tif (typeof opts === 'function') { opts = { cmp: opts }; }\n\tvar space = opts.space || '';\n\tif (typeof space === 'number') { space = Array(space + 1).join(' '); }\n\tvar cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;\n\tvar replacer = opts.replacer || function (key, value) { return value; };\n\n\tvar cmp = opts.cmp && (function (f) {\n\t\treturn function (node) {\n\t\t\treturn function (a, b) {\n\t\t\t\tvar aobj = { key: a, value: node[a] };\n\t\t\t\tvar bobj = { key: b, value: node[b] };\n\t\t\t\treturn f(aobj, bobj);\n\t\t\t};\n\t\t};\n\t}(opts.cmp));\n\n\tvar seen = [];\n\treturn (function stringify(parent, key, node, level) {\n\t\tvar indent = space ? '\\n' + new Array(level + 1).join(space) : '';\n\t\tvar colonSeparator = space ? ': ' : ':';\n\n\t\tif (node && node.toJSON && typeof node.toJSON === 'function') {\n\t\t\tnode = node.toJSON();\n\t\t}\n\n\t\tnode = replacer.call(parent, key, node);\n\n\t\tif (node === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof node !== 'object' || node === null) {\n\t\t\treturn json.stringify(node);\n\t\t}\n\t\tif (isArray(node)) {\n\t\t\tvar out = [];\n\t\t\tfor (var i = 0; i < node.length; i++) {\n\t\t\t\tvar item = stringify(node, i, node[i], level + 1) || json.stringify(null);\n\t\t\t\tout.push(indent + space + item);\n\t\t\t}\n\t\t\treturn '[' + out.join(',') + indent + ']';\n\t\t}\n\n\t\tif (seen.indexOf(node) !== -1) {\n\t\t\tif (cycles) { return json.stringify('__cycle__'); }\n\t\t\tthrow new TypeError('Converting circular structure to JSON');\n\t\t} else { seen.push(node); }\n\n\t\tvar keys = objectKeys(node).sort(cmp && cmp(node));\n\t\tvar out = [];\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tvar key = keys[i];\n\t\t\tvar value = stringify(node, key, node[key], level + 1);\n\n\t\t\tif (!value) { continue; }\n\n\t\t\tvar keyValue = json.stringify(key)\n\t\t\t\t\t+ colonSeparator\n\t\t\t\t\t+ value;\n\n\t\t\tout.push(indent + space + keyValue);\n\t\t}\n\t\tseen.splice(seen.indexOf(node), 1);\n\t\treturn '{' + out.join(',') + indent + '}';\n\n\t}({ '': obj }, '', obj, 0));\n};\n","\"use strict\"\n\nmodule.exports = createRBTree\n\nvar RED   = 0\nvar BLACK = 1\n\nfunction RBNode(color, key, value, left, right, count) {\n  this._color = color\n  this.key = key\n  this.value = value\n  this.left = left\n  this.right = right\n  this._count = count\n}\n\nfunction cloneNode(node) {\n  return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count)\n}\n\nfunction repaint(color, node) {\n  return new RBNode(color, node.key, node.value, node.left, node.right, node._count)\n}\n\nfunction recount(node) {\n  node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0)\n}\n\nfunction RedBlackTree(compare, root) {\n  this._compare = compare\n  this.root = root\n}\n\nvar proto = RedBlackTree.prototype\n\nObject.defineProperty(proto, \"keys\", {\n  get: function() {\n    var result = []\n    this.forEach(function(k,v) {\n      result.push(k)\n    })\n    return result\n  }\n})\n\nObject.defineProperty(proto, \"values\", {\n  get: function() {\n    var result = []\n    this.forEach(function(k,v) {\n      result.push(v)\n    })\n    return result\n  }\n})\n\n//Returns the number of nodes in the tree\nObject.defineProperty(proto, \"length\", {\n  get: function() {\n    if(this.root) {\n      return this.root._count\n    }\n    return 0\n  }\n})\n\n//Insert a new item into the tree\nproto.insert = function(key, value) {\n  var cmp = this._compare\n  //Find point to insert new node at\n  var n = this.root\n  var n_stack = []\n  var d_stack = []\n  while(n) {\n    var d = cmp(key, n.key)\n    n_stack.push(n)\n    d_stack.push(d)\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  //Rebuild path to leaf node\n  n_stack.push(new RBNode(RED, key, value, null, null, 1))\n  for(var s=n_stack.length-2; s>=0; --s) {\n    var n = n_stack[s]\n    if(d_stack[s] <= 0) {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s+1], n.right, n._count+1)\n    } else {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s+1], n._count+1)\n    }\n  }\n  //Rebalance tree using rotations\n  //console.log(\"start insert\", key, d_stack)\n  for(var s=n_stack.length-1; s>1; --s) {\n    var p = n_stack[s-1]\n    var n = n_stack[s]\n    if(p._color === BLACK || n._color === BLACK) {\n      break\n    }\n    var pp = n_stack[s-2]\n    if(pp.left === p) {\n      if(p.left === n) {\n        var y = pp.right\n        if(y && y._color === RED) {\n          //console.log(\"LLr\")\n          p._color = BLACK\n          pp.right = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"LLb\")\n          pp._color = RED\n          pp.left = p.right\n          p._color = BLACK\n          p.right = pp\n          n_stack[s-2] = p\n          n_stack[s-1] = n\n          recount(pp)\n          recount(p)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.left === pp) {\n              ppp.left = p\n            } else {\n              ppp.right = p\n            }\n          }\n          break\n        }\n      } else {\n        var y = pp.right\n        if(y && y._color === RED) {\n          //console.log(\"LRr\")\n          p._color = BLACK\n          pp.right = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"LRb\")\n          p.right = n.left\n          pp._color = RED\n          pp.left = n.right\n          n._color = BLACK\n          n.left = p\n          n.right = pp\n          n_stack[s-2] = n\n          n_stack[s-1] = p\n          recount(pp)\n          recount(p)\n          recount(n)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.left === pp) {\n              ppp.left = n\n            } else {\n              ppp.right = n\n            }\n          }\n          break\n        }\n      }\n    } else {\n      if(p.right === n) {\n        var y = pp.left\n        if(y && y._color === RED) {\n          //console.log(\"RRr\", y.key)\n          p._color = BLACK\n          pp.left = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"RRb\")\n          pp._color = RED\n          pp.right = p.left\n          p._color = BLACK\n          p.left = pp\n          n_stack[s-2] = p\n          n_stack[s-1] = n\n          recount(pp)\n          recount(p)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.right === pp) {\n              ppp.right = p\n            } else {\n              ppp.left = p\n            }\n          }\n          break\n        }\n      } else {\n        var y = pp.left\n        if(y && y._color === RED) {\n          //console.log(\"RLr\")\n          p._color = BLACK\n          pp.left = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"RLb\")\n          p.left = n.right\n          pp._color = RED\n          pp.right = n.left\n          n._color = BLACK\n          n.right = p\n          n.left = pp\n          n_stack[s-2] = n\n          n_stack[s-1] = p\n          recount(pp)\n          recount(p)\n          recount(n)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.right === pp) {\n              ppp.right = n\n            } else {\n              ppp.left = n\n            }\n          }\n          break\n        }\n      }\n    }\n  }\n  //Return new tree\n  n_stack[0]._color = BLACK\n  return new RedBlackTree(cmp, n_stack[0])\n}\n\n\n//Visit all nodes inorder\nfunction doVisitFull(visit, node) {\n  if(node.left) {\n    var v = doVisitFull(visit, node.left)\n    if(v) { return v }\n  }\n  var v = visit(node.key, node.value)\n  if(v) { return v }\n  if(node.right) {\n    return doVisitFull(visit, node.right)\n  }\n}\n\n//Visit half nodes in order\nfunction doVisitHalf(lo, compare, visit, node) {\n  var l = compare(lo, node.key)\n  if(l <= 0) {\n    if(node.left) {\n      var v = doVisitHalf(lo, compare, visit, node.left)\n      if(v) { return v }\n    }\n    var v = visit(node.key, node.value)\n    if(v) { return v }\n  }\n  if(node.right) {\n    return doVisitHalf(lo, compare, visit, node.right)\n  }\n}\n\n//Visit all nodes within a range\nfunction doVisit(lo, hi, compare, visit, node) {\n  var l = compare(lo, node.key)\n  var h = compare(hi, node.key)\n  var v\n  if(l <= 0) {\n    if(node.left) {\n      v = doVisit(lo, hi, compare, visit, node.left)\n      if(v) { return v }\n    }\n    if(h > 0) {\n      v = visit(node.key, node.value)\n      if(v) { return v }\n    }\n  }\n  if(h > 0 && node.right) {\n    return doVisit(lo, hi, compare, visit, node.right)\n  }\n}\n\n\nproto.forEach = function rbTreeForEach(visit, lo, hi) {\n  if(!this.root) {\n    return\n  }\n  switch(arguments.length) {\n    case 1:\n      return doVisitFull(visit, this.root)\n    break\n\n    case 2:\n      return doVisitHalf(lo, this._compare, visit, this.root)\n    break\n\n    case 3:\n      if(this._compare(lo, hi) >= 0) {\n        return\n      }\n      return doVisit(lo, hi, this._compare, visit, this.root)\n    break\n  }\n}\n\n//First item in list\nObject.defineProperty(proto, \"begin\", {\n  get: function() {\n    var stack = []\n    var n = this.root\n    while(n) {\n      stack.push(n)\n      n = n.left\n    }\n    return new RedBlackTreeIterator(this, stack)\n  }\n})\n\n//Last item in list\nObject.defineProperty(proto, \"end\", {\n  get: function() {\n    var stack = []\n    var n = this.root\n    while(n) {\n      stack.push(n)\n      n = n.right\n    }\n    return new RedBlackTreeIterator(this, stack)\n  }\n})\n\n//Find the ith item in the tree\nproto.at = function(idx) {\n  if(idx < 0) {\n    return new RedBlackTreeIterator(this, [])\n  }\n  var n = this.root\n  var stack = []\n  while(true) {\n    stack.push(n)\n    if(n.left) {\n      if(idx < n.left._count) {\n        n = n.left\n        continue\n      }\n      idx -= n.left._count\n    }\n    if(!idx) {\n      return new RedBlackTreeIterator(this, stack)\n    }\n    idx -= 1\n    if(n.right) {\n      if(idx >= n.right._count) {\n        break\n      }\n      n = n.right\n    } else {\n      break\n    }\n  }\n  return new RedBlackTreeIterator(this, [])\n}\n\nproto.ge = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d <= 0) {\n      last_ptr = stack.length\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.gt = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d < 0) {\n      last_ptr = stack.length\n    }\n    if(d < 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.lt = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d > 0) {\n      last_ptr = stack.length\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.le = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d >= 0) {\n      last_ptr = stack.length\n    }\n    if(d < 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\n//Finds the item with key if it exists\nproto.find = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d === 0) {\n      return new RedBlackTreeIterator(this, stack)\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  return new RedBlackTreeIterator(this, [])\n}\n\n//Removes item with key from tree\nproto.remove = function(key) {\n  var iter = this.find(key)\n  if(iter) {\n    return iter.remove()\n  }\n  return this\n}\n\n//Returns the item at `key`\nproto.get = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  while(n) {\n    var d = cmp(key, n.key)\n    if(d === 0) {\n      return n.value\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  return\n}\n\n//Iterator for red black tree\nfunction RedBlackTreeIterator(tree, stack) {\n  this.tree = tree\n  this._stack = stack\n}\n\nvar iproto = RedBlackTreeIterator.prototype\n\n//Test if iterator is valid\nObject.defineProperty(iproto, \"valid\", {\n  get: function() {\n    return this._stack.length > 0\n  }\n})\n\n//Node of the iterator\nObject.defineProperty(iproto, \"node\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1]\n    }\n    return null\n  },\n  enumerable: true\n})\n\n//Makes a copy of an iterator\niproto.clone = function() {\n  return new RedBlackTreeIterator(this.tree, this._stack.slice())\n}\n\n//Swaps two nodes\nfunction swapNode(n, v) {\n  n.key = v.key\n  n.value = v.value\n  n.left = v.left\n  n.right = v.right\n  n._color = v._color\n  n._count = v._count\n}\n\n//Fix up a double black node in a tree\nfunction fixDoubleBlack(stack) {\n  var n, p, s, z\n  for(var i=stack.length-1; i>=0; --i) {\n    n = stack[i]\n    if(i === 0) {\n      n._color = BLACK\n      return\n    }\n    //console.log(\"visit node:\", n.key, i, stack[i].key, stack[i-1].key)\n    p = stack[i-1]\n    if(p.left === n) {\n      //console.log(\"left child\")\n      s = p.right\n      if(s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.right = cloneNode(s)\n        z = s.right = cloneNode(s.right)\n        p.right = s.left\n        s.left = p\n        s.right = z\n        s._color = p._color\n        n._color = BLACK\n        p._color = BLACK\n        z._color = BLACK\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i-1] = s\n        return\n      } else if(s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\")\n        s = p.right = cloneNode(s)\n        z = s.left = cloneNode(s.left)\n        p.right = z.left\n        s.left = z.right\n        z.left = p\n        z.right = s\n        z._color = p._color\n        p._color = BLACK\n        s._color = BLACK\n        n._color = BLACK\n        recount(p)\n        recount(s)\n        recount(z)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = z\n          } else {\n            pp.right = z\n          }\n        }\n        stack[i-1] = z\n        return\n      }\n      if(s._color === BLACK) {\n        if(p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\", p.right.value)\n          p._color = BLACK\n          p.right = repaint(RED, s)\n          return\n        } else {\n          //console.log(\"case 2: black sibling, black parent\", p.right.value)\n          p.right = repaint(RED, s)\n          continue  \n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s)\n        p.right = s.left\n        s.left = p\n        s._color = p._color\n        p._color = RED\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i-1] = s\n        stack[i] = p\n        if(i+1 < stack.length) {\n          stack[i+1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i+2\n      }\n    } else {\n      //console.log(\"right child\")\n      s = p.left\n      if(s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\", p.value, p._color)\n        s = p.left = cloneNode(s)\n        z = s.left = cloneNode(s.left)\n        p.left = s.right\n        s.right = p\n        s.left = z\n        s._color = p._color\n        n._color = BLACK\n        p._color = BLACK\n        z._color = BLACK\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i-1] = s\n        return\n      } else if(s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.left = cloneNode(s)\n        z = s.right = cloneNode(s.right)\n        p.left = z.right\n        s.right = z.left\n        z.right = p\n        z.left = s\n        z._color = p._color\n        p._color = BLACK\n        s._color = BLACK\n        n._color = BLACK\n        recount(p)\n        recount(s)\n        recount(z)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = z\n          } else {\n            pp.left = z\n          }\n        }\n        stack[i-1] = z\n        return\n      }\n      if(s._color === BLACK) {\n        if(p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\")\n          p._color = BLACK\n          p.left = repaint(RED, s)\n          return\n        } else {\n          //console.log(\"case 2: black sibling, black parent\")\n          p.left = repaint(RED, s)\n          continue  \n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s)\n        p.left = s.right\n        s.right = p\n        s._color = p._color\n        p._color = RED\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i-1] = s\n        stack[i] = p\n        if(i+1 < stack.length) {\n          stack[i+1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i+2\n      }\n    }\n  }\n}\n\n//Removes item at iterator from tree\niproto.remove = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return this.tree\n  }\n  //First copy path to node\n  var cstack = new Array(stack.length)\n  var n = stack[stack.length-1]\n  cstack[cstack.length-1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count)\n  for(var i=stack.length-2; i>=0; --i) {\n    var n = stack[i]\n    if(n.left === stack[i+1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n  }\n\n  //Get node\n  n = cstack[cstack.length-1]\n  //console.log(\"start remove: \", n.value)\n\n  //If not leaf, then swap with previous node\n  if(n.left && n.right) {\n    //console.log(\"moving to leaf\")\n\n    //First walk to previous leaf\n    var split = cstack.length\n    n = n.left\n    while(n.right) {\n      cstack.push(n)\n      n = n.right\n    }\n    //Copy path to leaf\n    var v = cstack[split-1]\n    cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count))\n    cstack[split-1].key = n.key\n    cstack[split-1].value = n.value\n\n    //Fix up stack\n    for(var i=cstack.length-2; i>=split; --i) {\n      n = cstack[i]\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n    cstack[split-1].left = cstack[split]\n  }\n  //console.log(\"stack=\", cstack.map(function(v) { return v.value }))\n\n  //Remove leaf node\n  n = cstack[cstack.length-1]\n  if(n._color === RED) {\n    //Easy case: removing red leaf\n    //console.log(\"RED leaf\")\n    var p = cstack[cstack.length-2]\n    if(p.left === n) {\n      p.left = null\n    } else if(p.right === n) {\n      p.right = null\n    }\n    cstack.pop()\n    for(var i=0; i<cstack.length; ++i) {\n      cstack[i]._count--\n    }\n    return new RedBlackTree(this.tree._compare, cstack[0])\n  } else {\n    if(n.left || n.right) {\n      //Second easy case:  Single child black parent\n      //console.log(\"BLACK single child\")\n      if(n.left) {\n        swapNode(n, n.left)\n      } else if(n.right) {\n        swapNode(n, n.right)\n      }\n      //Child must be red, so repaint it black to balance color\n      n._color = BLACK\n      for(var i=0; i<cstack.length-1; ++i) {\n        cstack[i]._count--\n      }\n      return new RedBlackTree(this.tree._compare, cstack[0])\n    } else if(cstack.length === 1) {\n      //Third easy case: root\n      //console.log(\"ROOT\")\n      return new RedBlackTree(this.tree._compare, null)\n    } else {\n      //Hard case: Repaint n, and then do some nasty stuff\n      //console.log(\"BLACK leaf no children\")\n      for(var i=0; i<cstack.length; ++i) {\n        cstack[i]._count--\n      }\n      var parent = cstack[cstack.length-2]\n      fixDoubleBlack(cstack)\n      //Fix up links\n      if(parent.left === n) {\n        parent.left = null\n      } else {\n        parent.right = null\n      }\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0])\n}\n\n//Returns key\nObject.defineProperty(iproto, \"key\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1].key\n    }\n    return\n  },\n  enumerable: true\n})\n\n//Returns value\nObject.defineProperty(iproto, \"value\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1].value\n    }\n    return\n  },\n  enumerable: true\n})\n\n\n//Returns the position of this iterator in the sorted list\nObject.defineProperty(iproto, \"index\", {\n  get: function() {\n    var idx = 0\n    var stack = this._stack\n    if(stack.length === 0) {\n      var r = this.tree.root\n      if(r) {\n        return r._count\n      }\n      return 0\n    } else if(stack[stack.length-1].left) {\n      idx = stack[stack.length-1].left._count\n    }\n    for(var s=stack.length-2; s>=0; --s) {\n      if(stack[s+1] === stack[s].right) {\n        ++idx\n        if(stack[s].left) {\n          idx += stack[s].left._count\n        }\n      }\n    }\n    return idx\n  },\n  enumerable: true\n})\n\n//Advances iterator to next element in list\niproto.next = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return\n  }\n  var n = stack[stack.length-1]\n  if(n.right) {\n    n = n.right\n    while(n) {\n      stack.push(n)\n      n = n.left\n    }\n  } else {\n    stack.pop()\n    while(stack.length > 0 && stack[stack.length-1].right === n) {\n      n = stack[stack.length-1]\n      stack.pop()\n    }\n  }\n}\n\n//Checks if iterator is at end of tree\nObject.defineProperty(iproto, \"hasNext\", {\n  get: function() {\n    var stack = this._stack\n    if(stack.length === 0) {\n      return false\n    }\n    if(stack[stack.length-1].right) {\n      return true\n    }\n    for(var s=stack.length-1; s>0; --s) {\n      if(stack[s-1].left === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n})\n\n//Update value\niproto.update = function(value) {\n  var stack = this._stack\n  if(stack.length === 0) {\n    throw new Error(\"Can't update empty node!\")\n  }\n  var cstack = new Array(stack.length)\n  var n = stack[stack.length-1]\n  cstack[cstack.length-1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count)\n  for(var i=stack.length-2; i>=0; --i) {\n    n = stack[i]\n    if(n.left === stack[i+1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0])\n}\n\n//Moves iterator backward one element\niproto.prev = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return\n  }\n  var n = stack[stack.length-1]\n  if(n.left) {\n    n = n.left\n    while(n) {\n      stack.push(n)\n      n = n.right\n    }\n  } else {\n    stack.pop()\n    while(stack.length > 0 && stack[stack.length-1].left === n) {\n      n = stack[stack.length-1]\n      stack.pop()\n    }\n  }\n}\n\n//Checks if iterator is at start of tree\nObject.defineProperty(iproto, \"hasPrev\", {\n  get: function() {\n    var stack = this._stack\n    if(stack.length === 0) {\n      return false\n    }\n    if(stack[stack.length-1].left) {\n      return true\n    }\n    for(var s=stack.length-1; s>0; --s) {\n      if(stack[s-1].right === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n})\n\n//Default comparison function\nfunction defaultCompare(a, b) {\n  if(a < b) {\n    return -1\n  }\n  if(a > b) {\n    return 1\n  }\n  return 0\n}\n\n//Build a tree\nfunction createRBTree(compare) {\n  return new RedBlackTree(compare || defaultCompare, null)\n}","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => enableOverride === null ? createDebug.enabled(namespace) : enableOverride,\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n","/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n","/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n","// The client names we'll allow in the `{name: lib}` pairing.\nconst CLIENT_ALIASES = Object.freeze({\n  pg: 'postgres',\n  postgresql: 'postgres',\n  sqlite: 'sqlite3',\n});\n\nconst SUPPORTED_CLIENTS = Object.freeze(\n  [\n    'mssql',\n    'mysql',\n    'mysql2',\n    'oracledb',\n    'postgres',\n    'redshift',\n    'sqlite3',\n  ].concat(Object.keys(CLIENT_ALIASES))\n);\n\nconst POOL_CONFIG_OPTIONS = Object.freeze([\n  'maxWaitingClients',\n  'testOnBorrow',\n  'fifo',\n  'priorityRange',\n  'autostart',\n  'evictionRunIntervalMillis',\n  'numTestsPerRun',\n  'softIdleTimeoutMillis',\n  'Promise',\n]);\n\n/**\n * Regex that only matches comma's in strings that aren't wrapped in parentheses. Can be used to\n * safely split strings like `id int, name string, body text, primary key (id, name)` into definition\n * rows\n */\nconst COMMA_NO_PAREN_REGEX = /,[\\s](?![^(]*\\))/g;\n\nmodule.exports = {\n  CLIENT_ALIASES,\n  SUPPORTED_CLIENTS,\n  POOL_CONFIG_OPTIONS,\n  COMMA_NO_PAREN_REGEX,\n};\n","function isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\nfunction isObject(value) {\n  return typeof value === 'object' && value !== null;\n}\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nmodule.exports = {\n  isString,\n  isNumber,\n  isBoolean,\n  isUndefined,\n  isObject,\n  isFunction,\n};\n","const isPlainObject = require('lodash/isPlainObject');\nconst isTypedArray = require('lodash/isTypedArray');\nconst { CLIENT_ALIASES } = require('./constants');\nconst { isFunction } = require('./util/is');\n\n// Check if the first argument is an array, otherwise uses all arguments as an\n// array.\n\nfunction normalizeArr() {\n  const args = new Array(arguments.length);\n  for (let i = 0; i < args.length; i++) {\n    args[i] = arguments[i];\n  }\n  if (Array.isArray(args[0])) {\n    return args[0];\n  }\n  return args;\n}\n\nfunction containsUndefined(mixed) {\n  let argContainsUndefined = false;\n\n  if (isTypedArray(mixed)) return false;\n\n  if (mixed && isFunction(mixed.toSQL)) {\n    //Any QueryBuilder or Raw will automatically be validated during compile.\n    return argContainsUndefined;\n  }\n\n  if (Array.isArray(mixed)) {\n    for (let i = 0; i < mixed.length; i++) {\n      if (argContainsUndefined) break;\n      argContainsUndefined = containsUndefined(mixed[i]);\n    }\n  } else if (isPlainObject(mixed)) {\n    Object.keys(mixed).forEach((key) => {\n      if (!argContainsUndefined) {\n        argContainsUndefined = containsUndefined(mixed[key]);\n      }\n    });\n  } else {\n    argContainsUndefined = mixed === undefined;\n  }\n\n  return argContainsUndefined;\n}\n\nfunction getUndefinedIndices(mixed) {\n  const indices = [];\n\n  if (Array.isArray(mixed)) {\n    mixed.forEach((item, index) => {\n      if (containsUndefined(item)) {\n        indices.push(index);\n      }\n    });\n  } else if (isPlainObject(mixed)) {\n    Object.keys(mixed).forEach((key) => {\n      if (containsUndefined(mixed[key])) {\n        indices.push(key);\n      }\n    });\n  } else {\n    indices.push(0);\n  }\n\n  return indices;\n}\n\nfunction addQueryContext(Target) {\n  // Stores or returns (if called with no arguments) context passed to\n  // wrapIdentifier and postProcessResponse hooks\n  Target.prototype.queryContext = function (context) {\n    if (context === undefined) {\n      return this._queryContext;\n    }\n    this._queryContext = context;\n    return this;\n  };\n}\n\nfunction resolveClientNameWithAliases(clientName) {\n  return CLIENT_ALIASES[clientName] || clientName;\n}\n\nmodule.exports = {\n  addQueryContext,\n  containsUndefined,\n  normalizeArr,\n  resolveClientNameWithAliases,\n  getUndefinedIndices,\n};\n","module.exports = function saveAsyncStack(instance, lines) {\n  if (instance.client.config.asyncStackTraces) {\n    // a hack to get a callstack into the client code despite this\n    // node.js bug https://github.com/nodejs/node/issues/11865\n\n    // Save error here but not error trace\n    // reading trace with '--enable-source-maps' flag on node can be very costly\n\n    instance._asyncStack = {\n      error: new Error(),\n      lines,\n    };\n  }\n};\n","// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nconst urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';\n\n/**\n * Generate URL-friendly unique ID. This method uses the non-secure\n * predictable random generator with bigger collision probability.\n * Based on https://github.com/ai/nanoid\n *\n * ```js\n * model.id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqL\"\n * ```\n *\n * @param size Size of the ID. The default size is 21.\n * @returns A random string.\n */\nfunction nanoid(size = 21) {\n  let id = '';\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  let i = size;\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[(Math.random() * 64) | 0];\n  }\n  return id;\n}\n\nmodule.exports = { nanoid };\n","module.exports = function () {};\n","const noop = require('./noop');\n\nconst finallyMixin = (prototype) =>\n  Object.assign(prototype, {\n    finally(onFinally) {\n      return this.then().finally(onFinally);\n    },\n  });\n\n// FYI: Support for `Promise.prototype.finally` was not introduced until Node 9.\n//      Therefore, Knex will need to conditionally inject support for `.finally(..)`\n//      until support for Node 8 is officially dropped.\nmodule.exports = Promise.prototype.finally ? finallyMixin : noop;\n","const clone = require('lodash/clone');\nconst isEmpty = require('lodash/isEmpty');\nconst { callbackify } = require('util');\nconst finallyMixin = require('./util/finally-mixin');\n\nfunction augmentWithBuilderInterface(Target) {\n  Target.prototype.toQuery = function (tz) {\n    let data = this.toSQL(this._method, tz);\n    if (!Array.isArray(data)) data = [data];\n    if (!data.length) {\n      return '';\n    }\n    return data\n      .map((statement) => {\n        return this.client._formatQuery(statement.sql, statement.bindings, tz);\n      })\n      .reduce((a, c) => a.concat(a.endsWith(';') ? '\\n' : ';\\n', c));\n  };\n\n  // Create a new instance of the `Runner`, passing in the current object.\n  Target.prototype.then = function (/* onFulfilled, onRejected */) {\n    let result = this.client.runner(this).run();\n\n    if (this.client.config.asyncStackTraces) {\n      result = result.catch((err) => {\n        err.originalStack = err.stack;\n        const firstLine = err.stack.split('\\n')[0];\n\n        // a hack to get a callstack into the client code despite this\n        // node.js bug https://github.com/nodejs/node/issues/11865\n        // see lib/util/save-async-stack.js for more details\n        const { error, lines } = this._asyncStack;\n        const stackByLines = error.stack.split('\\n');\n        const asyncStack = stackByLines.slice(lines);\n        asyncStack.unshift(firstLine);\n\n        // put the fake more helpful \"async\" stack on the thrown error\n        err.stack = asyncStack.join('\\n');\n        throw err;\n      });\n    }\n\n    return result.then.apply(result, arguments);\n  };\n\n  // Add additional \"options\" to the builder. Typically used for client specific\n  // items, like the `mysql` and `sqlite3` drivers.\n  Target.prototype.options = function (opts) {\n    this._options = this._options || [];\n    this._options.push(clone(opts) || {});\n    return this;\n  };\n\n  // Sets an explicit \"connection\" we wish to use for this query.\n  Target.prototype.connection = function (connection) {\n    this._connection = connection;\n    return this;\n  };\n\n  // Set a debug flag for the current schema query stack.\n  Target.prototype.debug = function (enabled) {\n    this._debug = arguments.length ? enabled : true;\n    return this;\n  };\n\n  // Set the transaction object for this query.\n  Target.prototype.transacting = function (transaction) {\n    if (transaction && transaction.client) {\n      if (!transaction.client.transacting) {\n        transaction.client.logger.warn(\n          `Invalid transaction value: ${transaction.client}`\n        );\n      } else {\n        this.client = transaction.client;\n      }\n    }\n    if (isEmpty(transaction)) {\n      this.client.logger.error(\n        'Invalid value on transacting call, potential bug'\n      );\n      throw Error(\n        'Invalid transacting value (null, undefined or empty object)'\n      );\n    }\n    return this;\n  };\n\n  // Initializes a stream.\n  Target.prototype.stream = function (options) {\n    return this.client.runner(this).stream(options);\n  };\n\n  // Initialize a stream & pipe automatically.\n  Target.prototype.pipe = function (writable, options) {\n    return this.client.runner(this).pipe(writable, options);\n  };\n\n  Target.prototype.asCallback = function (cb) {\n    const promise = this.then();\n    callbackify(() => promise)(cb);\n    return promise;\n  };\n\n  Target.prototype.catch = function (onReject) {\n    return this.then().catch(onReject);\n  };\n\n  Object.defineProperty(Target.prototype, Symbol.toStringTag, {\n    get: () => 'object',\n  });\n\n  finallyMixin(Target.prototype);\n}\n\nmodule.exports = augmentWithBuilderInterface;\n","// Raw\n// -------\nconst { inherits } = require('util');\nconst { EventEmitter } = require('events');\nconst debug = require('debug');\nconst assign = require('lodash/assign');\nconst isPlainObject = require('lodash/isPlainObject');\nconst reduce = require('lodash/reduce');\n\nconst helpers = require('./helpers');\nconst saveAsyncStack = require('./util/save-async-stack');\nconst { nanoid } = require('./util/nanoid');\nconst { isNumber, isObject } = require('./util/is');\n\nconst debugBindings = debug('knex:bindings');\n\nfunction Raw(client) {\n  this.client = client;\n\n  this.sql = '';\n  this.bindings = [];\n\n  // Todo: Deprecate\n  this._wrappedBefore = undefined;\n  this._wrappedAfter = undefined;\n  if (client && client.config) {\n    this._debug = client.config.debug;\n    saveAsyncStack(this, 4);\n  }\n}\n\ninherits(Raw, EventEmitter);\n\nassign(Raw.prototype, {\n  set(sql, bindings) {\n    this.sql = sql;\n    this.bindings =\n      (isObject(bindings) && !bindings.toSQL) || bindings === undefined\n        ? bindings\n        : [bindings];\n\n    return this;\n  },\n\n  timeout(ms, { cancel } = {}) {\n    if (isNumber(ms) && ms > 0) {\n      this._timeout = ms;\n      if (cancel) {\n        this.client.assertCanCancelQuery();\n        this._cancelOnTimeout = true;\n      }\n    }\n    return this;\n  },\n\n  // Wraps the current sql with `before` and `after`.\n  wrap(before, after) {\n    this._wrappedBefore = before;\n    this._wrappedAfter = after;\n    return this;\n  },\n\n  // Calls `toString` on the Knex object.\n  toString() {\n    return this.toQuery();\n  },\n\n  // Returns the raw sql for the query.\n  toSQL(method, tz) {\n    let obj;\n    const formatter = this.client.formatter(this);\n\n    if (Array.isArray(this.bindings)) {\n      obj = replaceRawArrBindings(this, formatter);\n    } else if (this.bindings && isPlainObject(this.bindings)) {\n      obj = replaceKeyBindings(this, formatter);\n    } else {\n      obj = {\n        method: 'raw',\n        sql: this.sql,\n        bindings: this.bindings === undefined ? [] : [this.bindings],\n      };\n    }\n\n    if (this._wrappedBefore) {\n      obj.sql = this._wrappedBefore + obj.sql;\n    }\n    if (this._wrappedAfter) {\n      obj.sql = obj.sql + this._wrappedAfter;\n    }\n\n    obj.options = reduce(this._options, assign, {});\n\n    if (this._timeout) {\n      obj.timeout = this._timeout;\n      if (this._cancelOnTimeout) {\n        obj.cancelOnTimeout = this._cancelOnTimeout;\n      }\n    }\n\n    obj.bindings = obj.bindings || [];\n    if (helpers.containsUndefined(obj.bindings)) {\n      const undefinedBindingIndices = helpers.getUndefinedIndices(\n        this.bindings\n      );\n      debugBindings(obj.bindings);\n      throw new Error(\n        `Undefined binding(s) detected for keys [${undefinedBindingIndices}] when compiling RAW query: ${obj.sql}`\n      );\n    }\n\n    obj.__knexQueryUid = nanoid();\n\n    return obj;\n  },\n});\n\nfunction replaceRawArrBindings(raw, formatter) {\n  const expectedBindings = raw.bindings.length;\n  const values = raw.bindings;\n  let index = 0;\n\n  const sql = raw.sql.replace(/\\\\?\\?\\??/g, function (match) {\n    if (match === '\\\\?') {\n      return match;\n    }\n\n    const value = values[index++];\n\n    if (match === '??') {\n      return formatter.columnize(value);\n    }\n    return formatter.parameter(value);\n  });\n\n  if (expectedBindings !== index) {\n    throw new Error(`Expected ${expectedBindings} bindings, saw ${index}`);\n  }\n\n  return {\n    method: 'raw',\n    sql,\n    bindings: formatter.bindings,\n  };\n}\n\nfunction replaceKeyBindings(raw, formatter) {\n  const values = raw.bindings;\n  const regex = /\\\\?(:(\\w+):(?=::)|:(\\w+):(?!:)|:(\\w+))/g;\n\n  const sql = raw.sql.replace(regex, function (match, p1, p2, p3, p4) {\n    if (match !== p1) {\n      return p1;\n    }\n\n    const part = p2 || p3 || p4;\n    const key = match.trim();\n    const isIdentifier = key[key.length - 1] === ':';\n    const value = values[part];\n\n    if (value === undefined) {\n      if (Object.prototype.hasOwnProperty.call(values, part)) {\n        formatter.bindings.push(value);\n      }\n\n      return match;\n    }\n\n    if (isIdentifier) {\n      return match.replace(p1, formatter.columnize(value));\n    }\n\n    return match.replace(p1, formatter.parameter(value));\n  });\n\n  return {\n    method: 'raw',\n    sql,\n    bindings: formatter.bindings,\n  };\n}\n\n// Allow the `Raw` object to be utilized with full access to the relevant\n// promise API.\nrequire('./interface')(Raw);\nhelpers.addQueryContext(Raw);\n\nmodule.exports = Raw;\n","const Raw = require('./raw');\n\nclass Ref extends Raw {\n  constructor(client, ref) {\n    super(client);\n\n    this.ref = ref;\n    this._schema = null;\n    this._alias = null;\n  }\n\n  withSchema(schema) {\n    this._schema = schema;\n\n    return this;\n  }\n\n  as(alias) {\n    this._alias = alias;\n\n    return this;\n  }\n\n  toSQL() {\n    const string = this._schema ? `${this._schema}.${this.ref}` : this.ref;\n\n    const formatter = this.client.formatter(this);\n\n    const ref = formatter.columnize(string);\n\n    const sql = this._alias ? `${ref} as ${formatter.wrap(this._alias)}` : ref;\n\n    this.set(sql, []);\n\n    return super.toSQL(...arguments);\n  }\n}\n\nmodule.exports = Ref;\n","class KnexTimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'KnexTimeoutError';\n  }\n}\n\nfunction timeout(promise, ms) {\n  return new Promise(function (resolve, reject) {\n    const id = setTimeout(function () {\n      reject(new KnexTimeoutError('operation timed out'));\n    }, ms);\n\n    function wrappedResolve(value) {\n      clearTimeout(id);\n      resolve(value);\n    }\n\n    function wrappedReject(err) {\n      clearTimeout(id);\n      reject(err);\n    }\n\n    promise.then(wrappedResolve, wrappedReject);\n  });\n}\n\nmodule.exports.KnexTimeoutError = KnexTimeoutError;\nmodule.exports.timeout = timeout;\n","const { KnexTimeoutError } = require('./util/timeout');\nconst { timeout } = require('./util/timeout');\n\nlet Transform;\n\n// The \"Runner\" constructor takes a \"builder\" (query, schema, or raw)\n// and runs through each of the query statements, calling any additional\n// \"output\" method provided alongside the query and bindings.\nfunction Runner(client, builder) {\n  this.client = client;\n  this.builder = builder;\n  this.queries = [];\n\n  // The \"connection\" object is set on the runner when\n  // \"run\" is called.\n  this.connection = void 0;\n}\n\nObject.assign(Runner.prototype, {\n  // \"Run\" the target, calling \"toSQL\" on the builder, returning\n  // an object or array of queries to run, each of which are run on\n  // a single connection.\n  run() {\n    const runner = this;\n    return (\n      this.ensureConnection(function (connection) {\n        runner.connection = connection;\n\n        runner.client.emit('start', runner.builder);\n        runner.builder.emit('start', runner.builder);\n        const sql = runner.builder.toSQL();\n\n        if (runner.builder._debug) {\n          runner.client.logger.debug(sql);\n        }\n\n        if (Array.isArray(sql)) {\n          return runner.queryArray(sql);\n        }\n        return runner.query(sql);\n      })\n\n        // If there are any \"error\" listeners, we fire an error event\n        // and then re-throw the error to be eventually handled by\n        // the promise chain. Useful if you're wrapping in a custom `Promise`.\n        .catch(function (err) {\n          if (runner.builder._events && runner.builder._events.error) {\n            runner.builder.emit('error', err);\n          }\n          throw err;\n        })\n\n        // Fire a single \"end\" event on the builder when\n        // all queries have successfully completed.\n        .then(function (res) {\n          runner.builder.emit('end');\n          return res;\n        })\n    );\n  },\n\n  // Stream the result set, by passing through to the dialect's streaming\n  // capabilities. If the options are\n  stream(options, handler) {\n    // If we specify stream(handler).then(...\n    if (arguments.length === 1) {\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      }\n    }\n\n    // Determines whether we emit an error or throw here.\n    const hasHandler = typeof handler === 'function';\n\n    // Lazy-load the \"Transform\" dependency.\n    Transform = Transform || require('stream').Transform;\n\n    const runner = this;\n    const queryContext = this.builder.queryContext();\n    let queryStream;\n\n    const stream = new Transform({\n      objectMode: true,\n      transform: (chunk, _, callback) => {\n        callback(null, this.client.postProcessResponse(chunk, queryContext));\n      },\n      destroy() {\n        // For some reason destroy is not available for mssql on Node 14. Might be a problem with tedious: https://github.com/tediousjs/tedious/issues/1139\n        if (queryStream && queryStream.destroy) {\n          queryStream.destroy(new Error('stream destroyed'));\n        }\n      },\n    });\n    stream.on('pipe', (qs) => {\n      queryStream = qs;\n    });\n\n    let hasConnection = false;\n    const promise = this.ensureConnection(function (connection) {\n      hasConnection = true;\n      runner.connection = connection;\n      try {\n        const sql = runner.builder.toSQL();\n\n        if (Array.isArray(sql) && hasHandler) {\n          throw new Error(\n            'The stream may only be used with a single query statement.'\n          );\n        }\n\n        return runner.client.stream(runner.connection, sql, stream, options);\n      } catch (e) {\n        stream.emit('error', e);\n        throw e;\n      }\n    });\n\n    // If a function is passed to handle the stream, send the stream\n    // there and return the promise, otherwise just return the stream\n    // and the promise will take care of itself.\n    if (hasHandler) {\n      handler(stream);\n      return promise;\n    }\n\n    // Emit errors on the stream if the error occurred before a connection\n    // could be acquired.\n    // If the connection was acquired, assume the error occurred in the client\n    // code and has already been emitted on the stream. Don't emit it twice.\n    promise.catch(function (err) {\n      if (!hasConnection) stream.emit('error', err);\n    });\n    return stream;\n  },\n\n  // Allow you to pipe the stream to a writable stream.\n  pipe(writable, options) {\n    return this.stream(options).pipe(writable);\n  },\n\n  // \"Runs\" a query, returning a promise. All queries specified by the builder are guaranteed\n  // to run in sequence, and on the same connection, especially helpful when schema building\n  // and dealing with foreign key constraints, etc.\n  query: async function (obj) {\n    const { __knexUid, __knexTxId } = this.connection;\n\n    this.builder.emit('query', Object.assign({ __knexUid, __knexTxId }, obj));\n\n    const runner = this;\n    let queryPromise = this.client.query(this.connection, obj);\n\n    if (obj.timeout) {\n      queryPromise = timeout(queryPromise, obj.timeout);\n    }\n\n    // Await the return value of client.processResponse; in the case of sqlite3's\n    // dropColumn()/renameColumn(), it will be a Promise for the transaction\n    // containing the complete rename procedure.\n    return queryPromise\n      .then((resp) => this.client.processResponse(resp, runner))\n      .then((processedResponse) => {\n        const queryContext = this.builder.queryContext();\n        const postProcessedResponse = this.client.postProcessResponse(\n          processedResponse,\n          queryContext\n        );\n\n        this.builder.emit(\n          'query-response',\n          postProcessedResponse,\n          Object.assign({ __knexUid, __knexTxId }, obj),\n          this.builder\n        );\n\n        this.client.emit(\n          'query-response',\n          postProcessedResponse,\n          Object.assign({ __knexUid, __knexTxId }, obj),\n          this.builder\n        );\n\n        return postProcessedResponse;\n      })\n      .catch((error) => {\n        if (!(error instanceof KnexTimeoutError)) {\n          return Promise.reject(error);\n        }\n        const { timeout, sql, bindings } = obj;\n\n        let cancelQuery;\n        if (obj.cancelOnTimeout) {\n          cancelQuery = this.client.cancelQuery(this.connection);\n        } else {\n          // If we don't cancel the query, we need to mark the connection as disposed so that\n          // it gets destroyed by the pool and is never used again. If we don't do this and\n          // return the connection to the pool, it will be useless until the current operation\n          // that timed out, finally finishes.\n          this.connection.__knex__disposed = error;\n          cancelQuery = Promise.resolve();\n        }\n\n        return cancelQuery\n          .catch((cancelError) => {\n            // If the cancellation failed, we need to mark the connection as disposed so that\n            // it gets destroyed by the pool and is never used again. If we don't do this and\n            // return the connection to the pool, it will be useless until the current operation\n            // that timed out, finally finishes.\n            this.connection.__knex__disposed = error;\n\n            // cancellation failed\n            throw Object.assign(cancelError, {\n              message: `After query timeout of ${timeout}ms exceeded, cancelling of query failed.`,\n              sql,\n              bindings,\n              timeout,\n            });\n          })\n          .then(() => {\n            // cancellation succeeded, rethrow timeout error\n            throw Object.assign(error, {\n              message: `Defined query timeout of ${timeout}ms exceeded when running query.`,\n              sql,\n              bindings,\n              timeout,\n            });\n          });\n      })\n      .catch((error) => {\n        this.builder.emit(\n          'query-error',\n          error,\n          Object.assign({ __knexUid, __knexTxId }, obj)\n        );\n        throw error;\n      });\n  },\n\n  // In the case of the \"schema builder\" we call `queryArray`, which runs each\n  // of the queries in sequence.\n  async queryArray(queries) {\n    if (queries.length === 1) {\n      return this.query(queries[0]);\n    }\n\n    const results = [];\n    for (const query of queries) {\n      results.push(await this.query(query));\n    }\n    return results;\n  },\n\n  // Check whether there's a transaction flag, and that it has a connection.\n  async ensureConnection(cb) {\n    // Use override from a builder if passed\n    if (this.builder._connection) {\n      return cb(this.builder._connection);\n    }\n\n    if (this.connection) {\n      return cb(this.connection);\n    }\n    return this.client\n      .acquireConnection()\n      .catch((error) => {\n        if (!(error instanceof KnexTimeoutError)) {\n          return Promise.reject(error);\n        }\n        if (this.builder) {\n          error.sql = this.builder.sql;\n          error.bindings = this.builder.bindings;\n        }\n        throw error;\n      })\n      .then(async (connection) => {\n        try {\n          return await cb(connection);\n        } finally {\n          await this.client.releaseConnection(this.connection);\n        }\n      });\n  },\n});\n\nmodule.exports = Runner;\n","const assert = require('assert');\n\n// JoinClause\n// -------\n\n// The \"JoinClause\" is an object holding any necessary info about a join,\n// including the type, and any associated tables & columns being joined.\nfunction JoinClause(table, type, schema) {\n  this.schema = schema;\n  this.table = table;\n  this.joinType = type;\n  this.and = this;\n  this.clauses = [];\n}\n\nfunction getClauseFromArguments(compilerType, bool, first, operator, second) {\n  let data = null;\n\n  if (typeof first === 'function') {\n    data = {\n      type: 'onWrapped',\n      value: first,\n      bool: bool,\n    };\n  } else {\n    switch (arguments.length) {\n      case 3: {\n        data = { type: 'onRaw', value: first, bool };\n        break;\n      }\n      case 4:\n        data = {\n          type: compilerType,\n          column: first,\n          operator: '=',\n          value: operator,\n          bool,\n        };\n        break;\n      default:\n        data = {\n          type: compilerType,\n          column: first,\n          operator,\n          value: second,\n          bool,\n        };\n    }\n  }\n\n  return data;\n}\n\nObject.assign(JoinClause.prototype, {\n  grouping: 'join',\n\n  // Adds an \"on\" clause to the current join object.\n  on(first) {\n    if (typeof first === 'object' && typeof first.toSQL !== 'function') {\n      const keys = Object.keys(first);\n      let i = -1;\n      const method = this._bool() === 'or' ? 'orOn' : 'on';\n      while (++i < keys.length) {\n        this[method](keys[i], first[keys[i]]);\n      }\n      return this;\n    }\n\n    const data = getClauseFromArguments('onBasic', this._bool(), ...arguments);\n\n    if (data) {\n      this.clauses.push(data);\n    }\n\n    return this;\n  },\n\n  // Adds a \"using\" clause to the current join.\n  using(column) {\n    return this.clauses.push({ type: 'onUsing', column, bool: this._bool() });\n  },\n\n  /*// Adds an \"and on\" clause to the current join object.\n  andOn() {\n    return this.on.apply(this, arguments);\n  },*/\n\n  // Adds an \"or on\" clause to the current join object.\n  orOn(first, operator, second) {\n    return this._bool('or').on.apply(this, arguments);\n  },\n\n  onVal(first) {\n    if (typeof first === 'object' && typeof first.toSQL !== 'function') {\n      const keys = Object.keys(first);\n      let i = -1;\n      const method = this._bool() === 'or' ? 'orOnVal' : 'onVal';\n      while (++i < keys.length) {\n        this[method](keys[i], first[keys[i]]);\n      }\n      return this;\n    }\n\n    const data = getClauseFromArguments('onVal', this._bool(), ...arguments);\n\n    if (data) {\n      this.clauses.push(data);\n    }\n\n    return this;\n  },\n\n  andOnVal() {\n    return this.onVal(...arguments);\n  },\n\n  orOnVal() {\n    return this._bool('or').onVal(...arguments);\n  },\n\n  onBetween(column, values) {\n    assert(\n      Array.isArray(values),\n      'The second argument to onBetween must be an array.'\n    );\n    assert(\n      values.length === 2,\n      'You must specify 2 values for the onBetween clause'\n    );\n    this.clauses.push({\n      type: 'onBetween',\n      column,\n      value: values,\n      bool: this._bool(),\n      not: this._not(),\n    });\n    return this;\n  },\n\n  onNotBetween(column, values) {\n    return this._not(true).onBetween(column, values);\n  },\n\n  orOnBetween(column, values) {\n    return this._bool('or').onBetween(column, values);\n  },\n\n  orOnNotBetween(column, values) {\n    return this._bool('or')._not(true).onBetween(column, values);\n  },\n\n  onIn(column, values) {\n    if (Array.isArray(values) && values.length === 0) return this.on(1, '=', 0);\n    this.clauses.push({\n      type: 'onIn',\n      column,\n      value: values,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  onNotIn(column, values) {\n    return this._not(true).onIn(column, values);\n  },\n\n  orOnIn(column, values) {\n    return this._bool('or').onIn(column, values);\n  },\n\n  orOnNotIn(column, values) {\n    return this._bool('or')._not(true).onIn(column, values);\n  },\n\n  onNull(column) {\n    this.clauses.push({\n      type: 'onNull',\n      column,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  orOnNull(callback) {\n    return this._bool('or').onNull(callback);\n  },\n\n  onNotNull(callback) {\n    return this._not(true).onNull(callback);\n  },\n\n  orOnNotNull(callback) {\n    return this._not(true)._bool('or').onNull(callback);\n  },\n\n  onExists(callback) {\n    this.clauses.push({\n      type: 'onExists',\n      value: callback,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  orOnExists(callback) {\n    return this._bool('or').onExists(callback);\n  },\n\n  onNotExists(callback) {\n    return this._not(true).onExists(callback);\n  },\n\n  orOnNotExists(callback) {\n    return this._not(true)._bool('or').onExists(callback);\n  },\n\n  // Explicitly set the type of join, useful within a function when creating a grouped join.\n  type(type) {\n    this.joinType = type;\n    return this;\n  },\n\n  _bool(bool) {\n    if (arguments.length === 1) {\n      this._boolFlag = bool;\n      return this;\n    }\n    const ret = this._boolFlag || 'and';\n    this._boolFlag = 'and';\n    return ret;\n  },\n\n  _not(val) {\n    if (arguments.length === 1) {\n      this._notFlag = val;\n      return this;\n    }\n    const ret = this._notFlag;\n    this._notFlag = false;\n    return ret;\n  },\n});\n\nObject.defineProperty(JoinClause.prototype, 'or', {\n  get() {\n    return this._bool('or');\n  },\n});\n\nJoinClause.prototype.andOn = JoinClause.prototype.on;\nJoinClause.prototype.andOnIn = JoinClause.prototype.onIn;\nJoinClause.prototype.andOnNotIn = JoinClause.prototype.onNotIn;\nJoinClause.prototype.andOnNull = JoinClause.prototype.onNull;\nJoinClause.prototype.andOnNotNull = JoinClause.prototype.onNotNull;\nJoinClause.prototype.andOnExists = JoinClause.prototype.onExists;\nJoinClause.prototype.andOnNotExists = JoinClause.prototype.onNotExists;\nJoinClause.prototype.andOnBetween = JoinClause.prototype.onBetween;\nJoinClause.prototype.andOnNotBetween = JoinClause.prototype.onNotBetween;\n\nmodule.exports = JoinClause;\n","/**\n * internal constants, do not use in application code\n */\nmodule.exports = {\n  lockMode: {\n    forShare: 'forShare',\n    forUpdate: 'forUpdate',\n  },\n  waitMode: {\n    skipLocked: 'skipLocked',\n    noWait: 'noWait',\n  },\n};\n","// Builder\n// -------\nconst assert = require('assert');\nconst { inherits } = require('util');\nconst { EventEmitter } = require('events');\n\nconst Raw = require('../raw');\nconst helpers = require('../helpers');\nconst JoinClause = require('./joinclause');\nconst assign = require('lodash/assign');\nconst clone = require('lodash/clone');\nconst each = require('lodash/each');\nconst isEmpty = require('lodash/isEmpty');\nconst isPlainObject = require('lodash/isPlainObject');\nconst last = require('lodash/last');\nconst reject = require('lodash/reject');\nconst tail = require('lodash/tail');\nconst toArray = require('lodash/toArray');\nconst saveAsyncStack = require('../util/save-async-stack');\nconst { isBoolean, isNumber, isObject, isString } = require('../util/is');\n\nconst { lockMode, waitMode } = require('./constants');\n\n// Sub-builder for onConflict clauses\nfunction OnConflictBuilder(builder, columns) {\n  this.builder = builder;\n  this._columns = columns;\n}\n\nassign(OnConflictBuilder.prototype, {\n  // Sets insert query to ignore conflicts\n  ignore() {\n    this.builder._single.onConflict = this._columns;\n    this.builder._single.ignore = true;\n    return this.builder;\n  },\n\n  // Sets insert query to update on conflict\n  merge(updates) {\n    this.builder._single.onConflict = this._columns;\n    this.builder._single.merge = { updates };\n    return this.builder;\n  },\n\n  // Prevent\n  then() {\n    throw new Error(\n      'Incomplete onConflict clause. .onConflict() must be diretly followed by either .merge() or .ignore()'\n    );\n  },\n});\n\n// Typically called from `knex.builder`,\n// start a new query building chain.\nfunction Builder(client) {\n  this.client = client;\n  this.and = this;\n  this._single = {};\n  this._statements = [];\n  this._method = 'select';\n  if (client.config) {\n    saveAsyncStack(this, 5);\n    this._debug = client.config.debug;\n  }\n  // Internal flags used in the builder.\n  this._joinFlag = 'inner';\n  this._boolFlag = 'and';\n  this._notFlag = false;\n  this._asColumnFlag = false;\n}\n\ninherits(Builder, EventEmitter);\n\nconst validateWithArgs = function (alias, statement, method) {\n  if (typeof alias !== 'string') {\n    throw new Error(`${method}() first argument must be a string`);\n  }\n  if (\n    typeof statement === 'function' ||\n    statement instanceof Builder ||\n    statement instanceof Raw\n  ) {\n    return;\n  }\n  throw new Error(\n    `${method}() second argument must be a function / QueryBuilder or a raw`\n  );\n};\n\nassign(Builder.prototype, {\n  toString() {\n    return this.toQuery();\n  },\n\n  // Convert the current query \"toSQL\"\n  toSQL(method, tz) {\n    return this.client.queryCompiler(this).toSQL(method || this._method, tz);\n  },\n\n  // Create a shallow clone of the current query builder.\n  clone() {\n    const cloned = new this.constructor(this.client);\n    cloned._method = this._method;\n    cloned._single = clone(this._single);\n    cloned._statements = clone(this._statements);\n    cloned._debug = this._debug;\n\n    // `_option` is assigned by the `Interface` mixin.\n    if (this._options !== undefined) {\n      cloned._options = clone(this._options);\n    }\n    if (this._queryContext !== undefined) {\n      cloned._queryContext = clone(this._queryContext);\n    }\n    if (this._connection !== undefined) {\n      cloned._connection = this._connection;\n    }\n\n    return cloned;\n  },\n\n  timeout(ms, { cancel } = {}) {\n    if (isNumber(ms) && ms > 0) {\n      this._timeout = ms;\n      if (cancel) {\n        this.client.assertCanCancelQuery();\n        this._cancelOnTimeout = true;\n      }\n    }\n    return this;\n  },\n\n  // With\n  // ------\n\n  with(alias, statement) {\n    validateWithArgs(alias, statement, 'with');\n    return this.withWrapped(alias, statement);\n  },\n\n  // Helper for compiling any advanced `with` queries.\n  withWrapped(alias, query) {\n    this._statements.push({\n      grouping: 'with',\n      type: 'withWrapped',\n      alias: alias,\n      value: query,\n    });\n    return this;\n  },\n\n  // With Recursive\n  // ------\n\n  withRecursive(alias, statement) {\n    validateWithArgs(alias, statement, 'withRecursive');\n    return this.withRecursiveWrapped(alias, statement);\n  },\n\n  // Helper for compiling any advanced `withRecursive` queries.\n  withRecursiveWrapped(alias, query) {\n    this.withWrapped(alias, query);\n    this._statements[this._statements.length - 1].recursive = true;\n    return this;\n  },\n\n  // Select\n  // ------\n\n  // Adds a column or columns to the list of \"columns\"\n  // being selected on the query.\n  columns(column) {\n    if (!column && column !== 0) return this;\n    this._statements.push({\n      grouping: 'columns',\n      value: helpers.normalizeArr.apply(null, arguments),\n    });\n    return this;\n  },\n\n  // Allow for a sub-select to be explicitly aliased as a column,\n  // without needing to compile the query in a where.\n  as(column) {\n    this._single.as = column;\n    return this;\n  },\n\n  // Adds a single hint or an array of hits to the list of \"hintComments\" on the query.\n  hintComment(hints) {\n    hints = Array.isArray(hints) ? hints : [hints]\n    if (hints.some((hint) => !isString(hint))) {\n      throw new Error('Hint comment must be a string');\n    }\n    if (hints.some((hint) => hint.includes('/*') || hint.includes('*/'))) {\n      throw new Error('Hint comment cannot include \"/*\" or \"*/\"');\n    }\n    if (hints.some((hint) => hint.includes('?'))) {\n      throw new Error('Hint comment cannot include \"?\"');\n    }\n    this._statements.push({\n      grouping: 'hintComments',\n      value: hints,\n    })\n    return this;\n  },\n\n  // Prepends the `schemaName` on `tableName` defined by `.table` and `.join`.\n  withSchema(schemaName) {\n    this._single.schema = schemaName;\n    return this;\n  },\n\n  // Sets the `tableName` on the query.\n  // Alias to \"from\" for select and \"into\" for insert statements\n  // e.g. builder.insert({a: value}).into('tableName')\n  // `options`: options object containing keys:\n  //   - `only`: whether the query should use SQL's ONLY to not return\n  //           inheriting table data. Defaults to false.\n  table(tableName, options = {}) {\n    this._single.table = tableName;\n    this._single.only = options.only === true;\n    return this;\n  },\n\n  // Adds a `distinct` clause to the query.\n  distinct() {\n    this._statements.push({\n      grouping: 'columns',\n      value: helpers.normalizeArr.apply(null, arguments),\n      distinct: true,\n    });\n    return this;\n  },\n\n  distinctOn() {\n    const value = helpers.normalizeArr.apply(null, arguments);\n    if (isEmpty(value)) {\n      throw new Error('distinctOn requires atleast on argument');\n    }\n    this._statements.push({\n      grouping: 'columns',\n      value,\n      distinctOn: true,\n    });\n    return this;\n  },\n\n  // Adds a join clause to the query, allowing for advanced joins\n  // with an anonymous function as the second argument.\n  // function(table, first, operator, second)\n  join(table, first) {\n    let join;\n    const { schema } = this._single;\n    const joinType = this._joinType();\n    if (typeof first === 'function') {\n      join = new JoinClause(table, joinType, schema);\n      first.call(join, join);\n    } else if (joinType === 'raw') {\n      join = new JoinClause(this.client.raw(table, first), 'raw');\n    } else {\n      join = new JoinClause(\n        table,\n        joinType,\n        table instanceof Builder ? undefined : schema\n      );\n      if (arguments.length > 1) {\n        join.on.apply(join, toArray(arguments).slice(1));\n      }\n    }\n    this._statements.push(join);\n    return this;\n  },\n\n  // JOIN blocks:\n  innerJoin() {\n    return this._joinType('inner').join.apply(this, arguments);\n  },\n  leftJoin() {\n    return this._joinType('left').join.apply(this, arguments);\n  },\n  leftOuterJoin() {\n    return this._joinType('left outer').join.apply(this, arguments);\n  },\n  rightJoin() {\n    return this._joinType('right').join.apply(this, arguments);\n  },\n  rightOuterJoin() {\n    return this._joinType('right outer').join.apply(this, arguments);\n  },\n  outerJoin() {\n    return this._joinType('outer').join.apply(this, arguments);\n  },\n  fullOuterJoin() {\n    return this._joinType('full outer').join.apply(this, arguments);\n  },\n  crossJoin() {\n    return this._joinType('cross').join.apply(this, arguments);\n  },\n  joinRaw() {\n    return this._joinType('raw').join.apply(this, arguments);\n  },\n\n  // The where function can be used in several ways:\n  // The most basic is `where(key, value)`, which expands to\n  // where key = value.\n  where(column, operator, value) {\n    // Support \"where true || where false\"\n    if (column === false || column === true) {\n      return this.where(1, '=', column ? 1 : 0);\n    }\n\n    // Check if the column is a function, in which case it's\n    // a where statement wrapped in parens.\n    if (typeof column === 'function') {\n      return this.whereWrapped(column);\n    }\n\n    // Allow a raw statement to be passed along to the query.\n    if (column instanceof Raw && arguments.length === 1)\n      return this.whereRaw(column);\n\n    // Allows `where({id: 2})` syntax.\n    if (isObject(column) && !(column instanceof Raw))\n      return this._objectWhere(column);\n\n    // Enable the where('key', value) syntax, only when there\n    // are explicitly two arguments passed, so it's not possible to\n    // do where('key', '!=') and have that turn into where key != null\n    if (arguments.length === 2) {\n      value = operator;\n      operator = '=';\n\n      // If the value is null, and it's a two argument query,\n      // we assume we're going for a `whereNull`.\n      if (value === null) {\n        return this.whereNull(column);\n      }\n    }\n\n    // lower case the operator for comparison purposes\n    const checkOperator = `${operator}`.toLowerCase().trim();\n\n    // If there are 3 arguments, check whether 'in' is one of them.\n    if (arguments.length === 3) {\n      if (checkOperator === 'in' || checkOperator === 'not in') {\n        return this._not(checkOperator === 'not in').whereIn(\n          arguments[0],\n          arguments[2]\n        );\n      }\n      if (checkOperator === 'between' || checkOperator === 'not between') {\n        return this._not(checkOperator === 'not between').whereBetween(\n          arguments[0],\n          arguments[2]\n        );\n      }\n    }\n\n    // If the value is still null, check whether they're meaning\n    // where value is null\n    if (value === null) {\n      // Check for .where(key, 'is', null) or .where(key, 'is not', 'null');\n      if (checkOperator === 'is' || checkOperator === 'is not') {\n        return this._not(checkOperator === 'is not').whereNull(column);\n      }\n    }\n\n    // Push onto the where statement stack.\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereBasic',\n      column,\n      operator,\n      value,\n      not: this._not(),\n      bool: this._bool(),\n      asColumn: this._asColumnFlag,\n    });\n    return this;\n  },\n\n  whereColumn(column, operator, rightColumn) {\n    this._asColumnFlag = true;\n    this.where.apply(this, arguments);\n    this._asColumnFlag = false;\n    return this;\n  },\n\n  // Adds an `or where` clause to the query.\n  orWhere() {\n    this._bool('or');\n    const obj = arguments[0];\n    if (isObject(obj) && !(obj instanceof Raw)) {\n      return this.whereWrapped(function () {\n        for (const key in obj) {\n          this.andWhere(key, obj[key]);\n        }\n      });\n    }\n    return this.where.apply(this, arguments);\n  },\n\n  orWhereColumn() {\n    this._bool('or');\n    const obj = arguments[0];\n    if (isObject(obj) && !(obj instanceof Raw)) {\n      return this.whereWrapped(function () {\n        for (const key in obj) {\n          this.andWhereColumn(key, '=', obj[key]);\n        }\n      });\n    }\n    return this.whereColumn.apply(this, arguments);\n  },\n\n  // Adds an `not where` clause to the query.\n  whereNot() {\n    if (arguments.length >= 2) {\n      if (arguments[1] === 'in' || arguments[1] === 'between') {\n        this.client.logger.warn(\n          'whereNot is not suitable for \"in\" and \"between\" type subqueries. You should use \"not in\" and \"not between\" instead.'\n        );\n      }\n    }\n    return this._not(true).where.apply(this, arguments);\n  },\n\n  whereNotColumn() {\n    return this._not(true).whereColumn.apply(this, arguments);\n  },\n\n  // Adds an `or not where` clause to the query.\n  orWhereNot() {\n    return this._bool('or').whereNot.apply(this, arguments);\n  },\n\n  orWhereNotColumn() {\n    return this._bool('or').whereNotColumn.apply(this, arguments);\n  },\n\n  // Processes an object literal provided in a \"where\" clause.\n  _objectWhere(obj) {\n    const boolVal = this._bool();\n    const notVal = this._not() ? 'Not' : '';\n    for (const key in obj) {\n      this[boolVal + 'Where' + notVal](key, obj[key]);\n    }\n    return this;\n  },\n\n  // Adds a raw `where` clause to the query.\n  whereRaw(sql, bindings) {\n    const raw = sql instanceof Raw ? sql : this.client.raw(sql, bindings);\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereRaw',\n      value: raw,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  orWhereRaw(sql, bindings) {\n    return this._bool('or').whereRaw(sql, bindings);\n  },\n\n  // Helper for compiling any advanced `where` queries.\n  whereWrapped(callback) {\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereWrapped',\n      value: callback,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  // Adds a `where exists` clause to the query.\n  whereExists(callback) {\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereExists',\n      value: callback,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  // Adds an `or where exists` clause to the query.\n  orWhereExists(callback) {\n    return this._bool('or').whereExists(callback);\n  },\n\n  // Adds a `where not exists` clause to the query.\n  whereNotExists(callback) {\n    return this._not(true).whereExists(callback);\n  },\n\n  // Adds a `or where not exists` clause to the query.\n  orWhereNotExists(callback) {\n    return this._bool('or').whereNotExists(callback);\n  },\n\n  // Adds a `where in` clause to the query.\n  whereIn(column, values) {\n    if (Array.isArray(values) && isEmpty(values))\n      return this.where(this._not());\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereIn',\n      column,\n      value: values,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  // Adds a `or where in` clause to the query.\n  orWhereIn(column, values) {\n    return this._bool('or').whereIn(column, values);\n  },\n\n  // Adds a `where not in` clause to the query.\n  whereNotIn(column, values) {\n    return this._not(true).whereIn(column, values);\n  },\n\n  // Adds a `or where not in` clause to the query.\n  orWhereNotIn(column, values) {\n    return this._bool('or')._not(true).whereIn(column, values);\n  },\n\n  // Adds a `where null` clause to the query.\n  whereNull(column) {\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereNull',\n      column,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  // Adds a `or where null` clause to the query.\n  orWhereNull(column) {\n    return this._bool('or').whereNull(column);\n  },\n\n  // Adds a `where not null` clause to the query.\n  whereNotNull(column) {\n    return this._not(true).whereNull(column);\n  },\n\n  // Adds a `or where not null` clause to the query.\n  orWhereNotNull(column) {\n    return this._bool('or').whereNotNull(column);\n  },\n\n  // Adds a `where between` clause to the query.\n  whereBetween(column, values) {\n    assert(\n      Array.isArray(values),\n      'The second argument to whereBetween must be an array.'\n    );\n    assert(\n      values.length === 2,\n      'You must specify 2 values for the whereBetween clause'\n    );\n    this._statements.push({\n      grouping: 'where',\n      type: 'whereBetween',\n      column,\n      value: values,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  // Adds a `where not between` clause to the query.\n  whereNotBetween(column, values) {\n    return this._not(true).whereBetween(column, values);\n  },\n\n  // Adds a `or where between` clause to the query.\n  orWhereBetween(column, values) {\n    return this._bool('or').whereBetween(column, values);\n  },\n\n  // Adds a `or where not between` clause to the query.\n  orWhereNotBetween(column, values) {\n    return this._bool('or').whereNotBetween(column, values);\n  },\n\n  // Adds a `group by` clause to the query.\n  groupBy(item) {\n    if (item instanceof Raw) {\n      return this.groupByRaw.apply(this, arguments);\n    }\n    this._statements.push({\n      grouping: 'group',\n      type: 'groupByBasic',\n      value: helpers.normalizeArr.apply(null, arguments),\n    });\n    return this;\n  },\n\n  // Adds a raw `group by` clause to the query.\n  groupByRaw(sql, bindings) {\n    const raw = sql instanceof Raw ? sql : this.client.raw(sql, bindings);\n    this._statements.push({\n      grouping: 'group',\n      type: 'groupByRaw',\n      value: raw,\n    });\n    return this;\n  },\n\n  // Adds a `order by` clause to the query.\n  orderBy(column, direction) {\n    if (Array.isArray(column)) {\n      return this._orderByArray(column);\n    }\n    this._statements.push({\n      grouping: 'order',\n      type: 'orderByBasic',\n      value: column,\n      direction,\n    });\n    return this;\n  },\n\n  // Adds a `order by` with multiple columns to the query.\n  _orderByArray(columnDefs) {\n    for (let i = 0; i < columnDefs.length; i++) {\n      const columnInfo = columnDefs[i];\n      if (isObject(columnInfo)) {\n        this._statements.push({\n          grouping: 'order',\n          type: 'orderByBasic',\n          value: columnInfo['column'],\n          direction: columnInfo['order'],\n        });\n      } else if (isString(columnInfo)) {\n        this._statements.push({\n          grouping: 'order',\n          type: 'orderByBasic',\n          value: columnInfo,\n        });\n      }\n    }\n    return this;\n  },\n\n  // Add a raw `order by` clause to the query.\n  orderByRaw(sql, bindings) {\n    const raw = sql instanceof Raw ? sql : this.client.raw(sql, bindings);\n    this._statements.push({\n      grouping: 'order',\n      type: 'orderByRaw',\n      value: raw,\n    });\n    return this;\n  },\n\n  _union(clause, args) {\n    let callbacks = args[0];\n    let wrap = args[1];\n    if (args.length === 1 || (args.length === 2 && isBoolean(wrap))) {\n      if (!Array.isArray(callbacks)) {\n        callbacks = [callbacks];\n      }\n      for (let i = 0, l = callbacks.length; i < l; i++) {\n        this._statements.push({\n          grouping: 'union',\n          clause: clause,\n          value: callbacks[i],\n          wrap: wrap || false,\n        });\n      }\n    } else {\n      callbacks = toArray(args).slice(0, args.length - 1);\n      wrap = args[args.length - 1];\n      if (!isBoolean(wrap)) {\n        callbacks.push(wrap);\n        wrap = false;\n      }\n      this._union(clause, [callbacks, wrap]);\n    }\n    return this;\n  },\n\n  // Add a union statement to the query.\n  union(...args) {\n    return this._union('union', args);\n  },\n\n  // Adds a union all statement to the query.\n  unionAll(...args) {\n    return this._union('union all', args);\n  },\n\n  // Adds an intersect statement to the query\n  intersect(callbacks, wrap) {\n    if (arguments.length === 1 || (arguments.length === 2 && isBoolean(wrap))) {\n      if (!Array.isArray(callbacks)) {\n        callbacks = [callbacks];\n      }\n      for (let i = 0, l = callbacks.length; i < l; i++) {\n        this._statements.push({\n          grouping: 'union',\n          clause: 'intersect',\n          value: callbacks[i],\n          wrap: wrap || false,\n        });\n      }\n    } else {\n      callbacks = toArray(arguments).slice(0, arguments.length - 1);\n      wrap = arguments[arguments.length - 1];\n      if (!isBoolean(wrap)) {\n        callbacks.push(wrap);\n        wrap = false;\n      }\n      this.intersect(callbacks, wrap);\n    }\n    return this;\n  },\n\n  // Adds a `having` clause to the query.\n  having(column, operator, value) {\n    if (column instanceof Raw && arguments.length === 1) {\n      return this.havingRaw(column);\n    }\n\n    // Check if the column is a function, in which case it's\n    // a having statement wrapped in parens.\n    if (typeof column === 'function') {\n      return this.havingWrapped(column);\n    }\n\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingBasic',\n      column,\n      operator,\n      value,\n      bool: this._bool(),\n      not: this._not(),\n    });\n    return this;\n  },\n\n  orHaving: function orHaving() {\n    this._bool('or');\n    const obj = arguments[0];\n    if (isObject(obj) && !(obj instanceof Raw)) {\n      return this.havingWrapped(function () {\n        for (const key in obj) {\n          this.andHaving(key, obj[key]);\n        }\n      });\n    }\n    return this.having.apply(this, arguments);\n  },\n\n  // Helper for compiling any advanced `having` queries.\n  havingWrapped(callback) {\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingWrapped',\n      value: callback,\n      bool: this._bool(),\n      not: this._not(),\n    });\n    return this;\n  },\n\n  havingNull(column) {\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingNull',\n      column,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  orHavingNull(callback) {\n    return this._bool('or').havingNull(callback);\n  },\n\n  havingNotNull(callback) {\n    return this._not(true).havingNull(callback);\n  },\n\n  orHavingNotNull(callback) {\n    return this._not(true)._bool('or').havingNull(callback);\n  },\n\n  havingExists(callback) {\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingExists',\n      value: callback,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  orHavingExists(callback) {\n    return this._bool('or').havingExists(callback);\n  },\n\n  havingNotExists(callback) {\n    return this._not(true).havingExists(callback);\n  },\n\n  orHavingNotExists(callback) {\n    return this._not(true)._bool('or').havingExists(callback);\n  },\n\n  havingBetween(column, values) {\n    assert(\n      Array.isArray(values),\n      'The second argument to havingBetween must be an array.'\n    );\n    assert(\n      values.length === 2,\n      'You must specify 2 values for the havingBetween clause'\n    );\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingBetween',\n      column,\n      value: values,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  orHavingBetween(column, values) {\n    return this._bool('or').havingBetween(column, values);\n  },\n\n  havingNotBetween(column, values) {\n    return this._not(true).havingBetween(column, values);\n  },\n\n  orHavingNotBetween(column, values) {\n    return this._not(true)._bool('or').havingBetween(column, values);\n  },\n\n  havingIn(column, values) {\n    if (Array.isArray(values) && isEmpty(values))\n      return this.where(this._not());\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingIn',\n      column,\n      value: values,\n      not: this._not(),\n      bool: this._bool(),\n    });\n    return this;\n  },\n\n  // Adds a `or where in` clause to the query.\n  orHavingIn(column, values) {\n    return this._bool('or').havingIn(column, values);\n  },\n\n  // Adds a `where not in` clause to the query.\n  havingNotIn(column, values) {\n    return this._not(true).havingIn(column, values);\n  },\n\n  // Adds a `or where not in` clause to the query.\n  orHavingNotIn(column, values) {\n    return this._bool('or')._not(true).havingIn(column, values);\n  },\n\n  // Adds a raw `having` clause to the query.\n  havingRaw(sql, bindings) {\n    const raw = sql instanceof Raw ? sql : this.client.raw(sql, bindings);\n    this._statements.push({\n      grouping: 'having',\n      type: 'havingRaw',\n      value: raw,\n      bool: this._bool(),\n      not: this._not(),\n    });\n    return this;\n  },\n\n  orHavingRaw(sql, bindings) {\n    return this._bool('or').havingRaw(sql, bindings);\n  },\n\n  // Only allow a single \"offset\" to be set for the current query.\n  offset(value) {\n    if (value == null || value instanceof Raw || value instanceof Builder) {\n      // Builder for backward compatibility\n      this._single.offset = value;\n    } else {\n      const val = parseInt(value, 10);\n      if (isNaN(val)) {\n        this.client.logger.warn('A valid integer must be provided to offset');\n      } else {\n        this._single.offset = val;\n      }\n    }\n    return this;\n  },\n\n  // Only allow a single \"limit\" to be set for the current query.\n  limit(value) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      this.client.logger.warn('A valid integer must be provided to limit');\n    } else {\n      this._single.limit = val;\n    }\n    return this;\n  },\n\n  // Retrieve the \"count\" result of the query.\n  count(column, options) {\n    return this._aggregate('count', column || '*', options);\n  },\n\n  // Retrieve the minimum value of a given column.\n  min(column, options) {\n    return this._aggregate('min', column, options);\n  },\n\n  // Retrieve the maximum value of a given column.\n  max(column, options) {\n    return this._aggregate('max', column, options);\n  },\n\n  // Retrieve the sum of the values of a given column.\n  sum(column, options) {\n    return this._aggregate('sum', column, options);\n  },\n\n  // Retrieve the average of the values of a given column.\n  avg(column, options) {\n    return this._aggregate('avg', column, options);\n  },\n\n  // Retrieve the \"count\" of the distinct results of the query.\n  countDistinct() {\n    let columns = helpers.normalizeArr.apply(null, arguments);\n    let options;\n    if (columns.length > 1 && isPlainObject(last(columns))) {\n      [options] = columns.splice(columns.length - 1, 1);\n    }\n\n    if (!columns.length) {\n      columns = '*';\n    } else if (columns.length === 1) {\n      columns = columns[0];\n    }\n\n    return this._aggregate('count', columns, { ...options, distinct: true });\n  },\n\n  // Retrieve the sum of the distinct values of a given column.\n  sumDistinct(column, options) {\n    return this._aggregate('sum', column, { ...options, distinct: true });\n  },\n\n  // Retrieve the vg of the distinct results of the query.\n  avgDistinct(column, options) {\n    return this._aggregate('avg', column, { ...options, distinct: true });\n  },\n\n  // Increments a column's value by the specified amount.\n  increment(column, amount = 1) {\n    if (isObject(column)) {\n      for (const key in column) {\n        this._counter(key, column[key]);\n      }\n\n      return this;\n    }\n\n    return this._counter(column, amount);\n  },\n\n  // Decrements a column's value by the specified amount.\n  decrement(column, amount = 1) {\n    if (isObject(column)) {\n      for (const key in column) {\n        this._counter(key, -column[key]);\n      }\n\n      return this;\n    }\n\n    return this._counter(column, -amount);\n  },\n\n  // Clears increments/decrements\n  clearCounters() {\n    this._single.counter = {};\n    return this;\n  },\n\n  // Sets the values for a `select` query, informing that only the first\n  // row should be returned (limit 1).\n  first() {\n    if (!this._isSelectQuery()) {\n      throw new Error(`Cannot chain .first() on \"${this._method}\" query!`);\n    }\n\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    this.select.apply(this, args);\n    this._method = 'first';\n    this.limit(1);\n    return this;\n  },\n\n  // Use existing connection to execute the query\n  // Same value that client.acquireConnection() for an according client returns should be passed\n  connection(_connection) {\n    this._connection = _connection;\n    return this;\n  },\n\n  // Pluck a column from a query.\n  pluck(column) {\n    this._method = 'pluck';\n    this._single.pluck = column;\n    this._statements.push({\n      grouping: 'columns',\n      type: 'pluck',\n      value: column,\n    });\n    return this;\n  },\n\n  // Deprecated. Remove everything from select clause\n  clearSelect() {\n    this._clearGrouping('columns');\n    return this;\n  },\n\n  // Deprecated. Remove everything from where clause\n  clearWhere() {\n    this._clearGrouping('where');\n    return this;\n  },\n\n  // Deprecated. Remove everything from group clause\n  clearGroup() {\n    this._clearGrouping('group');\n    return this;\n  },\n\n  // Deprecated. Remove everything from order clause\n  clearOrder() {\n    this._clearGrouping('order');\n    return this;\n  },\n\n  // Deprecated. Remove everything from having clause\n  clearHaving() {\n    this._clearGrouping('having');\n    return this;\n  },\n\n  // Remove everything from statement clause\n  clear(statement) {\n    if (!['with', 'select', 'columns', 'hintComments', 'where', 'union', 'join', 'group', 'order', 'having', 'limit', 'offset', 'counter', 'counters'].includes(statement))\n      throw new Error(`Knex Error: unknown statement '${statement}'`);\n    if (statement.startsWith('counter')) return this.clearCounters();\n    if (statement === 'select') { statement = 'columns'; }\n    this._clearGrouping(statement);\n    return this;\n  },\n\n  // Insert & Update\n  // ------\n\n  // Sets the values for an `insert` query.\n  insert(values, returning, options) {\n    this._method = 'insert';\n    if (!isEmpty(returning)) this.returning(returning, options);\n    this._single.insert = values;\n    return this;\n  },\n\n  // Sets the values for an `update`, allowing for both\n  // `.update(key, value, [returning])` and `.update(obj, [returning])` syntaxes.\n  update(values, returning, options) {\n    let ret;\n    const obj = this._single.update || {};\n    this._method = 'update';\n    if (isString(values)) {\n      obj[values] = returning;\n      if (arguments.length > 2) {\n        ret = arguments[2];\n      }\n    } else {\n      const keys = Object.keys(values);\n      if (this._single.update) {\n        this.client.logger.warn('Update called multiple times with objects.');\n      }\n      let i = -1;\n      while (++i < keys.length) {\n        obj[keys[i]] = values[keys[i]];\n      }\n      ret = arguments[1];\n    }\n    if (!isEmpty(ret)) this.returning(ret, options);\n    this._single.update = obj;\n    return this;\n  },\n\n  // Sets the returning value for the query.\n  returning(returning, options) {\n    this._single.returning = returning;\n    this._single.options = options;\n    return this;\n  },\n\n\n  onConflict(columns) {\n    if (typeof columns === 'string') {\n      columns = [columns];\n    }\n    return new OnConflictBuilder(this, columns || true);\n  },\n\n  // Delete\n  // ------\n\n  // Executes a delete statement on the query;\n  delete(ret, options) {\n    this._method = 'del';\n    if (!isEmpty(ret)) this.returning(ret, options);\n    return this;\n  },\n\n  // Truncates a table, ends the query chain.\n  truncate(tableName) {\n    this._method = 'truncate';\n    if (tableName) {\n      this._single.table = tableName;\n    }\n    return this;\n  },\n\n  // Retrieves columns for the table specified by `knex(tableName)`\n  columnInfo(column) {\n    this._method = 'columnInfo';\n    this._single.columnInfo = column;\n    return this;\n  },\n\n  // Set a lock for update constraint.\n  forUpdate() {\n    this._single.lock = lockMode.forUpdate;\n    this._single.lockTables = helpers.normalizeArr.apply(null, arguments);\n    return this;\n  },\n\n  // Set a lock for share constraint.\n  forShare() {\n    this._single.lock = lockMode.forShare;\n    this._single.lockTables = helpers.normalizeArr.apply(null, arguments);\n    return this;\n  },\n\n  // Skips locked rows when using a lock constraint.\n  skipLocked() {\n    if (!this._isSelectQuery()) {\n      throw new Error(`Cannot chain .skipLocked() on \"${this._method}\" query!`);\n    }\n    if (!this._hasLockMode()) {\n      throw new Error(\n        '.skipLocked() can only be used after a call to .forShare() or .forUpdate()!'\n      );\n    }\n    if (this._single.waitMode === waitMode.noWait) {\n      throw new Error('.skipLocked() cannot be used together with .noWait()!');\n    }\n    this._single.waitMode = waitMode.skipLocked;\n    return this;\n  },\n\n  // Causes error when acessing a locked row instead of waiting for it to be released.\n  noWait() {\n    if (!this._isSelectQuery()) {\n      throw new Error(`Cannot chain .noWait() on \"${this._method}\" query!`);\n    }\n    if (!this._hasLockMode()) {\n      throw new Error(\n        '.noWait() can only be used after a call to .forShare() or .forUpdate()!'\n      );\n    }\n    if (this._single.waitMode === waitMode.skipLocked) {\n      throw new Error('.noWait() cannot be used together with .skipLocked()!');\n    }\n    this._single.waitMode = waitMode.noWait;\n    return this;\n  },\n\n  // Takes a JS object of methods to call and calls them\n  fromJS(obj) {\n    each(obj, (val, key) => {\n      if (typeof this[key] !== 'function') {\n        this.client.logger.warn(`Knex Error: unknown key ${key}`);\n      }\n      if (Array.isArray(val)) {\n        this[key].apply(this, val);\n      } else {\n        this[key](val);\n      }\n    });\n    return this;\n  },\n\n  // Passes query to provided callback function, useful for e.g. composing\n  // domain-specific helpers\n  modify(callback) {\n    callback.apply(this, [this].concat(tail(arguments)));\n    return this;\n  },\n\n  // ----------------------------------------------------------------------\n\n  // Helper for the incrementing/decrementing queries.\n  _counter(column, amount) {\n    amount = parseFloat(amount);\n\n    this._method = 'update';\n\n    this._single.counter = this._single.counter || {};\n\n    this._single.counter[column] = amount;\n\n    return this;\n  },\n\n  // Helper to get or set the \"boolFlag\" value.\n  _bool(val) {\n    if (arguments.length === 1) {\n      this._boolFlag = val;\n      return this;\n    }\n    const ret = this._boolFlag;\n    this._boolFlag = 'and';\n    return ret;\n  },\n\n  // Helper to get or set the \"notFlag\" value.\n  _not(val) {\n    if (arguments.length === 1) {\n      this._notFlag = val;\n      return this;\n    }\n    const ret = this._notFlag;\n    this._notFlag = false;\n    return ret;\n  },\n\n  // Helper to get or set the \"joinFlag\" value.\n  _joinType(val) {\n    if (arguments.length === 1) {\n      this._joinFlag = val;\n      return this;\n    }\n    const ret = this._joinFlag || 'inner';\n    this._joinFlag = 'inner';\n    return ret;\n  },\n\n  // Helper for compiling any aggregate queries.\n  _aggregate(method, column, options = {}) {\n    this._statements.push({\n      grouping: 'columns',\n      type: column instanceof Raw ? 'aggregateRaw' : 'aggregate',\n      method,\n      value: column,\n      aggregateDistinct: options.distinct || false,\n      alias: options.as,\n    });\n    return this;\n  },\n\n  // Helper function for clearing or reseting a grouping type from the builder\n  _clearGrouping(grouping) {\n    if (grouping in this._single) {\n      this._single[grouping] = undefined;\n    } else {\n      this._statements = reject(this._statements, { grouping });\n    }\n  },\n\n  // Helper function that checks if the builder will emit a select query\n  _isSelectQuery() {\n    return ['pluck', 'first', 'select'].includes(this._method);\n  },\n\n  // Helper function that checks if the query has a lock mode set\n  _hasLockMode() {\n    return [lockMode.forShare, lockMode.forUpdate].includes(this._single.lock);\n  },\n});\n\nObject.defineProperty(Builder.prototype, 'or', {\n  get() {\n    return this._bool('or');\n  },\n});\n\nObject.defineProperty(Builder.prototype, 'not', {\n  get() {\n    return this._not(true);\n  },\n});\n\nBuilder.prototype.select = Builder.prototype.columns;\nBuilder.prototype.column = Builder.prototype.columns;\nBuilder.prototype.andWhereNot = Builder.prototype.whereNot;\nBuilder.prototype.andWhereNotColumn = Builder.prototype.whereNotColumn;\nBuilder.prototype.andWhere = Builder.prototype.where;\nBuilder.prototype.andWhereColumn = Builder.prototype.whereColumn;\nBuilder.prototype.andWhereRaw = Builder.prototype.whereRaw;\nBuilder.prototype.andWhereBetween = Builder.prototype.whereBetween;\nBuilder.prototype.andWhereNotBetween = Builder.prototype.whereNotBetween;\nBuilder.prototype.andHaving = Builder.prototype.having;\nBuilder.prototype.andHavingIn = Builder.prototype.havingIn;\nBuilder.prototype.andHavingNotIn = Builder.prototype.havingNotIn;\nBuilder.prototype.andHavingNull = Builder.prototype.havingNull;\nBuilder.prototype.andHavingNotNull = Builder.prototype.havingNotNull;\nBuilder.prototype.andHavingExists = Builder.prototype.havingExists;\nBuilder.prototype.andHavingNotExists = Builder.prototype.havingNotExists;\nBuilder.prototype.andHavingBetween = Builder.prototype.havingBetween;\nBuilder.prototype.andHavingNotBetween = Builder.prototype.havingNotBetween;\nBuilder.prototype.from = Builder.prototype.table;\nBuilder.prototype.into = Builder.prototype.table;\nBuilder.prototype.del = Builder.prototype.delete;\n\n// Attach all of the top level promise methods that should be chainable.\nrequire('../interface')(Builder);\nhelpers.addQueryContext(Builder);\n\nBuilder.extend = (methodName, fn) => {\n  if (Object.prototype.hasOwnProperty.call(Builder.prototype, methodName)) {\n    throw new Error(\n      `Can't extend QueryBuilder with existing method ('${methodName}').`\n    );\n  }\n\n  assign(Builder.prototype, { [methodName]: fn });\n};\n\nmodule.exports = Builder;\n","const QueryBuilder = require('./query/builder');\nconst Raw = require('./raw');\nconst transform = require('lodash/transform');\n\n// Valid values for the `order by` clause generation.\nconst orderBys = ['asc', 'desc'];\n\n// Turn this into a lookup map\nconst operators = transform(\n  [\n    '=',\n    '<',\n    '>',\n    '<=',\n    '>=',\n    '<>',\n    '!=',\n    'like',\n    'not like',\n    'between',\n    'not between',\n    'ilike',\n    'not ilike',\n    'exists',\n    'not exist',\n    'rlike',\n    'not rlike',\n    'regexp',\n    'not regexp',\n    '&',\n    '|',\n    '^',\n    '<<',\n    '>>',\n    '~',\n    '~*',\n    '!~',\n    '!~*',\n    '#',\n    '&&',\n    '@>',\n    '<@',\n    '||',\n    '&<',\n    '&>',\n    '-|-',\n    '@@',\n    '!!',\n    ['?', '\\\\?'],\n    ['?|', '\\\\?|'],\n    ['?&', '\\\\?&'],\n  ],\n  (result, key) => {\n    if (Array.isArray(key)) {\n      result[key[0]] = key[1];\n    } else {\n      result[key] = key;\n    }\n  },\n  {}\n);\n\nclass Formatter {\n  constructor(client, builder) {\n    this.client = client;\n    this.builder = builder;\n    this.bindings = [];\n  }\n\n  // Accepts a string or array of columns to wrap as appropriate.\n  columnize(target) {\n    const columns = Array.isArray(target) ? target : [target];\n    let str = '',\n      i = -1;\n    while (++i < columns.length) {\n      if (i > 0) str += ', ';\n      str += this.wrap(columns[i]);\n    }\n    return str;\n  }\n\n  // Turns a list of values into a list of ?'s, joining them with commas unless\n  // a \"joining\" value is specified (e.g. ' and ')\n  parameterize(values, notSetValue) {\n    if (typeof values === 'function') return this.parameter(values);\n    values = Array.isArray(values) ? values : [values];\n    let str = '',\n      i = -1;\n    while (++i < values.length) {\n      if (i > 0) str += ', ';\n      str += this.parameter(values[i] === undefined ? notSetValue : values[i]);\n    }\n    return str;\n  }\n\n  // Formats `values` into a parenthesized list of parameters for a `VALUES`\n  // clause.\n  //\n  // [1, 2]                  -> '(?, ?)'\n  // [[1, 2], [3, 4]]        -> '((?, ?), (?, ?))'\n  // knex('table')           -> '(select * from \"table\")'\n  // knex.raw('select ?', 1) -> '(select ?)'\n  //\n  values(values) {\n    if (Array.isArray(values)) {\n      if (Array.isArray(values[0])) {\n        return `(${values\n          .map((value) => `(${this.parameterize(value)})`)\n          .join(', ')})`;\n      }\n      return `(${this.parameterize(values)})`;\n    }\n\n    if (values instanceof Raw) {\n      return `(${this.parameter(values)})`;\n    }\n\n    return this.parameter(values);\n  }\n\n  // Checks whether a value is a function... if it is, we compile it\n  // otherwise we check whether it's a raw\n  parameter(value) {\n    if (typeof value === 'function') {\n      return this.outputQuery(this.compileCallback(value), true);\n    }\n    return this.unwrapRaw(value, true) || '?';\n  }\n\n  unwrapRaw(value, isParameter) {\n    let query;\n    if (value instanceof QueryBuilder) {\n      query = this.client.queryCompiler(value).toSQL();\n      if (query.bindings) {\n        this.bindings = this.bindings.concat(query.bindings);\n      }\n      return this.outputQuery(query, isParameter);\n    }\n    if (value instanceof Raw) {\n      value.client = this.client;\n      if (this.builder._queryContext) {\n        value.queryContext = () => {\n          return this.builder._queryContext;\n        };\n      }\n\n      query = value.toSQL();\n      if (query.bindings) {\n        this.bindings = this.bindings.concat(query.bindings);\n      }\n      return query.sql;\n    }\n    if (isParameter) {\n      this.bindings.push(value);\n    }\n  }\n\n  /**\n   * Creates SQL for a parameter, which might be passed to where() or .with() or\n   * pretty much anywhere in API.\n   *\n   * @param query Callback (for where or complete builder), Raw or QueryBuilder\n   * @param method Optional at least 'select' or 'update' are valid\n   */\n  rawOrFn(value, method) {\n    if (typeof value === 'function') {\n      return this.outputQuery(this.compileCallback(value, method));\n    }\n    return this.unwrapRaw(value) || '';\n  }\n\n  // Puts the appropriate wrapper around a value depending on the database\n  // engine, unless it's a knex.raw value, in which case it's left alone.\n  wrap(value, isParameter) {\n    const raw = this.unwrapRaw(value, isParameter);\n    if (raw) return raw;\n    switch (typeof value) {\n      case 'function':\n        return this.outputQuery(this.compileCallback(value), true);\n      case 'object':\n        return this.parseObject(value);\n      case 'number':\n        return value;\n      default:\n        return this.wrapString(value + '');\n    }\n  }\n\n  wrapAsIdentifier(value) {\n    const queryContext = this.builder.queryContext();\n    return this.client.wrapIdentifier((value || '').trim(), queryContext);\n  }\n\n  alias(first, second) {\n    return first + ' as ' + second;\n  }\n\n  operator(value) {\n    const raw = this.unwrapRaw(value);\n    if (raw) return raw;\n    const operator = operators[(value || '').toLowerCase()];\n    if (!operator) {\n      throw new TypeError(`The operator \"${value}\" is not permitted`);\n    }\n    return operator;\n  }\n\n  // Specify the direction of the ordering.\n  direction(value) {\n    const raw = this.unwrapRaw(value);\n    if (raw) return raw;\n    return orderBys.indexOf((value || '').toLowerCase()) !== -1 ? value : 'asc';\n  }\n\n  // Compiles a callback using the query builder.\n  compileCallback(callback, method) {\n    const { client } = this;\n\n    // Build the callback\n    const builder = client.queryBuilder();\n    callback.call(builder, builder);\n\n    // Compile the callback, using the current formatter (to track all bindings).\n    const compiler = client.queryCompiler(builder);\n    compiler.formatter = this;\n\n    // Return the compiled & parameterized sql.\n    return compiler.toSQL(method || builder._method || 'select');\n  }\n\n  // Ensures the query is aliased if necessary.\n  outputQuery(compiled, isParameter) {\n    let sql = compiled.sql || '';\n    if (sql) {\n      if (\n        (compiled.method === 'select' || compiled.method === 'first') &&\n        (isParameter || compiled.as)\n      ) {\n        sql = `(${sql})`;\n        if (compiled.as) return this.alias(sql, this.wrap(compiled.as));\n      }\n    }\n    return sql;\n  }\n\n  // Key-value notation for alias\n  parseObject(obj) {\n    const ret = [];\n    for (const alias in obj) {\n      const queryOrIdentifier = obj[alias];\n      // Avoids double aliasing for subqueries\n      if (typeof queryOrIdentifier === 'function') {\n        const compiled = this.compileCallback(queryOrIdentifier);\n        compiled.as = alias; // enforces the object's alias\n        ret.push(this.outputQuery(compiled, true));\n      } else if (queryOrIdentifier instanceof QueryBuilder) {\n        ret.push(\n          this.alias(\n            `(${this.wrap(queryOrIdentifier)})`,\n            this.wrapAsIdentifier(alias)\n          )\n        );\n      } else {\n        ret.push(\n          this.alias(this.wrap(queryOrIdentifier), this.wrapAsIdentifier(alias))\n        );\n      }\n    }\n    return ret.join(', ');\n  }\n\n  // Coerce to string to prevent strange errors when it's not a string.\n  wrapString(value) {\n    const asIndex = value.toLowerCase().indexOf(' as ');\n    if (asIndex !== -1) {\n      const first = value.slice(0, asIndex);\n      const second = value.slice(asIndex + 4);\n      return this.alias(this.wrap(first), this.wrapAsIdentifier(second));\n    }\n    const wrapped = [];\n    let i = -1;\n    const segments = value.split('.');\n    while (++i < segments.length) {\n      value = segments[i];\n      if (i === 0 && segments.length > 1) {\n        wrapped.push(this.wrap((value || '').trim()));\n      } else {\n        wrapped.push(this.wrapAsIdentifier(value));\n      }\n    }\n    return wrapped.join('.');\n  }\n}\n\nmodule.exports = Formatter;\n","//Get schema-aware table name\nfunction getTableName(tableName, schemaName) {\n  return schemaName ? `${schemaName}.${tableName}` : tableName;\n}\n\n//Get schema-aware query builder for a given table and schema name\nfunction getTable(trxOrKnex, tableName, schemaName) {\n  return schemaName\n    ? trxOrKnex(tableName).withSchema(schemaName)\n    : trxOrKnex(tableName);\n}\nfunction getLockTableName(tableName) {\n  return tableName + '_lock';\n}\n\nfunction getLockTableNameWithSchema(tableName, schemaName) {\n  return schemaName\n    ? schemaName + '.' + getLockTableName(tableName)\n    : getLockTableName(tableName);\n}\n\nmodule.exports = {\n  getLockTableName,\n  getLockTableNameWithSchema,\n  getTable,\n  getTableName,\n};\n","const {\n  getTable,\n  getLockTableName,\n  getLockTableNameWithSchema,\n  getTableName,\n} = require('./table-resolver');\n\nfunction ensureTable(tableName, schemaName, trxOrKnex) {\n  const lockTable = getLockTableName(tableName);\n  const lockTableWithSchema = getLockTableNameWithSchema(tableName, schemaName);\n  return getSchemaBuilder(trxOrKnex, schemaName)\n    .hasTable(tableName)\n    .then((exists) => {\n      return !exists && _createMigrationTable(tableName, schemaName, trxOrKnex);\n    })\n    .then(() => {\n      return getSchemaBuilder(trxOrKnex, schemaName).hasTable(lockTable);\n    })\n    .then((exists) => {\n      return (\n        !exists && _createMigrationLockTable(lockTable, schemaName, trxOrKnex)\n      );\n    })\n    .then(() => {\n      return getTable(trxOrKnex, lockTable, schemaName).select('*');\n    })\n    .then((data) => {\n      return (\n        !data.length &&\n        trxOrKnex.into(lockTableWithSchema).insert({ is_locked: 0 })\n      );\n    });\n}\n\nfunction _createMigrationTable(tableName, schemaName, trxOrKnex) {\n  return getSchemaBuilder(trxOrKnex, schemaName).createTable(\n    getTableName(tableName),\n    function (t) {\n      t.increments();\n      t.string('name');\n      t.integer('batch');\n      t.timestamp('migration_time');\n    }\n  );\n}\n\nfunction _createMigrationLockTable(tableName, schemaName, trxOrKnex) {\n  return getSchemaBuilder(trxOrKnex, schemaName).createTable(\n    tableName,\n    function (t) {\n      t.increments('index').primary();\n      t.integer('is_locked');\n    }\n  );\n}\n\n//Get schema-aware schema builder for a given schema nam\nfunction getSchemaBuilder(trxOrKnex, schemaName) {\n  return schemaName\n    ? trxOrKnex.schema.withSchema(schemaName)\n    : trxOrKnex.schema;\n}\n\nmodule.exports = {\n  ensureTable,\n  getSchemaBuilder,\n};\n","const { getTableName } = require('./table-resolver');\nconst { ensureTable } = require('./table-creator');\n\n// Lists all available migration versions, as a sorted array.\nfunction listAll(migrationSource, loadExtensions) {\n  return migrationSource.getMigrations(loadExtensions);\n}\n\n// Lists all migrations that have been completed for the current db, as an\n// array.\nasync function listCompleted(tableName, schemaName, trxOrKnex) {\n  await ensureTable(tableName, schemaName, trxOrKnex);\n  const completedMigrations = await trxOrKnex\n    .from(getTableName(tableName, schemaName))\n    .orderBy('id')\n    .select('name');\n\n  return completedMigrations.map((migration) => {\n    return migration.name;\n  });\n}\n\n// Gets the migration list from the migration directory specified in config, as well as\n// the list of completed migrations to check what should be run.\nfunction listAllAndCompleted(config, trxOrKnex) {\n  return Promise.all([\n    listAll(config.migrationSource, config.loadExtensions),\n    listCompleted(config.tableName, config.schemaName, trxOrKnex),\n  ]);\n}\n\nmodule.exports = {\n  listAll,\n  listAllAndCompleted,\n  listCompleted,\n};\n","const fs = require('fs');\nconst flatten = require('lodash/flatten');\nconst os = require('os');\nconst path = require('path');\nconst { promisify } = require('util');\n\n// Promisify common fs functions.\nconst stat = promisify(fs.stat);\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst readdir = promisify(fs.readdir);\nconst mkdir = promisify(fs.mkdir);\n\n/**\n * Creates a temporary directory and returns it path.\n *\n * @returns {Promise<string>}\n */\nfunction createTemp() {\n  return promisify(fs.mkdtemp)(`${os.tmpdir()}${path.sep}`);\n}\n\n/**\n * Ensures the given path exists.\n *  - If the path already exist, it's fine - it does nothing.\n *  - If the path doesn't exist, it will create it.\n *\n * @param {string} path\n * @returns {Promise}\n */\nfunction ensureDirectoryExists(dir) {\n  return stat(dir).catch(() => mkdir(dir, { recursive: true }));\n}\n\n/**\n * Read a directory,\n * sorting folders and files by alphabetically order.\n * Can be browsed recursively.\n *\n * @param {string} dir\n * The directory to analyse\n *\n * @param {boolean} recursive\n * Browse directory recursively\n *\n * @returns {Promise<[string]>}\n * All found files, concatenated to the current dir\n */\nasync function getFilepathsInFolder(dir, recursive = false) {\n  const pathsList = await readdir(dir);\n  return flatten(\n    await Promise.all(\n      pathsList.sort().map(async (currentPath) => {\n        const currentFile = path.resolve(dir, currentPath);\n        const statFile = await stat(currentFile);\n        if (statFile && statFile.isDirectory()) {\n          if (recursive) {\n            return await getFilepathsInFolder(currentFile, true);\n          }\n          return [];\n        }\n        return [currentFile];\n      })\n    )\n  );\n}\n\nmodule.exports = {\n  stat,\n  readdir,\n  readFile,\n  writeFile,\n  createTemp,\n  ensureDirectoryExists,\n  getFilepathsInFolder,\n};\n","const template = require('lodash/template');\n\nconst { readFile, writeFile } = require('./fs');\n\n/**\n * Light wrapper over lodash templates making it safer to be used with javascript source code.\n *\n * In particular, doesn't interfere with use of interpolated strings in javascript.\n *\n * @param {string} content Template source\n * @param {_.TemplateOptions} options Template options\n */\nconst jsSourceTemplate = (content, options) =>\n  template(content, {\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    ...options,\n  });\n\n/**\n * Compile the contents of specified (javascript) file as a lodash template\n *\n * @param {string} filePath Path of file to be used as template\n * @param {_.TemplateOptions} options Lodash template options\n */\nconst jsFileTemplate = async (filePath, options) => {\n  const contentBuffer = await readFile(filePath);\n  return jsSourceTemplate(contentBuffer.toString(), options);\n};\n\n/**\n * Write a javascript file using another file as a (lodash) template\n *\n * @param {string} targetFilePath\n * @param {string} sourceFilePath\n * @param {_.TemplateOptions} options options passed to lodash templates\n */\nconst writeJsFileUsingTemplate = async (\n  targetFilePath,\n  sourceFilePath,\n  options,\n  variables\n) =>\n  writeFile(\n    targetFilePath,\n    (await jsFileTemplate(sourceFilePath, options))(variables)\n  );\n\nmodule.exports = {\n  jsSourceTemplate,\n  jsFileTemplate,\n  writeJsFileUsingTemplate,\n};\n","const { readFile } = require('./fs');\n\nmodule.exports = async function isModuleType(filepath) {\n  if (process.env.npm_package_json) {\n    // npm >= 7.0.0\n    const packageJson = JSON.parse(\n      await readFile(process.env.npm_package_json, 'utf-8')\n    );\n    if (packageJson.type === 'module') {\n      return true;\n    }\n  }\n  return process.env.npm_package_type === 'module' || filepath.endsWith('.mjs');\n};\n","const isModuleType = require('./is-module-type');\n\n/**\n * imports 'mjs', else requires.\n * NOTE: require me late!\n * @param {string} filepath\n * @todo WARN on version 10 and '--experimental-modules' and '--esm'\n */\nmodule.exports = async function importFile(filepath) {\n  return (await isModuleType(filepath))\n    ? import(require('url').pathToFileURL(filepath))\n    : require(filepath);\n};\n","const path = require('path');\nconst sortBy = require('lodash/sortBy');\n\nconst { readdir } = require('../../util/fs');\n\nconst DEFAULT_LOAD_EXTENSIONS = Object.freeze([\n  '.co',\n  '.coffee',\n  '.eg',\n  '.iced',\n  '.js',\n  '.cjs',\n  '.litcoffee',\n  '.ls',\n  '.ts',\n]);\n\nclass FsMigrations {\n  constructor(migrationDirectories, sortDirsSeparately, loadExtensions) {\n    this.sortDirsSeparately = sortDirsSeparately;\n\n    if (!Array.isArray(migrationDirectories)) {\n      migrationDirectories = [migrationDirectories];\n    }\n    this.migrationsPaths = migrationDirectories;\n    this.loadExtensions = loadExtensions || DEFAULT_LOAD_EXTENSIONS;\n  }\n\n  /**\n   * Gets the migration names\n   * @returns Promise<string[]>\n   */\n  getMigrations(loadExtensions) {\n    // Get a list of files in all specified migration directories\n    const readMigrationsPromises = this.migrationsPaths.map((configDir) => {\n      const absoluteDir = path.resolve(process.cwd(), configDir);\n      return readdir(absoluteDir).then((files) => ({\n        files,\n        configDir,\n        absoluteDir,\n      }));\n    });\n\n    return Promise.all(readMigrationsPromises).then((allMigrations) => {\n      const migrations = allMigrations.reduce((acc, migrationDirectory) => {\n        // When true, files inside the folder should be sorted\n        if (this.sortDirsSeparately) {\n          migrationDirectory.files = migrationDirectory.files.sort();\n        }\n\n        migrationDirectory.files.forEach((file) =>\n          acc.push({ file, directory: migrationDirectory.configDir })\n        );\n\n        return acc;\n      }, []);\n\n      // If true we have already sorted the migrations inside the folders\n      // return the migrations fully qualified\n      if (this.sortDirsSeparately) {\n        return filterMigrations(\n          this,\n          migrations,\n          loadExtensions || this.loadExtensions\n        );\n      }\n\n      return filterMigrations(\n        this,\n        sortBy(migrations, 'file'),\n        loadExtensions || this.loadExtensions\n      );\n    });\n  }\n\n  getMigrationName(migration) {\n    return migration.file;\n  }\n\n  getMigration(migration) {\n    const absoluteDir = path.resolve(process.cwd(), migration.directory);\n    const _path = path.join(absoluteDir, migration.file);\n    const importFile = require('../../util/import-file'); // late import\n    return importFile(_path);\n  }\n}\n\nfunction filterMigrations(migrationSource, migrations, loadExtensions) {\n  return migrations.filter((migration) => {\n    const migrationName = migrationSource.getMigrationName(migration);\n    const extension = path.extname(migrationName);\n    return loadExtensions.includes(extension);\n  });\n}\n\nmodule.exports = {\n  DEFAULT_LOAD_EXTENSIONS,\n  FsMigrations,\n};\n","let enabled =\n  !(\"NO_COLOR\" in process.env) &&\n  (\"FORCE_COLOR\" in process.env ||\n    process.platform === \"win32\" ||\n    (process.stdout != null &&\n      process.stdout.isTTY &&\n      process.env.TERM &&\n      process.env.TERM !== \"dumb\"))\n\nconst raw = (open, close, searchRegex, replaceValue) => (s) =>\n  enabled\n    ? open +\n      (~(s += \"\").indexOf(close, 4) // skip opening \\x1b[\n        ? s.replace(searchRegex, replaceValue)\n        : s) +\n      close\n    : s\n\nconst init = (open, close) => {\n  return raw(\n    `\\x1b[${open}m`,\n    `\\x1b[${close}m`,\n    new RegExp(`\\\\x1b\\\\[${close}m`, \"g\"),\n    `\\x1b[${open}m`\n  )\n}\n\nexports.options = Object.defineProperty({}, \"enabled\", {\n  get: () => enabled,\n  set: (value) => (enabled = value),\n})\n\nexports.reset = init(0, 0)\nexports.bold = raw(\"\\x1b[1m\", \"\\x1b[22m\", /\\x1b\\[22m/g, \"\\x1b[22m\\x1b[1m\")\nexports.dim = raw(\"\\x1b[2m\", \"\\x1b[22m\", /\\x1b\\[22m/g, \"\\x1b[22m\\x1b[2m\")\nexports.italic = init(3, 23)\nexports.underline = init(4, 24)\nexports.inverse = init(7, 27)\nexports.hidden = init(8, 28)\nexports.strikethrough = init(9, 29)\nexports.black = init(30, 39)\nexports.red = init(31, 39)\nexports.green = init(32, 39)\nexports.yellow = init(33, 39)\nexports.blue = init(34, 39)\nexports.magenta = init(35, 39)\nexports.cyan = init(36, 39)\nexports.white = init(37, 39)\nexports.gray = init(90, 39)\nexports.bgBlack = init(40, 49)\nexports.bgRed = init(41, 49)\nexports.bgGreen = init(42, 49)\nexports.bgYellow = init(43, 49)\nexports.bgBlue = init(44, 49)\nexports.bgMagenta = init(45, 49)\nexports.bgCyan = init(46, 49)\nexports.bgWhite = init(47, 49)\nexports.blackBright = init(90, 39)\nexports.redBright = init(91, 39)\nexports.greenBright = init(92, 39)\nexports.yellowBright = init(93, 39)\nexports.blueBright = init(94, 39)\nexports.magentaBright = init(95, 39)\nexports.cyanBright = init(96, 39)\nexports.whiteBright = init(97, 39)\nexports.bgBlackBright = init(100, 49)\nexports.bgRedBright = init(101, 49)\nexports.bgGreenBright = init(102, 49)\nexports.bgYellowBright = init(103, 49)\nexports.bgBlueBright = init(104, 49)\nexports.bgMagentaBright = init(105, 49)\nexports.bgCyanBright = init(106, 49)\nexports.bgWhiteBright = init(107, 49)\n","const color = require('colorette');\nconst { inspect } = require('util');\nconst { isString, isFunction } = require('./util/is');\n\nclass Logger {\n  constructor(config = {}) {\n    const {\n      log: {\n        debug,\n        warn,\n        error,\n        deprecate,\n        inspectionDepth,\n        enableColors,\n      } = {},\n    } = config;\n    this._inspectionDepth = inspectionDepth || 5;\n    this._enableColors = resolveIsEnabledColors(enableColors);\n    this._debug = debug;\n    this._warn = warn;\n    this._error = error;\n    this._deprecate = deprecate;\n  }\n\n  _log(message, userFn, colorFn) {\n    if (userFn != null && !isFunction(userFn)) {\n      throw new TypeError('Extensions to knex logger must be functions!');\n    }\n\n    if (isFunction(userFn)) {\n      userFn(message);\n      return;\n    }\n\n    if (!isString(message)) {\n      message = inspect(message, {\n        depth: this._inspectionDepth,\n        colors: this._enableColors,\n      });\n    }\n\n    console.log(colorFn ? colorFn(message) : message);\n  }\n\n  debug(message) {\n    this._log(message, this._debug);\n  }\n\n  warn(message) {\n    this._log(message, this._warn, color.yellow);\n  }\n\n  error(message) {\n    this._log(message, this._error, color.red);\n  }\n\n  deprecate(method, alternative) {\n    const message = `${method} is deprecated, please use ${alternative}`;\n\n    this._log(message, this._deprecate, color.yellow);\n  }\n}\n\nfunction resolveIsEnabledColors(enableColorsParam) {\n  if (enableColorsParam != null) {\n    return enableColorsParam;\n  }\n\n  if (process && process.stdout) {\n    return process.stdout.isTTY;\n  }\n\n  return false;\n}\n\nmodule.exports = Logger;\n","const {\n  FsMigrations,\n  DEFAULT_LOAD_EXTENSIONS,\n} = require('./sources/fs-migrations');\nconst Logger = require('../logger');\nconst defaultLogger = new Logger();\n\nconst CONFIG_DEFAULT = Object.freeze({\n  extension: 'js',\n  loadExtensions: DEFAULT_LOAD_EXTENSIONS,\n  tableName: 'knex_migrations',\n  schemaName: null,\n  directory: './migrations',\n  disableTransactions: false,\n  disableMigrationsListValidation: false,\n  sortDirsSeparately: false,\n});\n\nfunction getMergedConfig(config, currentConfig, logger = defaultLogger) {\n  // config is the user specified config, mergedConfig has defaults and current config\n  // applied to it.\n  const mergedConfig = Object.assign(\n    {},\n    CONFIG_DEFAULT,\n    currentConfig || {},\n    config\n  );\n\n  if (\n    config &&\n    // If user specifies any FS related config,\n    // clear specified migrationSource to avoid ambiguity\n    (config.directory ||\n      config.sortDirsSeparately !== undefined ||\n      config.loadExtensions)\n  ) {\n    if (config.migrationSource) {\n      logger.warn(\n        'FS-related option specified for migration configuration. This resets migrationSource to default FsMigrations'\n      );\n    }\n    mergedConfig.migrationSource = null;\n  }\n\n  // If the user has not specified any configs, we need to\n  // default to fs migrations to maintain compatibility\n  if (!mergedConfig.migrationSource) {\n    mergedConfig.migrationSource = new FsMigrations(\n      mergedConfig.directory,\n      mergedConfig.sortDirsSeparately,\n      mergedConfig.loadExtensions\n    );\n  }\n\n  return mergedConfig;\n}\n\nmodule.exports = {\n  getMergedConfig,\n};\n","// Get a date object in the correct format, without requiring a full out library\n// like \"moment.js\".\nfunction yyyymmddhhmmss() {\n  const d = new Date();\n\n  return (\n    d.getFullYear().toString() +\n    (d.getMonth() + 1).toString().padStart(2, '0') +\n    d.getDate().toString().padStart(2, '0') +\n    d.getHours().toString().padStart(2, '0') +\n    d.getMinutes().toString().padStart(2, '0') +\n    d.getSeconds().toString().padStart(2, '0')\n  );\n}\n\nmodule.exports = { yyyymmddhhmmss };\n","const path = require('path');\nconst { writeJsFileUsingTemplate } = require('../util/template');\nconst { getMergedConfig } = require('./configuration-merger');\nconst { ensureDirectoryExists } = require('../util/fs');\nconst { yyyymmddhhmmss } = require('../util/timestamp');\n\nclass MigrationGenerator {\n  constructor(migrationConfig, logger) {\n    this.config = getMergedConfig(migrationConfig, undefined, logger);\n  }\n\n  // Creates a new migration, with a given name.\n  async make(name, config, logger) {\n    this.config = getMergedConfig(config, this.config, logger);\n    if (!name) {\n      return Promise.reject(\n        new Error('A name must be specified for the generated migration')\n      );\n    }\n    await this._ensureFolder();\n    const createdMigrationFilePath = await this._writeNewMigration(name);\n    return createdMigrationFilePath;\n  }\n\n  // Ensures a folder for the migrations exist, dependent on the migration\n  // config settings.\n  _ensureFolder() {\n    const dirs = this._absoluteConfigDirs();\n\n    const promises = dirs.map(ensureDirectoryExists);\n\n    return Promise.all(promises);\n  }\n\n  _getStubPath() {\n    return (\n      this.config.stub ||\n      path.join(__dirname, 'stub', this.config.extension + '.stub')\n    );\n  }\n\n  _getNewMigrationName(name) {\n    if (name[0] === '-') name = name.slice(1);\n    return yyyymmddhhmmss() + '_' + name + '.' + this.config.extension;\n  }\n\n  _getNewMigrationPath(name) {\n    const fileName = this._getNewMigrationName(name);\n    const dirs = this._absoluteConfigDirs();\n    const dir = dirs.slice(-1)[0]; // Get last specified directory\n    return path.join(dir, fileName);\n  }\n\n  // Write a new migration to disk, using the config and generated filename,\n  // passing any `variables` given in the config to the template.\n  async _writeNewMigration(name) {\n    const migrationPath = this._getNewMigrationPath(name);\n    await writeJsFileUsingTemplate(\n      migrationPath,\n      this._getStubPath(),\n      { variable: 'd' },\n      this.config.variables || {}\n    );\n    return migrationPath;\n  }\n\n  _absoluteConfigDirs() {\n    const directories = Array.isArray(this.config.directory)\n      ? this.config.directory\n      : [this.config.directory];\n    return directories.map((directory) => {\n      if (!directory) {\n        console.warn(\n          'Failed to resolve config file, knex cannot determine where to generate migrations'\n        );\n      }\n      return path.resolve(process.cwd(), directory);\n    });\n  }\n}\n\nmodule.exports = MigrationGenerator;\n","// Migrator\n// -------\nconst differenceWith = require('lodash/differenceWith');\nconst get = require('lodash/get');\nconst isEmpty = require('lodash/isEmpty');\nconst max = require('lodash/max');\nconst { inherits } = require('util');\nconst {\n  getLockTableName,\n  getTable,\n  getTableName,\n} = require('./table-resolver');\nconst { getSchemaBuilder } = require('./table-creator');\nconst migrationListResolver = require('./migration-list-resolver');\nconst MigrationGenerator = require('./MigrationGenerator');\nconst { getMergedConfig } = require('./configuration-merger');\nconst { isBoolean, isFunction } = require('../util/is');\n\nfunction LockError(msg) {\n  this.name = 'MigrationLocked';\n  this.message = msg;\n}\n\ninherits(LockError, Error);\n\n// The new migration we're performing, typically called from the `knex.migrate`\n// interface on the main `knex` object. Passes the `knex` instance performing\n// the migration.\nclass Migrator {\n  constructor(knex) {\n    // Clone knex instance and remove post-processing that is unnecessary for internal queries from a cloned config\n    if (isFunction(knex)) {\n      if (!knex.isTransaction) {\n        this.knex = knex.withUserParams({\n          ...knex.userParams,\n        });\n      } else {\n        this.knex = knex;\n      }\n    } else {\n      this.knex = Object.assign({}, knex);\n      this.knex.userParams = this.knex.userParams || {};\n    }\n\n    this.config = getMergedConfig(\n      this.knex.client.config.migrations,\n      undefined,\n      this.knex.client.logger\n    );\n    this.generator = new MigrationGenerator(\n      this.knex.client.config.migrations,\n      this.knex.client.logger\n    );\n    this._activeMigration = {\n      fileName: null,\n    };\n  }\n\n  // Migrators to the latest configuration.\n  async latest(config) {\n    this._disableProcessing();\n    this.config = getMergedConfig(config, this.config, this.knex.client.logger);\n\n    const allAndCompleted = await migrationListResolver.listAllAndCompleted(\n      this.config,\n      this.knex\n    );\n\n    if (!this.config.disableMigrationsListValidation) {\n      validateMigrationList(this.config.migrationSource, allAndCompleted);\n    }\n\n    const [all, completed] = allAndCompleted;\n\n    const migrations = getNewMigrations(\n      this.config.migrationSource,\n      all,\n      completed\n    );\n\n    const transactionForAll =\n      !this.config.disableTransactions &&\n      !(\n        await Promise.all(\n          migrations.map(async (migration) => {\n            const migrationContents = await this.config.migrationSource.getMigration(\n              migration\n            );\n            return !this._useTransaction(migrationContents);\n          })\n        )\n      ).some((isTransactionUsed) => isTransactionUsed);\n\n    if (transactionForAll) {\n      return this.knex.transaction((trx) => {\n        return this._runBatch(migrations, 'up', trx);\n      });\n    } else {\n      return this._runBatch(migrations, 'up');\n    }\n  }\n\n  // Runs the next migration that has not yet been run\n  up(config) {\n    this._disableProcessing();\n    this.config = getMergedConfig(config, this.config, this.knex.client.logger);\n\n    return migrationListResolver\n      .listAllAndCompleted(this.config, this.knex)\n      .then((value) => {\n        if (!this.config.disableMigrationsListValidation) {\n          validateMigrationList(this.config.migrationSource, value);\n        }\n        return value;\n      })\n      .then(([all, completed]) => {\n        const newMigrations = getNewMigrations(\n          this.config.migrationSource,\n          all,\n          completed\n        );\n\n        let migrationToRun;\n        const name = this.config.name;\n        if (name) {\n          if (!completed.includes(name)) {\n            migrationToRun = newMigrations.find((migration) => {\n              return (\n                this.config.migrationSource.getMigrationName(migration) === name\n              );\n            });\n            if (!migrationToRun) {\n              throw new Error(`Migration \"${name}\" not found.`);\n            }\n          }\n        } else {\n          migrationToRun = newMigrations[0];\n        }\n\n        return {\n          migrationToRun,\n          useTransaction:\n            !migrationToRun ||\n            this._useTransaction(\n              this.config.migrationSource.getMigration(migrationToRun)\n            ),\n        };\n      })\n      .then(({ migrationToRun, useTransaction }) => {\n        const migrationsToRun = [];\n        if (migrationToRun) {\n          migrationsToRun.push(migrationToRun);\n        }\n\n        const transactionForAll =\n          !this.config.disableTransactions &&\n          (!migrationToRun || useTransaction);\n\n        if (transactionForAll) {\n          return this.knex.transaction((trx) => {\n            return this._runBatch(migrationsToRun, 'up', trx);\n          });\n        } else {\n          return this._runBatch(migrationsToRun, 'up');\n        }\n      });\n  }\n\n  // Rollback the last \"batch\", or all, of migrations that were run.\n  rollback(config, all = false) {\n    this._disableProcessing();\n    return new Promise((resolve, reject) => {\n      try {\n        this.config = getMergedConfig(\n          config,\n          this.config,\n          this.knex.client.logger\n        );\n      } catch (e) {\n        reject(e);\n      }\n      migrationListResolver\n        .listAllAndCompleted(this.config, this.knex)\n        .then((value) => {\n          if (!this.config.disableMigrationsListValidation) {\n            validateMigrationList(this.config.migrationSource, value);\n          }\n          return value;\n        })\n        .then((val) => {\n          const [allMigrations, completedMigrations] = val;\n\n          return all\n            ? allMigrations\n                .filter((migration) => {\n                  return completedMigrations.includes(\n                    this.config.migrationSource.getMigrationName(migration)\n                  );\n                })\n                .reverse()\n            : this._getLastBatch(val);\n        })\n        .then((migrations) => {\n          return this._runBatch(migrations, 'down');\n        })\n        .then(resolve, reject);\n    });\n  }\n\n  down(config) {\n    this._disableProcessing();\n    this.config = getMergedConfig(config, this.config, this.knex.client.logger);\n\n    return migrationListResolver\n      .listAllAndCompleted(this.config, this.knex)\n      .then((value) => {\n        if (!this.config.disableMigrationsListValidation) {\n          validateMigrationList(this.config.migrationSource, value);\n        }\n        return value;\n      })\n      .then(([all, completed]) => {\n        const completedMigrations = all.filter((migration) => {\n          return completed.includes(\n            this.config.migrationSource.getMigrationName(migration)\n          );\n        });\n\n        let migrationToRun;\n        const name = this.config.name;\n        if (name) {\n          migrationToRun = completedMigrations.find((migration) => {\n            return (\n              this.config.migrationSource.getMigrationName(migration) === name\n            );\n          });\n          if (!migrationToRun) {\n            throw new Error(`Migration \"${name}\" was not run.`);\n          }\n        } else {\n          migrationToRun = completedMigrations[completedMigrations.length - 1];\n        }\n\n        const migrationsToRun = [];\n        if (migrationToRun) {\n          migrationsToRun.push(migrationToRun);\n        }\n\n        return this._runBatch(migrationsToRun, 'down');\n      });\n  }\n\n  status(config) {\n    this._disableProcessing();\n    this.config = getMergedConfig(config, this.config, this.knex.client.logger);\n\n    return Promise.all([\n      getTable(this.knex, this.config.tableName, this.config.schemaName).select(\n        '*'\n      ),\n      migrationListResolver.listAll(this.config.migrationSource),\n    ]).then(([db, code]) => db.length - code.length);\n  }\n\n  // Retrieves and returns the current migration version we're on, as a promise.\n  // If no migrations have been run yet, return \"none\".\n  currentVersion(config) {\n    this._disableProcessing();\n    this.config = getMergedConfig(config, this.config, this.knex.client.logger);\n\n    return migrationListResolver\n      .listCompleted(this.config.tableName, this.config.schemaName, this.knex)\n      .then((completed) => {\n        const val = max(completed.map((value) => value.split('_')[0]));\n        return val === undefined ? 'none' : val;\n      });\n  }\n\n  // list all migrations\n  async list(config) {\n    this._disableProcessing();\n    this.config = getMergedConfig(config, this.config, this.knex.client.logger);\n\n    const [all, completed] = await migrationListResolver.listAllAndCompleted(\n      this.config,\n      this.knex\n    );\n\n    if (!this.config.disableMigrationsListValidation) {\n      validateMigrationList(this.config.migrationSource, [all, completed]);\n    }\n\n    const newMigrations = getNewMigrations(\n      this.config.migrationSource,\n      all,\n      completed\n    );\n    return [completed, newMigrations];\n  }\n\n  async forceFreeMigrationsLock(config) {\n    this.config = getMergedConfig(config, this.config, this.knex.client.logger);\n    const { schemaName, tableName } = this.config;\n    const lockTableName = getLockTableName(tableName);\n    const { knex } = this;\n    const getLockTable = () => getTable(knex, lockTableName, schemaName);\n    const tableExists = await getSchemaBuilder(knex, schemaName).hasTable(\n      lockTableName\n    );\n    if (tableExists) {\n      await getLockTable().del();\n      await getLockTable().insert({\n        is_locked: 0,\n      });\n    }\n  }\n\n  // Creates a new migration, with a given name.\n  make(name, config) {\n    return this.generator.make(name, config, this.knex.client.logger);\n  }\n\n  _disableProcessing() {\n    if (this.knex.disableProcessing) {\n      this.knex.disableProcessing();\n    }\n  }\n\n  _lockMigrations(trx) {\n    const tableName = getLockTableName(this.config.tableName);\n    return getTable(this.knex, tableName, this.config.schemaName)\n      .transacting(trx)\n      .where('is_locked', '=', 0)\n      .update({ is_locked: 1 })\n      .then((rowCount) => {\n        if (rowCount != 1) {\n          throw new Error('Migration table is already locked');\n        }\n      });\n  }\n\n  _getLock(trx) {\n    const transact = trx ? (fn) => fn(trx) : (fn) => this.knex.transaction(fn);\n    return transact((trx) => {\n      return this._lockMigrations(trx);\n    }).catch((err) => {\n      throw new LockError(err.message);\n    });\n  }\n\n  _freeLock(trx = this.knex) {\n    const tableName = getLockTableName(this.config.tableName);\n    return getTable(trx, tableName, this.config.schemaName).update({\n      is_locked: 0,\n    });\n  }\n\n  // Run a batch of current migrations, in sequence.\n  _runBatch(migrations, direction, trx) {\n    return (\n      this._getLock(trx)\n        // When there is a wrapping transaction, some migrations\n        // could have been done while waiting for the lock:\n        .then(() =>\n          trx\n            ? migrationListResolver.listCompleted(\n                this.config.tableName,\n                this.config.schemaName,\n                trx\n              )\n            : []\n        )\n        .then(\n          (completed) =>\n            (migrations = getNewMigrations(\n              this.config.migrationSource,\n              migrations,\n              completed\n            ))\n        )\n        .then(() =>\n          Promise.all(\n            migrations.map(this._validateMigrationStructure.bind(this))\n          )\n        )\n        .then(() => this._latestBatchNumber(trx))\n        .then((batchNo) => {\n          if (direction === 'up') batchNo++;\n          return batchNo;\n        })\n        .then((batchNo) => {\n          return this._waterfallBatch(batchNo, migrations, direction, trx);\n        })\n        .then(async (res) => {\n          await this._freeLock(trx);\n          return res;\n        })\n        .catch(async (error) => {\n          let cleanupReady = Promise.resolve();\n\n          if (error instanceof LockError) {\n            // If locking error do not free the lock.\n            this.knex.client.logger.warn(\n              `Can't take lock to run migrations: ${error.message}`\n            );\n            this.knex.client.logger.warn(\n              'If you are sure migrations are not running you can release the ' +\n                \"lock manually by running 'knex migrate:unlock'\"\n            );\n          } else {\n            if (this._activeMigration.fileName) {\n              this.knex.client.logger.warn(\n                `migration file \"${this._activeMigration.fileName}\" failed`\n              );\n            }\n            this.knex.client.logger.warn(\n              `migration failed with error: ${error.message}`\n            );\n            // If the error was not due to a locking issue, then remove the lock.\n            cleanupReady = this._freeLock(trx);\n          }\n\n          try {\n            await cleanupReady;\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n          throw error;\n        })\n    );\n  }\n\n  // Validates some migrations by requiring and checking for an `up` and `down`\n  // function.\n  async _validateMigrationStructure(migration) {\n    const migrationName = this.config.migrationSource.getMigrationName(\n      migration\n    );\n    // maybe promise\n    const migrationContent = await this.config.migrationSource.getMigration(\n      migration\n    );\n    if (\n      typeof migrationContent.up !== 'function' ||\n      typeof migrationContent.down !== 'function'\n    ) {\n      throw new Error(\n        `Invalid migration: ${migrationName} must have both an up and down function`\n      );\n    }\n\n    return migration;\n  }\n\n  // Get the last batch of migrations, by name, ordered by insert id in reverse\n  // order.\n  async _getLastBatch([allMigrations]) {\n    const { tableName, schemaName } = this.config;\n    const migrationNames = await getTable(this.knex, tableName, schemaName)\n      .where('batch', function (qb) {\n        qb.max('batch').from(getTableName(tableName, schemaName));\n      })\n      .orderBy('id', 'desc');\n\n    const lastBatchMigrations = migrationNames.map((migration) => {\n      return allMigrations.find((entry) => {\n        return (\n          this.config.migrationSource.getMigrationName(entry) === migration.name\n        );\n      });\n    });\n    return Promise.all(lastBatchMigrations);\n  }\n\n  // Returns the latest batch number.\n  _latestBatchNumber(trx = this.knex) {\n    return trx\n      .from(getTableName(this.config.tableName, this.config.schemaName))\n      .max('batch as max_batch')\n      .then((obj) => obj[0].max_batch || 0);\n  }\n\n  // If transaction config for a single migration is defined, use that.\n  // Otherwise, rely on the common config. This allows enabling/disabling\n  // transaction for a single migration at will, regardless of the common\n  // config.\n  _useTransaction(migrationContent, allTransactionsDisabled) {\n    const singleTransactionValue = get(migrationContent, 'config.transaction');\n\n    return isBoolean(singleTransactionValue)\n      ? singleTransactionValue\n      : !allTransactionsDisabled;\n  }\n\n  // Runs a batch of `migrations` in a specified `direction`, saving the\n  // appropriate database information as the migrations are run.\n  _waterfallBatch(batchNo, migrations, direction, trx) {\n    const trxOrKnex = trx || this.knex;\n    const { tableName, schemaName, disableTransactions } = this.config;\n    let current = Promise.resolve();\n    const log = [];\n    migrations.forEach((migration) => {\n      const name = this.config.migrationSource.getMigrationName(migration);\n      this._activeMigration.fileName = name;\n      const migrationContent = this.config.migrationSource.getMigration(\n        migration\n      );\n\n      // We're going to run each of the migrations in the current \"up\".\n      current = current\n        .then(async () => await migrationContent) //maybe promise\n        .then((migrationContent) => {\n          this._activeMigration.fileName = name;\n          if (\n            !trx &&\n            this._useTransaction(migrationContent, disableTransactions)\n          ) {\n            this.knex.enableProcessing();\n            return this._transaction(\n              this.knex,\n              migrationContent,\n              direction,\n              name\n            );\n          }\n\n          trxOrKnex.enableProcessing();\n          return checkPromise(\n            this.knex.client.logger,\n            migrationContent[direction](trxOrKnex),\n            name\n          );\n        })\n        .then(() => {\n          trxOrKnex.disableProcessing();\n          this.knex.disableProcessing();\n          log.push(name);\n          if (direction === 'up') {\n            return trxOrKnex.into(getTableName(tableName, schemaName)).insert({\n              name,\n              batch: batchNo,\n              migration_time: new Date(),\n            });\n          }\n          if (direction === 'down') {\n            return trxOrKnex\n              .from(getTableName(tableName, schemaName))\n              .where({ name })\n              .del();\n          }\n        });\n    });\n\n    return current.then(() => [batchNo, log]);\n  }\n\n  _transaction(knex, migrationContent, direction, name) {\n    return knex.transaction((trx) => {\n      return checkPromise(\n        knex.client.logger,\n        migrationContent[direction](trx),\n        name,\n        () => {\n          trx.commit();\n        }\n      );\n    });\n  }\n}\n\n// Validates that migrations are present in the appropriate directories.\nfunction validateMigrationList(migrationSource, migrations) {\n  const [all, completed] = migrations;\n  const diff = getMissingMigrations(migrationSource, completed, all);\n  if (!isEmpty(diff)) {\n    throw new Error(\n      `The migration directory is corrupt, the following files are missing: ${diff.join(\n        ', '\n      )}`\n    );\n  }\n}\n\nfunction getMissingMigrations(migrationSource, completed, all) {\n  return differenceWith(completed, all, (completedMigration, allMigration) => {\n    return (\n      completedMigration === migrationSource.getMigrationName(allMigration)\n    );\n  });\n}\n\nfunction getNewMigrations(migrationSource, all, completed) {\n  return differenceWith(all, completed, (allMigration, completedMigration) => {\n    return (\n      completedMigration === migrationSource.getMigrationName(allMigration)\n    );\n  });\n}\n\nfunction checkPromise(logger, migrationPromise, name, commitFn) {\n  if (!migrationPromise || typeof migrationPromise.then !== 'function') {\n    logger.warn(`migration ${name} did not return a promise`);\n    if (commitFn) {\n      commitFn();\n    }\n  }\n  return migrationPromise;\n}\n\nmodule.exports = {\n  Migrator,\n};\n","// Seeder\n// -------\n\nconst path = require('path');\nconst flatten = require('lodash/flatten');\nconst extend = require('lodash/extend');\nconst includes = require('lodash/includes');\nconst { ensureDirectoryExists, getFilepathsInFolder } = require('../util/fs');\nconst { writeJsFileUsingTemplate } = require('../util/template');\nconst { yyyymmddhhmmss } = require('../util/timestamp');\n\nconst filterByLoadExtensions = (extensions) => (value) => {\n  const extension = path.extname(value);\n  return includes(extensions, extension);\n};\n\n// The new seeds we're performing, typically called from the `knex.seed`\n// interface on the main `knex` object. Passes the `knex` instance performing\n// the seeds.\nclass Seeder {\n  constructor(knex) {\n    this.knex = knex;\n    this.config = this.setConfig(knex.client.config.seeds);\n  }\n\n  // Runs seed files for the given environment.\n  async run(config) {\n    this.config = this.setConfig(config);\n    let files = await this._listAll();\n    if (config && config.specific) {\n      files = files.filter((file) => path.basename(file) === config.specific);\n      if (files.length === 0) {\n        throw new Error(\n          `Invalid argument provided: the specific seed \"${config.specific}\" does not exist.`\n        );\n      }\n    }\n    return this._runSeeds(files);\n  }\n\n  // Creates a new seed file, with a given name.\n  async make(name, config) {\n    this.config = this.setConfig(config);\n    if (!name)\n      throw new Error('A name must be specified for the generated seed');\n    await this._ensureFolder(config);\n    const seedPath = await this._writeNewSeed(name);\n    return seedPath;\n  }\n\n  // Lists all available seed files as a sorted array.\n  async _listAll(config) {\n    this.config = this.setConfig(config);\n    const { loadExtensions, recursive } = this.config;\n    const seeds = flatten(\n      await Promise.all(\n        this._absoluteConfigDirs().map((d) =>\n          getFilepathsInFolder(d, recursive)\n        )\n      )\n    );\n    // if true, each dir are already sorted\n    // (getFilepathsInFolderRecursively does this)\n    // if false, we need to sort all the seeds\n    if (this.config.sortDirsSeparately) {\n      return seeds.filter(filterByLoadExtensions(loadExtensions));\n    } else {\n      return seeds.filter(filterByLoadExtensions(loadExtensions)).sort();\n    }\n  }\n\n  // Ensures a folder for the seeds exist, dependent on the\n  // seed config settings.\n  _ensureFolder() {\n    const dirs = this._absoluteConfigDirs();\n    const promises = dirs.map(ensureDirectoryExists);\n    return Promise.all(promises);\n  }\n\n  // Run seed files, in sequence.\n  _runSeeds(seeds) {\n    seeds.forEach((seed) => this._validateSeedStructure(seed));\n    return this._waterfallBatch(seeds);\n  }\n\n  // Validates seed files by requiring and checking for a `seed` function.\n  async _validateSeedStructure(filepath) {\n    const importFile = require('../util/import-file'); // late import\n    const seed = await importFile(filepath);\n    if (typeof seed.seed !== 'function') {\n      throw new Error(\n        `Invalid seed file: ${filepath} must have a seed function`\n      );\n    }\n    return filepath;\n  }\n\n  _getStubPath() {\n    return (\n      this.config.stub ||\n      path.join(__dirname, 'stub', this.config.extension + '.stub')\n    );\n  }\n\n  _getNewStubFileName(name) {\n    if (name[0] === '-') name = name.slice(1);\n\n    if (this.config.timestampFilenamePrefix === true) {\n      name = `${yyyymmddhhmmss()}_${name}`;\n    }\n\n    return `${name}.${this.config.extension}`;\n  }\n\n  _getNewStubFilePath(name) {\n    const fileName = this._getNewStubFileName(name);\n    const dirs = this._absoluteConfigDirs();\n    const dir = dirs.slice(-1)[0]; // Get last specified directory\n    return path.join(dir, fileName);\n  }\n\n  // Write a new seed to disk, using the config and generated filename,\n  // passing any `variables` given in the config to the template.\n  async _writeNewSeed(name) {\n    const seedPath = this._getNewStubFilePath(name);\n    await writeJsFileUsingTemplate(\n      seedPath,\n      this._getStubPath(),\n      { variable: 'd' },\n      this.config.variables || {}\n    );\n    return seedPath;\n  }\n\n  // Runs a batch of seed files.\n  async _waterfallBatch(seeds) {\n    const { knex } = this;\n    const log = [];\n    for (const seedPath of seeds) {\n      const importFile = require('../util/import-file'); // late import\n      const seed = await importFile(seedPath);\n      try {\n        await seed.seed(knex);\n        log.push(seedPath);\n      } catch (originalError) {\n        const error = new Error(\n          `Error while executing \"${seedPath}\" seed: ${originalError.message}`\n        );\n        error.original = originalError;\n        error.stack =\n          error.stack.split('\\n').slice(0, 2).join('\\n') +\n          '\\n' +\n          originalError.stack;\n        throw error;\n      }\n    }\n    return [log];\n  }\n\n  /**\n   * Return all the config directories\n   * @returns {string[]}\n   */\n  _absoluteConfigDirs() {\n    const directories = Array.isArray(this.config.directory)\n      ? this.config.directory\n      : [this.config.directory];\n    return directories.map((directory) => {\n      if (!directory) {\n        console.warn(\n          'Failed to resolve config file, knex cannot determine where to run or make seeds'\n        );\n      }\n      return path.resolve(process.cwd(), directory);\n    });\n  }\n\n  setConfig(config) {\n    return extend(\n      {\n        extension: 'js',\n        directory: './seeds',\n        loadExtensions: [\n          '.co',\n          '.coffee',\n          '.eg',\n          '.iced',\n          '.js',\n          '.litcoffee',\n          '.ls',\n          '.ts',\n        ],\n        timestampFilenamePrefix: false,\n        sortDirsSeparately: false,\n        recursive: false,\n      },\n      this.config || {},\n      config\n    );\n  }\n}\n\nmodule.exports = Seeder;\n","// FunctionHelper\n// -------\nfunction FunctionHelper(client) {\n  this.client = client;\n}\n\nFunctionHelper.prototype.now = function (precision) {\n  if (typeof precision === 'number') {\n    return this.client.raw(`CURRENT_TIMESTAMP(${precision})`);\n  }\n  return this.client.raw('CURRENT_TIMESTAMP');\n};\n\nmodule.exports = FunctionHelper;\n","// All properties we can use to start a query chain\n// from the `knex` object, e.g. `knex.select('*').from(...`\nmodule.exports = [\n  'with',\n  'withRecursive',\n  'select',\n  'as',\n  'columns',\n  'column',\n  'from',\n  'fromJS',\n  'into',\n  'withSchema',\n  'table',\n  'distinct',\n  'join',\n  'joinRaw',\n  'innerJoin',\n  'leftJoin',\n  'leftOuterJoin',\n  'rightJoin',\n  'rightOuterJoin',\n  'outerJoin',\n  'fullOuterJoin',\n  'crossJoin',\n  'where',\n  'andWhere',\n  'orWhere',\n  'whereNot',\n  'orWhereNot',\n  'whereRaw',\n  'whereWrapped',\n  'havingWrapped',\n  'orWhereRaw',\n  'whereExists',\n  'orWhereExists',\n  'whereNotExists',\n  'orWhereNotExists',\n  'whereIn',\n  'orWhereIn',\n  'whereNotIn',\n  'orWhereNotIn',\n  'whereNull',\n  'orWhereNull',\n  'whereNotNull',\n  'orWhereNotNull',\n  'whereBetween',\n  'whereNotBetween',\n  'andWhereBetween',\n  'andWhereNotBetween',\n  'orWhereBetween',\n  'orWhereNotBetween',\n  'groupBy',\n  'groupByRaw',\n  'orderBy',\n  'orderByRaw',\n  'union',\n  'unionAll',\n  'intersect',\n  'having',\n  'havingRaw',\n  'orHaving',\n  'orHavingRaw',\n  'offset',\n  'limit',\n  'count',\n  'countDistinct',\n  'min',\n  'max',\n  'sum',\n  'sumDistinct',\n  'avg',\n  'avgDistinct',\n  'increment',\n  'decrement',\n  'first',\n  'debug',\n  'pluck',\n  'clearSelect',\n  'clearWhere',\n  'clearGroup',\n  'clearOrder',\n  'clearHaving',\n  'insert',\n  'update',\n  'returning',\n  'del',\n  'delete',\n  'truncate',\n  'transacting',\n  'connection',\n];\n","/**\n * @param {number} delay\n * @returns {Promise<void>}\n */\nmodule.exports = (delay) =>\n  new Promise((resolve) => setTimeout(resolve, delay));\n","const chunk = require('lodash/chunk');\nconst flatten = require('lodash/flatten');\nconst delay = require('./delay');\nconst { isNumber } = require('./is');\n\nmodule.exports = function batchInsert(\n  client,\n  tableName,\n  batch,\n  chunkSize = 1000\n) {\n  let returning = void 0;\n  let transaction = null;\n\n  const runInTransaction = (cb) => {\n    if (transaction) {\n      return cb(transaction);\n    }\n    return client.transaction(cb);\n  };\n\n  return Object.assign(\n    Promise.resolve().then(async () => {\n      if (!isNumber(chunkSize) || chunkSize < 1) {\n        throw new TypeError(`Invalid chunkSize: ${chunkSize}`);\n      }\n\n      if (!Array.isArray(batch)) {\n        throw new TypeError(\n          `Invalid batch: Expected array, got ${typeof batch}`\n        );\n      }\n\n      const chunks = chunk(batch, chunkSize);\n\n      //Next tick to ensure wrapper functions are called if needed\n      await delay(1);\n      return runInTransaction(async (tr) => {\n        const chunksResults = [];\n        for (const items of chunks) {\n          chunksResults.push(await tr(tableName).insert(items, returning));\n        }\n        return flatten(chunksResults);\n      });\n    }),\n    {\n      returning(columns) {\n        returning = columns;\n\n        return this;\n      },\n      transacting(tr) {\n        transaction = tr;\n\n        return this;\n      },\n    }\n  );\n};\n","const { EventEmitter } = require('events');\n\nconst { Migrator } = require('../migrate/Migrator');\nconst Seeder = require('../seed/Seeder');\nconst FunctionHelper = require('../functionhelper');\nconst QueryInterface = require('../query/methods');\nconst merge = require('lodash/merge');\nconst batchInsert = require('./batchInsert');\n\n// Javascript does not officially support \"callable objects\".  Instead,\n// you must create a regular Function and inject properties/methods\n// into it.  In other words: you can't leverage Prototype Inheritance\n// to share the property/method definitions.\n//\n// To work around this, we're creating an Object Property Definition.\n// This allow us to quickly inject everything into the `knex` function\n// via the `Object.defineProperties(..)` function.  More importantly,\n// it allows the same definitions to be shared across `knex` instances.\nconst KNEX_PROPERTY_DEFINITIONS = {\n  client: {\n    get() {\n      return this.context.client;\n    },\n    set(client) {\n      this.context.client = client;\n    },\n    configurable: true,\n  },\n\n  userParams: {\n    get() {\n      return this.context.userParams;\n    },\n    set(userParams) {\n      this.context.userParams = userParams;\n    },\n    configurable: true,\n  },\n\n  schema: {\n    get() {\n      return this.client.schemaBuilder();\n    },\n    configurable: true,\n  },\n\n  migrate: {\n    get() {\n      return new Migrator(this);\n    },\n    configurable: true,\n  },\n\n  seed: {\n    get() {\n      return new Seeder(this);\n    },\n    configurable: true,\n  },\n\n  fn: {\n    get() {\n      return new FunctionHelper(this.client);\n    },\n    configurable: true,\n  },\n};\n\n// `knex` instances serve as proxies around `context` objects.  So, calling\n// any of these methods on the `knex` instance will forward the call to\n// the `knex.context` object. This ensures that `this` will correctly refer\n// to `context` within each of these methods.\nconst CONTEXT_METHODS = [\n  'raw',\n  'batchInsert',\n  'transaction',\n  'transactionProvider',\n  'initialize',\n  'destroy',\n  'ref',\n  'withUserParams',\n  'queryBuilder',\n  'disableProcessing',\n  'enableProcessing',\n];\n\nfor (const m of CONTEXT_METHODS) {\n  KNEX_PROPERTY_DEFINITIONS[m] = {\n    value: function (...args) {\n      return this.context[m](...args);\n    },\n    configurable: true,\n  };\n}\n\nfunction makeKnex(client) {\n  // The object we're potentially using to kick off an initial chain.\n  function knex(tableName, options) {\n    return createQueryBuilder(knex.context, tableName, options);\n  }\n\n  redefineProperties(knex, client);\n  return knex;\n}\n\nfunction initContext(knexFn) {\n  const knexContext = knexFn.context || {};\n  Object.assign(knexContext, {\n    queryBuilder() {\n      return this.client.queryBuilder();\n    },\n\n    raw() {\n      return this.client.raw.apply(this.client, arguments);\n    },\n\n    batchInsert(table, batch, chunkSize = 1000) {\n      return batchInsert(this, table, batch, chunkSize);\n    },\n\n    // Creates a new transaction.\n    // If container is provided, returns a promise for when the transaction is resolved.\n    // If container is not provided, returns a promise with a transaction that is resolved\n    // when transaction is ready to be used.\n    transaction(container, _config) {\n      const config = Object.assign({}, _config);\n      config.userParams = this.userParams || {};\n      if (config.doNotRejectOnRollback === undefined) {\n        // Backwards-compatibility: default value changes depending upon\n        // whether or not a `container` was provided.\n        config.doNotRejectOnRollback = !container;\n      }\n\n      return this._transaction(container, config);\n    },\n\n    // Internal method that actually establishes the Transaction.  It makes no assumptions\n    // about the `config` or `outerTx`, and expects the caller to handle these details.\n    _transaction(container, config, outerTx = null) {\n      if (container) {\n        const trx = this.client.transaction(container, config, outerTx);\n        return trx;\n      } else {\n        return new Promise((resolve, reject) => {\n          const trx = this.client.transaction(resolve, config, outerTx);\n          trx.catch(reject);\n        });\n      }\n    },\n\n    transactionProvider(config) {\n      let trx;\n      return () => {\n        if (!trx) {\n          trx = this.transaction(undefined, config);\n        }\n        return trx;\n      };\n    },\n\n    // Typically never needed, initializes the pool for a knex client.\n    initialize(config) {\n      return this.client.initializePool(config);\n    },\n\n    // Convenience method for tearing down the pool.\n    destroy(callback) {\n      return this.client.destroy(callback);\n    },\n\n    ref(ref) {\n      return this.client.ref(ref);\n    },\n\n    // Do not document this as public API until naming and API is improved for general consumption\n    // This method exists to disable processing of internal queries in migrations\n    disableProcessing() {\n      if (this.userParams.isProcessingDisabled) {\n        return;\n      }\n      this.userParams.wrapIdentifier = this.client.config.wrapIdentifier;\n      this.userParams.postProcessResponse = this.client.config.postProcessResponse;\n      this.client.config.wrapIdentifier = null;\n      this.client.config.postProcessResponse = null;\n      this.userParams.isProcessingDisabled = true;\n    },\n\n    // Do not document this as public API until naming and API is improved for general consumption\n    // This method exists to enable execution of non-internal queries with consistent identifier naming in migrations\n    enableProcessing() {\n      if (!this.userParams.isProcessingDisabled) {\n        return;\n      }\n      this.client.config.wrapIdentifier = this.userParams.wrapIdentifier;\n      this.client.config.postProcessResponse = this.userParams.postProcessResponse;\n      this.userParams.isProcessingDisabled = false;\n    },\n\n    withUserParams(params) {\n      const knexClone = shallowCloneFunction(knexFn); // We need to include getters in our clone\n      if (this.client) {\n        knexClone.client = Object.create(this.client.constructor.prototype); // Clone client to avoid leaking listeners that are set on it\n        merge(knexClone.client, this.client);\n        knexClone.client.config = Object.assign({}, this.client.config); // Clone client config to make sure they can be modified independently\n      }\n\n      redefineProperties(knexClone, knexClone.client);\n      _copyEventListeners('query', knexFn, knexClone);\n      _copyEventListeners('query-error', knexFn, knexClone);\n      _copyEventListeners('query-response', knexFn, knexClone);\n      _copyEventListeners('start', knexFn, knexClone);\n      knexClone.userParams = params;\n      return knexClone;\n    },\n  });\n\n  if (!knexFn.context) {\n    knexFn.context = knexContext;\n  }\n}\n\nfunction _copyEventListeners(eventName, sourceKnex, targetKnex) {\n  const listeners = sourceKnex.listeners(eventName);\n  listeners.forEach((listener) => {\n    targetKnex.on(eventName, listener);\n  });\n}\n\nfunction redefineProperties(knex, client) {\n  // Allow chaining methods from the root object, before\n  // any other information is specified.\n  //\n  // TODO: `QueryBuilder.extend(..)` allows new QueryBuilder\n  //       methods to be introduced via external components.\n  //       As a side-effect, it also pushes the new method names\n  //       into the `QueryInterface` array.\n  //\n  //       The Problem: due to the way the code is currently\n  //       structured, these new methods cannot be retroactively\n  //       injected into existing `knex` instances!  As a result,\n  //       some `knex` instances will support the methods, and\n  //       others will not.\n  //\n  //       We should revisit this once we figure out the desired\n  //       behavior / usage.  For instance: do we really want to\n  //       allow external components to directly manipulate `knex`\n  //       data structures?  Or, should we come up w/ a different\n  //       approach that avoids side-effects / mutation?\n  //\n  //      (FYI: I noticed this issue because I attempted to integrate\n  //       this logic directly into the `KNEX_PROPERTY_DEFINITIONS`\n  //       construction.  However, `KNEX_PROPERTY_DEFINITIONS` is\n  //       constructed before any `knex` instances are created.\n  //       As a result, the method extensions were missing from all\n  //       `knex` instances.)\n  QueryInterface.forEach(function (method) {\n    knex[method] = function () {\n      const builder = this.queryBuilder();\n      return builder[method].apply(builder, arguments);\n    };\n  });\n\n  Object.defineProperties(knex, KNEX_PROPERTY_DEFINITIONS);\n\n  initContext(knex);\n  knex.client = client;\n\n  // TODO: It looks like this field is never actually used.\n  //       It should probably be removed in a future PR.\n  knex.client.makeKnex = makeKnex;\n\n  knex.userParams = {};\n\n  // Hook up the \"knex\" object as an EventEmitter.\n  const ee = new EventEmitter();\n  for (const key in ee) {\n    knex[key] = ee[key];\n  }\n\n  // Unfortunately, something seems to be broken in Node 6 and removing events from a clone also mutates original Knex,\n  // which is highly undesirable\n  if (knex._internalListeners) {\n    knex._internalListeners.forEach(({ eventName, listener }) => {\n      knex.client.removeListener(eventName, listener); // Remove duplicates for copies\n    });\n  }\n  knex._internalListeners = [];\n\n  // Passthrough all \"start\" and \"query\" events to the knex object.\n  _addInternalListener(knex, 'start', (obj) => {\n    knex.emit('start', obj);\n  });\n  _addInternalListener(knex, 'query', (obj) => {\n    knex.emit('query', obj);\n  });\n  _addInternalListener(knex, 'query-error', (err, obj) => {\n    knex.emit('query-error', err, obj);\n  });\n  _addInternalListener(knex, 'query-response', (response, obj, builder) => {\n    knex.emit('query-response', response, obj, builder);\n  });\n}\n\nfunction _addInternalListener(knex, eventName, listener) {\n  knex.client.on(eventName, listener);\n  knex._internalListeners.push({\n    eventName,\n    listener,\n  });\n}\n\nfunction createQueryBuilder(knexContext, tableName, options) {\n  const qb = knexContext.queryBuilder();\n  if (!tableName)\n    knexContext.client.logger.warn(\n      'calling knex without a tableName is deprecated. Use knex.queryBuilder() instead.'\n    );\n  return tableName ? qb.table(tableName, options) : qb;\n}\n\nfunction shallowCloneFunction(originalFunction) {\n  const fnContext = Object.create(\n    Object.getPrototypeOf(originalFunction),\n    Object.getOwnPropertyDescriptors(originalFunction)\n  );\n\n  const knexContext = {};\n  const knexFnWrapper = (tableName, options) => {\n    return createQueryBuilder(knexContext, tableName, options);\n  };\n\n  const clonedFunction = knexFnWrapper.bind(fnContext);\n  Object.assign(clonedFunction, originalFunction);\n  clonedFunction.context = knexContext;\n  return clonedFunction;\n}\n\nmodule.exports = makeKnex;\n","// Transaction\n// -------\nconst { EventEmitter } = require('events');\nconst Debug = require('debug');\nconst uniqueId = require('lodash/uniqueId');\nconst { callbackify } = require('util');\n\nconst makeKnex = require('./util/make-knex');\nconst { timeout, KnexTimeoutError } = require('./util/timeout');\nconst finallyMixin = require('./util/finally-mixin');\n\nconst debug = Debug('knex:tx');\n\n// FYI: This is defined as a function instead of a constant so that\n//      each Transactor can have its own copy of the default config.\n//      This will minimize the impact of bugs that might be introduced\n//      if a Transactor ever mutates its config.\nfunction DEFAULT_CONFIG() {\n  return {\n    userParams: {},\n    doNotRejectOnRollback: true,\n  };\n}\n\n// Acts as a facade for a Promise, keeping the internal state\n// and managing any child transactions.\nclass Transaction extends EventEmitter {\n  constructor(client, container, config = DEFAULT_CONFIG(), outerTx = null) {\n    super();\n    this.userParams = config.userParams;\n    this.doNotRejectOnRollback = config.doNotRejectOnRollback;\n\n    const txid = (this.txid = uniqueId('trx'));\n\n    this.client = client;\n    this.logger = client.logger;\n    this.outerTx = outerTx;\n    this.trxClient = undefined;\n    this._completed = false;\n    this._debug = client.config && client.config.debug;\n\n    debug(\n      '%s: Starting %s transaction',\n      txid,\n      outerTx ? 'nested' : 'top level'\n    );\n\n    // `this` can potentially serve as an `outerTx` for another\n    // Transaction.  So, go ahead and establish `_lastChild` now.\n    this._lastChild = Promise.resolve();\n\n    const _previousSibling = outerTx ? outerTx._lastChild : Promise.resolve();\n\n    // FYI: As you will see in a moment, this Promise will be used to construct\n    //      2 separate Promise Chains.  This ensures that each Promise Chain\n    //      can establish its error-handling semantics without interfering\n    //      with the other Promise Chain.\n    const basePromise = _previousSibling.then(() =>\n      this._evaluateContainer(config, container)\n    );\n\n    // FYI: This is the Promise Chain for EXTERNAL use.  It ensures that the\n    //      caller must handle any exceptions that result from `basePromise`.\n    this._promise = basePromise.then((x) => x);\n\n    if (outerTx) {\n      // FYI: This is the Promise Chain for INTERNAL use.  It serves as a signal\n      //      for when the next sibling should begin its execution.  Therefore,\n      //      exceptions are caught and ignored.\n      outerTx._lastChild = basePromise.catch(() => {});\n    }\n  }\n\n  isCompleted() {\n    return (\n      this._completed || (this.outerTx && this.outerTx.isCompleted()) || false\n    );\n  }\n\n  begin(conn) {\n    return this.query(conn, 'BEGIN;');\n  }\n\n  savepoint(conn) {\n    return this.query(conn, `SAVEPOINT ${this.txid};`);\n  }\n\n  commit(conn, value) {\n    return this.query(conn, 'COMMIT;', 1, value);\n  }\n\n  release(conn, value) {\n    return this.query(conn, `RELEASE SAVEPOINT ${this.txid};`, 1, value);\n  }\n\n  rollback(conn, error) {\n    return timeout(this.query(conn, 'ROLLBACK', 2, error), 5000).catch(\n      (err) => {\n        if (!(err instanceof KnexTimeoutError)) {\n          return Promise.reject(err);\n        }\n        this._rejecter(error);\n      }\n    );\n  }\n\n  rollbackTo(conn, error) {\n    return timeout(\n      this.query(conn, `ROLLBACK TO SAVEPOINT ${this.txid}`, 2, error),\n      5000\n    ).catch((err) => {\n      if (!(err instanceof KnexTimeoutError)) {\n        return Promise.reject(err);\n      }\n      this._rejecter(error);\n    });\n  }\n\n  query(conn, sql, status, value) {\n    const q = this.trxClient\n      .query(conn, sql)\n      .catch((err) => {\n        status = 2;\n        value = err;\n        this._completed = true;\n        debug('%s error running transaction query', this.txid);\n      })\n      .then((res) => {\n        if (status === 1) {\n          this._resolver(value);\n        }\n        if (status === 2) {\n          if (value === undefined) {\n            if (this.doNotRejectOnRollback && /^ROLLBACK\\b/i.test(sql)) {\n              this._resolver();\n              return;\n            }\n\n            value = new Error(`Transaction rejected with non-error: ${value}`);\n          }\n          this._rejecter(value);\n        }\n        return res;\n      });\n    if (status === 1 || status === 2) {\n      this._completed = true;\n    }\n    return q;\n  }\n\n  debug(enabled) {\n    this._debug = arguments.length ? enabled : true;\n    return this;\n  }\n\n  async _evaluateContainer(config, container) {\n    return this.acquireConnection(config, (connection) => {\n      const trxClient = (this.trxClient = makeTxClient(\n        this,\n        this.client,\n        connection\n      ));\n      const init = this.client.transacting\n        ? this.savepoint(connection)\n        : this.begin(connection);\n      const executionPromise = new Promise((resolver, rejecter) => {\n        this._resolver = resolver;\n        this._rejecter = rejecter;\n      });\n\n      init\n        .then(() => {\n          return makeTransactor(this, connection, trxClient);\n        })\n        .then((transactor) => {\n          transactor.executionPromise = executionPromise;\n\n          // If we've returned a \"thenable\" from the transaction container, assume\n          // the rollback and commit are chained to this object's success / failure.\n          // Directly thrown errors are treated as automatic rollbacks.\n          let result;\n          try {\n            result = container(transactor);\n          } catch (err) {\n            result = Promise.reject(err);\n          }\n          if (result && result.then && typeof result.then === 'function') {\n            result\n              .then((val) => {\n                return transactor.commit(val);\n              })\n              .catch((err) => {\n                return transactor.rollback(err);\n              });\n          }\n          return null;\n        })\n        .catch((e) => {\n          return this._rejecter(e);\n        });\n\n      return executionPromise;\n    });\n  }\n\n  // Acquire a connection and create a disposer - either using the one passed\n  // via config or getting one off the client. The disposer will be called once\n  // the original promise is marked completed.\n  async acquireConnection(config, cb) {\n    const configConnection = config && config.connection;\n    const connection =\n      configConnection || (await this.client.acquireConnection());\n\n    try {\n      connection.__knexTxId = this.txid;\n      return await cb(connection);\n    } finally {\n      if (!configConnection) {\n        debug('%s: releasing connection', this.txid);\n        this.client.releaseConnection(connection);\n      } else {\n        debug('%s: not releasing external connection', this.txid);\n      }\n    }\n  }\n\n  then(onResolve, onReject) {\n    return this._promise.then(onResolve, onReject);\n  }\n\n  catch(onReject) {\n    return this._promise.catch(onReject);\n  }\n\n  asCallback(cb) {\n    callbackify(() => this._promise)(cb);\n    return this._promise;\n  }\n}\nfinallyMixin(Transaction.prototype);\n\n// The transactor is a full featured knex object, with a \"commit\", a \"rollback\"\n// and a \"savepoint\" function. The \"savepoint\" is just sugar for creating a new\n// transaction. If the rollback is run inside a savepoint, it rolls back to the\n// last savepoint - otherwise it rolls back the transaction.\nfunction makeTransactor(trx, connection, trxClient) {\n  const transactor = makeKnex(trxClient);\n\n  transactor.context.withUserParams = () => {\n    throw new Error(\n      'Cannot set user params on a transaction - it can only inherit params from main knex instance'\n    );\n  };\n\n  transactor.isTransaction = true;\n  transactor.userParams = trx.userParams || {};\n\n  transactor.context.transaction = function (container, options) {\n    if (!options) {\n      options = { doNotRejectOnRollback: true };\n    } else if (options.doNotRejectOnRollback === undefined) {\n      options.doNotRejectOnRollback = true;\n    }\n\n    return this._transaction(container, options, trx);\n  };\n\n  transactor.savepoint = function (container, options) {\n    return transactor.transaction(container, options);\n  };\n\n  if (trx.client.transacting) {\n    transactor.commit = (value) => trx.release(connection, value);\n    transactor.rollback = (error) => trx.rollbackTo(connection, error);\n  } else {\n    transactor.commit = (value) => trx.commit(connection, value);\n    transactor.rollback = (error) => trx.rollback(connection, error);\n  }\n\n  transactor.isCompleted = () => trx.isCompleted();\n\n  return transactor;\n}\n\n// We need to make a client object which always acquires the same\n// connection and does not release back into the pool.\nfunction makeTxClient(trx, client, connection) {\n  const trxClient = Object.create(client.constructor.prototype);\n  trxClient.version = client.version;\n  trxClient.config = client.config;\n  trxClient.driver = client.driver;\n  trxClient.connectionSettings = client.connectionSettings;\n  trxClient.transacting = true;\n  trxClient.valueForUndefined = client.valueForUndefined;\n  trxClient.logger = client.logger;\n\n  trxClient.on('start', function (arg) {\n    trx.emit('start', arg);\n    client.emit('start', arg);\n  });\n\n  trxClient.on('query', function (arg) {\n    trx.emit('query', arg);\n    client.emit('query', arg);\n  });\n\n  trxClient.on('query-error', function (err, obj) {\n    trx.emit('query-error', err, obj);\n    client.emit('query-error', err, obj);\n  });\n\n  trxClient.on('query-response', function (response, obj, builder) {\n    trx.emit('query-response', response, obj, builder);\n    client.emit('query-response', response, obj, builder);\n  });\n\n  const _query = trxClient.query;\n  trxClient.query = function (conn, obj) {\n    const completed = trx.isCompleted();\n    return new Promise(function (resolve, reject) {\n      try {\n        if (conn !== connection)\n          throw new Error('Invalid connection for transaction query.');\n        if (completed) completedError(trx, obj);\n        resolve(_query.call(trxClient, conn, obj));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  const _stream = trxClient.stream;\n  trxClient.stream = function (conn, obj, stream, options) {\n    const completed = trx.isCompleted();\n    return new Promise(function (resolve, reject) {\n      try {\n        if (conn !== connection)\n          throw new Error('Invalid connection for transaction query.');\n        if (completed) completedError(trx, obj);\n        resolve(_stream.call(trxClient, conn, obj, stream, options));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  trxClient.acquireConnection = function () {\n    return Promise.resolve(connection);\n  };\n  trxClient.releaseConnection = function () {\n    return Promise.resolve();\n  };\n\n  return trxClient;\n}\n\nfunction completedError(trx, obj) {\n  const sql = typeof obj === 'string' ? obj : obj && obj.sql;\n  debug('%s: Transaction completed: %s', trx.txid, sql);\n  throw new Error(\n    'Transaction query already complete, run with DEBUG=knex:tx for more info'\n  );\n}\n\nmodule.exports = Transaction;\n","// Query Compiler\n// -------\nconst helpers = require('../helpers');\nconst Raw = require('../raw');\nconst QueryBuilder = require('./builder');\nconst JoinClause = require('./joinclause');\nconst debug = require('debug');\n\nconst assign = require('lodash/assign');\nconst bind = require('lodash/bind');\nconst compact = require('lodash/compact');\nconst groupBy = require('lodash/groupBy');\nconst has = require('lodash/has');\nconst isEmpty = require('lodash/isEmpty');\nconst map = require('lodash/map');\nconst omitBy = require('lodash/omitBy');\nconst reduce = require('lodash/reduce');\nconst { nanoid } = require('../util/nanoid');\nconst { isString, isUndefined } = require('../util/is');\n\nconst debugBindings = debug('knex:bindings');\n\nconst components = [\n  'columns',\n  'join',\n  'where',\n  'union',\n  'group',\n  'having',\n  'order',\n  'limit',\n  'offset',\n  'lock',\n  'waitMode',\n];\n\n// The \"QueryCompiler\" takes all of the query statements which\n// have been gathered in the \"QueryBuilder\" and turns them into a\n// properly formatted / bound query string.\nclass QueryCompiler {\n  constructor(client, builder) {\n    this.client = client;\n    this.method = builder._method || 'select';\n    this.options = builder._options;\n    this.single = builder._single;\n    this.timeout = builder._timeout || false;\n    this.cancelOnTimeout = builder._cancelOnTimeout || false;\n    this.grouped = groupBy(builder._statements, 'grouping');\n    this.formatter = client.formatter(builder);\n    // Used when the insert call is empty.\n    this._emptyInsertValue = 'default values';\n    this.first = this.select;\n  }\n\n  // Collapse the builder into a single object\n  toSQL(method, tz) {\n    this._undefinedInWhereClause = false;\n    this.undefinedBindingsInfo = [];\n\n    method = method || this.method;\n    const val = this[method]() || '';\n\n    const query = {\n      method,\n      options: reduce(this.options, assign, {}),\n      timeout: this.timeout,\n      cancelOnTimeout: this.cancelOnTimeout,\n      bindings: this.formatter.bindings || [],\n      __knexQueryUid: nanoid(),\n    };\n\n    Object.defineProperties(query, {\n      toNative: {\n        value: () => {\n          return {\n            sql: this.client.positionBindings(query.sql),\n            bindings: this.client.prepBindings(query.bindings),\n          };\n        },\n        enumerable: false,\n      },\n    });\n\n    if (isString(val)) {\n      query.sql = val;\n    } else {\n      assign(query, val);\n    }\n\n    if (method === 'select' || method === 'first') {\n      if (this.single.as) {\n        query.as = this.single.as;\n      }\n    }\n\n    if (this._undefinedInWhereClause) {\n      debugBindings(query.bindings);\n      throw new Error(\n        `Undefined binding(s) detected when compiling ` +\n          `${method.toUpperCase()}. Undefined column(s): [${this.undefinedBindingsInfo.join(\n            ', '\n          )}] query: ${query.sql}`\n      );\n    }\n\n    return query;\n  }\n\n  // Compiles the `select` statement, or nested sub-selects by calling each of\n  // the component compilers, trimming out the empties, and returning a\n  // generated query string.\n  select() {\n    let sql = this.with();\n\n    const statements = components.map((component) => this[component](this));\n    sql += compact(statements).join(' ');\n    return sql;\n  }\n\n  pluck() {\n    let toPluck = this.single.pluck;\n    if (toPluck.indexOf('.') !== -1) {\n      toPluck = toPluck.split('.').slice(-1)[0];\n    }\n    return {\n      sql: this.select(),\n      pluck: toPluck,\n    };\n  }\n\n  // Compiles an \"insert\" query, allowing for multiple\n  // inserts using a single query statement.\n  insert() {\n    const insertValues = this.single.insert || [];\n    let sql = this.with() + `insert into ${this.tableName} `;\n    if (Array.isArray(insertValues)) {\n      if (insertValues.length === 0) {\n        return '';\n      }\n    } else if (typeof insertValues === 'object' && isEmpty(insertValues)) {\n      return sql + this._emptyInsertValue;\n    }\n\n    const insertData = this._prepInsert(insertValues);\n    if (typeof insertData === 'string') {\n      sql += insertData;\n    } else {\n      if (insertData.columns.length) {\n        sql += `(${this.formatter.columnize(insertData.columns)}`;\n        sql += ') values (';\n        let i = -1;\n        while (++i < insertData.values.length) {\n          if (i !== 0) sql += '), (';\n          sql += this.formatter.parameterize(\n            insertData.values[i],\n            this.client.valueForUndefined\n          );\n        }\n        sql += ')';\n      } else if (insertValues.length === 1 && insertValues[0]) {\n        sql += this._emptyInsertValue;\n      } else {\n        sql = '';\n      }\n    }\n    return sql;\n  }\n\n  // Compiles the \"update\" query.\n  update() {\n    // Make sure tableName is processed by the formatter first.\n    const withSQL = this.with();\n    const { tableName } = this;\n    const updateData = this._prepUpdate(this.single.update);\n    const wheres = this.where();\n    return (\n      withSQL +\n      `update ${this.single.only ? 'only ' : ''}${tableName}` +\n      ' set ' +\n      updateData.join(', ') +\n      (wheres ? ` ${wheres}` : '')\n    );\n  }\n\n  _hintComments() {\n    let hints = this.grouped.hintComments || [];\n    hints = hints.map((hint) => compact(hint.value).join(' '));\n    hints = compact(hints).join(' ');\n    return hints ? `/*+ ${hints} */ ` : ''\n  }\n\n  // Compiles the columns in the query, specifying if an item was distinct.\n  columns() {\n    let distinctClause = '';\n    if (this.onlyUnions()) return '';\n    const hints = this._hintComments()\n    const columns = this.grouped.columns || [];\n    let i = -1,\n      sql = [];\n    if (columns) {\n      while (++i < columns.length) {\n        const stmt = columns[i];\n        if (stmt.distinct) distinctClause = 'distinct ';\n        if (stmt.distinctOn) {\n          distinctClause = this.distinctOn(stmt.value);\n          continue;\n        }\n        if (stmt.type === 'aggregate') {\n          sql.push(...this.aggregate(stmt));\n        } else if (stmt.type === 'aggregateRaw') {\n          sql.push(this.aggregateRaw(stmt));\n        } else if (stmt.value && stmt.value.length > 0) {\n          sql.push(this.formatter.columnize(stmt.value));\n        }\n      }\n    }\n    if (sql.length === 0) sql = ['*'];\n    return (\n      `select ${hints}${distinctClause}` +\n      sql.join(', ') +\n      (this.tableName\n        ? ` from ${this.single.only ? 'only ' : ''}${this.tableName}`\n        : '')\n    );\n  }\n\n  _aggregate(stmt, { aliasSeparator = ' as ', distinctParentheses } = {}) {\n    const value = stmt.value;\n    const method = stmt.method;\n    const distinct = stmt.aggregateDistinct ? 'distinct ' : '';\n    const wrap = (identifier) => this.formatter.wrap(identifier);\n    const addAlias = (value, alias) => {\n      if (alias) {\n        return value + aliasSeparator + wrap(alias);\n      }\n      return value;\n    };\n    const aggregateArray = (value, alias) => {\n      let columns = value.map(wrap).join(', ');\n      if (distinct) {\n        const openParen = distinctParentheses ? '(' : ' ';\n        const closeParen = distinctParentheses ? ')' : '';\n        columns = distinct.trim() + openParen + columns + closeParen;\n      }\n      const aggregated = `${method}(${columns})`;\n      return addAlias(aggregated, alias);\n    };\n    const aggregateString = (value, alias) => {\n      const aggregated = `${method}(${distinct + wrap(value)})`;\n      return addAlias(aggregated, alias);\n    };\n\n    if (Array.isArray(value)) {\n      return [aggregateArray(value)];\n    }\n\n    if (typeof value === 'object') {\n      if (stmt.alias) {\n        throw new Error('When using an object explicit alias can not be used');\n      }\n      return Object.entries(value).map(([alias, column]) => {\n        if (Array.isArray(column)) {\n          return aggregateArray(column, alias);\n        }\n        return aggregateString(column, alias);\n      });\n    }\n\n    // Allows us to speciy an alias for the aggregate types.\n    const splitOn = value.toLowerCase().indexOf(' as ');\n    let column = value;\n    let { alias } = stmt;\n    if (splitOn !== -1) {\n      column = value.slice(0, splitOn);\n      if (alias) {\n        throw new Error(`Found multiple aliases for same column: ${column}`);\n      }\n      alias = value.slice(splitOn + 4);\n    }\n    return [aggregateString(column, alias)];\n  }\n\n  aggregate(stmt) {\n    return this._aggregate(stmt);\n  }\n\n  aggregateRaw(stmt) {\n    const distinct = stmt.aggregateDistinct ? 'distinct ' : '';\n    return `${stmt.method}(${distinct + this.formatter.unwrapRaw(stmt.value)})`;\n  }\n\n  // Compiles all each of the `join` clauses on the query,\n  // including any nested join queries.\n  join() {\n    let sql = '';\n    let i = -1;\n    const joins = this.grouped.join;\n    if (!joins) return '';\n    while (++i < joins.length) {\n      const join = joins[i];\n      const table = join.schema ? `${join.schema}.${join.table}` : join.table;\n      if (i > 0) sql += ' ';\n      if (join.joinType === 'raw') {\n        sql += this.formatter.unwrapRaw(join.table);\n      } else {\n        sql += join.joinType + ' join ' + this.formatter.wrap(table);\n        let ii = -1;\n        while (++ii < join.clauses.length) {\n          const clause = join.clauses[ii];\n          if (ii > 0) {\n            sql += ` ${clause.bool} `;\n          } else {\n            sql += ` ${clause.type === 'onUsing' ? 'using' : 'on'} `;\n          }\n          const val = this[clause.type].call(this, clause);\n          if (val) {\n            sql += val;\n          }\n        }\n      }\n    }\n    return sql;\n  }\n\n  onBetween(statement) {\n    return (\n      this.formatter.wrap(statement.column) +\n      ' ' +\n      this._not(statement, 'between') +\n      ' ' +\n      map(statement.value, bind(this.formatter.parameter, this.formatter)).join(\n        ' and '\n      )\n    );\n  }\n\n  onNull(statement) {\n    return (\n      this.formatter.wrap(statement.column) +\n      ' is ' +\n      this._not(statement, 'null')\n    );\n  }\n\n  onExists(statement) {\n    return (\n      this._not(statement, 'exists') +\n      ' (' +\n      this.formatter.rawOrFn(statement.value) +\n      ')'\n    );\n  }\n\n  onIn(statement) {\n    if (Array.isArray(statement.column)) return this.multiOnIn(statement);\n    return (\n      this.formatter.wrap(statement.column) +\n      ' ' +\n      this._not(statement, 'in ') +\n      this.wrap(this.formatter.parameterize(statement.value))\n    );\n  }\n\n  multiOnIn(statement) {\n    let i = -1,\n      sql = `(${this.formatter.columnize(statement.column)}) `;\n    sql += this._not(statement, 'in ') + '((';\n    while (++i < statement.value.length) {\n      if (i !== 0) sql += '),(';\n      sql += this.formatter.parameterize(statement.value[i]);\n    }\n    return sql + '))';\n  }\n\n  // Compiles all `where` statements on the query.\n  where() {\n    const wheres = this.grouped.where;\n    if (!wheres) return;\n    const sql = [];\n    let i = -1;\n    while (++i < wheres.length) {\n      const stmt = wheres[i];\n      if (\n        Object.prototype.hasOwnProperty.call(stmt, 'value') &&\n        helpers.containsUndefined(stmt.value)\n      ) {\n        this.undefinedBindingsInfo.push(stmt.column);\n        this._undefinedInWhereClause = true;\n      }\n      const val = this[stmt.type](stmt);\n      if (val) {\n        if (sql.length === 0) {\n          sql[0] = 'where';\n        } else {\n          sql.push(stmt.bool);\n        }\n        sql.push(val);\n      }\n    }\n    return sql.length > 1 ? sql.join(' ') : '';\n  }\n\n  group() {\n    return this._groupsOrders('group');\n  }\n\n  order() {\n    return this._groupsOrders('order');\n  }\n\n  // Compiles the `having` statements.\n  having() {\n    const havings = this.grouped.having;\n    if (!havings) return '';\n    const sql = ['having'];\n    for (let i = 0, l = havings.length; i < l; i++) {\n      const s = havings[i];\n      const val = this[s.type](s);\n      if (val) {\n        if (sql.length === 0) {\n          sql[0] = 'where';\n        }\n        if (sql.length > 1 || (sql.length === 1 && sql[0] !== 'having')) {\n          sql.push(s.bool);\n        }\n        sql.push(val);\n      }\n    }\n    return sql.length > 1 ? sql.join(' ') : '';\n  }\n\n  havingRaw(statement) {\n    return this._not(statement, '') + this.formatter.unwrapRaw(statement.value);\n  }\n\n  havingWrapped(statement) {\n    const val = this.formatter.rawOrFn(statement.value, 'where');\n    return (val && this._not(statement, '') + '(' + val.slice(6) + ')') || '';\n  }\n\n  havingBasic(statement) {\n    return (\n      this._not(statement, '') +\n      this.formatter.wrap(statement.column) +\n      ' ' +\n      this.formatter.operator(statement.operator) +\n      ' ' +\n      this.formatter.parameter(statement.value)\n    );\n  }\n\n  havingNull(statement) {\n    return (\n      this.formatter.wrap(statement.column) +\n      ' is ' +\n      this._not(statement, 'null')\n    );\n  }\n\n  havingExists(statement) {\n    return (\n      this._not(statement, 'exists') +\n      ' (' +\n      this.formatter.rawOrFn(statement.value) +\n      ')'\n    );\n  }\n\n  havingBetween(statement) {\n    return (\n      this.formatter.wrap(statement.column) +\n      ' ' +\n      this._not(statement, 'between') +\n      ' ' +\n      map(statement.value, bind(this.formatter.parameter, this.formatter)).join(\n        ' and '\n      )\n    );\n  }\n\n  havingIn(statement) {\n    if (Array.isArray(statement.column)) return this.multiHavingIn(statement);\n    return (\n      this.formatter.wrap(statement.column) +\n      ' ' +\n      this._not(statement, 'in ') +\n      this.wrap(this.formatter.parameterize(statement.value))\n    );\n  }\n\n  multiHavingIn(statement) {\n    let i = -1,\n      sql = `(${this.formatter.columnize(statement.column)}) `;\n    sql += this._not(statement, 'in ') + '((';\n    while (++i < statement.value.length) {\n      if (i !== 0) sql += '),(';\n      sql += this.formatter.parameterize(statement.value[i]);\n    }\n    return sql + '))';\n  }\n\n  // Compile the \"union\" queries attached to the main query.\n  union() {\n    const onlyUnions = this.onlyUnions();\n    const unions = this.grouped.union;\n    if (!unions) return '';\n    let sql = '';\n    for (let i = 0, l = unions.length; i < l; i++) {\n      const union = unions[i];\n      if (i > 0) sql += ' ';\n      if (i > 0 || !onlyUnions) sql += union.clause + ' ';\n      const statement = this.formatter.rawOrFn(union.value);\n      if (statement) {\n        if (union.wrap) sql += '(';\n        sql += statement;\n        if (union.wrap) sql += ')';\n      }\n    }\n    return sql;\n  }\n\n  // If we haven't specified any columns or a `tableName`, we're assuming this\n  // is only being used for unions.\n  onlyUnions() {\n    return !this.grouped.columns && this.grouped.union && !this.tableName;\n  }\n\n  limit() {\n    const noLimit = !this.single.limit && this.single.limit !== 0;\n    if (noLimit) return '';\n    return `limit ${this.formatter.parameter(this.single.limit)}`;\n  }\n\n  offset() {\n    if (!this.single.offset) return '';\n    return `offset ${this.formatter.parameter(this.single.offset)}`;\n  }\n\n  // Compiles a `delete` query.\n  del() {\n    // Make sure tableName is processed by the formatter first.\n    const { tableName } = this;\n    const withSQL = this.with();\n    const wheres = this.where();\n    return (\n      withSQL +\n      `delete from ${this.single.only ? 'only ' : ''}${tableName}` +\n      (wheres ? ` ${wheres}` : '')\n    );\n  }\n\n  // Compiles a `truncate` query.\n  truncate() {\n    return `truncate ${this.tableName}`;\n  }\n\n  // Compiles the \"locks\".\n  lock() {\n    if (this.single.lock) {\n      return this[this.single.lock]();\n    }\n  }\n\n  // Compiles the wait mode on the locks.\n  waitMode() {\n    if (this.single.waitMode) {\n      return this[this.single.waitMode]();\n    }\n  }\n\n  // Fail on unsupported databases\n  skipLocked() {\n    throw new Error(\n      '.skipLocked() is currently only supported on MySQL 8.0+ and PostgreSQL 9.5+'\n    );\n  }\n\n  // Fail on unsupported databases\n  noWait() {\n    throw new Error(\n      '.noWait() is currently only supported on MySQL 8.0+, MariaDB 10.3.0+ and PostgreSQL 9.5+'\n    );\n  }\n\n  distinctOn(value) {\n    throw new Error('.distinctOn() is currently only supported on PostgreSQL');\n  }\n\n  // On Clause\n  // ------\n\n  onWrapped(clause) {\n    const self = this;\n\n    const wrapJoin = new JoinClause();\n    clause.value.call(wrapJoin, wrapJoin);\n\n    let sql = '';\n    wrapJoin.clauses.forEach(function (wrapClause, ii) {\n      if (ii > 0) {\n        sql += ` ${wrapClause.bool} `;\n      }\n      const val = self[wrapClause.type](wrapClause);\n      if (val) {\n        sql += val;\n      }\n    });\n\n    if (sql.length) {\n      return `(${sql})`;\n    }\n    return '';\n  }\n\n  onBasic(clause) {\n    return (\n      this.formatter.wrap(clause.column) +\n      ' ' +\n      this.formatter.operator(clause.operator) +\n      ' ' +\n      this.formatter.wrap(clause.value)\n    );\n  }\n\n  onVal(clause) {\n    return (\n      this.formatter.wrap(clause.column) +\n      ' ' +\n      this.formatter.operator(clause.operator) +\n      ' ' +\n      this.formatter.parameter(clause.value)\n    );\n  }\n\n  onRaw(clause) {\n    return this.formatter.unwrapRaw(clause.value);\n  }\n\n  onUsing(clause) {\n    return '(' + this.formatter.columnize(clause.column) + ')';\n  }\n\n  // Where Clause\n  // ------\n\n  whereIn(statement) {\n    let columns = null;\n    if (Array.isArray(statement.column)) {\n      columns = `(${this.formatter.columnize(statement.column)})`;\n    } else {\n      columns = this.formatter.wrap(statement.column);\n    }\n\n    const values = this.formatter.values(statement.value);\n    return `${columns} ${this._not(statement, 'in ')}${values}`;\n  }\n\n  whereNull(statement) {\n    return (\n      this.formatter.wrap(statement.column) +\n      ' is ' +\n      this._not(statement, 'null')\n    );\n  }\n\n  // Compiles a basic \"where\" clause.\n  whereBasic(statement) {\n    return (\n      this._not(statement, '') +\n      this.formatter.wrap(statement.column) +\n      ' ' +\n      this.formatter.operator(statement.operator) +\n      ' ' +\n      (statement.asColumn\n        ? this.formatter.wrap(statement.value)\n        : this.formatter.parameter(statement.value))\n    );\n  }\n\n  whereExists(statement) {\n    return (\n      this._not(statement, 'exists') +\n      ' (' +\n      this.formatter.rawOrFn(statement.value) +\n      ')'\n    );\n  }\n\n  whereWrapped(statement) {\n    const val = this.formatter.rawOrFn(statement.value, 'where');\n    return (val && this._not(statement, '') + '(' + val.slice(6) + ')') || '';\n  }\n\n  whereBetween(statement) {\n    return (\n      this.formatter.wrap(statement.column) +\n      ' ' +\n      this._not(statement, 'between') +\n      ' ' +\n      map(statement.value, bind(this.formatter.parameter, this.formatter)).join(\n        ' and '\n      )\n    );\n  }\n\n  // Compiles a \"whereRaw\" query.\n  whereRaw(statement) {\n    return this._not(statement, '') + this.formatter.unwrapRaw(statement.value);\n  }\n\n  wrap(str) {\n    if (str.charAt(0) !== '(') return `(${str})`;\n    return str;\n  }\n\n  // Compiles all `with` statements on the query.\n  with() {\n    if (!this.grouped.with || !this.grouped.with.length) {\n      return '';\n    }\n    const withs = this.grouped.with;\n    if (!withs) return;\n    const sql = [];\n    let i = -1;\n    let isRecursive = false;\n    while (++i < withs.length) {\n      const stmt = withs[i];\n      if (stmt.recursive) {\n        isRecursive = true;\n      }\n      const val = this[stmt.type](stmt);\n      sql.push(val);\n    }\n    return `with ${isRecursive ? 'recursive ' : ''}${sql.join(', ')} `;\n  }\n\n  withWrapped(statement) {\n    const val = this.formatter.rawOrFn(statement.value);\n    return (\n      (val &&\n        this.formatter.columnize(statement.alias) + ' as (' + val + ')') ||\n      ''\n    );\n  }\n\n  // Determines whether to add a \"not\" prefix to the where clause.\n  _not(statement, str) {\n    if (statement.not) return `not ${str}`;\n    return str;\n  }\n\n  _prepInsert(data) {\n    const isRaw = this.formatter.rawOrFn(data);\n    if (isRaw) return isRaw;\n    let columns = [];\n    const values = [];\n    if (!Array.isArray(data)) data = data ? [data] : [];\n    let i = -1;\n    while (++i < data.length) {\n      if (data[i] == null) break;\n      if (i === 0) columns = Object.keys(data[i]).sort();\n      const row = new Array(columns.length);\n      const keys = Object.keys(data[i]);\n      let j = -1;\n      while (++j < keys.length) {\n        const key = keys[j];\n        let idx = columns.indexOf(key);\n        if (idx === -1) {\n          columns = columns.concat(key).sort();\n          idx = columns.indexOf(key);\n          let k = -1;\n          while (++k < values.length) {\n            values[k].splice(idx, 0, undefined);\n          }\n          row.splice(idx, 0, undefined);\n        }\n        row[idx] = data[i][key];\n      }\n      values.push(row);\n    }\n    return {\n      columns,\n      values,\n    };\n  }\n\n  // \"Preps\" the update.\n  _prepUpdate(data = {}) {\n    const { counter = {} } = this.single;\n\n    for (const column of Object.keys(counter)) {\n      //Skip?\n      if (has(data, column)) {\n        //Needed?\n        this.client.logger.warn(\n          `increment/decrement called for a column that has already been specified in main .update() call. Ignoring increment/decrement and using value from .update() call.`\n        );\n        continue;\n      }\n\n      let value = counter[column];\n\n      const symbol = value < 0 ? '-' : '+';\n\n      if (symbol === '-') {\n        value = -value;\n      }\n\n      data[column] = this.client.raw(`?? ${symbol} ?`, [column, value]);\n    }\n\n    data = omitBy(data, isUndefined);\n\n    const vals = [];\n    const columns = Object.keys(data);\n    let i = -1;\n\n    while (++i < columns.length) {\n      vals.push(\n        this.formatter.wrap(columns[i]) +\n          ' = ' +\n          this.formatter.parameter(data[columns[i]])\n      );\n    }\n\n    if (isEmpty(vals)) {\n      throw new Error(\n        [\n          'Empty .update() call detected!',\n          'Update data does not contain any values to update.',\n          'This will result in a faulty query.',\n          this.single.table ? `Table: ${this.single.table}.` : '',\n          this.single.update\n            ? `Columns: ${Object.keys(this.single.update)}.`\n            : '',\n        ].join(' ')\n      );\n    }\n\n    return vals;\n  }\n\n  _formatGroupsItemValue(value) {\n    const { formatter } = this;\n    if (value instanceof Raw) {\n      return formatter.unwrapRaw(value);\n    } else if (value instanceof QueryBuilder) {\n      return '(' + formatter.columnize(value) + ')';\n    } else {\n      return formatter.columnize(value);\n    }\n  }\n\n  // Compiles the `order by` statements.\n  _groupsOrders(type) {\n    const items = this.grouped[type];\n    if (!items) return '';\n    const { formatter } = this;\n    const sql = items.map((item) => {\n      const column = this._formatGroupsItemValue(item.value);\n      const direction =\n        type === 'order' && item.type !== 'orderByRaw'\n          ? ` ${formatter.direction(item.direction)}`\n          : '';\n      return column + direction;\n    });\n    return sql.length ? type + ' by ' + sql.join(', ') : '';\n  }\n\n  // Get the table name, wrapping it if necessary.\n  // Implemented as a property to prevent ordering issues as described in #704.\n  get tableName() {\n    if (!this._tableName) {\n      // Only call this.formatter.wrap() the first time this property is accessed.\n      let tableName = this.single.table;\n      const schemaName = this.single.schema;\n\n      if (tableName && schemaName) tableName = `${schemaName}.${tableName}`;\n\n      this._tableName = tableName\n        ? // Wrap subQuery with parenthesis, #3485\n          this.formatter.wrap(tableName, tableName instanceof QueryBuilder)\n        : '';\n    }\n    return this._tableName;\n  }\n}\n\nmodule.exports = QueryCompiler;\n","const { inherits } = require('util');\nconst { EventEmitter } = require('events');\nconst toArray = require('lodash/toArray');\nconst { addQueryContext } = require('../helpers');\nconst saveAsyncStack = require('../util/save-async-stack');\n\n// Constructor for the builder instance, typically called from\n// `knex.builder`, accepting the current `knex` instance,\n// and pulling out the `client` and `grammar` from the current\n// knex instance.\nfunction SchemaBuilder(client) {\n  this.client = client;\n  this._sequence = [];\n\n  if (client.config) {\n    this._debug = client.config.debug;\n    saveAsyncStack(this, 4);\n  }\n}\n\ninherits(SchemaBuilder, EventEmitter);\n\n// Each of the schema builder methods just add to the\n// \"_sequence\" array for consistency.\n[\n  'createTable',\n  'createTableIfNotExists',\n  'createSchema',\n  'createSchemaIfNotExists',\n  'dropSchema',\n  'dropSchemaIfExists',\n  'createExtension',\n  'createExtensionIfNotExists',\n  'dropExtension',\n  'dropExtensionIfExists',\n  'table',\n  'alterTable',\n  'hasTable',\n  'hasColumn',\n  'dropTable',\n  'renameTable',\n  'dropTableIfExists',\n  'raw',\n].forEach(function (method) {\n  SchemaBuilder.prototype[method] = function () {\n    if (method === 'createTableIfNotExists') {\n      this.client.logger.warn(\n        [\n          'Use async .hasTable to check if table exists and then use plain .createTable. Since ',\n          '.createTableIfNotExists actually just generates plain \"CREATE TABLE IF NOT EXIST...\" ',\n          'query it will not work correctly if there are any alter table queries generated for ',\n          'columns afterwards. To not break old migrations this function is left untouched for now',\n          ', but it should not be used when writing new code and it is removed from documentation.',\n        ].join('')\n      );\n    }\n    if (method === 'table') method = 'alterTable';\n    this._sequence.push({\n      method,\n      args: toArray(arguments),\n    });\n    return this;\n  };\n});\n\nrequire('../interface')(SchemaBuilder);\naddQueryContext(SchemaBuilder);\n\nSchemaBuilder.prototype.withSchema = function (schemaName) {\n  this._schema = schemaName;\n  return this;\n};\n\nSchemaBuilder.prototype.toString = function () {\n  return this.toQuery();\n};\n\nSchemaBuilder.prototype.toSQL = function () {\n  return this.client.schemaCompiler(this).toSQL();\n};\n\nmodule.exports = SchemaBuilder;\n","const tail = require('lodash/tail');\nconst { isString } = require('../util/is');\n\n// Push a new query onto the compiled \"sequence\" stack,\n// creating a new formatter, returning the compiler.\nfunction pushQuery(query) {\n  if (!query) return;\n  if (isString(query)) {\n    query = { sql: query };\n  }\n  if (!query.bindings) {\n    query.bindings = this.formatter.bindings;\n  }\n  this.sequence.push(query);\n\n  this.formatter = this.client.formatter(this._commonBuilder);\n}\n\n// Used in cases where we need to push some additional column specific statements.\nfunction pushAdditional(fn) {\n  const child = new this.constructor(\n    this.client,\n    this.tableCompiler,\n    this.columnBuilder\n  );\n  fn.call(child, tail(arguments));\n  this.sequence.additional = (this.sequence.additional || []).concat(\n    child.sequence\n  );\n}\n\n// Unshift a new query onto the compiled \"sequence\" stack,\n// creating a new formatter, returning the compiler.\nfunction unshiftQuery(query) {\n  if (!query) return;\n  if (isString(query)) {\n    query = { sql: query };\n  }\n  if (!query.bindings) {\n    query.bindings = this.formatter.bindings;\n  }\n  this.sequence.unshift(query);\n\n  this.formatter = this.client.formatter(this._commonBuilder);\n}\n\nmodule.exports = {\n  pushAdditional,\n  pushQuery,\n  unshiftQuery,\n};\n","const { pushQuery, pushAdditional, unshiftQuery } = require('./helpers');\n\n// The \"SchemaCompiler\" takes all of the query statements which have been\n// gathered in the \"SchemaBuilder\" and turns them into an array of\n// properly formatted / bound query strings.\nfunction SchemaCompiler(client, builder) {\n  this.builder = builder;\n  this._commonBuilder = this.builder;\n  this.client = client;\n  this.schema = builder._schema;\n  this.formatter = client.formatter(builder);\n  this.sequence = [];\n}\n\nfunction throwOnlyPGError(operationName) {\n  throw new Error(\n    `${operationName} is not supported for this dialect (only PostgreSQL supports it currently).`\n  );\n}\n\nObject.assign(SchemaCompiler.prototype, {\n  pushQuery: pushQuery,\n\n  pushAdditional: pushAdditional,\n\n  unshiftQuery: unshiftQuery,\n\n  createTable: buildTable('create'),\n\n  createTableIfNotExists: buildTable('createIfNot'),\n\n  createSchema: () => {\n    throwOnlyPGError('createSchema');\n  },\n  createSchemaIfNotExists: () => {\n    throwOnlyPGError('createSchemaIfNotExists');\n  },\n  dropSchema: () => {\n    throwOnlyPGError('dropSchema');\n  },\n  dropSchemaIfExists: () => {\n    throwOnlyPGError('dropSchemaIfExists');\n  },\n\n  alterTable: buildTable('alter'),\n\n  dropTablePrefix: 'drop table ',\n\n  dropTable(tableName) {\n    this.pushQuery(\n      this.dropTablePrefix +\n        this.formatter.wrap(prefixedTableName(this.schema, tableName))\n    );\n  },\n\n  dropTableIfExists(tableName) {\n    this.pushQuery(\n      this.dropTablePrefix +\n        'if exists ' +\n        this.formatter.wrap(prefixedTableName(this.schema, tableName))\n    );\n  },\n\n  raw(sql, bindings) {\n    this.sequence.push(this.client.raw(sql, bindings).toSQL());\n  },\n\n  toSQL() {\n    const sequence = this.builder._sequence;\n    for (let i = 0, l = sequence.length; i < l; i++) {\n      const query = sequence[i];\n      this[query.method].apply(this, query.args);\n    }\n    return this.sequence;\n  },\n});\n\nfunction buildTable(type) {\n  return function (tableName, fn) {\n    const builder = this.client.tableBuilder(type, tableName, fn);\n\n    // pass queryContext down to tableBuilder but do not overwrite it if already set\n    const queryContext = this.builder.queryContext();\n    if (queryContext !== undefined && builder.queryContext() === undefined) {\n      builder.queryContext(queryContext);\n    }\n\n    builder.setSchema(this.schema);\n    const sql = builder.toSQL();\n\n    for (let i = 0, l = sql.length; i < l; i++) {\n      this.sequence.push(sql[i]);\n    }\n  };\n}\n\nfunction prefixedTableName(prefix, table) {\n  return prefix ? `${prefix}.${table}` : table;\n}\n\nmodule.exports = SchemaCompiler;\n","// TableBuilder\n\n// Takes the function passed to the \"createTable\" or \"table/editTable\"\n// functions and calls it with the \"TableBuilder\" as both the context and\n// the first argument. Inside this function we can specify what happens to the\n// method, pushing everything we want to do onto the \"allStatements\" array,\n// which is then compiled into sql.\n// ------\nconst each = require('lodash/each');\nconst extend = require('lodash/extend');\nconst toArray = require('lodash/toArray');\nconst helpers = require('../helpers');\nconst { isString, isFunction } = require('../util/is');\n\nfunction TableBuilder(client, method, tableName, fn) {\n  this.client = client;\n  this._fn = fn;\n  this._method = method;\n  this._schemaName = undefined;\n  this._tableName = tableName;\n  this._statements = [];\n  this._single = {};\n\n  if (!isFunction(this._fn)) {\n    throw new TypeError(\n      'A callback function must be supplied to calls against `.createTable` ' +\n        'and `.table`'\n    );\n  }\n}\n\nTableBuilder.prototype.setSchema = function (schemaName) {\n  this._schemaName = schemaName;\n};\n\n// Convert the current tableBuilder object \"toSQL\"\n// giving us additional methods if we're altering\n// rather than creating the table.\nTableBuilder.prototype.toSQL = function () {\n  if (this._method === 'alter') {\n    extend(this, AlterMethods);\n  }\n  this._fn.call(this, this);\n  return this.client.tableCompiler(this).toSQL();\n};\n\neach(\n  [\n    // Each of the index methods can be called individually, with the\n    // column name to be used, e.g. table.unique('column').\n    'index',\n    'primary',\n    'unique',\n\n    // Key specific\n    'dropPrimary',\n    'dropUnique',\n    'dropIndex',\n    'dropForeign',\n  ],\n  function (method) {\n    TableBuilder.prototype[method] = function () {\n      this._statements.push({\n        grouping: 'alterTable',\n        method,\n        args: toArray(arguments),\n      });\n      return this;\n    };\n  }\n);\n\n// Warn for dialect-specific table methods, since that's the\n// only time these are supported.\nconst specialMethods = {\n  mysql: ['engine', 'charset', 'collate'],\n  postgresql: ['inherits'],\n};\neach(specialMethods, function (methods, dialect) {\n  methods.forEach(function (method) {\n    TableBuilder.prototype[method] = function (value) {\n      if (this.client.dialect !== dialect) {\n        throw new Error(\n          `Knex only supports ${method} statement with ${dialect}.`\n        );\n      }\n      if (this._method === 'alter') {\n        throw new Error(\n          `Knex does not support altering the ${method} outside of create ` +\n            `table, please use knex.raw statement.`\n        );\n      }\n      this._single[method] = value;\n    };\n  });\n});\n\nhelpers.addQueryContext(TableBuilder);\n\n// Each of the column types that we can add, we create a new ColumnBuilder\n// instance and push it onto the statements array.\nconst columnTypes = [\n  // Numeric\n  'tinyint',\n  'smallint',\n  'mediumint',\n  'int',\n  'bigint',\n  'decimal',\n  'float',\n  'double',\n  'real',\n  'bit',\n  'boolean',\n  'serial',\n\n  // Date / Time\n  'date',\n  'datetime',\n  'timestamp',\n  'time',\n  'year',\n\n  // String\n  'char',\n  'varchar',\n  'tinytext',\n  'tinyText',\n  'text',\n  'mediumtext',\n  'mediumText',\n  'longtext',\n  'longText',\n  'binary',\n  'varbinary',\n  'tinyblob',\n  'tinyBlob',\n  'mediumblob',\n  'mediumBlob',\n  'blob',\n  'longblob',\n  'longBlob',\n  'enum',\n  'set',\n\n  // Increments, Aliases, and Additional\n  'bool',\n  'dateTime',\n  'increments',\n  'bigincrements',\n  'bigIncrements',\n  'integer',\n  'biginteger',\n  'bigInteger',\n  'string',\n  'json',\n  'jsonb',\n  'uuid',\n  'enu',\n  'specificType',\n];\n\n// For each of the column methods, create a new \"ColumnBuilder\" interface,\n// push it onto the \"allStatements\" stack, and then return the interface,\n// with which we can add indexes, etc.\neach(columnTypes, function (type) {\n  TableBuilder.prototype[type] = function () {\n    const args = toArray(arguments);\n    const builder = this.client.columnBuilder(this, type, args);\n    this._statements.push({\n      grouping: 'columns',\n      builder,\n    });\n    return builder;\n  };\n});\n\n// The \"timestamps\" call is really just sets the `created_at` and `updated_at` columns.\nTableBuilder.prototype.timestamps = function timestamps() {\n  const method = arguments[0] === true ? 'timestamp' : 'datetime';\n  const createdAt = this[method]('created_at');\n  const updatedAt = this[method]('updated_at');\n  if (arguments[1] === true) {\n    const now = this.client.raw('CURRENT_TIMESTAMP');\n    createdAt.notNullable().defaultTo(now);\n    updatedAt.notNullable().defaultTo(now);\n  }\n  return;\n};\n\n// Set the comment value for a table, they're only allowed to be called\n// once per table.\nTableBuilder.prototype.comment = function (value) {\n  if (typeof value !== 'string') {\n    throw new TypeError('Table comment must be string');\n  }\n  this._single.comment = value;\n};\n\n// Set a foreign key on the table, calling\n// `table.foreign('column_name').references('column').on('table').onDelete()...\n// Also called from the ColumnBuilder context when chaining.\nTableBuilder.prototype.foreign = function (column, keyName) {\n  const foreignData = { column: column, keyName: keyName };\n  this._statements.push({\n    grouping: 'alterTable',\n    method: 'foreign',\n    args: [foreignData],\n  });\n  let returnObj = {\n    references(tableColumn) {\n      let pieces;\n      if (isString(tableColumn)) {\n        pieces = tableColumn.split('.');\n      }\n      if (!pieces || pieces.length === 1) {\n        foreignData.references = pieces ? pieces[0] : tableColumn;\n        return {\n          on(tableName) {\n            if (typeof tableName !== 'string') {\n              throw new TypeError(\n                `Expected tableName to be a string, got: ${typeof tableName}`\n              );\n            }\n            foreignData.inTable = tableName;\n            return returnObj;\n          },\n          inTable() {\n            return this.on.apply(this, arguments);\n          },\n        };\n      }\n      foreignData.inTable = pieces[0];\n      foreignData.references = pieces[1];\n      return returnObj;\n    },\n    withKeyName(keyName) {\n      foreignData.keyName = keyName;\n      return returnObj;\n    },\n    onUpdate(statement) {\n      foreignData.onUpdate = statement;\n      return returnObj;\n    },\n    onDelete(statement) {\n      foreignData.onDelete = statement;\n      return returnObj;\n    },\n    _columnBuilder(builder) {\n      extend(builder, returnObj);\n      returnObj = builder;\n      return builder;\n    },\n  };\n  return returnObj;\n};\n\nconst AlterMethods = {\n  // Renames the current column `from` the current\n  // TODO: this.column(from).rename(to)\n  renameColumn(from, to) {\n    this._statements.push({\n      grouping: 'alterTable',\n      method: 'renameColumn',\n      args: [from, to],\n    });\n    return this;\n  },\n\n  dropTimestamps() {\n    return this.dropColumns(['created_at', 'updated_at']);\n  },\n\n  // TODO: changeType\n};\n\n// Drop a column from the current table.\n// TODO: Enable this.column(columnName).drop();\nAlterMethods.dropColumn = AlterMethods.dropColumns = function () {\n  this._statements.push({\n    grouping: 'alterTable',\n    method: 'dropColumn',\n    args: toArray(arguments),\n  });\n  return this;\n};\n\nmodule.exports = TableBuilder;\n","/* eslint max-len:0 */\n\n// Table Compiler\n// -------\nconst { pushAdditional, pushQuery, unshiftQuery } = require('./helpers');\nconst helpers = require('../helpers');\nconst groupBy = require('lodash/groupBy');\nconst indexOf = require('lodash/indexOf');\nconst isEmpty = require('lodash/isEmpty');\nconst tail = require('lodash/tail');\n\nfunction TableCompiler(client, tableBuilder) {\n  this.client = client;\n  this.tableBuilder = tableBuilder;\n  this._commonBuilder = this.tableBuilder;\n  this.method = tableBuilder._method;\n  this.schemaNameRaw = tableBuilder._schemaName;\n  this.tableNameRaw = tableBuilder._tableName;\n  this.single = tableBuilder._single;\n  this.grouped = groupBy(tableBuilder._statements, 'grouping');\n  this.formatter = client.formatter(tableBuilder);\n  this.sequence = [];\n  this._formatting = client.config && client.config.formatting;\n}\n\nTableCompiler.prototype.pushQuery = pushQuery;\n\nTableCompiler.prototype.pushAdditional = pushAdditional;\n\nTableCompiler.prototype.unshiftQuery = unshiftQuery;\n\n// Convert the tableCompiler toSQL\nTableCompiler.prototype.toSQL = function () {\n  this[this.method]();\n  return this.sequence;\n};\n\nTableCompiler.prototype.lowerCase = true;\n\n// Column Compilation\n// -------\n\n// If this is a table \"creation\", we need to first run through all\n// of the columns to build them into a single string,\n// and then run through anything else and push it to the query sequence.\nTableCompiler.prototype.createAlterTableMethods = null;\nTableCompiler.prototype.create = function (ifNot) {\n  const columnBuilders = this.getColumns();\n  const columns = columnBuilders.map((col) => col.toSQL());\n  const columnTypes = this.getColumnTypes(columns);\n  if (this.createAlterTableMethods) {\n    this.alterTableForCreate(columnTypes);\n  }\n  this.createQuery(columnTypes, ifNot);\n  this.columnQueries(columns);\n  delete this.single.comment;\n  this.alterTable();\n};\n\n// Only create the table if it doesn't exist.\nTableCompiler.prototype.createIfNot = function () {\n  this.create(true);\n};\n\n// If we're altering the table, we need to one-by-one\n// go through and handle each of the queries associated\n// with altering the table's schema.\nTableCompiler.prototype.alter = function () {\n  const addColBuilders = this.getColumns();\n  const addColumns = addColBuilders.map((col) => col.toSQL());\n  const alterColBuilders = this.getColumns('alter');\n  const alterColumns = alterColBuilders.map((col) => col.toSQL());\n  const addColumnTypes = this.getColumnTypes(addColumns);\n  const alterColumnTypes = this.getColumnTypes(alterColumns);\n\n  this.addColumns(addColumnTypes);\n  this.alterColumns(alterColumnTypes, alterColBuilders);\n  this.columnQueries(addColumns);\n  this.columnQueries(alterColumns);\n  this.alterTable();\n};\n\nTableCompiler.prototype.foreign = function (foreignData) {\n  if (foreignData.inTable && foreignData.references) {\n    const keyName = foreignData.keyName\n      ? this.formatter.wrap(foreignData.keyName)\n      : this._indexCommand('foreign', this.tableNameRaw, foreignData.column);\n    const column = this.formatter.columnize(foreignData.column);\n    const references = this.formatter.columnize(foreignData.references);\n    const inTable = this.formatter.wrap(foreignData.inTable);\n    const onUpdate = foreignData.onUpdate\n      ? (this.lowerCase ? ' on update ' : ' ON UPDATE ') + foreignData.onUpdate\n      : '';\n    const onDelete = foreignData.onDelete\n      ? (this.lowerCase ? ' on delete ' : ' ON DELETE ') + foreignData.onDelete\n      : '';\n    if (this.lowerCase) {\n      this.pushQuery(\n        (!this.forCreate ? `alter table ${this.tableName()} add ` : '') +\n          'constraint ' +\n          keyName +\n          ' ' +\n          'foreign key (' +\n          column +\n          ') references ' +\n          inTable +\n          ' (' +\n          references +\n          ')' +\n          onUpdate +\n          onDelete\n      );\n    } else {\n      this.pushQuery(\n        (!this.forCreate ? `ALTER TABLE ${this.tableName()} ADD ` : '') +\n          'CONSTRAINT ' +\n          keyName +\n          ' ' +\n          'FOREIGN KEY (' +\n          column +\n          ') REFERENCES ' +\n          inTable +\n          ' (' +\n          references +\n          ')' +\n          onUpdate +\n          onDelete\n      );\n    }\n  }\n};\n\n// Get all of the column sql & bindings individually for building the table queries.\nTableCompiler.prototype.getColumnTypes = (columns) =>\n  columns.reduce(\n    function (memo, columnSQL) {\n      const column = columnSQL[0];\n      memo.sql.push(column.sql);\n      memo.bindings.concat(column.bindings);\n      return memo;\n    },\n    { sql: [], bindings: [] }\n  );\n\n// Adds all of the additional queries from the \"column\"\nTableCompiler.prototype.columnQueries = function (columns) {\n  const queries = columns.reduce(function (memo, columnSQL) {\n    const column = tail(columnSQL);\n    if (!isEmpty(column)) return memo.concat(column);\n    return memo;\n  }, []);\n  for (const q of queries) {\n    this.pushQuery(q);\n  }\n};\n\n// Add a new column.\nTableCompiler.prototype.addColumnsPrefix = 'add column ';\n\n// All of the columns to \"add\" for the query\nTableCompiler.prototype.addColumns = function (columns, prefix) {\n  prefix = prefix || this.addColumnsPrefix;\n\n  if (columns.sql.length > 0) {\n    const columnSql = columns.sql.map((column) => {\n      return prefix + column;\n    });\n    this.pushQuery({\n      sql:\n        (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n        this.tableName() +\n        ' ' +\n        columnSql.join(', '),\n      bindings: columns.bindings,\n    });\n  }\n};\n\n// Alter column\nTableCompiler.prototype.alterColumnsPrefix = 'alter column ';\n\nTableCompiler.prototype.alterColumns = function (columns, colBuilders) {\n  if (columns.sql.length > 0) {\n    this.addColumns(columns, this.alterColumnsPrefix, colBuilders);\n  }\n};\n\n// Compile the columns as needed for the current create or alter table\nTableCompiler.prototype.getColumns = function (method) {\n  const columns = this.grouped.columns || [];\n  method = method || 'add';\n\n  const queryContext = this.tableBuilder.queryContext();\n\n  return columns\n    .filter((column) => column.builder._method === method)\n    .map((column) => {\n      // pass queryContext down to columnBuilder but do not overwrite it if already set\n      if (\n        queryContext !== undefined &&\n        column.builder.queryContext() === undefined\n      ) {\n        column.builder.queryContext(queryContext);\n      }\n      return this.client.columnCompiler(this, column.builder);\n    });\n};\n\nTableCompiler.prototype.tableName = function () {\n  const name = this.schemaNameRaw\n    ? `${this.schemaNameRaw}.${this.tableNameRaw}`\n    : this.tableNameRaw;\n\n  return this.formatter.wrap(name);\n};\n\n// Generate all of the alter column statements necessary for the query.\nTableCompiler.prototype.alterTable = function () {\n  const alterTable = this.grouped.alterTable || [];\n  for (let i = 0, l = alterTable.length; i < l; i++) {\n    const statement = alterTable[i];\n    if (this[statement.method]) {\n      this[statement.method].apply(this, statement.args);\n    } else {\n      this.client.logger.error(`Debug: ${statement.method} does not exist`);\n    }\n  }\n  for (const item in this.single) {\n    if (typeof this[item] === 'function') this[item](this.single[item]);\n  }\n};\n\nTableCompiler.prototype.alterTableForCreate = function (columnTypes) {\n  this.forCreate = true;\n  const savedSequence = this.sequence;\n  const alterTable = this.grouped.alterTable || [];\n  this.grouped.alterTable = [];\n  for (let i = 0, l = alterTable.length; i < l; i++) {\n    const statement = alterTable[i];\n    if (indexOf(this.createAlterTableMethods, statement.method) < 0) {\n      this.grouped.alterTable.push(statement);\n      continue;\n    }\n    if (this[statement.method]) {\n      this.sequence = [];\n      this[statement.method].apply(this, statement.args);\n      columnTypes.sql.push(this.sequence[0].sql);\n    } else {\n      this.client.logger.error(`Debug: ${statement.method} does not exist`);\n    }\n  }\n  this.sequence = savedSequence;\n  this.forCreate = false;\n};\n\n// Drop the index on the current table.\nTableCompiler.prototype.dropIndex = function (value) {\n  this.pushQuery(`drop index${value}`);\n};\n\n// Drop the unique\nTableCompiler.prototype.dropUnique = TableCompiler.prototype.dropForeign = function () {\n  throw new Error('Method implemented in the dialect driver');\n};\n\nTableCompiler.prototype.dropColumnPrefix = 'drop column ';\nTableCompiler.prototype.dropColumn = function () {\n  const columns = helpers.normalizeArr.apply(null, arguments);\n  const drops = (Array.isArray(columns) ? columns : [columns]).map((column) => {\n    return this.dropColumnPrefix + this.formatter.wrap(column);\n  });\n  this.pushQuery(\n    (this.lowerCase ? 'alter table ' : 'ALTER TABLE ') +\n      this.tableName() +\n      ' ' +\n      drops.join(', ')\n  );\n};\n\n// If no name was specified for this index, we will create one using a basic\n// convention of the table name, followed by the columns, followed by an\n// index type, such as primary or index, which makes the index unique.\nTableCompiler.prototype._indexCommand = function (type, tableName, columns) {\n  if (!Array.isArray(columns)) columns = columns ? [columns] : [];\n  const table = tableName.replace(/\\.|-/g, '_');\n  const indexName = (\n    table +\n    '_' +\n    columns.join('_') +\n    '_' +\n    type\n  ).toLowerCase();\n  return this.formatter.wrap(indexName);\n};\n\nmodule.exports = TableCompiler;\n","const extend = require('lodash/extend');\nconst toArray = require('lodash/toArray');\nconst { addQueryContext } = require('../helpers');\n\n// The chainable interface off the original \"column\" method.\nfunction ColumnBuilder(client, tableBuilder, type, args) {\n  this.client = client;\n  this._method = 'add';\n  this._single = {};\n  this._modifiers = {};\n  this._statements = [];\n  this._type = columnAlias[type] || type;\n  this._args = args;\n  this._tableBuilder = tableBuilder;\n\n  // If we're altering the table, extend the object\n  // with the available \"alter\" methods.\n  if (tableBuilder._method === 'alter') {\n    extend(this, AlterMethods);\n  }\n}\n\n// All of the modifier methods that can be used to modify the current query.\nconst modifiers = [\n  'default',\n  'defaultsTo',\n  'defaultTo',\n  'unsigned',\n  'nullable',\n  'first',\n  'after',\n  'comment',\n  'collate',\n];\n\n// Aliases for convenience.\nconst aliasMethod = {\n  default: 'defaultTo',\n  defaultsTo: 'defaultTo',\n};\n\n// If we call any of the modifiers (index or otherwise) on the chainable, we pretend\n// as though we're calling `table.method(column)` directly.\nmodifiers.forEach(function (method) {\n  const key = aliasMethod[method] || method;\n  ColumnBuilder.prototype[method] = function () {\n    this._modifiers[key] = toArray(arguments);\n    return this;\n  };\n});\n\naddQueryContext(ColumnBuilder);\n\nColumnBuilder.prototype.notNull = ColumnBuilder.prototype.notNullable = function notNullable() {\n  return this.nullable(false);\n};\n\n['index', 'primary', 'unique'].forEach(function (method) {\n  ColumnBuilder.prototype[method] = function () {\n    if (this._type.toLowerCase().indexOf('increments') === -1) {\n      this._tableBuilder[method].apply(\n        this._tableBuilder,\n        [this._args[0]].concat(toArray(arguments))\n      );\n    }\n    return this;\n  };\n});\n\n// Specify that the current column \"references\" a column,\n// which may be tableName.column or just \"column\"\nColumnBuilder.prototype.references = function (value) {\n  return this._tableBuilder.foreign\n    .call(this._tableBuilder, this._args[0], undefined, this)\n    ._columnBuilder(this)\n    .references(value);\n};\n\nconst AlterMethods = {};\n\n// Specify that the column is to be dropped. This takes precedence\n// over all other rules for the column.\nAlterMethods.drop = function () {\n  this._single.drop = true;\n\n  return this;\n};\n\n// Specify the \"type\" that we're looking to set the\n// Knex takes no responsibility for any data-loss that may\n// occur when changing data types.\nAlterMethods.alterType = function (type) {\n  this._statements.push({\n    grouping: 'alterType',\n    value: type,\n  });\n\n  return this;\n};\n\n// Set column method to alter (default is add).\nAlterMethods.alter = function () {\n  this._method = 'alter';\n\n  return this;\n};\n\n// Alias a few methods for clarity when processing.\nconst columnAlias = {\n  float: 'floating',\n  enum: 'enu',\n  boolean: 'bool',\n  string: 'varchar',\n  bigint: 'bigInteger',\n};\n\nmodule.exports = ColumnBuilder;\n","// Column Compiler\n// Used for designating column definitions\n// during the table \"create\" / \"alter\" statements.\n// -------\nconst Raw = require('../raw');\nconst helpers = require('./helpers');\nconst groupBy = require('lodash/groupBy');\nconst first = require('lodash/first');\nconst has = require('lodash/has');\nconst tail = require('lodash/tail');\nconst { isObject } = require('../util/is');\n\nfunction ColumnCompiler(client, tableCompiler, columnBuilder) {\n  this.client = client;\n  this.tableCompiler = tableCompiler;\n  this.columnBuilder = columnBuilder;\n  this._commonBuilder = this.columnBuilder;\n  this.args = columnBuilder._args;\n  this.type = columnBuilder._type.toLowerCase();\n  this.grouped = groupBy(columnBuilder._statements, 'grouping');\n  this.modified = columnBuilder._modifiers;\n  this.isIncrements = this.type.indexOf('increments') !== -1;\n  this.formatter = client.formatter(columnBuilder);\n  this.sequence = [];\n  this.modifiers = [];\n}\n\nColumnCompiler.prototype.pushQuery = helpers.pushQuery;\n\nColumnCompiler.prototype.pushAdditional = helpers.pushAdditional;\n\nColumnCompiler.prototype.unshiftQuery = helpers.unshiftQuery;\n\nColumnCompiler.prototype._defaultMap = {\n  columnName: function () {\n    if (!this.isIncrements) {\n      throw new Error(\n        `You did not specify a column name for the ${this.type} column.`\n      );\n    }\n    return 'id';\n  },\n};\n\nColumnCompiler.prototype.defaults = function (label) {\n  if (Object.prototype.hasOwnProperty.call(this._defaultMap, label)) {\n    return this._defaultMap[label].bind(this)();\n  } else {\n    throw new Error(\n      `There is no default for the specified identifier ${label}`\n    );\n  }\n};\n\n// To convert to sql, we first go through and build the\n// column as it would be in the insert statement\nColumnCompiler.prototype.toSQL = function () {\n  this.pushQuery(this.compileColumn());\n  if (this.sequence.additional) {\n    this.sequence = this.sequence.concat(this.sequence.additional);\n  }\n  return this.sequence;\n};\n\n// Compiles a column.\nColumnCompiler.prototype.compileColumn = function () {\n  return (\n    this.formatter.wrap(this.getColumnName()) +\n    ' ' +\n    this.getColumnType() +\n    this.getModifiers()\n  );\n};\n\n// Assumes the autoincrementing key is named `id` if not otherwise specified.\nColumnCompiler.prototype.getColumnName = function () {\n  const value = first(this.args);\n  return value || this.defaults('columnName');\n};\n\nColumnCompiler.prototype.getColumnType = function () {\n  const type = this[this.type];\n  return typeof type === 'function' ? type.apply(this, tail(this.args)) : type;\n};\n\nColumnCompiler.prototype.getModifiers = function () {\n  const modifiers = [];\n\n  for (let i = 0, l = this.modifiers.length; i < l; i++) {\n    const modifier = this.modifiers[i];\n\n    //Cannot allow 'nullable' modifiers on increments types\n    if (!this.isIncrements || (this.isIncrements && modifier === 'comment')) {\n      if (has(this.modified, modifier)) {\n        const val = this[modifier].apply(this, this.modified[modifier]);\n        if (val) modifiers.push(val);\n      }\n    }\n  }\n\n  return modifiers.length > 0 ? ` ${modifiers.join(' ')}` : '';\n};\n\n// Types\n// ------\n\nColumnCompiler.prototype.increments =\n  'integer not null primary key autoincrement';\nColumnCompiler.prototype.bigincrements =\n  'integer not null primary key autoincrement';\nColumnCompiler.prototype.integer = ColumnCompiler.prototype.smallint = ColumnCompiler.prototype.mediumint =\n  'integer';\nColumnCompiler.prototype.biginteger = 'bigint';\nColumnCompiler.prototype.varchar = function (length) {\n  return `varchar(${this._num(length, 255)})`;\n};\nColumnCompiler.prototype.text = 'text';\nColumnCompiler.prototype.tinyint = 'tinyint';\nColumnCompiler.prototype.floating = function (precision, scale) {\n  return `float(${this._num(precision, 8)}, ${this._num(scale, 2)})`;\n};\nColumnCompiler.prototype.decimal = function (precision, scale) {\n  if (precision === null) {\n    throw new Error(\n      'Specifying no precision on decimal columns is not supported for that SQL dialect.'\n    );\n  }\n  return `decimal(${this._num(precision, 8)}, ${this._num(scale, 2)})`;\n};\nColumnCompiler.prototype.binary = 'blob';\nColumnCompiler.prototype.bool = 'boolean';\nColumnCompiler.prototype.date = 'date';\nColumnCompiler.prototype.datetime = 'datetime';\nColumnCompiler.prototype.time = 'time';\nColumnCompiler.prototype.timestamp = 'timestamp';\nColumnCompiler.prototype.enu = 'varchar';\n\nColumnCompiler.prototype.bit = ColumnCompiler.prototype.json = 'text';\n\nColumnCompiler.prototype.uuid = 'char(36)';\nColumnCompiler.prototype.specifictype = (type) => type;\n\n// Modifiers\n// -------\n\nColumnCompiler.prototype.nullable = (nullable) =>\n  nullable === false ? 'not null' : 'null';\nColumnCompiler.prototype.notNullable = function () {\n  return this.nullable(false);\n};\nColumnCompiler.prototype.defaultTo = function (value) {\n  if (value === void 0) {\n    return '';\n  } else if (value === null) {\n    value = 'null';\n  } else if (value instanceof Raw) {\n    value = value.toQuery();\n  } else if (this.type === 'bool') {\n    if (value === 'false') value = 0;\n    value = `'${value ? 1 : 0}'`;\n  } else if (\n    (this.type === 'json' || this.type === 'jsonb') &&\n    isObject(value)\n  ) {\n    value = `'${JSON.stringify(value)}'`;\n  } else {\n    value = this.client._escapeBinding(value.toString());\n  }\n  return `default ${value}`;\n};\nColumnCompiler.prototype._num = function (val, fallback) {\n  if (val === undefined || val === null) return fallback;\n  const number = parseInt(val, 10);\n  return isNaN(number) ? fallback : number;\n};\n\nmodule.exports = ColumnCompiler;\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass TimeoutError extends Error {\r\n}\r\nexports.TimeoutError = TimeoutError;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass PromiseInspection {\r\n    constructor(args) {\r\n        this._value = args.value;\r\n        this._error = args.error;\r\n    }\r\n    value() {\r\n        return this._value;\r\n    }\r\n    reason() {\r\n        return this._error;\r\n    }\r\n    isRejected() {\r\n        return !!this._error;\r\n    }\r\n    isFulfilled() {\r\n        return !!this._value;\r\n    }\r\n}\r\nexports.PromiseInspection = PromiseInspection;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst PromiseInspection_1 = require(\"./PromiseInspection\");\r\nfunction defer() {\r\n    let resolve = null;\r\n    let reject = null;\r\n    const promise = new Promise((resolver, rejecter) => {\r\n        resolve = resolver;\r\n        reject = rejecter;\r\n    });\r\n    return {\r\n        promise,\r\n        resolve,\r\n        reject\r\n    };\r\n}\r\nexports.defer = defer;\r\nfunction now() {\r\n    return Date.now();\r\n}\r\nexports.now = now;\r\nfunction duration(t1, t2) {\r\n    return Math.abs(t2 - t1);\r\n}\r\nexports.duration = duration;\r\nfunction checkOptionalTime(time) {\r\n    if (typeof time === 'undefined') {\r\n        return true;\r\n    }\r\n    return checkRequiredTime(time);\r\n}\r\nexports.checkOptionalTime = checkOptionalTime;\r\nfunction checkRequiredTime(time) {\r\n    return typeof time === 'number' && time === Math.round(time) && time > 0;\r\n}\r\nexports.checkRequiredTime = checkRequiredTime;\r\nfunction delay(millis) {\r\n    return new Promise(resolve => setTimeout(resolve, millis));\r\n}\r\nexports.delay = delay;\r\nfunction reflect(promise) {\r\n    return promise\r\n        .then(value => {\r\n        return new PromiseInspection_1.PromiseInspection({ value });\r\n    })\r\n        .catch(error => {\r\n        return new PromiseInspection_1.PromiseInspection({ error });\r\n    });\r\n}\r\nexports.reflect = reflect;\r\nfunction tryPromise(cb) {\r\n    try {\r\n        const result = cb();\r\n        return Promise.resolve(result);\r\n    }\r\n    catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n}\r\nexports.tryPromise = tryPromise;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst TimeoutError_1 = require(\"./TimeoutError\");\r\nconst utils_1 = require(\"./utils\");\r\nclass PendingOperation {\r\n    constructor(timeoutMillis) {\r\n        this.timeoutMillis = timeoutMillis;\r\n        this.deferred = utils_1.defer();\r\n        this.possibleTimeoutCause = null;\r\n        this.isRejected = false;\r\n        this.promise = timeout(this.deferred.promise, timeoutMillis).catch(err => {\r\n            if (err instanceof TimeoutError_1.TimeoutError) {\r\n                if (this.possibleTimeoutCause) {\r\n                    err = new TimeoutError_1.TimeoutError(this.possibleTimeoutCause.message);\r\n                }\r\n                else {\r\n                    err = new TimeoutError_1.TimeoutError('operation timed out for an unknown reason');\r\n                }\r\n            }\r\n            this.isRejected = true;\r\n            return Promise.reject(err);\r\n        });\r\n    }\r\n    abort() {\r\n        this.reject(new Error('aborted'));\r\n    }\r\n    reject(err) {\r\n        this.deferred.reject(err);\r\n    }\r\n    resolve(value) {\r\n        this.deferred.resolve(value);\r\n    }\r\n}\r\nexports.PendingOperation = PendingOperation;\r\nfunction timeout(promise, time) {\r\n    return new Promise((resolve, reject) => {\r\n        const timeoutHandle = setTimeout(() => reject(new TimeoutError_1.TimeoutError()), time);\r\n        promise\r\n            .then(result => {\r\n            clearTimeout(timeoutHandle);\r\n            resolve(result);\r\n        })\r\n            .catch(err => {\r\n            clearTimeout(timeoutHandle);\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"./utils\");\r\nclass Resource {\r\n    constructor(resource) {\r\n        this.resource = resource;\r\n        this.resource = resource;\r\n        this.timestamp = utils_1.now();\r\n        this.deferred = utils_1.defer();\r\n    }\r\n    get promise() {\r\n        return this.deferred.promise;\r\n    }\r\n    resolve() {\r\n        this.deferred.resolve(undefined);\r\n        return new Resource(this.resource);\r\n    }\r\n}\r\nexports.Resource = Resource;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst PendingOperation_1 = require(\"./PendingOperation\");\r\nconst Resource_1 = require(\"./Resource\");\r\nconst utils_1 = require(\"./utils\");\r\nconst events_1 = require(\"events\");\r\nconst timers_1 = require(\"timers\");\r\nclass Pool {\r\n    constructor(opt) {\r\n        this.destroyed = false;\r\n        this.emitter = new events_1.EventEmitter();\r\n        opt = opt || {};\r\n        if (!opt.create) {\r\n            throw new Error('Tarn: opt.create function most be provided');\r\n        }\r\n        if (!opt.destroy) {\r\n            throw new Error('Tarn: opt.destroy function most be provided');\r\n        }\r\n        if (typeof opt.min !== 'number' || opt.min < 0 || opt.min !== Math.round(opt.min)) {\r\n            throw new Error('Tarn: opt.min must be an integer >= 0');\r\n        }\r\n        if (typeof opt.max !== 'number' || opt.max <= 0 || opt.max !== Math.round(opt.max)) {\r\n            throw new Error('Tarn: opt.max must be an integer > 0');\r\n        }\r\n        if (opt.min > opt.max) {\r\n            throw new Error('Tarn: opt.max is smaller than opt.min');\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.acquireTimeoutMillis)) {\r\n            throw new Error('Tarn: invalid opt.acquireTimeoutMillis ' + JSON.stringify(opt.acquireTimeoutMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.createTimeoutMillis)) {\r\n            throw new Error('Tarn: invalid opt.createTimeoutMillis ' + JSON.stringify(opt.createTimeoutMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.destroyTimeoutMillis)) {\r\n            throw new Error('Tarn: invalid opt.destroyTimeoutMillis ' + JSON.stringify(opt.destroyTimeoutMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.idleTimeoutMillis)) {\r\n            throw new Error('Tarn: invalid opt.idleTimeoutMillis ' + JSON.stringify(opt.idleTimeoutMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.reapIntervalMillis)) {\r\n            throw new Error('Tarn: invalid opt.reapIntervalMillis ' + JSON.stringify(opt.reapIntervalMillis));\r\n        }\r\n        if (!utils_1.checkOptionalTime(opt.createRetryIntervalMillis)) {\r\n            throw new Error('Tarn: invalid opt.createRetryIntervalMillis ' +\r\n                JSON.stringify(opt.createRetryIntervalMillis));\r\n        }\r\n        const allowedKeys = {\r\n            create: true,\r\n            validate: true,\r\n            destroy: true,\r\n            log: true,\r\n            min: true,\r\n            max: true,\r\n            acquireTimeoutMillis: true,\r\n            createTimeoutMillis: true,\r\n            destroyTimeoutMillis: true,\r\n            idleTimeoutMillis: true,\r\n            reapIntervalMillis: true,\r\n            createRetryIntervalMillis: true,\r\n            propagateCreateError: true\r\n        };\r\n        for (const key of Object.keys(opt)) {\r\n            if (!allowedKeys[key]) {\r\n                throw new Error(`Tarn: unsupported option opt.${key}`);\r\n            }\r\n        }\r\n        this.creator = opt.create;\r\n        this.destroyer = opt.destroy;\r\n        this.validate = typeof opt.validate === 'function' ? opt.validate : () => true;\r\n        this.log = opt.log || (() => { });\r\n        this.acquireTimeoutMillis = opt.acquireTimeoutMillis || 30000;\r\n        this.createTimeoutMillis = opt.createTimeoutMillis || 30000;\r\n        this.destroyTimeoutMillis = opt.destroyTimeoutMillis || 5000;\r\n        this.idleTimeoutMillis = opt.idleTimeoutMillis || 30000;\r\n        this.reapIntervalMillis = opt.reapIntervalMillis || 1000;\r\n        this.createRetryIntervalMillis = opt.createRetryIntervalMillis || 200;\r\n        this.propagateCreateError = !!opt.propagateCreateError;\r\n        this.min = opt.min;\r\n        this.max = opt.max;\r\n        // All the resources, which are either already acquired or which are\r\n        // considered for being passed to acquire in async validation phase.\r\n        this.used = [];\r\n        // All the resources, which are either just created and free or returned\r\n        // back to pool after using.\r\n        this.free = [];\r\n        this.pendingCreates = [];\r\n        this.pendingAcquires = [];\r\n        this.pendingDestroys = [];\r\n        // When acquire is pending, but also still in validation phase\r\n        this.pendingValidations = [];\r\n        this.destroyed = false;\r\n        this.interval = null;\r\n        this.eventId = 1;\r\n    }\r\n    numUsed() {\r\n        return this.used.length;\r\n    }\r\n    numFree() {\r\n        return this.free.length;\r\n    }\r\n    numPendingAcquires() {\r\n        return this.pendingAcquires.length;\r\n    }\r\n    numPendingValidations() {\r\n        return this.pendingValidations.length;\r\n    }\r\n    numPendingCreates() {\r\n        return this.pendingCreates.length;\r\n    }\r\n    acquire() {\r\n        const eventId = this.eventId++;\r\n        this._executeEventHandlers('acquireRequest', eventId);\r\n        const pendingAcquire = new PendingOperation_1.PendingOperation(this.acquireTimeoutMillis);\r\n        this.pendingAcquires.push(pendingAcquire);\r\n        // If the acquire fails for whatever reason\r\n        // remove it from the pending queue.\r\n        pendingAcquire.promise = pendingAcquire.promise\r\n            .then(resource => {\r\n            this._executeEventHandlers('acquireSuccess', eventId, resource);\r\n            return resource;\r\n        })\r\n            .catch(err => {\r\n            this._executeEventHandlers('acquireFail', eventId, err);\r\n            remove(this.pendingAcquires, pendingAcquire);\r\n            return Promise.reject(err);\r\n        });\r\n        this._tryAcquireOrCreate();\r\n        return pendingAcquire;\r\n    }\r\n    release(resource) {\r\n        this._executeEventHandlers('release', resource);\r\n        for (let i = 0, l = this.used.length; i < l; ++i) {\r\n            const used = this.used[i];\r\n            if (used.resource === resource) {\r\n                this.used.splice(i, 1);\r\n                this.free.push(used.resolve());\r\n                this._tryAcquireOrCreate();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    isEmpty() {\r\n        return ([\r\n            this.numFree(),\r\n            this.numUsed(),\r\n            this.numPendingAcquires(),\r\n            this.numPendingValidations(),\r\n            this.numPendingCreates()\r\n        ].reduce((total, value) => total + value) === 0);\r\n    }\r\n    /**\r\n     * Reaping cycle.\r\n     */\r\n    check() {\r\n        const timestamp = utils_1.now();\r\n        const newFree = [];\r\n        const minKeep = this.min - this.used.length;\r\n        const maxDestroy = this.free.length - minKeep;\r\n        let numDestroyed = 0;\r\n        this.free.forEach(free => {\r\n            if (utils_1.duration(timestamp, free.timestamp) >= this.idleTimeoutMillis &&\r\n                numDestroyed < maxDestroy) {\r\n                numDestroyed++;\r\n                this._destroy(free.resource);\r\n            }\r\n            else {\r\n                newFree.push(free);\r\n            }\r\n        });\r\n        this.free = newFree;\r\n        // Pool is completely empty, stop reaping.\r\n        // Next .acquire will start reaping interval again.\r\n        if (this.isEmpty()) {\r\n            this._stopReaping();\r\n        }\r\n    }\r\n    destroy() {\r\n        const eventId = this.eventId++;\r\n        this._executeEventHandlers('poolDestroyRequest', eventId);\r\n        this._stopReaping();\r\n        this.destroyed = true;\r\n        // First wait for all the pending creates get ready.\r\n        return utils_1.reflect(Promise.all(this.pendingCreates.map(create => utils_1.reflect(create.promise)))\r\n            .then(() => {\r\n            // eslint-disable-next-line\r\n            return new Promise((resolve, reject) => {\r\n                // poll every 100ms and wait that all validations are ready\r\n                if (this.numPendingValidations() === 0) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n                const interval = setInterval(() => {\r\n                    if (this.numPendingValidations() === 0) {\r\n                        timers_1.clearInterval(interval);\r\n                        resolve();\r\n                    }\r\n                }, 100);\r\n            });\r\n        })\r\n            .then(() => {\r\n            // Wait for all the used resources to be freed.\r\n            return Promise.all(this.used.map(used => utils_1.reflect(used.promise)));\r\n        })\r\n            .then(() => {\r\n            // Abort all pending acquires.\r\n            return Promise.all(this.pendingAcquires.map(acquire => {\r\n                acquire.abort();\r\n                return utils_1.reflect(acquire.promise);\r\n            }));\r\n        })\r\n            .then(() => {\r\n            // Now we can destroy all the freed resources.\r\n            return Promise.all(this.free.map(free => utils_1.reflect(this._destroy(free.resource))));\r\n        })\r\n            .then(() => {\r\n            // Also wait rest of the pending destroys to finish\r\n            return Promise.all(this.pendingDestroys.map(pd => pd.promise));\r\n        })\r\n            .then(() => {\r\n            this.free = [];\r\n            this.pendingAcquires = [];\r\n        })).then(res => {\r\n            this._executeEventHandlers('poolDestroySuccess', eventId);\r\n            this.emitter.removeAllListeners();\r\n            return res;\r\n        });\r\n    }\r\n    on(event, listener) {\r\n        this.emitter.on(event, listener);\r\n    }\r\n    removeListener(event, listener) {\r\n        this.emitter.removeListener(event, listener);\r\n    }\r\n    removeAllListeners(event) {\r\n        this.emitter.removeAllListeners(event);\r\n    }\r\n    /**\r\n     * The most important method that is called always when resources\r\n     * are created / destroyed / acquired / released. In other words\r\n     * every time when resources are moved from used to free or vice\r\n     * versa.\r\n     *\r\n     * Either assigns free resources to pendingAcquires or creates new\r\n     * resources if there is room for it in the pool.\r\n     */\r\n    _tryAcquireOrCreate() {\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n        if (this._hasFreeResources()) {\r\n            this._doAcquire();\r\n        }\r\n        else if (this._shouldCreateMoreResources()) {\r\n            this._doCreate();\r\n        }\r\n    }\r\n    _hasFreeResources() {\r\n        return this.free.length > 0;\r\n    }\r\n    _doAcquire() {\r\n        // Acquire as many pending acquires as possible concurrently\r\n        while (this._canAcquire()) {\r\n            // To allow async validation, we actually need to move free resource\r\n            // and pending acquire temporary from their respective arrays and depending\r\n            // on validation result to either leave the free resource to used resources array\r\n            // or destroy the free resource if validation did fail.\r\n            const pendingAcquire = this.pendingAcquires.shift();\r\n            const free = this.free.pop();\r\n            if (free === undefined || pendingAcquire === undefined) {\r\n                const errMessage = 'this.free was empty while trying to acquire resource';\r\n                this.log(`Tarn: ${errMessage}`, 'warn');\r\n                throw new Error(`Internal error, should never happen. ${errMessage}`);\r\n            }\r\n            // Make sure that pendingAcquire that is being validated is not lost and\r\n            // can be freed when pool is destroyed.\r\n            this.pendingValidations.push(pendingAcquire);\r\n            // Must be added here pre-emptively to prevent logic that decides\r\n            // if new resources are created will keep on working correctly.\r\n            this.used.push(free);\r\n            // if acquire fails also pending validation, must be aborted so that pre reserved\r\n            // resource will be returned to free resources immediately\r\n            const abortAbleValidation = new PendingOperation_1.PendingOperation(this.acquireTimeoutMillis);\r\n            // eslint-disable-next-line\r\n            pendingAcquire.promise.catch(err => {\r\n                abortAbleValidation.abort();\r\n            });\r\n            abortAbleValidation.promise\r\n                .catch(err => {\r\n                // There's nothing we can do here but log the error. This would otherwise\r\n                // leak out as an unhandled exception.\r\n                this.log('Tarn: resource validator threw an exception ' + err.stack, 'warn');\r\n                return false;\r\n            })\r\n                .then(validationSuccess => {\r\n                try {\r\n                    if (validationSuccess && !pendingAcquire.isRejected) {\r\n                        // At least one active resource exist, start reaping.\r\n                        this._startReaping();\r\n                        pendingAcquire.resolve(free.resource);\r\n                    }\r\n                    else {\r\n                        remove(this.used, free);\r\n                        // Only destroy the resource if the validation has failed\r\n                        if (!validationSuccess) {\r\n                            this._destroy(free.resource);\r\n                            // Since we destroyed an invalid resource and were not able to fulfill\r\n                            // all the pending acquires, we may need to create new ones or at\r\n                            // least run this acquire loop again to verify it. But not immediately\r\n                            // to prevent starving event loop.\r\n                            setTimeout(() => {\r\n                                this._tryAcquireOrCreate();\r\n                            }, 0);\r\n                        }\r\n                        else {\r\n                            this.free.push(free);\r\n                        }\r\n                        // is acquire was canceled, failed or timed out already\r\n                        // no need to return it to pending queries\r\n                        if (!pendingAcquire.isRejected) {\r\n                            this.pendingAcquires.unshift(pendingAcquire);\r\n                        }\r\n                    }\r\n                }\r\n                finally {\r\n                    remove(this.pendingValidations, pendingAcquire);\r\n                }\r\n            });\r\n            // try to validate\r\n            this._validateResource(free.resource)\r\n                .then(validationSuccess => {\r\n                abortAbleValidation.resolve(validationSuccess);\r\n            })\r\n                .catch(err => {\r\n                abortAbleValidation.reject(err);\r\n            });\r\n        }\r\n    }\r\n    _canAcquire() {\r\n        return this.free.length > 0 && this.pendingAcquires.length > 0;\r\n    }\r\n    _validateResource(resource) {\r\n        try {\r\n            return Promise.resolve(this.validate(resource));\r\n        }\r\n        catch (err) {\r\n            // prevent leaking of sync exception\r\n            return Promise.reject(err);\r\n        }\r\n    }\r\n    _shouldCreateMoreResources() {\r\n        return (this.used.length + this.pendingCreates.length < this.max &&\r\n            this.pendingCreates.length < this.pendingAcquires.length);\r\n    }\r\n    _doCreate() {\r\n        const pendingAcquiresBeforeCreate = this.pendingAcquires.slice();\r\n        const pendingCreate = this._create();\r\n        pendingCreate.promise\r\n            .then(() => {\r\n            // Not returned on purpose.\r\n            this._tryAcquireOrCreate();\r\n            return null;\r\n        })\r\n            .catch(err => {\r\n            if (this.propagateCreateError && this.pendingAcquires.length !== 0) {\r\n                // If propagateCreateError is true, we don't retry the create\r\n                // but reject the first pending acquire immediately. Intentionally\r\n                // use `this.pendingAcquires` instead of `pendingAcquiresBeforeCreate`\r\n                // in case some acquires in pendingAcquiresBeforeCreate have already\r\n                // been resolved.\r\n                this.pendingAcquires[0].reject(err);\r\n            }\r\n            // Save the create error to all pending acquires so that we can use it\r\n            // as the error to reject the acquire if it times out.\r\n            pendingAcquiresBeforeCreate.forEach(pendingAcquire => {\r\n                pendingAcquire.possibleTimeoutCause = err;\r\n            });\r\n            // Not returned on purpose.\r\n            utils_1.delay(this.createRetryIntervalMillis).then(() => this._tryAcquireOrCreate());\r\n        });\r\n    }\r\n    _create() {\r\n        const eventId = this.eventId++;\r\n        this._executeEventHandlers('createRequest', eventId);\r\n        const pendingCreate = new PendingOperation_1.PendingOperation(this.createTimeoutMillis);\r\n        // If an error occurs (likely a create timeout) remove this creation from\r\n        // the list of pending creations so we try to create a new one.\r\n        pendingCreate.promise = pendingCreate.promise.catch(err => {\r\n            if (remove(this.pendingCreates, pendingCreate)) {\r\n                // TODO: figure out more consistent way for different error handlers in next rewrite\r\n                this._executeEventHandlers('createFail', eventId, err);\r\n            }\r\n            throw err;\r\n        });\r\n        this.pendingCreates.push(pendingCreate);\r\n        callbackOrPromise(this.creator)\r\n            .then(resource => {\r\n            if (pendingCreate.isRejected) {\r\n                this.destroyer(resource);\r\n                return null;\r\n            }\r\n            remove(this.pendingCreates, pendingCreate);\r\n            this.free.push(new Resource_1.Resource(resource));\r\n            // Not returned on purpose.\r\n            pendingCreate.resolve(resource);\r\n            this._executeEventHandlers('createSuccess', eventId, resource);\r\n            return null;\r\n        })\r\n            .catch(err => {\r\n            if (pendingCreate.isRejected) {\r\n                return null;\r\n            }\r\n            if (remove(this.pendingCreates, pendingCreate)) {\r\n                this._executeEventHandlers('createFail', eventId, err);\r\n            }\r\n            // Not returned on purpose.\r\n            pendingCreate.reject(err);\r\n            return null;\r\n        });\r\n        return pendingCreate;\r\n    }\r\n    _destroy(resource) {\r\n        const eventId = this.eventId++;\r\n        this._executeEventHandlers('destroyRequest', eventId, resource);\r\n        // this.destroyer can be both synchronous and asynchronous.\r\n        // so we wrap it to promise to get all exceptions through same pipeline\r\n        const pendingDestroy = new PendingOperation_1.PendingOperation(this.destroyTimeoutMillis);\r\n        const retVal = Promise.resolve().then(() => this.destroyer(resource));\r\n        retVal\r\n            .then(() => {\r\n            pendingDestroy.resolve(resource);\r\n        })\r\n            .catch((err) => {\r\n            pendingDestroy.reject(err);\r\n        });\r\n        this.pendingDestroys.push(pendingDestroy);\r\n        // In case of an error there's nothing we can do here but log it.\r\n        return pendingDestroy.promise\r\n            .then(res => {\r\n            this._executeEventHandlers('destroySuccess', eventId, resource);\r\n            return res;\r\n        })\r\n            .catch(err => this._logDestroyerError(eventId, resource, err))\r\n            .then(res => {\r\n            const index = this.pendingDestroys.findIndex(pd => pd === pendingDestroy);\r\n            this.pendingDestroys.splice(index, 1);\r\n            return res;\r\n        });\r\n    }\r\n    _logDestroyerError(eventId, resource, err) {\r\n        this._executeEventHandlers('destroyFail', eventId, resource, err);\r\n        this.log('Tarn: resource destroyer threw an exception ' + err.stack, 'warn');\r\n    }\r\n    _startReaping() {\r\n        if (!this.interval) {\r\n            this._executeEventHandlers('startReaping');\r\n            this.interval = setInterval(() => this.check(), this.reapIntervalMillis);\r\n        }\r\n    }\r\n    _stopReaping() {\r\n        if (this.interval !== null) {\r\n            this._executeEventHandlers('stopReaping');\r\n            timers_1.clearInterval(this.interval);\r\n        }\r\n        this.interval = null;\r\n    }\r\n    _executeEventHandlers(eventName, ...args) {\r\n        const listeners = this.emitter.listeners(eventName);\r\n        // just calling .emit() would stop running rest of the listeners if one them fails\r\n        listeners.forEach(listener => {\r\n            try {\r\n                listener(...args);\r\n            }\r\n            catch (err) {\r\n                // There's nothing we can do here but log the error. This would otherwise\r\n                // leak out as an unhandled exception.\r\n                this.log(`Tarn: event handler \"${eventName}\" threw an exception ${err.stack}`, 'warn');\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.Pool = Pool;\r\nfunction remove(arr, item) {\r\n    const idx = arr.indexOf(item);\r\n    if (idx === -1) {\r\n        return false;\r\n    }\r\n    else {\r\n        arr.splice(idx, 1);\r\n        return true;\r\n    }\r\n}\r\nfunction callbackOrPromise(func) {\r\n    return new Promise((resolve, reject) => {\r\n        const callback = (err, resource) => {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                resolve(resource);\r\n            }\r\n        };\r\n        utils_1.tryPromise(() => func(callback))\r\n            .then(res => {\r\n            // If the result is falsy, we assume that the callback will\r\n            // be called instead of interpreting the falsy value as a\r\n            // result value.\r\n            if (res) {\r\n                resolve(res);\r\n            }\r\n        })\r\n            .catch(err => {\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Pool_1 = require(\"./Pool\");\r\nexports.Pool = Pool_1.Pool;\r\nconst TimeoutError_1 = require(\"./TimeoutError\");\r\nexports.TimeoutError = TimeoutError_1.TimeoutError;\r\nmodule.exports = {\r\n    Pool: Pool_1.Pool,\r\n    TimeoutError: TimeoutError_1.TimeoutError\r\n};\r\n","/*eslint max-len: 0, no-var:0 */\n\nconst charsRegex = /[\\0\\b\\t\\n\\r\\x1a\"'\\\\]/g; // eslint-disable-line no-control-regex\nconst charsMap = {\n  '\\0': '\\\\0',\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\x1a': '\\\\Z',\n  '\"': '\\\\\"',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n};\n\nfunction wrapEscape(escapeFn) {\n  return function finalEscape(val, ctx = {}) {\n    return escapeFn(val, finalEscape, ctx);\n  };\n}\n\nfunction makeEscape(config = {}) {\n  const finalEscapeDate = config.escapeDate || dateToString;\n  const finalEscapeArray = config.escapeArray || arrayToList;\n  const finalEscapeBuffer = config.escapeBuffer || bufferToString;\n  const finalEscapeString = config.escapeString || escapeString;\n  const finalEscapeObject = config.escapeObject || escapeObject;\n  const finalWrap = config.wrap || wrapEscape;\n\n  function escapeFn(val, finalEscape, ctx) {\n    if (val === undefined || val === null) {\n      return 'NULL';\n    }\n    switch (typeof val) {\n      case 'boolean':\n        return val ? 'true' : 'false';\n      case 'number':\n        return val + '';\n      case 'object':\n        if (val instanceof Date) {\n          val = finalEscapeDate(val, finalEscape, ctx);\n        } else if (Array.isArray(val)) {\n          return finalEscapeArray(val, finalEscape, ctx);\n        } else if (Buffer.isBuffer(val)) {\n          return finalEscapeBuffer(val, finalEscape, ctx);\n        } else {\n          return finalEscapeObject(val, finalEscape, ctx);\n        }\n    }\n    return finalEscapeString(val, finalEscape, ctx);\n  }\n\n  return finalWrap ? finalWrap(escapeFn) : escapeFn;\n}\n\nfunction escapeObject(val, finalEscape, ctx) {\n  if (val && typeof val.toSQL === 'function') {\n    return val.toSQL(ctx);\n  } else {\n    return JSON.stringify(val);\n  }\n}\n\nfunction arrayToList(array, finalEscape, ctx) {\n  let sql = '';\n  for (let i = 0; i < array.length; i++) {\n    const val = array[i];\n    if (Array.isArray(val)) {\n      sql +=\n        (i === 0 ? '' : ', ') + '(' + arrayToList(val, finalEscape, ctx) + ')';\n    } else {\n      sql += (i === 0 ? '' : ', ') + finalEscape(val, ctx);\n    }\n  }\n  return sql;\n}\n\nfunction bufferToString(buffer) {\n  return 'X' + escapeString(buffer.toString('hex'));\n}\n\nfunction escapeString(val, finalEscape, ctx) {\n  let chunkIndex = (charsRegex.lastIndex = 0);\n  let escapedVal = '';\n  let match;\n\n  while ((match = charsRegex.exec(val))) {\n    escapedVal += val.slice(chunkIndex, match.index) + charsMap[match[0]];\n    chunkIndex = charsRegex.lastIndex;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was escaped\n    return \"'\" + val + \"'\";\n  }\n\n  if (chunkIndex < val.length) {\n    return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n  }\n\n  return \"'\" + escapedVal + \"'\";\n}\n\nfunction dateToString(date, finalEscape, ctx = {}) {\n  const timeZone = ctx.timeZone || 'local';\n\n  const dt = new Date(date);\n  let year;\n  let month;\n  let day;\n  let hour;\n  let minute;\n  let second;\n  let millisecond;\n\n  if (timeZone === 'local') {\n    year = dt.getFullYear();\n    month = dt.getMonth() + 1;\n    day = dt.getDate();\n    hour = dt.getHours();\n    minute = dt.getMinutes();\n    second = dt.getSeconds();\n    millisecond = dt.getMilliseconds();\n  } else {\n    const tz = convertTimezone(timeZone);\n\n    if (tz !== false && tz !== 0) {\n      dt.setTime(dt.getTime() + tz * 60000);\n    }\n\n    year = dt.getUTCFullYear();\n    month = dt.getUTCMonth() + 1;\n    day = dt.getUTCDate();\n    hour = dt.getUTCHours();\n    minute = dt.getUTCMinutes();\n    second = dt.getUTCSeconds();\n    millisecond = dt.getUTCMilliseconds();\n  }\n\n  // YYYY-MM-DD HH:mm:ss.mmm\n  return (\n    zeroPad(year, 4) +\n    '-' +\n    zeroPad(month, 2) +\n    '-' +\n    zeroPad(day, 2) +\n    ' ' +\n    zeroPad(hour, 2) +\n    ':' +\n    zeroPad(minute, 2) +\n    ':' +\n    zeroPad(second, 2) +\n    '.' +\n    zeroPad(millisecond, 3)\n  );\n}\n\nfunction zeroPad(number, length) {\n  number = number.toString();\n  while (number.length < length) {\n    number = '0' + number;\n  }\n  return number;\n}\n\nfunction convertTimezone(tz) {\n  if (tz === 'Z') {\n    return 0;\n  }\n  const m = tz.match(/([+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n  if (m) {\n    return (\n      (m[1] == '-' ? -1 : 1) *\n      (parseInt(m[2], 10) + (m[3] ? parseInt(m[3], 10) : 0) / 60) *\n      60\n    );\n  }\n  return false;\n}\n\nmodule.exports = {\n  arrayToList,\n  bufferToString,\n  dateToString,\n  escapeString,\n  charsRegex,\n  charsMap,\n  escapeObject,\n  makeEscape,\n};\n","const Raw = require('./raw');\nconst Ref = require('./ref');\nconst Runner = require('./runner');\nconst Formatter = require('./formatter');\nconst Transaction = require('./transaction');\n\nconst QueryBuilder = require('./query/builder');\nconst QueryCompiler = require('./query/compiler');\n\nconst SchemaBuilder = require('./schema/builder');\nconst SchemaCompiler = require('./schema/compiler');\nconst TableBuilder = require('./schema/tablebuilder');\nconst TableCompiler = require('./schema/tablecompiler');\nconst ColumnBuilder = require('./schema/columnbuilder');\nconst ColumnCompiler = require('./schema/columncompiler');\n\nconst { Pool, TimeoutError } = require('tarn');\nconst { EventEmitter } = require('events');\nconst { promisify, inherits } = require('util');\n\nconst { makeEscape } = require('./query/string');\nconst cloneDeep = require('lodash/cloneDeep');\nconst defaults = require('lodash/defaults');\nconst uniqueId = require('lodash/uniqueId');\n\nconst Logger = require('./logger');\nconst { KnexTimeoutError } = require('./util/timeout');\n\nconst debug = require('debug')('knex:client');\nconst _debugQuery = require('debug')('knex:query');\nconst debugBindings = require('debug')('knex:bindings');\n\nconst debugQuery = (sql, txId) => _debugQuery(sql.replace(/%/g, '%%'), txId);\n\nconst { POOL_CONFIG_OPTIONS } = require('./constants');\n\n// The base client provides the general structure\n// for a dialect specific client object.\nfunction Client(config = {}) {\n  this.config = config;\n  this.logger = new Logger(config);\n\n  //Client is a required field, so throw error if it's not supplied.\n  //If 'this.dialect' is set, then this is a 'super()' call, in which case\n  //'client' does not have to be set as it's already assigned on the client prototype.\n\n  if (this.dialect && !this.config.client) {\n    this.logger.warn(\n      `Using 'this.dialect' to identify the client is deprecated and support for it will be removed in the future. Please use configuration option 'client' instead.`\n    );\n  }\n  const dbClient = this.config.client || this.dialect;\n  if (!dbClient) {\n    throw new Error(`knex: Required configuration option 'client' is missing.`);\n  }\n\n  if (config.version) {\n    this.version = config.version;\n  }\n\n  if (config.connection && config.connection instanceof Function) {\n    this.connectionConfigProvider = config.connection;\n    this.connectionConfigExpirationChecker = () => true; // causes the provider to be called on first use\n  } else {\n    this.connectionSettings = cloneDeep(config.connection || {});\n    this.connectionConfigExpirationChecker = null;\n  }\n  if (this.driverName && config.connection) {\n    this.initializeDriver();\n    if (!config.pool || (config.pool && config.pool.max !== 0)) {\n      this.initializePool(config);\n    }\n  }\n  this.valueForUndefined = this.raw('DEFAULT');\n  if (config.useNullAsDefault) {\n    this.valueForUndefined = null;\n  }\n}\n\ninherits(Client, EventEmitter);\n\nObject.assign(Client.prototype, {\n  formatter(builder) {\n    return new Formatter(this, builder);\n  },\n\n  queryBuilder() {\n    return new QueryBuilder(this);\n  },\n\n  queryCompiler(builder) {\n    return new QueryCompiler(this, builder);\n  },\n\n  schemaBuilder() {\n    return new SchemaBuilder(this);\n  },\n\n  schemaCompiler(builder) {\n    return new SchemaCompiler(this, builder);\n  },\n\n  tableBuilder(type, tableName, fn) {\n    return new TableBuilder(this, type, tableName, fn);\n  },\n\n  tableCompiler(tableBuilder) {\n    return new TableCompiler(this, tableBuilder);\n  },\n\n  columnBuilder(tableBuilder, type, args) {\n    return new ColumnBuilder(this, tableBuilder, type, args);\n  },\n\n  columnCompiler(tableBuilder, columnBuilder) {\n    return new ColumnCompiler(this, tableBuilder, columnBuilder);\n  },\n\n  runner(builder) {\n    return new Runner(this, builder);\n  },\n\n  transaction(container, config, outerTx) {\n    return new Transaction(this, container, config, outerTx);\n  },\n\n  raw() {\n    return new Raw(this).set(...arguments);\n  },\n\n  ref() {\n    return new Ref(this, ...arguments);\n  },\n\n  _formatQuery(sql, bindings, timeZone) {\n    bindings = bindings == null ? [] : [].concat(bindings);\n    let index = 0;\n    return sql.replace(/\\\\?\\?/g, (match) => {\n      if (match === '\\\\?') {\n        return '?';\n      }\n      if (index === bindings.length) {\n        return match;\n      }\n      const value = bindings[index++];\n      return this._escapeBinding(value, { timeZone });\n    });\n  },\n\n  _escapeBinding: makeEscape({\n    escapeString(str) {\n      return `'${str.replace(/'/g, \"''\")}'`;\n    },\n  }),\n\n  query(connection, obj) {\n    if (typeof obj === 'string') obj = { sql: obj };\n    obj.bindings = this.prepBindings(obj.bindings);\n\n    const { __knexUid, __knexTxId } = connection;\n\n    this.emit('query', Object.assign({ __knexUid, __knexTxId }, obj));\n    debugQuery(obj.sql, __knexTxId);\n    debugBindings(obj.bindings, __knexTxId);\n\n    obj.sql = this.positionBindings(obj.sql);\n\n    return this._query(connection, obj).catch((err) => {\n      err.message =\n        this._formatQuery(obj.sql, obj.bindings) + ' - ' + err.message;\n      this.emit(\n        'query-error',\n        err,\n        Object.assign({ __knexUid, __knexTxId }, obj)\n      );\n      throw err;\n    });\n  },\n\n  stream(connection, obj, stream, options) {\n    if (typeof obj === 'string') obj = { sql: obj };\n    obj.bindings = this.prepBindings(obj.bindings);\n\n    const { __knexUid, __knexTxId } = connection;\n\n    this.emit('query', Object.assign({ __knexUid, __knexTxId }, obj));\n    debugQuery(obj.sql, __knexTxId);\n    debugBindings(obj.bindings, __knexTxId);\n\n    obj.sql = this.positionBindings(obj.sql);\n\n    return this._stream(connection, obj, stream, options);\n  },\n\n  prepBindings(bindings) {\n    return bindings;\n  },\n\n  positionBindings(sql) {\n    return sql;\n  },\n\n  postProcessResponse(resp, queryContext) {\n    if (this.config.postProcessResponse) {\n      return this.config.postProcessResponse(resp, queryContext);\n    }\n    return resp;\n  },\n\n  wrapIdentifier(value, queryContext) {\n    return this.customWrapIdentifier(\n      value,\n      this.wrapIdentifierImpl,\n      queryContext\n    );\n  },\n\n  customWrapIdentifier(value, origImpl, queryContext) {\n    if (this.config.wrapIdentifier) {\n      return this.config.wrapIdentifier(value, origImpl, queryContext);\n    }\n    return origImpl(value);\n  },\n\n  wrapIdentifierImpl(value) {\n    return value !== '*' ? `\"${value.replace(/\"/g, '\"\"')}\"` : '*';\n  },\n\n  initializeDriver() {\n    try {\n      this.driver = this._driver();\n    } catch (e) {\n      const message = `Knex: run\\n$ npm install ${this.driverName} --save`;\n      this.logger.error(`${message}\\n${e.message}\\n${e.stack}`);\n      throw new Error(`${message}\\n${e.message}`);\n    }\n  },\n\n  poolDefaults() {\n    return { min: 2, max: 10, propagateCreateError: true };\n  },\n\n  getPoolSettings(poolConfig) {\n    poolConfig = defaults({}, poolConfig, this.poolDefaults());\n\n    POOL_CONFIG_OPTIONS.forEach((option) => {\n      if (option in poolConfig) {\n        this.logger.warn(\n          [\n            `Pool config option \"${option}\" is no longer supported.`,\n            `See https://github.com/Vincit/tarn.js for possible pool config options.`,\n          ].join(' ')\n        );\n      }\n    });\n\n    const timeouts = [\n      this.config.acquireConnectionTimeout || 60000,\n      poolConfig.acquireTimeoutMillis,\n    ].filter((timeout) => timeout !== undefined);\n\n    // acquire connection timeout can be set on config or config.pool\n    // choose the smallest, positive timeout setting and set on poolConfig\n    poolConfig.acquireTimeoutMillis = Math.min(...timeouts);\n\n    const updatePoolConnectionSettingsFromProvider = async () => {\n      if (!this.connectionConfigProvider) {\n        return; // static configuration, nothing to update\n      }\n      if (\n        !this.connectionConfigExpirationChecker ||\n        !this.connectionConfigExpirationChecker()\n      ) {\n        return; // not expired, reuse existing connection\n      }\n      const providerResult = await this.connectionConfigProvider();\n      if (providerResult.expirationChecker) {\n        this.connectionConfigExpirationChecker =\n          providerResult.expirationChecker;\n        delete providerResult.expirationChecker; // MySQL2 driver warns on receiving extra properties\n      } else {\n        this.connectionConfigExpirationChecker = null;\n      }\n      this.connectionSettings = providerResult;\n    };\n\n    return Object.assign(poolConfig, {\n      create: async () => {\n        await updatePoolConnectionSettingsFromProvider();\n        const connection = await this.acquireRawConnection();\n        connection.__knexUid = uniqueId('__knexUid');\n        if (poolConfig.afterCreate) {\n          await promisify(poolConfig.afterCreate)(connection);\n        }\n        return connection;\n      },\n\n      destroy: (connection) => {\n        if (connection !== void 0) {\n          return this.destroyRawConnection(connection);\n        }\n      },\n\n      validate: (connection) => {\n        if (connection.__knex__disposed) {\n          this.logger.warn(`Connection Error: ${connection.__knex__disposed}`);\n          return false;\n        }\n\n        return this.validateConnection(connection);\n      },\n    });\n  },\n\n  initializePool(config = this.config) {\n    if (this.pool) {\n      this.logger.warn('The pool has already been initialized');\n      return;\n    }\n\n    const tarnPoolConfig = {\n      ...this.getPoolSettings(config.pool),\n    };\n    // afterCreate is an internal knex param, tarn.js does not support it\n    if (tarnPoolConfig.afterCreate) {\n      delete tarnPoolConfig.afterCreate;\n    }\n\n    this.pool = new Pool(tarnPoolConfig);\n  },\n\n  validateConnection(connection) {\n    return true;\n  },\n\n  // Acquire a connection from the pool.\n  async acquireConnection() {\n    if (!this.pool) {\n      throw new Error('Unable to acquire a connection');\n    }\n    try {\n      const connection = await this.pool.acquire().promise;\n      debug('acquired connection from pool: %s', connection.__knexUid);\n      return connection;\n    } catch (error) {\n      let convertedError = error;\n      if (error instanceof TimeoutError) {\n        convertedError = new KnexTimeoutError(\n          'Knex: Timeout acquiring a connection. The pool is probably full. ' +\n            'Are you missing a .transacting(trx) call?'\n        );\n      }\n      throw convertedError;\n    }\n  },\n\n  // Releases a connection back to the connection pool,\n  // returning a promise resolved when the connection is released.\n  releaseConnection(connection) {\n    debug('releasing connection to pool: %s', connection.__knexUid);\n    const didRelease = this.pool.release(connection);\n\n    if (!didRelease) {\n      debug('pool refused connection: %s', connection.__knexUid);\n    }\n\n    return Promise.resolve();\n  },\n\n  // Destroy the current connection pool for the client.\n  destroy(callback) {\n    const maybeDestroy = this.pool && this.pool.destroy();\n\n    return Promise.resolve(maybeDestroy)\n      .then(() => {\n        this.pool = void 0;\n\n        if (typeof callback === 'function') {\n          callback();\n        }\n      })\n      .catch((err) => {\n        if (typeof callback === 'function') {\n          callback(err);\n        }\n\n        return Promise.reject(err);\n      });\n  },\n\n  // Return the database being used by this client.\n  database() {\n    return this.connectionSettings.database;\n  },\n\n  toString() {\n    return '[object KnexClient]';\n  },\n\n  canCancelQuery: false,\n\n  assertCanCancelQuery() {\n    if (!this.canCancelQuery) {\n      throw new Error('Query cancelling not supported for this dialect');\n    }\n  },\n\n  cancelQuery() {\n    throw new Error('Query cancelling not supported for this dialect');\n  },\n});\n\nmodule.exports = Client;\n","const Formatter = require('../formatter');\n\nconst fakeClient = {\n  formatter(builder) {\n    return new Formatter(fakeClient, builder);\n  },\n};\n\nmodule.exports = fakeClient;\n","'use strict'\n\nvar url = require('url')\nvar fs = require('fs')\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    var config = str.split(' ')\n    return { host: config[0], database: config[1] }\n  }\n\n  // url parse expects spaces encoded as %20\n  var result = url.parse(\n    / |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str) ? encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1') : str,\n    true\n  )\n  var config = result.query\n  for (var k in config) {\n    if (Array.isArray(config[k])) {\n      config[k] = config[k][config[k].length - 1]\n    }\n  }\n\n  var auth = (result.auth || ':').split(':')\n  config.user = auth[0]\n  config.password = auth.splice(1).join(':')\n\n  config.port = result.port\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname)\n    config.database = result.query.db\n    config.client_encoding = result.query.encoding\n    return config\n  }\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = result.hostname\n  }\n\n  // If the host is missing it might be a URL-encoded path to a socket.\n  var pathname = result.pathname\n  if (!config.host && pathname && /^%2f/i.test(pathname)) {\n    var pathnameSplit = pathname.split('/')\n    config.host = decodeURIComponent(pathnameSplit[0])\n    pathname = pathnameSplit.splice(1).join('/')\n  }\n  // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)\n  // only strip the slash if it is present.\n  if (pathname && pathname.charAt(0) === '/') {\n    pathname = pathname.slice(1) || null\n  }\n  config.database = pathname && decodeURI(pathname)\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {}\n  }\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString()\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString()\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()\n  }\n\n  switch (config.sslmode) {\n    case 'disable': {\n      config.ssl = false\n      break\n    }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full': {\n      break\n    }\n    case 'no-verify': {\n      config.ssl.rejectUnauthorized = false\n      break\n    }\n  }\n\n  return config\n}\n\nmodule.exports = parse\n\nparse.parse = parse\n","const url = require('url');\nconst { parse } = require('pg-connection-string');\nconst parsePG = parse;\nconst isWindows = process && process.platform && process.platform === 'win32';\n\nmodule.exports = function parseConnectionString(str) {\n  const parsed = url.parse(str, true);\n  let { protocol } = parsed;\n  const isDriveLetter = isWindows && protocol && protocol.length === 2;\n  if (protocol === null || isDriveLetter) {\n    return {\n      client: 'sqlite3',\n      connection: {\n        filename: str,\n      },\n    };\n  }\n  if (protocol.slice(-1) === ':') {\n    protocol = protocol.slice(0, -1);\n  }\n\n  const isPG = ['postgresql', 'postgres'].includes(protocol);\n\n  return {\n    client: protocol,\n    connection: isPG ? parsePG(str) : connectionObject(parsed),\n  };\n};\n\nfunction connectionObject(parsed) {\n  const connection = {};\n  let db = parsed.pathname;\n  if (db[0] === '/') {\n    db = db.slice(1);\n  }\n\n  connection.database = db;\n\n  if (parsed.hostname) {\n    if (parsed.protocol.indexOf('mssql') === 0) {\n      connection.server = parsed.hostname;\n    } else {\n      connection.host = parsed.hostname;\n    }\n  }\n  if (parsed.port) {\n    connection.port = parsed.port;\n  }\n  if (parsed.auth) {\n    const idx = parsed.auth.indexOf(':');\n    if (idx !== -1) {\n      connection.user = parsed.auth.slice(0, idx);\n      if (idx < parsed.auth.length - 1) {\n        connection.password = parsed.auth.slice(idx + 1);\n      }\n    } else {\n      connection.user = parsed.auth;\n    }\n  }\n  if (parsed.query) {\n    for (const key in parsed.query) {\n      connection[key] = parsed.query[key];\n    }\n  }\n  return connection;\n}\n","const Client = require('./client');\nconst { SUPPORTED_CLIENTS } = require('./constants');\n\nconst parseConnection = require('./util/parse-connection');\nconst { resolveClientNameWithAliases } = require('./helpers');\n\nfunction resolveConfig(config) {\n  let Dialect;\n  let resolvedConfig;\n\n  // If config is a string, try to parse it\n  const parsedConfig =\n    typeof config === 'string'\n      ? Object.assign(parseConnection(config), arguments[2])\n      : config;\n\n  // If user provided no relevant parameters, use generic client\n  if (\n    arguments.length === 0 ||\n    (!parsedConfig.client && !parsedConfig.dialect)\n  ) {\n    Dialect = Client;\n  }\n  // If user provided Client constructor as a parameter, use it\n  else if (\n    typeof parsedConfig.client === 'function' &&\n    parsedConfig.client.prototype instanceof Client\n  ) {\n    Dialect = parsedConfig.client;\n  }\n  // If neither applies, let's assume user specified name of a client or dialect as a string\n  else {\n    const clientName = parsedConfig.client || parsedConfig.dialect;\n    if (!SUPPORTED_CLIENTS.includes(clientName)) {\n      throw new Error(\n        `knex: Unknown configuration option 'client' value ${clientName}. Note that it is case-sensitive, check documentation for supported values.`\n      );\n    }\n\n    const resolvedClientName = resolveClientNameWithAliases(clientName);\n    Dialect = require(`./dialects/${resolvedClientName}/index.js`);\n  }\n\n  // If config connection parameter is passed as string, try to parse it\n  if (typeof parsedConfig.connection === 'string') {\n    resolvedConfig = Object.assign({}, parsedConfig, {\n      connection: parseConnection(parsedConfig.connection).connection,\n    });\n  } else {\n    resolvedConfig = Object.assign({}, parsedConfig);\n  }\n\n  return {\n    resolvedConfig,\n    Dialect,\n  };\n}\n\nmodule.exports = {\n  resolveConfig,\n};\n","const Raw = require('./raw');\nconst Client = require('./client');\nconst QueryBuilder = require('./query/builder');\nconst QueryInterface = require('./query/methods');\n\nconst makeKnex = require('./util/make-knex');\nconst { KnexTimeoutError } = require('./util/timeout');\nconst fakeClient = require('./util/fake-client');\nconst { resolveConfig } = require('./config-resolver');\n\nfunction Knex(config) {\n  const { resolvedConfig, Dialect } = resolveConfig(...arguments);\n\n  const newKnex = makeKnex(new Dialect(resolvedConfig));\n  if (resolvedConfig.userParams) {\n    newKnex.userParams = resolvedConfig.userParams;\n  }\n  return newKnex;\n}\n\n// Expose Client on the main Knex namespace.\nKnex.Client = Client;\n\nKnex.KnexTimeoutError = KnexTimeoutError;\n\nKnex.QueryBuilder = {\n  extend: function (methodName, fn) {\n    QueryBuilder.extend(methodName, fn);\n    QueryInterface.push(methodName);\n  },\n};\n\n// Run a \"raw\" query, though we can't do anything with it other than put\n// it in a query statement.\nKnex.raw = (sql, bindings) => {\n  console.warn(\n    'global Knex.raw is deprecated, use knex.raw (chain off an initialized knex object)'\n  );\n  return new Raw(fakeClient).set(sql, bindings);\n};\n\nmodule.exports = Knex;\n","const Knex = require('./knex');\n\nmodule.exports = Knex;\n","// Knex.js\n// --------------\n//     (c) 2013-present Tim Griesser\n//     Knex may be freely distributed under the MIT license.\n//     For details and documentation:\n//     http://knexjs.org\n\nmodule.exports = require('./lib/index');\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 37);\n","import { IMemoryDb, IMemoryTable, DataType, IType, TableEvent, GlobalEvent, ISchema, SchemaField, MemoryDbOptions, nil, Schema, QueryError, ISubscription, LanguageCompiler, ArgDefDetails, QueryResult } from './interfaces';\nimport { Expr, SelectedColumn, SelectStatement, CreateColumnDef, AlterColumn, LimitStatement, OrderByStatement, TableConstraint, AlterSequenceChange, CreateSequenceOptions, QName, DataTypeDef, ExprRef, Name, BinaryOperator, ValuesStatement, CreateExtensionStatement, DropFunctionStatement, ExprCall } from 'pgsql-ast-parser';\nimport { Map as ImMap, Record, Set as ImSet } from 'immutable';\n\nexport * from './interfaces';\n\n\nexport const GLOBAL_VARS = Symbol('_global_vars');\n\n// export type PrimaryKey = string | number;\nconst ID = Symbol('_id');\nexport function getId(item: any): string {\n    if (!item) {\n        return '';\n    }\n    const got = item[ID];\n    if (!got) {\n        throw new Error('Unexpected: cannot get an ID of something which is not a record');\n    }\n    return got;\n}\n\nexport function setId<T = any>(item: T, id: string): T {\n    const got = (item as any)[ID];\n    if (got === id) {\n        return item;\n    }\n    if (got) {\n        throw new Error('Unexpected: Cannot update an ID');\n    }\n    (item as any)[ID] = id;\n    return item;\n}\n\nexport type RegClass = string | number;\nexport type RegType = string | number;\nexport type TypeQuery = DataTypeDef | DataType | number | _IType;\nexport interface _ISchema extends ISchema {\n    readonly name: string;\n    readonly db: _IDb;\n    readonly dualTable: _ITable;\n    /** If the given name refers to another schema, then get it. Else, get this */\n    getThisOrSiblingFor(name: QName): _ISchema;\n    executeCreateExtension(p: CreateExtensionStatement): void;\n    dropFunction(fn: DropFunctionStatement): void;\n    explainSelect(sql: string): _SelectExplanation;\n    explainLastSelect(): _SelectExplanation | undefined;\n    getTable(table: string): _ITable;\n    getTable(table: string, nullIfNotFound?: boolean): _ITable;\n    tablesCount(t: _Transaction): number;\n    listTables(t?: _Transaction): Iterable<_ITable>;\n    declareTable(table: Schema, noSchemaChange?: boolean): _ITable;\n    createSequence(t: _Transaction, opts: CreateSequenceOptions | nil, name: QName | nil): _ISequence;\n    /** Get functions matching this overload */\n    resolveFunction(name: string | QName, args: IValue[], forceOwn?: boolean): _FunctionDefinition | nil;\n    /** Get an exact function def from its signature (do not use that to resolve overload) */\n    getFunction(name: string, args: _IType[]): _FunctionDefinition | nil;\n    /** Get operator matching this overload */\n    resolveOperator(name: BinaryOperator, left: IValue, right: IValue, forceOwn?: boolean): _OperatorDefinition | nil;\n\n    getObject(p: QName): _IRelation;\n    getObject(p: QName, opts: BeingCreated): _IRelation;\n    getObject(p: QName, opts?: QueryObjOpts): _IRelation | null;\n\n    getOwnObject(name: string): _IRelation | null;\n\n    parseType(t: string): _IType;\n\n\n    getType(t: TypeQuery): _IType;\n    getType(_t: TypeQuery, opts?: QueryObjOpts): _IType | null;\n\n    getOwnType(name: DataTypeDef): _IType | null\n\n    getObjectByRegClassId(reg: number): _IRelation;\n    getObjectByRegClassId(reg: number, opts?: QueryObjOpts): _IRelation | null;\n\n    getOwnObjectByRegClassId(reg: number): _IRelation | null;\n\n    getObjectByRegOrName(reg: RegClass): _IRelation;\n    getObjectByRegOrName(reg: RegClass, opts?: QueryObjOpts): _IRelation | null;\n\n    setReadonly(): void;\n\n    _registerTypeSizeable(name: string, type: (sz?: number) => _IType): this;\n    _registerType(type: _IType): this;\n    _unregisterType(type: _IType): this;\n\n    _reg_register(rel: _IRelation): Reg;\n    _reg_unregister(rel: _IRelation): void;\n    _reg_rename(rel: _IRelation, oldName: string, newName: string): void;\n\n}\n\n\nexport interface _IStatement {\n    readonly schema: _ISchema;\n    onExecuted(callback: OnStatementExecuted): void;\n}\n\nexport interface _IStatementExecutor {\n    execute(t: _Transaction): StatementResult;\n}\n\nexport interface StatementResult {\n    result: QueryResult;\n    state: _Transaction;\n}\n\nexport type OnStatementExecuted = (t: _Transaction) => void;\n\nexport interface QueryObjOpts extends Partial<BeingCreated> {\n    /** Returns null instead of throwing error if not found */\n    nullIfNotFound?: boolean;\n    /** Will only search in the current schema, or in the targeted schema (not in search path) */\n    skipSearch?: boolean;\n}\n\nexport interface BeingCreated {\n    beingCreated: _IRelation;\n}\n\nexport interface _FunctionDefinition {\n    name: string;\n    args: _ArgDefDetails[];\n    argsVariadic?: _IType | nil;\n    returns?: _IType | nil;\n    impure?: boolean;\n    allowNullArguments?: boolean;\n    implementation: (...args: any[]) => any;\n}\n\nexport interface _OperatorDefinition extends _FunctionDefinition {\n    commutative: boolean;\n    left: _IType;\n    right: _IType;\n    returns: _IType;\n}\n\nexport type _ArgDefDetails = ArgDefDetails & {\n    type: _IType;\n    default?: IValue;\n};\n\nexport interface _Transaction {\n    readonly isChild: boolean;\n    /** Create a new transaction within this transaction */\n    fork(): _Transaction;\n    /** Commit this transaction (returns the parent transaction) */\n    commit(): _Transaction;\n    /** Commits this transaction and all underlying transactions */\n    fullCommit(): _Transaction;\n    rollback(): _Transaction;\n    delete(identity: symbol): void;\n    /** Set data persisted in this transaction */\n    set<T>(identity: symbol, data: T): T;\n    /** Get data persisted in this transaction */\n    get<T>(identity: symbol): T;\n    getMap<T extends ImMap<any, any>>(identity: symbol): T;\n    getSet<T>(identity: symbol): ImSet<T>;\n    /** Get transient data, which will only exist within the scope of the current statement */\n    setTransient<T>(identity: symbol, data: T): T;\n    /** Set transient data, which will only exist within the scope of the current statement */\n    getTransient<T>(identity: symbol): T;\n    clearTransientData(): void;\n}\n\nexport interface Stats {\n    /** Returns this selection size, or null if it cannot be computed without iteration */\n    count: number;\n}\n\nexport interface _IAggregation {\n    checkIfIsKey(got: IValue): IValue;\n    getAggregation(name: string, call: ExprCall): IValue;\n}\n\nexport interface _ISelection<T = any> extends _IAlias {\n    readonly debugId?: string;\n\n    readonly ownerSchema: _ISchema;\n    readonly db: _IDb;\n    /** Tells if this statement is an execution without any meaningful result (\"update\" with no \"returning\", etc...) */\n    readonly isExecutionWithNoResult: boolean;\n    /** Column list (those visible when select *) */\n    readonly columns: ReadonlyArray<IValue>;\n    /** True when this is an aggregation being built */\n    isAggregation(): this is _IAggregation;\n    /** Statistical measure of how many items will be returned by this selection */\n    entropy(t: _Transaction): number;\n    enumerate(t: _Transaction): Iterable<T>;\n\n    /** Returns true if the given value is present in this */\n    hasItem(value: T, t: _Transaction): boolean;\n\n    stats(t: _Transaction): Stats | null;\n\n    /** Gets the index associated with this value (or returns null) */\n    getIndex(...forValue: IValue[]): _IIndex<T> | nil;\n    /** All columns. A bit like .columns`, but including records selections */\n    listSelectableIdentities(): Iterable<IValue>;\n    filter(where: Expr | nil): _ISelection;\n    limit(limit: LimitStatement): _ISelection;\n    orderBy(orderBy: OrderByStatement[] | nil): _ISelection;\n    groupBy(grouping: Expr[] | nil): _ISelection;\n    distinct(select?: Expr[]): _ISelection;\n    union(right: _ISelection): _ISelection;\n    getColumn(column: string | ExprRef): IValue;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil;\n    setAlias(alias?: string): _ISelection;\n    isOriginOf(a: IValue): boolean;\n    explain(e: _Explainer): _SelectExplanation;\n\n    /** Select a specific subset */\n    select(select: (string | SelectedColumn)[]): _ISelection;\n\n    /** Limit selection to a specific alias (in joins) */\n    selectAlias(alias: string): _IAlias | nil;\n}\n\nexport interface _IAlias {\n    listColumns(): Iterable<IValue>;\n}\n\n\nexport interface _Explainer {\n    readonly transaction: _Transaction;\n    idFor(sel: _ISelection): string | number;\n}\n\nexport type _SelectExplanation = {\n    /** A jointure */\n    id: string | number;\n    _: 'join';\n    /**  The restrictive table (the one which MUST have a matched elemnt) */\n    restrictive: _SelectExplanation;\n    /** The joined table */\n    joined: _SelectExplanation;\n    inner: boolean;\n    on: {\n        /** 'with' will have to be scanned with this expression */\n        seqScan: _ExprExplanation;\n    } | {\n        /** Which seq id will be iterated (could be either 'join' or 'with' when there is an inner join) */\n        iterate: string | number;\n        /** Which iteration side has been chosen (always 'restrictive' for non inner joins) */\n        iterateSide: 'joined' | 'restrictive';\n        /** the index table on the other table that can be used to lookup corresponding item(s) */\n        joinIndex: _IndexExplanation;\n        /** It will be matched with this expression (computable from the other table) */\n        matches: _ExprExplanation;\n        /** True if there is a predicate filter that is also applied (happens when there are 'ANDs' in join condition) */\n        filtered?: boolean;\n    }\n} | {\n    /** A selection transformation */\n    id: string | number;\n    _: 'map';\n    select?: {\n        what: _ExprExplanation;\n        as: string;\n    }[];\n    of: _SelectExplanation;\n} | {\n    id: string | number;\n    _: 'orderBy';\n    of: _SelectExplanation;\n} | {\n    /** A selection transformation */\n    id: string | number;\n    _: 'limit';\n    take?: _ExprExplanation;\n    skip?: _ExprExplanation;\n    on: _SelectExplanation;\n} | {\n    /** A selection transformation */\n    id: string | number;\n    _: 'distinct';\n    of: _SelectExplanation;\n} | {\n    /** A table */\n    _: 'table';\n    table: string;\n} | {\n    /** An AND filter */\n    id: string | number;\n    _: 'and',\n    enumerate: _SelectExplanation;\n    andCheck: _SelectExplanation[];\n} | {\n    /** A raw array definition */\n    id: string | number;\n    _: 'constantSet';\n    rawArrayLen: number;\n} | {\n    /** One of the following operators on an index:\n     * - (NOT) IN\n     * - (NOT) LIKE\n     * - (NOT) BETWEEN\n     * - < > <= >= = !=\n     *\n     * (against constants) */\n    id: string | number;\n    _: 'eq' | 'ineq' | 'neq' | 'inside' | 'outside';\n    entropy: number;\n    /** The index that will be used to check equality */\n    on: _IndexExplanation;\n} | {\n    /** An empty set */\n    id: string | number;\n    _: 'empty';\n} | {\n    /** An union set */\n    id: string | number;\n    _: 'union',\n    union: _SelectExplanation[];\n} | {\n    /** A seq-scan filter of another set */\n    id: string | number;\n    _: 'seqFilter';\n    filtered: _SelectExplanation;\n} | {\n    id: string | number;\n    _: 'aggregate';\n    aggregator: {\n        /** aggregation will iterate the whole lot */\n        seqScan: _ExprExplanation;\n    } | {\n        /** aggregation uses an index items which already contains required aggregations */\n        index: _IndexExplanation\n    } | {\n        /** aggregation is trivial (select count(*) from table) */\n        trivial: _ISelection;\n    };\n}\n\nexport type _IndexExplanation = {\n    /** BTree index on expression */\n    _: 'btree';\n    onTable: string;\n    btree: string[];\n} | {\n    _: 'indexMap';\n    of: _IndexExplanation;\n} | {\n    _: 'indexRestriction';\n    /** This index will receive a lookup for each item of \"for\" collection */\n    lookup: _IndexExplanation;\n    /** Enumerated collection */\n    for: _SelectExplanation;\n} | {\n    /** Uses an index of a column propagated by a join */\n    _: 'indexOnJoin';\n    /** The in propagated column that is used */\n    index: _IndexExplanation;\n    /** How elements from the other table will be joined */\n    strategy: _IndexExplanation | 'catastrophic';\n};\n\nexport type _ExprExplanation = {\n    constant: true;\n} | {\n    /** ID of the origin of this selection */\n    on: string | number;\n    col: string;\n}\n\nexport interface _IDb extends IMemoryDb {\n    readonly options: MemoryDbOptions;\n    readonly public: _ISchema;\n    readonly data: _Transaction;\n    readonly searchPath: ReadonlyArray<string>;\n\n    createSchema(db: string): _ISchema;\n    getSchema(db?: string | null, nullIfNotFound?: false): _ISchema;\n    getSchema(db: string, nullIfNotFound: true): _ISchema | null;\n    raiseTable(table: string, event: TableEvent): void;\n    raiseGlobal(event: GlobalEvent, ...args: any[]): void;\n    listSchemas(): _ISchema[];\n    onSchemaChange(): void;\n    getTable(name: string, nullIfNotExists?: boolean): _ITable;\n    getExtension(name: string): (schema: ISchema) => void;\n    /** Get functions matching this overload */\n    resolveFunction(name: string | QName, types: IValue[]): _FunctionDefinition | nil;\n    /** Get operators matching this overload */\n    resolveOperator(name: BinaryOperator, left: IValue, right: IValue): _OperatorDefinition | nil;\n    getLanguage(name: string): LanguageCompiler;\n}\nexport type OnConflictHandler = { ignore: 'all' | _IIndex } | {\n    onIndex: _IIndex;\n    update: (item: any, excluded: any, t: _Transaction) => void;\n}\n\nexport type DropHandler = (t: _Transaction, cascade: boolean) => void;\nexport type TruncateHandler = (t: _Transaction, opts: TruncateOpts) => void;\nexport type IndexHandler = (act: 'create' | 'drop', idx: _INamedIndex) => void;\n\nexport interface _RelationBase {\n    readonly name: string;\n    readonly reg: Reg;\n    readonly ownerSchema?: _ISchema;\n}\n\nexport interface Reg {\n    readonly typeId: number;\n    readonly classId: number;\n}\n\nexport interface ChangeOpts {\n    onConflict?: OnConflictHandler | nil;\n    overriding?: 'user' | 'system' | nil;\n}\n\nexport interface _ITable<T = any> extends IMemoryTable, _RelationBase {\n    readonly type: 'table';\n    readonly hidden: boolean;\n    readonly db: _IDb;\n    readonly selection: _ISelection<T>;\n    readonly ownerSchema: _ISchema;\n    doInsert(t: _Transaction, toInsert: T, opts?: ChangeOpts): T | null;\n    setHidden(): this;\n    setReadonly(): this;\n    delete(t: _Transaction, toDelete: T): void;\n    update(t: _Transaction, toUpdate: T): T;\n    createIndex(t: _Transaction, expressions: CreateIndexDef): _IConstraint | nil;\n    createIndex(t: _Transaction, expressions: Name[], type: 'primary' | 'unique', indexName?: string | nil): _IConstraint;\n    setReadonly(): this;\n    /** Create a column */\n    addColumn(column: SchemaField | CreateColumnDef, t: _Transaction): _Column;\n    /** Get a column to modify it */\n    getColumnRef(column: string): _Column;\n    getColumnRef(column: string, nullIfNotFound?: boolean): _Column | nil;\n    rename(to: string): this;\n    getConstraint(constraint: string): _IConstraint | nil;\n    addConstraint(constraint: TableConstraint, t: _Transaction): _IConstraint | nil;\n    getIndex(...forValues: IValue[]): _IIndex | nil;\n    dropIndex(t: _Transaction, name: string): void;\n    drop(t: _Transaction, cascade: boolean): void;\n    /** Will be executed when one of the given columns is affected (update/delete) */\n    onBeforeChange(columns: (string | _Column)[], check: ChangeHandler<T>): ISubscription;\n    /** Will be executed once all 'onBeforeChange' handlers have ran (coherency checks) */\n    onCheckChange(columns: 'all' | (string | _Column)[], check: ChangeHandler<T>): ISubscription;\n    onDrop(sub: DropHandler): ISubscription;\n    onIndex(sub: IndexHandler): ISubscription;\n    onTruncate(sub: TruncateHandler): ISubscription;\n    truncate(t: _Transaction, truncateOpts?: TruncateOpts): void;\n}\n\nexport interface TruncateOpts {\n    restartIdentity?: boolean;\n    cascade?: boolean;\n}\n\nexport interface _IView extends _RelationBase {\n    readonly type: 'view';\n    readonly db: _IDb;\n    readonly selection: _ISelection;\n    drop(t: _Transaction): void;\n}\n\n\nexport interface _IConstraint {\n    readonly name: string | nil;\n    uninstall(t: _Transaction): void;\n}\n\nexport type ChangeHandler<T = any> = (old: T | null, neu: T | null, t: _Transaction, opts: ChangeOpts) => void;\n\nexport interface _Column {\n    readonly notNull: boolean;\n    readonly default: IValue | nil;\n    readonly expression: IValue;\n    readonly usedInIndexes: ReadonlySet<_IIndex>;\n    readonly table: _ITable;\n    readonly name: string;\n    alter(alter: AlterColumn, t: _Transaction): this;\n    rename(to: string, t: _Transaction): this;\n    drop(t: _Transaction): void;\n    onDrop(sub: DropHandler): ISubscription;\n}\n\nexport interface CreateIndexDef {\n    ifNotExists?: boolean;\n    columns: CreateIndexColDef[];\n    indexName?: string;\n    unique?: boolean;\n    notNull?: boolean;\n    primary?: boolean;\n    predicate?: IValue;\n}\nexport interface CreateIndexColDef {\n    value: IValue;\n    nullsLast?: boolean;\n    desc?: boolean\n}\n\n\nexport interface _IType<TRaw = any> extends IType, _RelationBase {\n    readonly type: 'type';\n    /** Data type */\n    readonly primary: DataType;\n    /** Reg type name */\n    readonly name: string; // | null;\n    readonly reg: Reg;\n\n    toString(): string;\n    equals(a: TRaw, b: TRaw): boolean | null;\n    gt(a: TRaw, b: TRaw): boolean | null;\n    ge(a: TRaw, b: TRaw): boolean | null;\n    lt(a: TRaw, b: TRaw): boolean | null;\n    le(a: TRaw, b: TRaw): boolean | null;\n    canConvertImplicit(to: _IType<TRaw>): boolean | nil;\n    canCast(to: _IType<TRaw>): boolean | nil;\n    cast<T = any>(value: IValue<TRaw>, to: _IType<T>): IValue<T>;\n    convertImplicit<T = any>(value: IValue<TRaw>, to: _IType<T>): IValue<T>;\n    prefer(type: _IType<any>): _IType | nil;\n\n    /** Build an array type for this type */\n    asArray(): _IType<TRaw[]>;\n    asList(): _IType<TRaw[]>;\n\n    /** Get an unicity hash */\n    hash(value: TRaw): string | number | null;\n\n    drop(t: _Transaction): void;\n}\n\nexport interface Parameter {\n    readonly index: number;\n    readonly value: IValue;\n}\n\nexport interface IValue<TRaw = any> {\n    /** Columns used in this expression (if any) */\n    readonly usedColumns: ReadonlySet<IValue>;\n\n    readonly type: _IType<TRaw>;\n\n    /** is 'any()' call ? */\n    readonly isAny: boolean;\n\n    /** Is a constant... i.e. not dependent on columns. ex: (2+2) or NOW() */\n    readonly isConstant: boolean;\n\n    /** Is REAL constant (i.e. 2+2, not varying expressions like NOW()) */\n    readonly isConstantReal: boolean;\n\n    /** Is a literal constant ? (constant not defined as an operation) */\n    readonly isConstantLiteral: boolean;\n\n    /** Will be set if there is an index on this value */\n    readonly index: _IIndex | nil;\n\n    /** Originates from this selection */\n    readonly origin: _ISelection | nil;\n\n\n    /** Column ID, or null */\n    readonly id: string | nil;\n\n    /** Hash of this value (used to identify indexed expressions) */\n    readonly hash: string;\n\n    /** Get value if is a constant */\n    get(): any;\n    /** Get value if is NOT a constant */\n    get(raw: TRaw, t?: _Transaction | nil): any;\n\n    setId(newId: string): IValue;\n    canCast(to: _IType): boolean;\n    cast<T = any>(to: _IType<T>): IValue<T>;\n    convertImplicit<T = any>(to: _IType<T>): IValue<T>;\n\n    /**\n     * Creates a copy of this column that can\n     **/\n    setWrapper<TNew>(newOrigin: _ISelection, unwrap: (val: TRaw) => TNew, newType: _IType<TNew>): IValue<TNew>;\n    setWrapper(newOrigin: _ISelection, unwrap: (val: TRaw) => TRaw): IValue<TRaw>;\n    map(unwrap: (val: TRaw) => TRaw): IValue<TRaw>;\n    map<TNew>(unwrap: (val: TRaw) => TNew, newType: _IType<TNew>): IValue<TNew>;\n    setOrigin(origin: _ISelection): IValue<TRaw>;\n    clone(): IValue<any>;\n\n    explain(e: _Explainer): _ExprExplanation;\n}\n\nexport type IndexKey = unknown[];\nexport interface IndexExpression {\n    readonly hash: string;\n    readonly type: _IType;\n}\n\nexport interface _INamedIndex<T = any> extends _IIndex<T>, _RelationBase {\n    readonly type: 'index';\n    readonly onTable: _ITable<T>;\n    drop(t: _Transaction): void;\n}\n\n\n\nexport interface _IIndex<T = any> {\n    readonly unique?: boolean;\n    readonly expressions: IndexExpression[];\n\n    /** Returns a measure of how many items will be returned by this op */\n    entropy(t: IndexOp): number;\n\n    /** Returns this selection stats, or null if it cannot be computed without iteration */\n    stats(t: _Transaction, key?: IndexKey): Stats | null;\n\n    /** Get values equating the given key */\n    eqFirst(rawKey: IndexKey, t: _Transaction): T | null;\n\n    enumerate(op: IndexOp): Iterable<T>;\n\n    explain(e: _Explainer): _IndexExplanation;\n\n    iterateKeys(t: _Transaction): Iterable<IndexKey> | null;\n}\n\nexport type IndexOp = {\n    type: 'eq' | 'neq' | 'gt' | 'lt' | 'ge' | 'le';\n    key: IndexKey;\n    t: _Transaction;\n    matchNull?: boolean;\n} | {\n    type: 'inside' | 'outside'\n    lo: IndexKey;\n    hi: IndexKey;\n    t: _Transaction;\n} | {\n    type: 'nin';\n    keys: IndexKey[];\n    t: _Transaction;\n}\n\nexport interface TableRecordDef<T> {\n    readonly?: boolean;\n    hidden?: boolean;\n    name?: string;\n    dataId?: symbol;\n\n    serials: ImMap<string, number>;\n    it: number;\n    indexByHash: ImMap<string, _IIndex<T>>;\n    indexByName: ImMap<string, _IIndex<T>>;\n    columnsByName: ImMap<string, CR<T>>;\n}\n\nexport interface TableColumnRecordDef<T> {\n    default: IValue;\n    notNull: boolean;\n    usedInIndexes: ImSet<_IIndex>;\n    type: _IType;\n    name: string;\n}\n\nexport type TR<T> = Record<TableRecordDef<T>>;\nexport type CR<T> = Record<TableColumnRecordDef<T>>;\nexport const EmtpyTable = Record<TableRecordDef<any>>({\n    serials: ImMap(),\n    it: 0,\n    indexByHash: ImMap(),\n    indexByName: ImMap(),\n    columnsByName: ImMap(),\n});\n\nexport const NewColumn = Record<TableColumnRecordDef<any>>({\n    default: null as any,\n    notNull: false,\n    usedInIndexes: ImSet(),\n    type: null as any,\n    name: null as any,\n});\n\nexport type _IRelation = _ITable | _ISequence | _INamedIndex | _IType | _IView;\n\nexport function asIndex(o: _IRelation): _INamedIndex;\nexport function asIndex(o: _IRelation | null): _INamedIndex | null;\nexport function asIndex(o: _IRelation | null) {\n    if (!o) {\n        return null;\n    }\n    if (o.type === 'index') {\n        return o;\n    }\n    throw new QueryError(`\"${o.name}\" is not an index`);\n}\n\nexport function asType(o: _IRelation): _IType;\nexport function asType(o: _IRelation | null): _IType | null;\nexport function asType(o: _IRelation | null) {\n    if (!o) {\n        return null;\n    }\n    if (o.type === 'type') {\n        return o;\n    }\n    throw new QueryError(`\"${o.name}\" is not a type`);\n}\n\nexport function asSeq(o: _IRelation): _ISequence;\nexport function asSeq(o: _IRelation | null): _ISequence | null;\nexport function asSeq(o: _IRelation | null) {\n    if (!o) {\n        return null;\n    }\n    if (o.type === 'sequence') {\n        return o;\n    }\n    throw new QueryError(`\"${o.name}\" is not a sequence`);\n}\n\nexport function asTable(o: _IRelation): _ITable;\nexport function asTable(o: _IRelation | null): _ITable | null;\nexport function asTable(o: _IRelation | null, nullIfNotType?: boolean): _ITable | null;\nexport function asTable(o: _IRelation | null, nullIfNotType?: boolean) {\n    if (!o) {\n        return null;\n    }\n    if (o.type === 'table') {\n        return o;\n    }\n    if (nullIfNotType) {\n        return null;\n    }\n    throw new QueryError(`\"${o.name}\" is not a table`);\n}\n\n\nexport type _ISelectable = _ITable | _IView;\nexport function asSelectable(o: _IRelation): _ISelectable;\nexport function asSelectable(o: _IRelation | null): _ISelectable | null;\nexport function asSelectable(o: _IRelation | null, nullIfNotType?: boolean): _ISelectable | null;\nexport function asSelectable(o: _IRelation | null, nullIfNotType?: boolean) {\n    if (!o) {\n        return null;\n    }\n    if (o.type === 'table' || o.type === 'view') {\n        return o;\n    }\n    if (nullIfNotType) {\n        return null;\n    }\n    throw new QueryError(`\"${o.name}\" is not selectable`);\n}\n\n\nexport function asView(o: _IRelation): _IView;\nexport function asView(o: _IRelation | null): _IView | null;\nexport function asView(o: _IRelation | null, nullIfNotType?: boolean): _IView | null;\nexport function asView(o: _IRelation | null, nullIfNotType?: boolean) {\n    if (!o) {\n        return null;\n    }\n    if (o.type === 'view') {\n        return o;\n    }\n    if (nullIfNotType) {\n        return null;\n    }\n    throw new QueryError({\n        code: '42809',\n        error: `\"${o.name}\" is not a view`,\n    });\n}\n\nexport interface _ISequence extends _RelationBase {\n\n    readonly type: 'sequence';\n    alter(t: _Transaction, opts: CreateSequenceOptions | AlterSequenceChange): this;\n    nextValue(t: _Transaction): number;\n    restart(t: _Transaction): void;\n    setValue(t: _Transaction, value: number): void;\n    currentValue(t: _Transaction): number;\n    drop(t: _Transaction): void;\n}\n\n\nexport interface AggregationComputer<TRet = any> {\n    readonly type: _IType;\n    /**  Compute from index  (ex: count(*) with a group-by) */\n    computeFromIndex?(key: IndexKey, index: _IIndex, t: _Transaction): TRet | undefined;\n    /**  Compute out of nowhere when there is no group\n     * (ex: when there is no grouping, count(*) on a table or count(xxx) when there is an index on xxx) */\n    computeNoGroup?(t: _Transaction): TRet | undefined;\n\n    /** When iterating, each new group will have its computer */\n    createGroup(t: _Transaction): AggregationGroupComputer<TRet>;\n}\n\nexport interface AggregationGroupComputer<TRet = any> {\n    /** When iterating, this will be called for each item in this group  */\n    feedItem(item: any): void;\n    /** Finish computation (sets aggregation on result) */\n    finish(): TRet | nil;\n}\n","import moment from 'moment';\nimport { List } from 'immutable';\nimport { IValue, NotSupported, RegClass, _IRelation, _ISchema, _ISelection, _ITable, _IType, _Transaction } from './interfaces-private';\nimport { BinaryOperator, DataTypeDef, Expr, ExprRef, ExprValueKeyword, Interval, nil, parse, QName, SelectedColumn } from 'pgsql-ast-parser';\nimport { ColumnNotFound, ISubscription, IType, QueryError, typeDefToStr } from './interfaces';\nimport { bufClone, bufCompare, isBuf } from './misc/buffer-node';\n\nexport interface Ctor<T> extends Function {\n    new(...params: any[]): T; prototype: T;\n}\n\nexport type Optional<T> = { [key in keyof T]?: T[key] };\nexport type SRecord<T> = Record<string, T>;\n\n\nexport function trimNullish<T>(value: T, depth = 5): T {\n    if (depth < 0)\n        return value;\n    if (value instanceof Array) {\n        value.forEach(x => trimNullish(x, depth - 1))\n    }\n    if (typeof value !== 'object' || value instanceof Date || moment.isMoment(value) || moment.isDuration(value))\n        return value;\n\n    if (!value) {\n        return value;\n    }\n\n    for (const k of Object.keys(value)) {\n        const val = (value as any)[k];\n        if (nullIsh(val))\n            delete (value as any)[k];\n        else\n            trimNullish(val, depth - 1);\n    }\n    return value;\n}\n\n\nexport function watchUse<T>(rootValue: T): { checked: T; check?: () => string | null; } {\n    if (!rootValue || typeof globalThis !== 'undefined' && (globalThis as any)?.process?.env?.['NOCHECKFULLQUERYUSAGE'] === 'true') {\n        return { checked: rootValue };\n    }\n    if (typeof rootValue !== 'object') {\n        throw new NotSupported();\n    }\n    if (Array.isArray(rootValue)) {\n        throw new NotSupported();\n    }\n    const toUse = new Map<string, any>();\n    function recurse(value: any, stack: List<string> = List()): any {\n        if (!value || typeof value !== 'object') {\n            return value;\n        }\n        if (Array.isArray(value)) {\n            return value\n                .map((x, i) => recurse(x, stack.push(`[${i}]`)));\n        }\n        // watch object\n        const ret: any = {};\n        for (const [k, _v] of Object.entries(value)) {\n            if (k[0] === '_') { // ignore properties starting with '_'\n                ret[k] = _v;\n                continue;\n            }\n            const nstack = stack.push('.' + k);\n            let v = recurse(_v, nstack);\n            const nstackKey = nstack.join('');\n            toUse.set(nstackKey, _v);\n            Object.defineProperty(ret, k, {\n                get() {\n                    toUse.delete(nstackKey);\n                    return v;\n                },\n                enumerable: true,\n            });\n        }\n        return ret;\n    }\n\n    const final = recurse(rootValue);\n\n    const check = function () {\n        if (toUse.size) {\n            return `The query you ran generated an AST which parts have not been read by the query planner. \\\nThis means that those parts could be ignored:\n\n    ⇨ ` + [...toUse.entries()]\n                    .map(([k, v]) => k + ' (' + JSON.stringify(v) + ')')\n                    .join('\\n    ⇨ ');\n        }\n        return null;\n    }\n    return { checked: final, check };\n}\n\n\n\nexport function deepEqual<T>(a: T, b: T, strict?: boolean, depth = 10, numberDelta = 0.0001) {\n    return deepCompare(a, b, strict, depth, numberDelta) === 0;\n}\n\nexport function deepCompare<T>(a: T, b: T, strict?: boolean, depth = 10, numberDelta = 0.0001): number {\n    if (depth < 0) {\n        throw new NotSupported('Comparing too deep entities');\n    }\n\n    if (a === b) {\n        return 0;\n    }\n    if (!strict) {\n        // should not use '==' because it could call .toString() on objects when compared to strings.\n        // ... which is not ok. Especially when working with translatable objects, which .toString() returns a transaltion (a string, thus)\n        if (!a && !b) {\n            return 0;\n        }\n    }\n\n    if (Array.isArray(a)) {\n        if (!Array.isArray(b)) {\n            return -1; // [] < {}\n        }\n        if (a.length !== b.length) {\n            return a.length > b.length ? 1 : -1;\n        }\n        for (let i = 0; i < a.length; i++) {\n            const inner = deepCompare(a[i], b[i], strict, depth - 1, numberDelta);\n            if (inner)\n                return inner;\n        }\n        return 0;\n    }\n\n    if (Array.isArray(b)) {\n        return 1;\n    }\n\n    if (isBuf(a) || isBuf(b)) {\n        if (!isBuf(a)) {\n            return 1;\n        }\n        if (!isBuf(b)) {\n            return -1;\n        }\n        return bufCompare(a, b);\n    }\n\n    // handle dates\n    if (a instanceof Date || b instanceof Date || moment.isMoment(a) || moment.isMoment(b)) {\n        const am = moment(a);\n        const bm = moment(b);\n        if (am.isValid() !== bm.isValid()) {\n            return am.isValid()\n                ? -1\n                : 1;\n        }\n        const diff = am.diff(bm, 'seconds');\n        if (Math.abs(diff) < 0.001) {\n            return 0;\n        }\n        return diff > 0 ? 1 : -1;\n    }\n\n    // handle durations\n    if (moment.isDuration(a) || moment.isDuration(b)) {\n        const da = moment.duration(a);\n        const db = moment.duration(b);\n        if (da.isValid() !== db.isValid()) {\n            return da.isValid()\n                ? -1\n                : 1;\n        }\n        const diff = da.asMilliseconds() - db.asMilliseconds();\n        if (Math.abs(diff) < 1) {\n            return 0;\n        }\n        return diff > 0 ? 1 : -1;\n    }\n\n    const fa = Number.isFinite(<any>a);\n    const fb = Number.isFinite(<any>b);\n    if (fa && fb) {\n        if (Math.abs(<any>a - <any>b) <= numberDelta) {\n            return 0;\n        }\n        return a > b ? 1 : -1;\n    } else if (fa && b) {\n        return -1;\n    } else if (fb && a) {\n        return 1;\n    }\n\n    // === handle plain objects\n    if (typeof a !== 'object') {\n        return 1; // objects are at the end\n    }\n    if (typeof b !== 'object') {\n        return -1; // objects are at the end\n    }\n\n    if (!a || !b) {\n        return 0; // nulls\n    }\n\n    const ak = Object.keys(a);\n    const bk = Object.keys(b);\n    if (strict && ak.length !== bk.length) {\n        // longer objects at the end\n        return ak.length > bk.length ? 1 : -1;\n    }\n    const set: Iterable<string> = strict\n        ? Object.keys(a)\n        : new Set([...Object.keys(a), ...Object.keys(b)]);\n    for (const k of set) {\n        const inner = deepCompare((a as any)[k], (b as any)[k], strict, depth - 1, numberDelta);\n        if (inner) {\n            return inner;\n        }\n    }\n    return 0;\n}\n\n\ntype Json = { [key: string]: Json } | Json[] | string | number | null;\nexport function queryJson(a: Json, b: Json) {\n    if (!a || !b) {\n        return (a ?? null) === (b ?? null);\n    }\n    if (a === b) {\n        return true;\n    }\n\n    if (typeof a === 'string' || typeof b === 'string') {\n        return false;\n    }\n\n    if (typeof a === 'number' || typeof b === 'number') {\n        return false;\n    }\n\n    if (Array.isArray(a)) {\n        // expecting array\n        if (!Array.isArray(b)) {\n            return false;\n        }\n        // => must match all those criteria\n        const toMatch = [...a];\n        for (const be of b) {\n            for (let i = 0; i < toMatch.length; i++) {\n                if (queryJson(toMatch[i], be)) {\n                    // matched this criteria\n                    toMatch.splice(i, 1);\n                    break;\n                }\n            }\n            if (!toMatch.length) {\n                break;\n            }\n        }\n        return !toMatch.length;\n    }\n\n    if (Array.isArray(b)) {\n        return false;\n    }\n\n    if ((typeof a === 'object') !== (typeof b === 'object')) {\n        return false;\n    }\n    const akeys = Object.keys(a);\n    const bkeys = Object.keys(b);\n    if (akeys.length > bkeys.length) {\n        return false;\n    }\n    for (const ak of akeys) {\n        if (!(ak in (b as any))) {\n            return false;\n        }\n        if (!queryJson(a[ak], b[ak])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function buildLikeMatcher(likeCondition: string, caseSensitive = true) {\n    // Escape regex characters from likeCondition\n    likeCondition = likeCondition.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    let likeRegexString = likeCondition.replace(/\\%/g, \".*\").replace(/_/g, '.');\n    likeRegexString = \"^\" + likeRegexString + \"$\";\n    const reg = new RegExp(likeRegexString, caseSensitive ? '' : 'i');\n\n    return (stringToMatch: string | number) => {\n        if (nullIsh(stringToMatch)) {\n            return null;\n        }\n        if (typeof stringToMatch != \"string\") {\n            stringToMatch = stringToMatch.toString();\n        }\n        return reg.test(stringToMatch);\n    }\n}\n\nexport function nullIsh(v: any): v is nil {\n    return v === null || v === undefined;\n}\n\nexport function hasNullish(...vals: any[]): boolean {\n    return vals.some(v => nullIsh(v));\n}\n\nexport function sum(v: number[]): number {\n    return v.reduce((sum, el) => sum + el, 0);\n}\n\nexport function deepCloneSimple<T>(v: T): T {\n    if (!v || typeof v !== 'object' || v instanceof Date) {\n        return v;\n    }\n    if (Array.isArray(v)) {\n        return (v as any[]).map(x => deepCloneSimple(x)) as any;\n    }\n    if (isBuf(v)) {\n        return bufClone(v) as any;\n    }\n\n    const ret: any = {};\n    for (const k of Object.keys(v)) {\n        ret[k] = deepCloneSimple((v as any)[k]);\n    }\n    for (const k of Object.getOwnPropertySymbols(v)) {\n        ret[k] = (v as any)[k]; // no need to deep clone that\n    }\n    return ret;\n}\n\n\nexport function isSelectAllArgList(select: Expr[]): boolean {\n    const [first] = select;\n    return select.length === 1\n        && first.type === 'ref'\n        && first.name === '*'\n        && !first.table;\n}\n\n\nexport function ignore(...val: any[]): void {\n    for (const v of val) {\n        if (!v) {\n            continue;\n        }\n        if (Array.isArray(v)) {\n            ignore(...v);\n            continue;\n        }\n        if (typeof v !== 'object') {\n            continue;\n        }\n        ignore(...Object.values(v));\n    }\n}\n\nexport function combineSubs(...vals: ISubscription[]): ISubscription {\n    return {\n        unsubscribe: () => {\n            vals.forEach(u => u?.unsubscribe());\n        },\n    };\n}\n\n\nexport interface ExecCtx {\n    readonly schema: _ISchema;\n    readonly transaction: _Transaction;\n    readonly parametersValues?: any[];\n}\nconst curCtx: ExecCtx[] = [];\nexport function executionCtx(): ExecCtx {\n    if (!curCtx.length) {\n        throw new Error('No execution context available');\n    }\n    return curCtx[curCtx.length - 1];\n}\nexport function hasExecutionCtx(): boolean {\n    return curCtx.length > 0;\n}\n\nexport function pushExecutionCtx<T>(ctx: ExecCtx, act: () => T): T {\n    try {\n        curCtx.push(ctx)\n        return act();\n    } finally {\n        curCtx.pop();\n    }\n}\n\nexport function indexHash(this: void, vals: (IValue | string)[]) {\n    return vals.map(x => typeof x === 'string' ? x : x.hash).sort().join('|');\n}\n\nexport function randomString(length = 8, chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'): string {\n    var result = '';\n    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\n    return result;\n}\n\n\nexport function schemaOf(t: DataTypeDef): string | nil {\n    if (t.kind === 'array') {\n        return schemaOf(t.arrayOf);\n    }\n    return t.schema;\n}\n\n\nexport function isType(t: any): t is (_IType | IType) {\n    return !!t?.[isType.TAG];\n}\nisType.TAG = Symbol();\n\n\nexport function suggestColumnName(expr: Expr | nil): string | null {\n    if (!expr) {\n        return null;\n    }\n    // suggest a column result name\n    switch (expr.type) {\n        case 'call':\n            return expr.function.name;\n        case 'ref':\n            return expr.name;\n        case 'keyword':\n            return expr.keyword;\n        case 'cast':\n            return typeDefToStr(expr.to);\n    }\n    return null;\n}\n\nexport function findTemplate<T>(this: void, selection: _ISelection, t: _Transaction, template?: T, columns?: (keyof T)[]): Iterable<T> {\n    // === Build an SQL AST expression that matches\n    // this template\n    let expr: Expr | nil;\n    for (const [k, v] of Object.entries(template ?? {})) {\n        let right: Expr;\n        if (nullIsh(v)) {\n            // handle { myprop: null }\n            right = {\n                type: 'unary',\n                op: 'IS NULL',\n                operand: {\n                    type: 'ref',\n                    name: k,\n                },\n            };\n        } else {\n            let value: Expr;\n            let op: BinaryOperator = '=';\n            switch (typeof v) {\n                case 'number':\n                    // handle {myprop: 42}\n                    value = Number.isInteger(v)\n                        ? { type: 'integer', value: v }\n                        : { type: 'numeric', value: v };\n                    break;\n                case 'string':\n                    // handle {myprop: 'blah'}\n                    value = { type: 'string', value: v };\n                    break;\n                case 'object':\n                    // handle {myprop: new Date()}\n                    if (moment.isMoment(v)) {\n                        value = { type: 'string', value: v.toISOString() };\n                    } else if (v instanceof Date) {\n                        value = { type: 'string', value: moment(v).toISOString() };\n                    } else {\n                        // handle {myprop: {obj: \"test\"}}\n                        op = '@>';\n                        value = {\n                            type: 'string',\n                            value: JSON.stringify(v),\n                        };\n                    }\n                    break;\n                default:\n                    throw new Error(`Object type of property \"${k}\" not supported in template`);\n            }\n            right = {\n                type: 'binary',\n                op,\n                left: {\n                    type: 'ref',\n                    name: k,\n                },\n                right: value\n            };\n        }\n        expr = !expr ? right : {\n            type: 'binary',\n            op: 'AND',\n            left: expr,\n            right,\n        };\n    }\n\n    // === perform filter\n    let ret = selection\n        .filter(expr);\n    if (columns) {\n        ret = ret.select(columns.map<SelectedColumn>(x => ({\n            expr: { type: 'ref', name: x as string },\n        })));\n    }\n    return ret.enumerate(t);\n}\n\n\nfunction ver(v: string) {\n    if (!v || !/^\\d+(\\.\\d+)+$/.test(v)) {\n        throw new Error('Invalid semver ' + v)\n    }\n    return v.split(/\\./g).map(x => parseInt(x, 10));\n}\nexport function compareVersions(_a: string, _b: string): number {\n    const a = ver(_a);\n    const b = ver(_b);\n    const m = Math.max(a.length, b.length);\n    for (let i = 0; i < m; i++) {\n        const d = (b[i] || 0) - (a[i] || 0);\n        if (d !== 0) {\n            return d;\n        }\n    }\n    return 0;\n}\n\n\nexport function intervalToSec(v: Interval) {\n    return (v.milliseconds ?? 0) / 1000\n        + (v.seconds ?? 0)\n        + (v.minutes ?? 0) * 60\n        + (v.hours ?? 0) * 3600\n        + (v.days ?? 0) * 3600 * 24\n        + (v.months ?? 0) * 3600 * 24 * 30\n        + (v.years ?? 0) * 3600 * 24 * 30 * 12;\n}\n\nexport function parseRegClass(_reg: RegClass): QName | number {\n    let reg = _reg;\n    if (typeof reg === 'string' && /^\\d+$/.test(reg)) {\n        reg = parseInt(reg);\n    }\n    if (typeof reg === 'number') {\n        return reg;\n    }\n    // todo remove casts after next pgsql-ast-parser release\n    try {\n        const ret = parse(reg, 'qualified_name' as any) as QName;\n        return ret;\n    } catch (e) {\n        return { name: reg };\n    }\n}\n\n\nconst timeReg = /^(\\d+):(\\d+)(:(\\d+))?(\\.\\d+)?$/;\nexport function parseTime(str: string): moment.Moment {\n    const [_, a, b, __, c, d] = timeReg.exec(str) ?? [];\n    if (!_) {\n        throw new QueryError(`Invalid time format: ` + str);\n    }\n    const ms = d ? parseFloat(d) * 1000 : undefined;\n    let ret: moment.Moment;\n    if (c) {\n        ret = moment.utc({\n            h: parseInt(a, 10),\n            m: parseInt(b, 10),\n            s: parseInt(c, 10),\n            ms,\n        });\n    } else {\n        if (d) {\n            ret = moment.utc({\n                m: parseInt(a, 10),\n                s: parseInt(b, 10),\n                ms,\n            });\n        } else {\n            ret = moment.utc({\n                h: parseInt(a, 10),\n                m: parseInt(b, 10),\n                ms,\n            });\n        }\n    }\n    if (!ret.isValid()) {\n        throw new QueryError(`Invalid time format: ` + str);\n    }\n    return ret;\n}\n\n\nexport function colByName<T>(refs: Map<string, T>, ref: string | ExprRef, nullIfNotFound: boolean | nil): T | nil {\n    const nm = typeof ref === 'string' ? ref\n        : !ref.table ? ref.name\n            : null;\n    const got = nm ? refs.get(nm) : null;\n    if (!got && !nullIfNotFound) {\n        throw new ColumnNotFound(colToStr(ref));\n    }\n    return got;\n}\n\nexport function colToStr(col: string | ExprRef) {\n    if (typeof col === 'string') {\n        return col;\n    }\n    if (!col.table) {\n        return col.name;\n    }\n    return col.table.name + '.' + col.name;\n}\n\nexport function qnameToStr(col: string | QName) {\n    if (typeof col === 'string') {\n        return col;\n    }\n    if (!col.schema) {\n        return col.name;\n    }\n    return col.schema + '.' + col.name;\n}\n\nexport function asSingleName(col: string | ExprRef): string | nil {\n    if (typeof col === 'string') {\n        return col;\n    }\n    if (col.table) {\n        return null;\n    }\n    return col.name;\n}\n\nexport function asSingleQName(col: string | QName, allowedSchema?: string): string | nil {\n    if (typeof col === 'string') {\n        return col;\n    }\n    if (col.schema && col.schema !== allowedSchema) {\n        return null;\n    }\n    return col.name;\n}\n\nexport function errorMessage(error: unknown): string {\n    if (typeof error === 'string') {\n        return error;\n    }\n    if (typeof error !== 'object') {\n        return 'Unkown error message';\n    }\n    return (error as any)?.message;\n}\n\nexport function it<T>(iterable: Iterable<T>): IteratorHelper<T> {\n    return iterable instanceof IteratorHelper\n        ? iterable as any\n        : new IteratorHelper(() => iterable);\n}\n\nexport class IteratorHelper<T> implements Iterable<T> {\n    constructor(private underlying: () => Iterable<T>) { }\n\n    [Symbol.iterator]() {\n        return this.underlying()[Symbol.iterator]();\n    }\n\n    flatten(): T extends Iterable<infer X> ? IteratorHelper<X> : never {\n        const that = this;\n        function* wrap() {\n            for (const v of that.underlying() as any ?? []) {\n                for (const x of v) {\n                    yield x;\n                }\n            }\n        }\n        return new IteratorHelper(wrap) as any;\n    }\n\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U {\n        let acc = initialValue;\n        let i = 0;\n        for (const v of this.underlying()) {\n            acc = callbackfn(acc, v, i);\n            i++;\n        }\n        return acc;\n    }\n}\n\nexport function fromEntries<K, V>(iterable: readonly (readonly [K, V])[]): Map<K, V> {\n    const ret = new Map<K, V>();\n    for (const [k, v] of iterable) {\n        ret.set(k, v);\n    }\n    return ret;\n}\n\nexport function notNil<T>(value: (T | nil)[] | nil): Exclude<T, null>[] {\n    return (value ?? []).filter((x) => !nullIsh(x)) as any[];\n}\n\n/** Modify an array if necessary */\nexport function modifyIfNecessary<T>(values: T[], mapper: (input: T) => T | nil): T[] {\n    let ret: T[] | undefined;\n    for (let i = 0; i < values.length; i++) {\n        const mapped = mapper(values[i]);\n        if (nullIsh(mapped)) {\n            continue;\n        }\n        if (!ret) {\n            ret = [...values];\n        }\n        ret[i] = mapped;\n    }\n    return ret ?? values;\n}\n","export * from './datatypes';\n","import { TableConstraint, CreateColumnDef, NodeLocation, DataTypeDef, FunctionArgumentMode, BinaryOperator, Statement } from 'pgsql-ast-parser';\nimport { MigrationParams } from './migrate/migrate-interfaces';\n\n\nexport type nil = undefined | null;\n\nexport type Schema = {\n    name: string;\n    fields: SchemaField[];\n    constraints?: TableConstraint[];\n}\n\n\nexport interface SchemaField extends Omit<CreateColumnDef, 'dataType' | 'kind' | 'name'> {\n    type: IType | DataType;\n    name: string;\n    serial?: boolean;\n}\n\nexport interface IType {\n    /** Data type */\n    readonly primary: DataType;\n    readonly name: string;\n    toString(): string;\n\n    /** Create an array type of this type */\n    asArray(): IType;\n}\n\n// todo support all types https://www.postgresql.org/docs/9.5/datatype.html\nexport enum DataType {\n\n    inet = 'inet',\n    record = 'record',\n    uuid = 'uuid',\n    text = 'text',\n    citext = 'citext',\n    array = 'array',\n    list = 'list',\n    bigint = 'bigint',\n    float = 'float',\n    decimal = 'decimal',\n    integer = 'integer',\n    jsonb = 'jsonb',\n    regtype = 'regtype',\n    regclass = 'regclass',\n    json = 'json',\n    bytea = 'bytea',\n    interval = 'interval',\n    timestamp = 'timestamp',\n    timestamptz = 'timestamptz',\n    date = 'date',\n    time = 'time',\n    timetz = 'timetz',\n    null = 'null',\n    bool = 'bool',\n\n    point = 'point',\n    line = 'line',\n    lseg = 'lseg',\n    box = 'box',\n    path = 'path',\n    polygon = 'polygon',\n    circle = 'circle',\n}\n\nexport interface MemoryDbOptions {\n    /**\n     * If set to true, pg-mem will stop embbeding info about the SQL statement\n     * that has failed in exception messages.\n     */\n    noErrorDiagnostic?: boolean;\n    /**\n     * If set to true, then the query runner will not check that no AST part\n     * has been left behind when parsing the request.\n     *\n     * ... so setting it to true could lead to unnoticed ignored query parts.\n     *\n     * (advice: only set it to true as a workaround while an issue on https://github.com/oguimbal/pg-mem is being fixed... )\n     */\n    noAstCoverageCheck?: boolean;\n    /**\n     *  If set to true, this will throw an exception if\n     * you try to use an unsupported index type\n     * (only BTREE is supported at time of writing)\n     */\n    noIgnoreUnsupportedIndices?: boolean;\n    /**\n     * When set to true, this will auto create an index on foreign table when adding a foreign key.\n     * 👉 Recommanded when using Typeorm .synchronize(), which creates foreign keys but not indices !\n     **/\n    readonly autoCreateForeignKeyIndices?: boolean;\n}\n\nexport interface IMemoryDb {\n    /**\n     * Adapters to create wrappers of this db compatible with known libraries\n     */\n    readonly adapters: LibAdapters;\n    /**\n     * The default 'public' schema\n     */\n    readonly public: ISchema;\n    /**\n     * Get an existing schema\n     */\n    getSchema(db?: string | null): ISchema;\n    /**\n     * Create a schema in this database\n     */\n    createSchema(name: string): ISchema;\n    /**\n     * Get a table to inspect it (in the public schema... this is a shortcut for db.public.getTable())\n     */\n    getTable<T = any>(table: string): IMemoryTable<T>;\n    getTable<T = any>(table: string, nullIfNotFound?: boolean): IMemoryTable<T> | null;\n\n    /** Subscribe to a global event */\n    on(event: 'query', handler: (query: string) => any): ISubscription;\n    on(event: GlobalEvent, handler: () => any): ISubscription;\n    on(event: GlobalEvent, handler: () => any): ISubscription;\n    /** Subscribe to an event on all tables */\n    on(event: TableEvent, handler: (table: string) => any): ISubscription;\n\n    /**\n     * Creates a restore point.\n     * 👉 This operation is O(1) (instantaneous, even with millions of records).\n     * */\n    backup(): IBackup;\n\n    /**\n     * Registers an extension (that can be installed using the 'create extension' statement)\n     * @param name Extension name\n     * @param install How to install this extension on a given schema\n     */\n    registerExtension(name: string, install: (schema: ISchema) => void): this;\n\n    /** Registers a new language, usable in 'DO' blocks, or in 'CREATE FUNCTION' blocks */\n    registerLanguage(languageName: string, compiler: LanguageCompiler): this;\n}\n\nexport type QueryInterceptor = (query: string) => any[] | nil;\n\n\nexport type ArgDef = DataType | IType | ArgDefDetails;\n\nexport interface ArgDefDetails {\n    /** Argument type */\n    type: IType;\n    /** Optional argument name */\n    name?: string;\n    /**\n     *  Arguments are 'in' by default, but you can change that.\n     */\n    mode?: FunctionArgumentMode;\n}\n\nexport type LanguageCompiler = (options: ToCompile) => CompiledFunction;\n\nexport interface ToCompile {\n    /** Function being compiled (null for \"DO\" statements compilations) */\n    functionName?: string | nil;\n    /** Code to compile */\n    code: string;\n    /** Schema against which this compilation is performed */\n    schema: ISchema;\n    /** Expected arguments */\n    args: ArgDefDetails[];\n    /** Expected return type (if any) */\n    returns?: IType | nil;\n}\n\nexport class AdvancedResult {\n    constructor(readonly result: any, outArgs: any[]) {\n    }\n}\n\nexport type CompiledFunction = (...inArguments: any[]) => AdvancedResult | PlainResult;\n\nexport type PlainResult = Object | number | Date | null | void;\n\nexport interface CompiledFunctionResult {\n    /** The function result, if function \"returns\" something */\n    result?: any;\n    /** The functions out arguments, as indexed in the `args` passed to your language compiler function */\n    outArgs?: any[];\n}\n\nexport interface IBackup {\n    /**\n     * Restores data to the state when this backup has been performed.\n     * 👉 This operation is O(1).\n     * 👉 Schema must not have been changed since then !\n     **/\n    restore(): void;\n}\n\nexport interface LibAdapters {\n    /** Create a PG module that will be equivalent to require('pg') */\n    createPg(queryLatency?: number): { Pool: any; Client: any };\n\n    /** Create a pg-promise instance bound to this db */\n    createPgPromise(queryLatency?: number): any;\n\n    /** Create a slonik pool bound to this db */\n    createSlonik(queryLatency?: number): any;\n\n    /** Create a pg-native instance bound to this db */\n    createPgNative(queryLatency?: number): any;\n\n    /** Create a Typeorm connection bound to this db\n     * @deprecated Use `createTypeormDataSource` instead. See https://github.com/oguimbal/pg-mem/pull/238.\n     */\n    createTypeormConnection(typeOrmConnection: any, queryLatency?: number): any;\n\n    /** Create a Typeorm data source bound to this db */\n    createTypeormDataSource(typeOrmConnection: any, queryLatency?: number): any;\n\n    /** Create a Knex.js instance bound to this db */\n    createKnex(queryLatency?: number, knexConfig?: object): any;\n\n    /** Create a Kysely instance bound to this db */\n    createKysely(queryLatency?: number, kyselyConfig?: object): any;\n\n    /** Create a mikro-orm instance bound to this db */\n    createMikroOrm(mikroOrmOptions: any, queryLatency?: number): Promise<any>\n}\n\nexport type QueryOrAst = string | Statement | Statement[];\n\nexport interface ISchema {\n    /**\n     * Execute a query and return many results\n     */\n    many(query: QueryOrAst): any[];\n    /**\n     * Execute a query without results\n     */\n    none(query: QueryOrAst): void;\n    /**\n     * Execute a query with a single result\n     */\n    one(query: QueryOrAst): any;\n    /**\n     * Another way to create tables (equivalent to \"create table\" queries\")\n     */\n    declareTable(table: Schema): IMemoryTable;\n    /**\n     * Execute a query\n     */\n    query(text: QueryOrAst): QueryResult;\n\n\n    /**\n     * Progressively executes a query, yielding results until the end of enumeration (or an exception)\n     */\n    queries(text: QueryOrAst): Iterable<QueryResult>;\n\n    /**\n     * Get a table in this db to inspect it\n     */\n    getTable(table: string): IMemoryTable;\n    getTable(table: string, nullIfNotFound?: boolean): IMemoryTable | null;\n\n    /**\n     * List all tables in this schema\n     */\n    listTables(): Iterable<IMemoryTable>\n\n    /** Register a function */\n    registerFunction(fn: FunctionDefinition, orReplace?: boolean): this;\n\n\n    /** Register a binary operator */\n    registerOperator(fn: OperatorDefinition): this;\n\n    /** Register a simple type, which is equivalent to another */\n    registerEquivalentType(type: IEquivalentType): IType;\n\n    /** Get an existing type */\n    getType(name: DataType): IType;\n\n    /**\n     * Registers an enum type on this schema\n     * @param name Enum name\n     * @param values Possible values\n     */\n    registerEnum(name: string, values: string[]): void;\n\n    /**\n     * Database migration, node-sqlite flavor\n     * ⚠ Only working when runnin nodejs !\n     */\n    migrate(config?: MigrationParams): Promise<void>;\n\n\n    /**\n     * Intecept queries.\n     * If your interceptor returns an array, then the query will not be executed.\n     * The given result will be returned instead.\n     */\n    interceptQueries(interceptor: QueryInterceptor): ISubscription;\n}\n\nexport interface FunctionDefinition {\n    /** Function name (casing doesnt matter) */\n    name: string;\n\n    /** Expected arguments */\n    args?: ArgDef[] | nil;\n\n    /** Other arguments type (variadic arguments) */\n    argsVariadic?: DataType | IType | nil;\n\n    /** Returned data type */\n    returns?: DataType | IType | nil;\n\n    /**\n     * If the function is marked as impure, it will not be simplified\n     * (ex: \"select myFn(1) from myTable\" will call myFn() for each row in myTable, even if it does not depend on its result) */\n    impure?: boolean;\n\n    /** If true, the function will also be called when passing null arguments */\n    allowNullArguments?: boolean;\n\n    /** Actual implementation of the function */\n    implementation: CompiledFunction;\n}\n\nexport interface OperatorDefinition {\n    /** Function name (casing doesnt matter) */\n    operator: BinaryOperator;\n\n    /** Expected left argument */\n    left: DataType | IType;\n\n    /** Expected right argument */\n    right: DataType | IType;\n\n    /** True if the operator is commutative (if left & right can be inverted) */\n    commutative?: boolean;\n\n    /** Returned data type */\n    returns: DataType | IType;\n\n    /**\n     * If the function is marked as impure, it will not be simplified\n     * (ex: \"select myFn(1) from myTable\" will call myFn() for each row in myTable, even if it does not depend on its result) */\n    impure?: boolean;\n\n    /** If true, the function will also be called when passing null arguments */\n    allowNullArguments?: boolean;\n\n    /** Actual implementation of the function */\n    implementation: CompiledFunction;\n}\n\n\nexport interface QueryResult {\n    /** Last command that has been executed */\n    command: string;\n    rowCount: number;\n    fields: Array<FieldInfo>;\n    rows: any[];\n\n    /** Location of the last \";\" prior to this statement */\n    location: NodeLocation;\n}\n\nexport interface FieldInfo {\n    name: string;\n    type: DataType;\n}\n\n\n\nexport type TableEvent = 'seq-scan';\nexport type GlobalEvent = 'query' | 'query-failed' | 'catastrophic-join-optimization' | 'schema-change' | 'create-extension';\n\nexport interface IMemoryTable<T = unknown> {\n    readonly name: string;\n    readonly primaryIndex: IndexDef | nil;\n\n    /** List columns in this table */\n    getColumns(): Iterable<ColumnDef>;\n\n    /** Subscribe to an event on this table */\n    on(event: TableEvent, handler: () => any): ISubscription;\n    /** List existing indices defined on this table */\n    listIndices(): IndexDef[];\n\n\n    /**\n     * Inserts a raw item into this table.\n     * ⚠ Neither the record you provided, nor the returned value are the actual item stored. You wont be able to mutate internal state.\n     * @returns A copy of the inserted item (with assigned defaults)\n     */\n    insert(item: Partial<T>): T | null;\n\n    /** Find all items matching a specific template */\n    find(template?: Partial<T> | nil, columns?: (keyof T)[]): Iterable<T>;\n}\n\n\nexport interface ColumnDef {\n    readonly name: string;\n    readonly type: IType;\n    readonly nullable: boolean;\n}\n\n\nexport interface ISubscription {\n    unsubscribe(): void;\n}\n\nexport interface IndexDef {\n    readonly name: string;\n    readonly expressions: string[];\n}\n\nexport class NotSupported extends Error {\n    constructor(what?: string) {\n        super('🔨 Not supported 🔨 ' + (what ? ': ' + what : ''));\n    }\n\n    static never(value: never, msg?: string) {\n        return new NotSupported(`${msg ?? ''} ${JSON.stringify(value)}`);\n    }\n}\n\n\ninterface ErrorData {\n    readonly error: string;\n    readonly details?: string;\n    readonly hint?: string;\n    readonly code?: string;\n}\nexport class QueryError extends Error {\n    readonly data: ErrorData;\n    readonly code: string | undefined;\n    constructor(err: string | ErrorData, code?: string) {\n        super(typeof err === 'string' ? err : errDataToStr(err));\n        if (typeof err === 'string') {\n            this.data = { error: err, code };\n            this.code = code;\n        } else {\n            this.data = err;\n            this.code = err.code;\n        }\n    }\n}\n\nfunction errDataToStr(data: ErrorData) {\n    const ret = ['ERROR: ' + data.error];\n    if (data.details) {\n        ret.push('DETAIL: ' + data.details);\n    }\n    if (data.hint) {\n        ret.push('HINT: ' + data.hint)\n    }\n    return ret.join('\\n');\n}\n\n\nexport class CastError extends QueryError {\n    constructor(from: string | DataType | IType, to: string | DataType | IType, inWhat?: string) {\n        super(`cannot cast type ${typeof from === 'string'\n            ? from\n            : from.name} to ${typeof to === 'string'\n                ? to\n                : to.name}`\n            + (inWhat ? ' in ' + inWhat : ''));\n    }\n}\n\n\nexport class ColumnNotFound extends QueryError {\n    constructor(col: string) {\n        super(`column \"${col}\" does not exist`);\n    }\n}\n\nexport class AmbiguousColumn extends QueryError {\n    constructor(col: string) {\n        super(`column reference \"${col}\" is ambiguous`);\n    }\n}\n\nexport class RelationNotFound extends QueryError {\n    constructor(tableName: string) {\n        super(`relation \"${tableName}\" does not exist`);\n    }\n}\nexport class TypeNotFound extends QueryError {\n    constructor(t: string | number | DataTypeDef) {\n        super(`type \"${typeof t !== 'object' ? t : typeDefToStr(t)}\" does not exist`);\n    }\n}\n\nexport class RecordExists extends QueryError {\n    constructor() {\n        super('Records already exists');\n    }\n}\n\n\nexport class PermissionDeniedError extends QueryError {\n    constructor(what?: string) {\n        super(what\n            ? `permission denied: \"${what}\" is a system catalog`\n            : 'permission denied');\n    }\n}\n\n\nexport function typeDefToStr(t: DataTypeDef): string {\n    if (t.kind === 'array') {\n        return typeDefToStr(t.arrayOf) + '[]';\n    }\n    let ret = t.name;\n    if (t.schema) {\n        ret = t.schema + '.' + ret;\n    }\n    if (t.config?.length) {\n        ret = ret + '(' + t.config.join(',') + ')';\n    }\n    return ret;\n}\n\n/** A type definition that is equivalent to another type */\nexport interface IEquivalentType {\n    /** Type name */\n    readonly name: string;\n    /** Which underlying type is it equivalent to ? */\n    readonly equivalentTo: DataType | IType;\n    /**\n     * Is this value valid ?\n     */\n    isValid(value: any): boolean;\n}\n","import { _ISchema, _ISelection, _IDb, OnStatementExecuted, nil, QueryError, _IStatement, IValue, Parameter } from '../interfaces-private';\n\n\nclass StackOf<T> {\n    readonly stack: T[] = [];\n    constructor(private name: string) {\n    }\n    usingValue = <ret>(value: T, act: () => ret): ret => {\n        this.stack.push(value);\n        try {\n            return act();\n        } finally {\n            this.stack.pop();\n        }\n    }\n    get current(): T {\n        if (!this.stack.length) {\n            throw new Error(`No ${this.name} available`);\n        }\n        return this.stack[this.stack.length - 1];\n    }\n\n    get currentOrNil(): T | nil {\n        return this.stack[this.stack.length - 1];\n    }\n}\n\n\nconst _selectionStack = new StackOf<_ISelection>('build context');\nconst _statementStack = new StackOf<_IStatement>('execution statement');\nconst _tempBindings = new StackOf<Map<string, _ISelection | 'no returning'>>('binding context');\nconst _parametersStack = new StackOf<Parameter[]>('parameter context');\nconst _nameResolver = new StackOf<INameResolver>('name resolver');\n\nexport interface INameResolver {\n    /** Try to resolve a name */\n    resolve(name: string): IValue | nil;\n    /** True if is isolated... meaning that one cannot fetch values from its parent */\n    readonly isolated: boolean;\n}\n\n\ninterface IBuildContext {\n    readonly selection: _ISelection;\n    readonly db: _IDb;\n    readonly schema: _ISchema;\n    readonly onFinishExecution: (callback: OnStatementExecuted) => void\n    readonly getTempBinding: (name: string) => _ISelection | nil;\n    readonly setTempBinding: (name: string, boundTo: _ISelection) => void;\n    readonly getParameter: (nameOrPosition: string | number) => IValue | nil;\n}\n\nclass Context implements IBuildContext {\n    get selection(): _ISelection {\n        return _selectionStack.current;\n    }\n    get db(): _IDb {\n        return _selectionStack.current.db;\n    }\n    get schema(): _ISchema {\n        // remove the concept of selection schema ?\n        // (does not make much sens, if you think about it)\n        return _selectionStack.current.ownerSchema;\n    }\n    onFinishExecution = (callback: OnStatementExecuted) => {\n        _statementStack.current.onExecuted(callback);\n    };\n    getTempBinding = (name: string) => {\n        const ret = _tempBindings.currentOrNil?.get(name);\n        if (ret === 'no returning') {\n            throw new QueryError(`WITH query \"${name}\" does not have a RETURNING clause`);\n        }\n        return ret;\n    };\n    setTempBinding = (name: string, boundTo: _ISelection) => {\n        if (_tempBindings.current.has(name)) {\n            throw new QueryError(`WITH query name \"${name}\" specified more than once`);\n        }\n        _tempBindings.current.set(name, boundTo.isExecutionWithNoResult ? 'no returning' : boundTo);\n    };\n    getParameter = (nameOrPosition: string | number) => {\n        const params = _parametersStack.currentOrNil;\n        if (!params) {\n            return null;\n        }\n        if (typeof nameOrPosition === 'number') {\n            const ret = params[nameOrPosition]?.value;\n            if (!ret) {\n                // not ideal... (duplicated error message)\n                throw new QueryError(`bind message supplies ${params.length} parameters, but prepared statement \"\" requires ${nameOrPosition}`, '08P01');\n            }\n            return ret;\n        }\n        return params.find(p => p.value.id === nameOrPosition)?.value;\n    }\n}\n\n\n\n\nconst _buildCtx = new Context();\nexport function buildCtx(): IBuildContext {\n    return _buildCtx;\n}\n\n\nexport const withSelection = _selectionStack.usingValue;\nexport const withStatement = _statementStack.usingValue;\nexport function withBindingScope<T>(act: () => T): T {\n    return _tempBindings.usingValue(new Map(), act);\n}\nexport const withParameters = _parametersStack.usingValue;\nexport const withNameResolver = _nameResolver.usingValue;\n\nexport function resolveName(name: string): IValue | null {\n    for (let i = _nameResolver.stack.length - 1; i >= 0; i--) {\n        const resolver = _nameResolver.stack[i];\n        const found = resolver.resolve(name);\n        if (found) {\n            return found;\n        }\n        if (resolver.isolated) {\n            return null;\n        }\n    }\n    return null;\n}\n","// <== THERE MUST BE NO ACTUAL IMPORTS OTHER THAN IMPORT TYPES (dependency loop)\n// ... use 'kind-of' dependency injection below\nimport type { _ISelection, IValue, _IIndex, _ISchema, _IDb, _Transaction, _SelectExplanation, _Explainer, Stats, nil, _IAlias } from '../interfaces-private';\nimport type { buildSelection } from './selection';\nimport type { buildAlias } from './alias';\nimport type { buildFilter } from './build-filter';\nimport type { buildGroupBy } from './aggregation';\nimport type { buildLimit } from './limit';\nimport type { buildUnion } from './union';\nimport type { buildOrderBy } from './order-by';\nimport type { buildDistinct } from './distinct';\n\nimport { Expr, SelectedColumn, SelectStatement, LimitStatement, OrderByStatement, ExprRef } from 'pgsql-ast-parser';\nimport { RestrictiveIndex } from './restrictive-index';\n\ninterface Fns {\n    buildSelection: typeof buildSelection;\n    buildAlias: typeof buildAlias;\n    buildLimit: typeof buildLimit;\n    buildUnion: typeof buildUnion;\n    buildFilter: typeof buildFilter;\n    buildGroupBy: typeof buildGroupBy;\n    buildOrderBy: typeof buildOrderBy;\n    buildDistinct: typeof buildDistinct;\n}\nlet fns: Fns;\nexport function initialize(init: Fns) {\n    fns = init;\n}\n\nexport abstract class DataSourceBase<T> implements _ISelection<T> {\n    abstract enumerate(t: _Transaction): Iterable<T>;\n    abstract entropy(t: _Transaction): number;\n    abstract readonly columns: ReadonlyArray<IValue<any>>;\n    abstract getColumn(column: string, nullIfNotFound?: boolean): IValue<any>;\n    abstract hasItem(value: T, t: _Transaction): boolean;\n    abstract getIndex(forValue: IValue): _IIndex<any> | null | undefined;\n    abstract explain(e: _Explainer): _SelectExplanation;\n    abstract isOriginOf(a: IValue<any>): boolean;\n    abstract stats(t: _Transaction): Stats | null;\n    abstract get isExecutionWithNoResult(): boolean\n    isAggregation(): boolean {\n        return false;\n    }\n    // abstract get name(): string;\n\n\n    get db() {\n        return this.ownerSchema.db;\n    }\n\n    constructor(readonly ownerSchema: _ISchema) {\n    }\n\n    listColumns(): Iterable<IValue> {\n        return this.columns;\n    }\n\n    listSelectableIdentities(): Iterable<IValue> {\n        return this.columns;\n    }\n\n    select(select: (string | SelectedColumn)[] | nil): _ISelection<any> {\n        let sel: SelectedColumn[] | nil;\n        if (select?.some(v => typeof v === 'string')) {\n            sel = select.map<SelectedColumn>(v => typeof v !== 'string'\n                ? v\n                : {\n                    expr: { type: 'ref', name: v },\n                })\n        } else {\n            sel = select as SelectedColumn[] | nil;\n        }\n        return fns.buildSelection(this, sel);\n    }\n\n\n    selectAlias(alias: string): _IAlias | nil {\n        return null;\n    }\n\n\n    filter(filter: Expr | undefined | null): _ISelection {\n        if (!filter) {\n            return this;\n        }\n        const plan = fns.buildFilter(this, filter, 'WHERE');\n        return plan;\n    }\n\n    groupBy(grouping: Expr[] | nil): _ISelection {\n        if (!grouping?.length) {\n            return this;\n        }\n        const plan = fns.buildGroupBy(this, grouping);\n        return plan;\n    }\n\n\n    setAlias(alias?: string): _ISelection<any> {\n        return fns.buildAlias(this, alias);\n    }\n\n    limit(limit: LimitStatement): _ISelection {\n        if (!limit?.limit && !limit?.offset) {\n            return this;\n        }\n        return fns.buildLimit(this, limit)\n    }\n\n    orderBy(orderBy: OrderByStatement[] | nil): _ISelection<any> {\n        if (!orderBy?.length) {\n            return this;\n        }\n        return fns.buildOrderBy(this, orderBy);\n    }\n\n    distinct(exprs?: Expr[]): _ISelection<any> {\n        return fns.buildDistinct(this, exprs);\n    }\n\n    union(right: _ISelection<any>): _ISelection<any> {\n        return fns.buildUnion(this, right);\n    }\n\n}\n\n\nexport abstract class TransformBase<T> extends DataSourceBase<T> {\n\n\n    constructor(readonly base: _ISelection) {\n        super(base.ownerSchema);\n    }\n\n    get isExecutionWithNoResult(): boolean {\n        return false;\n    }\n\n    entropy(t: _Transaction): number {\n        return this.base.entropy(t);\n    }\n\n    isOriginOf(a: IValue<any>): boolean {\n        return a.origin === this || this.base?.isOriginOf(a);\n    }\n}\n\nexport abstract class FilterBase<T> extends TransformBase<T> {\n\n    isAggregation(): boolean {\n        return false;\n    }\n\n    constructor(_base: _ISelection<T>) {\n        super(_base);\n    }\n\n    get columns(): ReadonlyArray<IValue<any>> {\n        return this.base.columns;\n    }\n\n    selectAlias(alias: string): nil | _IAlias {\n        // this is a filter... that the alias returned by the unfiltered datasource will\n        // be valid for the filtered datasource (aliases are only listing columns)\n        return this.base.selectAlias(alias);\n    }\n\n    /**\n    private _columns: IValue[];\n    private _columnMappings: Map<IValue, IValue>;\n    get columns(): ReadonlyArray<IValue<any>> {\n        this.initCols();\n        return this._columns;\n        // return this.base.columns;\n    }\n\n    private initCols() {\n        if (this._columns) {\n            return;\n        }\n        this._columns = [];\n        this._columnMappings = new Map();\n        for (const c of this.base.columns) {\n            const nc = c.setOrigin(this);\n            this._columns.push(nc);\n            this._columnMappings.set(c, nc);\n        }\n    }\n\n    getColumn(column: string, nullIfNotFound?: boolean): IValue<any> {\n        if (!this.base) { // istanbul ignore next\n            throw new Error('Should not call .getColumn() on join');\n        }\n        if (!('columns' in this.base)) { // istanbul ignore next\n            throw new Error('Should not call getColumn() on table');\n        }\n        this.initCols();\n        const col = this.base.getColumn(column, nullIfNotFound);\n        return col && this._columnMappings.get(col);\n    }\n     */\n\n    getColumn(column: string | ExprRef): IValue;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue<any> | nil {\n        if (!this.base) { // istanbul ignore next\n            throw new Error('Should not call .getColumn() on join');\n        }\n        if (!('columns' in this.base)) { // istanbul ignore next\n            throw new Error('Should not call getColumn() on table');\n        }\n        return this.base.getColumn(column, nullIfNotFound);\n    }\n\n    getIndex(...forValue: IValue<any>[]): _IIndex<any> | null | undefined {\n        const index = this.base.getIndex(...forValue);\n        if (!index) {\n            return null;\n        }\n        return new RestrictiveIndex(index, this);\n    }\n}\n","import { _ISelection, IValue, _IType, _ISchema, _IAlias } from '../interfaces-private';\nimport { buildLikeMatcher, nullIsh, hasNullish, intervalToSec, parseTime, asSingleQName, colToStr } from '../utils';\nimport { DataType, CastError, QueryError, NotSupported, nil, ColumnNotFound } from '../interfaces';\nimport hash from 'object-hash';\nimport { Value, Evaluator } from '../evaluator';\nimport { Types, isNumeric, reconciliateTypes, ArrayType, RecordCol } from '../datatypes';\nimport { Expr, ExprBinary, UnaryOperator, ExprCase, ExprWhen, ExprMember, ExprArrayIndex, ExprTernary, BinaryOperator, SelectStatement, ExprValueKeyword, ExprExtract, Interval, ExprOverlay, ExprSubstring, ExprCall } from 'pgsql-ast-parser';\nimport lru from 'lru-cache';\nimport { aggregationFunctions, getAggregator } from '../transforms/aggregation';\nimport moment from 'moment';\nimport { IS_PARTIAL_INDEXING } from '../execution/clean-results';\nimport { buildCtx } from './context';\nimport { buildSelect } from '../execution/select';\n\n\nconst builtLru = new lru<_ISelection | null, lru<Expr, IValue>>({\n    max: 30,\n});\nexport function buildValue(val: Expr): IValue {\n    const ret = _buildValue(val);\n    checkNotUntypedArray(ret);\n    return ret;\n}\n\n\nfunction checkNotUntypedArray(value: IValue) {\n    // A bit ugly: check that this is not a non typed array (empty array)\n    // see https://github.com/oguimbal/pg-mem/issues/64\n    // + corresponding UTs\n    const type = value.type;\n    if (type instanceof ArrayType && type.of == Types.null) {\n        throw new QueryError(`cannot determine type of empty array`);\n    }\n}\n\nexport function uncache(data: _ISelection) {\n    builtLru.del(data);\n}\n\nfunction _buildValue(val: Expr): IValue {\n    // cache expressions build (they almost are always rebuilt several times in a row)\n    const data = buildCtx().selection;\n    let selLru = builtLru.get(data ?? null);\n    let got: IValue | nil;\n    if (selLru) {\n        got = selLru.get(val);\n        if (got) {\n            return got;\n        }\n    }\n    got = _buildValueReal(val);\n    if (data.isAggregation()) {\n        got = data.checkIfIsKey(got);\n    }\n    if (!selLru) {\n        builtLru.set(data ?? null, selLru = new lru({\n            max: 50,\n        }));\n    }\n    selLru.set(val, got);\n    return got;\n}\n\nfunction _buildValueReal(val: Expr): IValue {\n    const { schema, getParameter, selection } = buildCtx();\n    switch (val.type) {\n        case 'binary':\n            if (val.op === 'IN' || val.op === 'NOT IN') {\n                return buildIn(val.left, val.right, val.op === 'IN');\n            }\n            return buildBinary(val);\n        case 'unary':\n            return buildUnary(val.op, val.operand);\n        case 'ref':\n            // try to get a column reference\n            // todo refactor getColumn() to NameResolvers\n            const found = selection.getColumn(val, true);\n            if (found) {\n                return found;\n            }\n            // try to get a parameter reference\n            const arg = !val.table && getParameter(val.name);\n            if (arg) {\n                return arg;\n            }\n            // try to select an aliased record (= a table)\n            const alias = !val.table && selection.selectAlias(val.name);\n            if (alias) {\n                return buildRecord(alias);\n            }\n            throw new ColumnNotFound(colToStr(val));\n        case 'string':\n            return Value.text(val.value);\n        case 'null':\n            return Value.null();\n        case 'list':\n        case 'array':\n            const vals = val.expressions.map(x => _buildValue(x));\n            return val.type === 'list'\n                ? Value.list(vals)\n                : Value.array(vals);\n        case 'numeric':\n            return Value.number(val.value);\n        case 'integer':\n            return Value.number(val.value, Types.integer);\n        case 'call':\n            return _buildCall(val);\n        case 'cast':\n            return _buildValue(val.operand)\n                .cast(schema.getType(val.to))\n        case 'case':\n            return buildCase(val);\n        case 'member':\n            return buildMember(val);\n        case 'arrayIndex':\n            return buildArrayIndex(val);\n        case 'boolean':\n            return Value.bool(val.value);\n        case 'ternary':\n            return buildTernary(val);\n        case 'select':\n        case 'union':\n        case 'union all':\n        case 'with':\n        case 'with recursive':\n        case 'values':\n            return buildSelectAsArray(val);\n        case 'array select':\n            return buildSelectAsArray(val.select);\n        case 'constant':\n            return Value.constant(val.dataType as any, val.value);\n        case 'keyword':\n            return buildKeyword(val, []);\n        case 'parameter':\n            const [_, n] = /^\\$(\\d+)$/.exec(val.name) ?? [];\n            if (!n) {\n                throw new Error('Unexpected parameter ref shape: ' + val.name);\n            }\n            return getParameter(parseInt(n) - 1)!;\n        case 'extract':\n            return buildExtract(val);\n        case 'overlay':\n            return buildOverlay(val);\n        case 'substring':\n            return buildSubstring(val);\n        case 'default':\n            throw new QueryError(`DEFAULT is not allowed in this context`, '42601');\n        default:\n            throw NotSupported.never(val);\n    }\n}\n\nfunction buildRecord(alias: _IAlias): IValue {\n    const cols = [...alias.listColumns()];\n    return new Evaluator(\n        Types.record(cols\n            .map<RecordCol>(x => ({\n                name: x.id!,\n                type: x.type,\n            })))\n        , null\n        , Math.random().toString() // must not be indexable => always different hash\n        , []\n        , (raw, t) => raw, { forceNotConstant: true });\n}\n\nfunction _buildCall(val: ExprCall): IValue {\n    // if (typeof val.function !== 'string') {\n    //     return buildKeyword( val.function, val.args);\n    // }\n    if (val.over) {\n        throw new NotSupported('\"OVER\" clause is not implemented in pg-mem yet');\n    }\n    const nm = asSingleQName(val.function, 'pg_catalog');\n    if (nm && aggregationFunctions.has(nm)) {\n        const agg = getAggregator();\n        if (!agg) {\n            throw new QueryError(`aggregate functions are not allowed in WHERE`);\n        }\n        return agg.getAggregation(nm, val);\n    }\n    const args = val.args.map(x => _buildValue(x));\n    return Value.function(val.function, args);\n}\n\nfunction buildKeyword(kw: ExprValueKeyword, args: Expr[]): IValue {\n    if (args.length) {\n        throw new NotSupported(`usage of \"${kw.keyword}\" keyword with arguments, please file an issue in https://github.com/oguimbal/pg-mem if you need it !`);\n    }\n    if (kw.type !== 'keyword') {\n        throw new Error('Invalid AST');\n    }\n    switch (kw.keyword) {\n        case 'current_catalog':\n        case 'current_role':\n        case 'current_user':\n        case 'session_user':\n        case 'user':\n            return Value.constant(Types.text(), 'pg_mem');\n        case 'current_schema':\n            return Value.constant(Types.text(), 'public');\n        case 'current_date':\n            return Value.constant(Types.date, new Date());\n        case 'current_timestamp':\n        case 'localtimestamp':\n            return Value.constant(Types.timestamp(), new Date());\n        case 'localtime':\n        case 'current_time':\n            throw new NotSupported('\"date\" data type, please file an issue in https://github.com/oguimbal/pg-mem if you need it !');\n        case 'distinct':\n            throw new NotSupported(kw.keyword);\n        default:\n            throw NotSupported.never(kw.keyword);\n    }\n}\n\nfunction buildUnary(op: UnaryOperator, operand: Expr) {\n    const expr = _buildValue(operand);\n\n    switch (op) {\n        case 'IS NULL':\n        case 'IS NOT NULL':\n            return Value.isNull(expr, op === 'IS NULL');\n        case 'IS TRUE':\n        case 'IS NOT TRUE':\n            return Value.isTrue(expr, op === 'IS TRUE');\n        case 'IS FALSE':\n        case 'IS NOT FALSE':\n            return Value.isFalse(expr, op === 'IS FALSE');\n        case '+':\n            if (!isNumeric(expr.type)) {\n                throw new CastError(expr.type.primary, DataType.float);\n            }\n            return expr;\n        case 'NOT':\n        case '-':\n            return Value.negate(expr);\n        default:\n            throw NotSupported.never(op, 'Unary operator not supported');\n    }\n}\n\nfunction buildIn(left: Expr, array: Expr, inclusive: boolean): IValue {\n    let leftValue = _buildValue(left);\n    let rightValue = _buildValue(array);\n    return Value.in(leftValue, rightValue, inclusive);\n}\n\n\nfunction buildBinary(val: ExprBinary): IValue {\n    let leftValue = _buildValue(val.left);\n    let rightValue = _buildValue(val.right);\n    return buildBinaryValue(leftValue, val.op, rightValue);\n}\n\nexport function buildBinaryValue(leftValue: IValue, op: BinaryOperator, rightValue: IValue): IValue {\n    function expectSame() {\n        const ll = leftValue.type.primary === DataType.list;\n        const rl = rightValue.type.primary === DataType.list;\n        if (ll !== rl) {\n            function doMap(v: IValue): IValue {\n                return v.map(x => {\n                    if (!x) {\n                        return x;\n                    }\n                    if (!Array.isArray(x)) {\n                        // not supposed to happen\n                        throw new Error(`Was expecting an array. Got instead ${x}`);\n                    }\n                    if (x.length > 1) {\n                        throw new QueryError('more than one row returned by a subquery used as an expression', '21000');\n                    }\n                    return x[0];\n                }, (v.type as ArrayType).of);\n            }\n            if (ll) {\n                leftValue = doMap(leftValue);\n            } else {\n                rightValue = doMap(rightValue);\n            }\n        }\n        const type: _IType = reconciliateTypes([leftValue, rightValue]);\n        leftValue = leftValue.cast(type);\n        rightValue = rightValue.cast(type);\n        return type;\n    }\n    function expectBoth(t: _IType) {\n        leftValue = leftValue.cast(t);\n        rightValue = rightValue.cast(t);\n    }\n\n    let getter: (a: any, b: any) => any;\n    let returnType: _IType = Types.bool;\n    let commutative = true;\n    let forcehash: any = null;\n    let rejectNils = true;\n    let impure = false;\n    switch (op) {\n        case '=': {\n            const type = expectSame();\n            getter = (a, b) => type.equals(a, b);\n            break;\n        }\n        case '!=': {\n            const type = expectSame();\n            getter = (a, b) => {\n                const ret = type.equals(a, b);\n                return nullIsh(ret) ? null : !ret;\n            };\n            break;\n        }\n        case '>': {\n            const type = expectSame();\n            getter = (a, b) => type.gt(a, b);\n            forcehash = { op: '>', left: leftValue.hash, right: rightValue.hash };\n            break;\n        }\n        case '<': {\n            const type = expectSame();\n            getter = (a, b) => type.lt(a, b);\n            forcehash = { op: '>', left: rightValue.hash, right: leftValue.hash };\n            break;\n        }\n        case '>=': {\n            const type = expectSame();\n            getter = (a, b) => type.ge(a, b);\n            forcehash = { op: '>=', left: leftValue.hash, right: rightValue.hash };\n            break;\n        }\n        case '<=': {\n            const type = expectSame();\n            getter = (a, b) => type.le(a, b);\n            forcehash = { op: '>=', left: rightValue.hash, right: leftValue.hash };\n            break;\n        }\n        case 'AND':\n        case 'OR':\n            expectBoth(Types.bool);\n            rejectNils = false;\n            if (op === 'AND') {\n                getter = (a, b) => a && b;\n            } else {\n                getter = (a, b) => a || b;\n            }\n            break;\n        case '&&':\n            if (leftValue.type.primary !== DataType.array || !rightValue.canCast(leftValue.type)) {\n                throw new QueryError(`Operator does not exist: ${leftValue.type.name} && ${rightValue.type.name}`, '42883');\n            }\n            rightValue = rightValue.cast(leftValue.type);\n            getter = (a, b) => a.some((element: any) => b.includes(element));\n            break;\n        case 'LIKE':\n        case 'ILIKE':\n        case 'NOT LIKE':\n        case 'NOT ILIKE':\n            expectBoth(Types.text());\n            const caseSenit = op === 'LIKE' || op === 'NOT LIKE';\n            const not = op === 'NOT ILIKE' || op === 'NOT LIKE';\n            if (rightValue.isConstant) {\n                const pattern = rightValue.get();\n                if (nullIsh(pattern)) {\n                    return Value.null(Types.bool);\n                }\n                let matcher: (str: string | number) => boolean | nil;\n                if (rightValue.isAny) {\n                    // handle LIKE ANY()\n                    if (!Array.isArray(pattern)) {\n                        throw new QueryError('Unsupported use of ANY()');\n                    }\n                    const patterns = pattern.map(x => buildLikeMatcher(x, caseSenit));\n                    matcher = v => patterns.some(x => x(v));\n                } else {\n                    matcher = buildLikeMatcher(pattern, caseSenit);\n                }\n                getter = !not\n                    ? a => nullIsh(a) ? null : matcher(a)\n                    : a => {\n                        if (nullIsh(a)) {\n                            return null;\n                        }\n                        const val = matcher(a);\n                        return nullIsh(val) ? null : !val;\n                    };\n            } else {\n                getter = !not\n                    ? (a, b) => hasNullish(a, b) ? null : buildLikeMatcher(b, caseSenit)(a)\n                    : (a, b) => {\n                        if (hasNullish(a, b)) {\n                            return null;\n                        }\n                        const val = buildLikeMatcher(b, caseSenit)(a);\n                        return nullIsh(val) ? null : !val;\n                    };\n            }\n            break;\n        default: {\n            const { schema } = buildCtx();\n            const resolved = schema.resolveOperator(op, leftValue, rightValue);\n            if (!resolved) {\n                throw new QueryError(`operator does not exist: ${leftValue.type.name} ${op} ${rightValue.type.name}`, '42883');\n            }\n            leftValue = leftValue.cast(resolved.left);\n            rightValue = rightValue.cast(resolved.right);\n            commutative = resolved.commutative;\n            returnType = resolved.returns;\n            getter = resolved.implementation;\n            rejectNils = !resolved.allowNullArguments;\n            impure = !!resolved.impure;\n            break;\n        }\n    }\n\n    const hashed = hash(forcehash\n        ?? (commutative\n            ? { op, vals: [leftValue.hash, rightValue.hash].sort() }\n            : { left: leftValue.hash, op, right: rightValue.hash }));\n\n    // handle cases like:  blah = ANY(stuff)\n    if (leftValue.isAny || rightValue.isAny) {\n        return buildBinaryAny(leftValue, op, rightValue, returnType, getter, hashed);\n    }\n\n    return new Evaluator(\n        returnType\n        , null\n        , hashed\n        , [leftValue, rightValue]\n        , (raw, t) => {\n            const leftRaw = leftValue.get(raw, t);\n            const rightRaw = rightValue.get(raw, t);\n            if (rejectNils && (nullIsh(leftRaw) || nullIsh(rightRaw))) {\n                return null;\n            }\n            return getter(leftRaw, rightRaw);\n        }, impure ? { unpure: impure } : undefined);\n\n}\n\nfunction buildBinaryAny(leftValue: IValue, op: BinaryOperator, rightValue: IValue, returnType: _IType, getter: (a: any, b: any) => boolean, hashed: string) {\n    if (leftValue.isAny && rightValue.isAny) {\n        throw new QueryError('ANY() cannot be compared to ANY()');\n    }\n    if (returnType !== Types.bool) {\n        throw new QueryError('Invalid ANY() usage');\n    }\n    return new Evaluator(\n        returnType\n        , null\n        , hashed\n        , [leftValue, rightValue]\n        , leftValue.isAny\n            ? (raw, t) => {\n                const leftRaw = leftValue.get(raw, t);\n                if (nullIsh(leftRaw)) {\n                    return null;\n                }\n                if (!Array.isArray(leftRaw)) {\n                    throw new QueryError('Invalid ANY() usage: was expacting an array');\n                }\n                for (const lr of leftRaw) {\n                    const rightRaw = rightValue.get(raw, t);\n                    if (getter(lr, rightRaw)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            : (raw, t) => {\n                const rightRaw = rightValue.get(raw, t);\n                if (nullIsh(rightRaw)) {\n                    return null;\n                }\n                if (!Array.isArray(rightRaw)) {\n                    throw new QueryError('Invalid ANY() usage: was expacting an array');\n                }\n                for (const rr of rightRaw) {\n                    const leftRaw = leftValue.get(raw, t);\n                    if (getter(leftRaw, rr)) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n}\n\n\nfunction buildCase(op: ExprCase): IValue {\n    const whens = !op.value\n        ? op.whens\n        : op.whens.map<ExprWhen>(v => ({\n            when: {\n                type: 'binary',\n                op: '=',\n                left: op.value!,\n                right: v.when,\n            },\n            value: v.value,\n        }));\n    if (op.else) {\n        whens.push({\n            when: { type: 'boolean', value: true },\n            value: op.else,\n        });\n    }\n\n    const whenExprs = whens.map(x => ({\n        when: buildValue(x.when).cast(Types.bool),\n        then: buildValue(x.value)\n    }));\n\n    const valueType = reconciliateTypes(whenExprs.map(x => x.then));\n    for (const v of whenExprs) {\n        v.then = v.then.cast(valueType);\n    }\n\n    return new Evaluator(\n        valueType\n        , null\n        , hash({ when: whenExprs.map(x => ({ when: x.when.hash, then: x.then.hash })) })\n        , [\n            ...whenExprs.map(x => x.when),\n            ...whenExprs.map(x => x.then)\n        ]\n        , (raw, t) => {\n            for (const w of whenExprs) {\n                const cond = w.when.get(raw, t);\n                if (cond) {\n                    return w.then.get(raw, t);\n                }\n            }\n            return null;\n        });\n}\n\nfunction buildMember(op: ExprMember): IValue {\n    const oop = op.op;\n    if (oop !== '->>' && oop !== '->') {\n        throw NotSupported.never(oop);\n    }\n    const onExpr = buildValue(op.operand);\n    if (onExpr.type !== Types.json && onExpr.type !== Types.jsonb) {\n        throw new QueryError(`Cannot use member expression ${op.op} on type ${onExpr.type.primary}`);\n    }\n\n    const conv = op.op === '->'\n        ? ((x: any) => x)\n        : ((x: any) => {\n            if (nullIsh(x)) {\n                return null;\n            }\n            if (typeof x === 'string') {\n                return x;\n            }\n            return JSON.stringify(x);\n        });\n\n    return new Evaluator(\n        op.op === '->' ? onExpr.type : Types.text()\n        , null\n        , hash([onExpr.hash, op.op, op.member])\n        , onExpr\n        , typeof op.member === 'string'\n            ? (raw, t) => {\n                const value = onExpr.get(raw, t);\n                if (!value || typeof value !== 'object') {\n                    return null;\n                }\n                return conv(value[op.member]);\n            }\n            : (raw, t) => {\n                const value = onExpr.get(raw, t);\n                if (!Array.isArray(value)) {\n                    return null;\n                }\n                const i = op.member < 0\n                    ? value.length + (op.member as number)\n                    : op.member as number;\n                return conv(value[i]);\n            });\n}\n\n\nfunction buildArrayIndex(op: ExprArrayIndex): IValue {\n    const onExpr = _buildValue(op.array);\n    if (onExpr.type.primary !== DataType.array) {\n        throw new QueryError(`Cannot use [] expression on type ${onExpr.type.primary}`);\n    }\n    const index = _buildValue(op.index).cast(Types.integer);\n    return new Evaluator(\n        (onExpr.type as ArrayType).of\n        , null\n        , hash({ array: onExpr.hash, index: index.hash })\n        , [onExpr, index]\n        , (raw, t) => {\n            const value = onExpr.get(raw, t);\n            if (!Array.isArray(value)) {\n                return null;\n            }\n            const i = index.get(raw, t);\n            if (typeof i !== 'number' || i <= 0 || i > value.length) {\n                return null;\n            }\n            const ret = value[i - 1]; // 1-base !\n\n            if (Array.isArray(ret)) {\n                // ugly hack.. see clean-results.ts\n                (ret as any)[IS_PARTIAL_INDEXING] = true;\n            }\n            return ret;\n        });\n}\n\n\nfunction buildTernary(op: ExprTernary): IValue {\n    const oop = op.op;\n    if (oop !== 'NOT BETWEEN' && oop !== 'BETWEEN') {\n        throw NotSupported.never(oop);\n    }\n    let value = _buildValue(op.value);\n    let hi = _buildValue(op.hi);\n    let lo = _buildValue(op.lo);\n    const type = reconciliateTypes([value, hi, lo]);\n    value = value.cast(type);\n    hi = hi.cast(type);\n    lo = lo.cast(type);\n    const conv = oop === 'NOT BETWEEN'\n        ? (x: boolean) => !x\n        : (x: boolean) => x;\n\n    return new Evaluator(\n        Types.bool\n        , null\n        , hash({ value: value.hash, lo: lo.hash, hi: hi.hash })\n        , [value, hi, lo]\n        , (raw, t) => {\n            const v = value.get(raw, t);\n            if (nullIsh(v)) {\n                return null;\n            }\n            const lov = lo.get(raw, t);\n            if (!nullIsh(lov) && type.lt(v, lov)) {\n                return conv(false);\n            }\n            const hiv = hi.get(raw, t);\n            if (!nullIsh(hiv) && type.gt(v, hiv)) {\n                return conv(false);\n            }\n            if (nullIsh(lov) || nullIsh(hiv)) {\n                return null;\n            }\n            return conv(true);\n        }\n    );\n}\n\n\nfunction buildSelectAsArray(op: SelectStatement): IValue {\n    // todo: handle refs to 'data' in op statement.\n    //  ... and refactor this. This is way too hacky to be maintainable\n    //   (this wont allow the subrequest to access outer context, for instance)\n    const onData = buildSelect(op);\n    if (onData.columns.length !== 1) {\n        throw new QueryError('subquery must return only one column', '42601');\n    }\n    return new Evaluator(\n        onData.columns[0].type.asList()\n        , null\n        , Math.random().toString() // must not be indexable => always different hash\n        , null // , onData.columns[0]\n        , (raw, t) => {\n            const ret = [];\n            for (const v of onData.enumerate(t!)) {\n                ret.push(onData.columns[0].get(v, t));\n            }\n            return ret;\n        }, {\n        forceNotConstant: true\n    });\n}\n\n\nfunction buildExtract(op: ExprExtract): IValue {\n    const from = _buildValue(op.from);\n    function extract(as: _IType, fn: (v: any) => any, result = Types.integer) {\n        const conv = from.cast(as);\n        return new Evaluator(\n            result\n            , null\n            , hash({ extract: from.hash, field: op.field })\n            , [conv]\n            , (raw, t) => {\n                const got = conv.get(raw, t);\n                if (nullIsh(got)) {\n                    return null;\n                }\n                return fn(got);\n            }\n        )\n    }\n    switch (op.field.name) {\n        case 'millennium':\n            return extract(Types.date, x => Math.ceil(moment.utc(x).year() / 1000));\n        case 'century':\n            return extract(Types.date, x => Math.ceil(moment.utc(x).year() / 100));\n        case 'decade':\n            return extract(Types.date, x => Math.floor(moment.utc(x).year() / 10));\n        case 'day':\n            if (from.canCast(Types.date)) {\n                return extract(Types.date, x => moment.utc(x).date());\n            }\n            return extract(Types.interval, (x: Interval) => x.days ?? 0);\n        case 'second':\n            if (from.canCast(Types.time)) {\n                return extract(Types.time, x => {\n                    const t = parseTime(x);\n                    return t.second() + t.milliseconds() / 1000;\n                }, Types.float);\n            }\n            return extract(Types.interval, (x: Interval) => (x.seconds ?? 0) + (x.milliseconds ?? 0) / 1000, Types.float);\n        case 'minute':\n            if (from.canCast(Types.time)) {\n                return extract(Types.time, x => parseTime(x).minute());\n            }\n            return extract(Types.interval, (x: Interval) => x.minutes ?? 0);\n        case 'milliseconds':\n            if (from.canCast(Types.time)) {\n                return extract(Types.time, x => {\n                    const t = parseTime(x);\n                    return t.seconds() * 1000 + t.milliseconds();\n                });\n            }\n            return extract(Types.interval, (x: Interval) => (x.seconds ?? 0) * 1000 + (x.milliseconds ?? 0), Types.float);\n        case 'month':\n            if (from.canCast(Types.date)) {\n                return extract(Types.date, x => moment.utc(x).month() + 1);\n            }\n            return extract(Types.interval, (x: Interval) => x.months ?? 0);\n        case 'year':\n            if (from.canCast(Types.date)) {\n                return extract(Types.date, x => moment.utc(x).year());\n            }\n            return extract(Types.interval, (x: Interval) => x.years ?? 0);\n        case 'dow':\n            return extract(Types.date, x => moment.utc(x).day());\n        case 'isodow':\n            return extract(Types.date, x => {\n                const dow = moment.utc(x).day();\n                return dow ? dow : 7;\n            });\n        case 'doy':\n            return extract(Types.date, x => moment.utc(x).dayOfYear());\n        case 'epoch':\n            if (from.canCast(Types.timestamp())) {\n                return extract(Types.timestamp(), x => moment.utc(x).unix(), Types.float);\n            }\n            return extract(Types.interval, (x: Interval) => intervalToSec(x));\n        case 'hour':\n            if (from.canCast(Types.timestamp())) {\n                return extract(Types.timestamp(), x => moment.utc(x).hour());\n            }\n            return extract(Types.interval, (x: Interval) => x.hours ?? 0);\n        case 'isoyear':\n            return extract(Types.date, x => {\n                const d = moment.utc(x);\n                return d.dayOfYear() <= 1 ? d.year() - 1 : d.year();\n            });\n        case 'quarter':\n            return extract(Types.date, x => moment.utc(x).quarter());\n        case 'week':\n            return extract(Types.date, x => moment.utc(x).week());\n        case 'microseconds':\n            if (from.canCast(Types.time)) {\n                return extract(Types.time, x => {\n                    const t = parseTime(x);\n                    return t.seconds() * 1000000 + t.milliseconds() * 1000;\n                });\n            }\n            return extract(Types.interval, (x: Interval) => (x.seconds ?? 0) * 1000000 + (x.milliseconds ?? 0) * 1000);\n        default:\n            throw new NotSupported('Extract type \"' + op.field + '\"');\n    }\n}\n\n\nfunction buildOverlay(op: ExprOverlay): IValue {\n    const value = _buildValue(op.value).cast(Types.text());\n    const placing = _buildValue(op.placing).cast(Types.text());\n    const from = _buildValue(op.from).cast(Types.integer);\n    const forr = op.for && _buildValue(op.for).cast(Types.integer);\n\n    return new Evaluator(\n        Types.text()\n        , null\n        , hash({ overlay: value.hash, placing: placing.hash, from: from.hash, for: forr?.hash })\n        , forr ? [value, placing, from, forr] : [value, placing, from]\n        , (raw, t) => {\n            const _value = value.get(raw, t) as string;\n            if (nullIsh(_value)) {\n                return null;\n            }\n            const _placing = placing.get(raw, t) as string;\n            if (nullIsh(_placing)) {\n                return null;\n            }\n            const _from = from.get(raw, t) as number;\n            if (nullIsh(_from)) {\n                return null;\n            }\n            const before = sqlSubstring(_value, 0, _from - 1);\n            let after: string | nil;\n            if (forr) {\n                const _for = forr.get(raw, t) as number;\n                if (nullIsh(_for)) {\n                    return null;\n                }\n                after = sqlSubstring(_value, _from + _for);\n            } else {\n                after = sqlSubstring(_value, _placing.length + _from);\n            }\n            if (nullIsh(after)) {\n                return null;\n            }\n            return before + _placing + after;\n        });\n}\n\nfunction buildSubstring(op: ExprSubstring): IValue {\n    const value = _buildValue(op.value).cast(Types.text());\n    const vals = [value];\n    const from = op.from && _buildValue(op.from).cast(Types.integer);\n    const forr = op.for && _buildValue(op.for).cast(Types.integer);\n    if (forr) {\n        vals.push(forr);\n    }\n    if (from) {\n        vals.push(from);\n    }\n\n    return new Evaluator(\n        Types.text()\n        , null\n        , hash({ substr: value.hash, from: from?.hash, for: forr?.hash })\n        , vals\n        , (raw, t) => {\n            const _value = value.get(raw, t) as string;\n            if (nullIsh(_value)) {\n                return null;\n            }\n            let start = 0;\n            let len: number | nil;\n            if (from) {\n                start = from.get(raw, t) as number;\n                if (nullIsh(start)) {\n                    return null;\n                }\n            }\n            if (forr) {\n                len = forr.get(raw, t) as number;\n                if (nullIsh(len)) {\n                    return null;\n                }\n            }\n            return sqlSubstring(_value, start, len);\n        });\n}\n\nexport function sqlSubstring(value: string, from = 0, len?: number | nil): string | null {\n    if (nullIsh(from) || nullIsh(value)) {\n        return null;\n    }\n    // sql substring is base-1\n    from--;\n    if (from < 0) {\n        from = 0;\n    }\n    if (!nullIsh(len)) {\n        if (len! < 0) {\n            throw new QueryError('negative substring length not allowed');\n        }\n        return value.substr(from, len!);\n    }\n    return value.substr(from);\n}\n","import { QName, Statement, NodeLocation, toSql } from 'pgsql-ast-parser';\nimport { _ISchema, QueryError, _Transaction, _IDb } from '../interfaces-private';\n\nexport function checkExistence(schema: _ISchema, name: QName, ifNotExists: boolean | undefined, act: () => void): boolean {\n    // check if object exists\n    const exists = schema.getObject(name, {\n        skipSearch: true,\n        nullIfNotFound: true\n    });\n    if (exists) {\n        if (ifNotExists) {\n            return false;\n        }\n        throw new QueryError(`relation \"${name.name}\" already exists`);\n    }\n\n    // else, perform operation\n    act();\n    return true;\n}\n\n\n\nexport function locOf(p: Statement): NodeLocation {\n    return p._location ?? { start: 0, end: 0 };\n}\n\nexport abstract class ExecHelper {\n    constructor(private statement: Statement) {\n    }\n\n    protected noData(t: _Transaction, name?: string) {\n        return {\n            result: {\n                command: name ?? this.statement.type.toUpperCase(),\n                fields: [],\n                rowCount: 0,\n                rows: [],\n                location: locOf(this.statement),\n            },\n            state: t,\n        };\n    }\n}\n","import { _ITable, _ISelection, _ISchema, _Transaction, _IIndex, IValue, NotSupported, PermissionDeniedError, _Column, SchemaField, IndexDef, _Explainer, _SelectExplanation, _IType, ChangeHandler, Stats, DropHandler, IndexHandler, RegClass, RegType, Reg, _IConstraint, TruncateHandler } from '../interfaces-private';\nimport { CreateColumnDef, ExprRef, TableConstraint } from 'pgsql-ast-parser';\nimport { DataSourceBase } from '../transforms/transform-base';\nimport { Schema, ColumnNotFound, nil, ISubscription, ColumnDef } from '../interfaces';\nimport { buildAlias } from '../transforms/alias';\nimport { columnEvaluator } from '../transforms/selection';\nimport { colByName, findTemplate } from '../utils';\n\nexport abstract class ReadOnlyTable<T = any> extends DataSourceBase<T> implements _ITable, _ISelection {\n\n\n    get isExecutionWithNoResult(): boolean {\n        return false;\n    }\n\n    get primaryIndex(): nil | IndexDef {\n        return null;\n    }\n\n    getColumns(): Iterable<ColumnDef> {\n        throw new Error('Method not implemented on schema tables.');\n    }\n\n    abstract entropy(t: _Transaction): number;\n    abstract enumerate(t: _Transaction): Iterable<T>;\n    abstract hasItem(value: T, t: _Transaction): boolean;\n    abstract readonly _schema: Schema;\n\n    reg!: Reg;\n\n    readonly selection: _ISelection = buildAlias(this);\n    readonly hidden = true;\n\n    isOriginOf(v: IValue): boolean {\n        return v.origin === this || v.origin === this.selection;\n    }\n\n\n    get type() {\n        return 'table' as const;\n    }\n\n    constructor(private schema: _ISchema) {\n        super(schema);\n    }\n\n    get name(): string {\n        return this._schema.name;\n    }\n\n    register() {\n        this.reg = this.schema._reg_register(this);\n    }\n\n    private columnsById = new Map<string, IValue>();\n    private _columns?: IValue[];\n\n\n    private build() {\n        if (this._columns) {\n            return;\n        }\n        this._columns = [];\n        for (const _col of this._schema.fields) {\n            const newCol = columnEvaluator(this, _col.name, _col.type as _IType);\n            this._columns.push(newCol);\n            this.columnsById.set(_col.name, newCol);\n        }\n    }\n\n    get columns(): ReadonlyArray<IValue<any>> {\n        this.build();\n        return this._columns!;\n    }\n\n    getColumn(column: string | ExprRef): IValue;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue<any> | nil {\n        this.build();\n        if (typeof column !== 'string'\n            && column.table) {\n            if (!column.table.schema\n                && column.table.name !== this.name) {\n                return null;\n            }\n            column = column.name;\n        }\n        return colByName(this.columnsById, column, nullIfNotFound);\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        throw new PermissionDeniedError(this.name);\n    }\n\n    listIndices(): IndexDef[] {\n        return [];\n    }\n\n    stats(t: _Transaction): Stats | null {\n        throw new NotSupported('stats (count, ...) on information schema');\n    }\n\n    rename(to: string): this {\n        throw new PermissionDeniedError(this.name);\n    }\n    update(t: _Transaction, toUpdate: any) {\n        throw new PermissionDeniedError(this.name);\n    }\n    addColumn(column: SchemaField | CreateColumnDef): _Column {\n        throw new PermissionDeniedError(this.name);\n    }\n    getColumnRef(column: string, nullIfNotFound?: boolean): _Column {\n        throw new PermissionDeniedError(this.name);\n    }\n    getConstraint(constraint: string): _IConstraint | nil {\n        return null;\n    }\n    addConstraint(constraint: TableConstraint, t: _Transaction): _IConstraint {\n        throw new PermissionDeniedError(this.name);\n    }\n    insert(item: any) {\n        throw new PermissionDeniedError(this.name);\n    }\n    doInsert(toInsert: any): void {\n        throw new PermissionDeniedError(this.name);\n    }\n    delete(t: _Transaction, toDelete: T): void {\n        throw new PermissionDeniedError(this.name);\n    }\n    truncate(t: _Transaction): void {\n        throw new PermissionDeniedError(this.name);\n    }\n\n    createIndex(): _IConstraint {\n        throw new PermissionDeniedError(this.name);\n    }\n    dropIndex(t: _Transaction, name: string): void {\n        throw new PermissionDeniedError(this.name);\n    }\n    setHidden(): this {\n        throw new PermissionDeniedError(this.name);\n    }\n    drop(t: _Transaction): void {\n        throw new PermissionDeniedError(this.name);\n    }\n\n    setReadonly(): this {\n        return this;\n    }\n\n    getIndex(...forValue: IValue[]): _IIndex<any> | nil {\n        return null;\n    }\n\n    on(): any {\n        throw new NotSupported('subscribing information schema');\n    }\n    onBeforeChange(columns: string[], check: ChangeHandler<T>) {\n        // nop\n        return { unsubscribe() { } }\n    }\n    onCheckChange(columns: string[], check: ChangeHandler<T>) {\n        // nop\n        return { unsubscribe() { } }\n    }\n    onTruncate(sub: TruncateHandler): ISubscription {\n        // nop\n        return { unsubscribe() { } }\n    }\n    onDrop(sub: DropHandler): ISubscription {\n        // nop\n        return { unsubscribe() { } }\n    }\n    onIndex(sub: IndexHandler): ISubscription {\n        // nop\n        return { unsubscribe() { } }\n    }\n\n\n    find(template?: T, columns?: (keyof T)[]): Iterable<T> {\n        return findTemplate(this.selection, this.db.data, template, columns);\n    }\n\n\n    make(table: _ITable, i: number, t: IValue<any>): any {\n        throw new Error('not implemented');\n    }\n\n\n    *itemsByTable(table: string | _ITable, t: _Transaction): IterableIterator<any> {\n        if (typeof table === 'string') {\n            for (const s of this.db.listSchemas()) {\n                const got = s.getTable(table, true);\n                if (got) {\n                    yield* this.itemsByTable(got, t);\n                }\n            }\n        } else {\n            let i = 0;\n            for (const f of table.selection.columns) {\n                yield this.make(table, ++i, f);\n            }\n        }\n    }\n}","import { Evaluator } from '../evaluator';\nimport { CastError, DataType, IValue, nil, Reg, TR, _ISchema, _IType, _RelationBase, _Transaction } from '../interfaces-private';\nimport { ArrayType } from './datatypes';\nimport { isType, nullIsh } from '../utils';\nimport objectHash from 'object-hash';\nimport { QueryError } from '../interfaces';\n\nlet regCnt = 0;\n\nexport function regGen(): Reg {\n    return {\n        classId: ++regCnt,\n        typeId: ++regCnt,\n    };\n}\n\nexport abstract class TypeBase<TRaw = any> implements _IType<TRaw>, _RelationBase {\n    get [isType.TAG]() {\n        return true;\n    }\n\n    readonly reg: Reg;\n\n    get type(): 'type' {\n        return 'type';\n    }\n\n    constructor() {\n        this.reg = regGen();\n    }\n\n    private _asArray?: _IType<TRaw[]>;\n    private _asList?: _IType<TRaw[]>;\n\n    abstract primary: DataType;\n    get name(): string {\n        return this.primary;\n    }\n\n\n    /** Compute a custom unicty hash for a non null value */\n    doGetHash?(value: TRaw): string | number;\n\n    /** Can be casted to */\n    doCanCast?(to: _IType<TRaw>): boolean | nil;\n\n    /** Can be built to from (inverse of doCanCast()) */\n    doCanBuildFrom?(from: _IType): boolean | nil;\n\n    /**\n     * @see this.prefer() doc\n      */\n    doPrefer?(type: _IType<TRaw>): _IType | null;\n\n    /**\n     * @see this.canConvertImplicit() doc\n     */\n    doCanConvertImplicit?(to: _IType<TRaw>): boolean;\n\n    /** Perform conversion from this type to given type */\n    doCast?(value: Evaluator<TRaw>, to: _IType<TRaw>): Evaluator<any> | nil;\n\n    /** Perform conversion  given type to this type (inverse of doCast()) */\n    doBuildFrom?(value: Evaluator, from: _IType): Evaluator<TRaw> | nil;\n\n    doEquals(a: TRaw, b: TRaw): boolean {\n        return a === b;\n    }\n\n    doGt(a: TRaw, b: TRaw): boolean {\n        return a > b;\n    }\n\n    doLt(a: TRaw, b: TRaw): boolean {\n        return a < b;\n    }\n    toString(): string {\n        throw new Error('Method not implemented.');\n    }\n\n    equals(a: TRaw, b: TRaw): boolean | null {\n        if (nullIsh(a) || nullIsh(b)) {\n            return null;\n        }\n        return this.doEquals(a, b);\n    }\n\n    gt(a: TRaw, b: TRaw): boolean | null {\n        if (nullIsh(a) || nullIsh(b)) {\n            return null;\n        }\n        return this.doGt(a, b);\n    }\n    lt(a: TRaw, b: TRaw): boolean | null {\n        if (nullIsh(a) || nullIsh(b)) {\n            return null;\n        }\n        return this.doLt(a, b);\n    }\n\n    ge(a: TRaw, b: TRaw): boolean | null {\n        return this.gt(a, b) || this.equals(a, b);\n    }\n\n    le(a: TRaw, b: TRaw): boolean | null {\n        return this.lt(a, b) || this.equals(a, b);\n    }\n\n    /**\n     * When performing 'a+b', will be given 'b' type,\n     * this returns the prefered resulting type, or null if they are not compatible\n      */\n    prefer(to: _IType<TRaw>): _IType | nil {\n        if (to === this) {\n            return this;\n        }\n        if (this.doPrefer) {\n            const ret = this.doPrefer(to);\n            if (ret) {\n                return ret;\n            }\n        }\n        return (to as TypeBase).doPrefer?.(this);\n    }\n\n    /**\n     * Can constant literals be converted implicitely\n     * (without a cast... i.e. you can use both values as different values of a case expression, for instance)\n     **/\n    canConvertImplicit(to: _IType<TRaw>): boolean | nil {\n        if (to === this) {\n            return true;\n        }\n        return this.doCanConvertImplicit?.(to);\n    }\n\n    /** Can be explicitely casted to */\n    canCast(to: _IType<TRaw>): boolean | nil {\n        if (to === this) {\n            return true;\n        }\n\n        // ask the target type if it know how to build itself from this\n        if ((to as TypeBase).doCanBuildFrom?.(this)) {\n            return true;\n        }\n\n        // asks this type if it knows how to convert itself to target\n        if (this.doCanConvertImplicit?.(to) || this.doCanCast?.(to)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /** Perform cast */\n    cast(_a: IValue<TRaw>, _to: _IType<any>): IValue<any> {\n        return this._convert(_a, _to, (a, to) => {\n            if (!this.doCanCast?.(to) || !this.doCast) {\n                throw new CastError(this, to);\n            }\n            return this.doCast(a, to);\n        })\n    }\n\n    /** Perform implicit conversion */\n    convertImplicit(_a: IValue<TRaw>, _to: _IType<any>): IValue<any> {\n        return this._convert(_a, _to, (a, to) => {\n            if (!this.doCanConvertImplicit?.(to) || !this.doCast) {\n                throw new CastError(this, to);\n            }\n            return this.doCast(a, to);\n        })\n    }\n\n    private _convert(a: IValue<TRaw>, _to: _IType<any>, perform: (a: Evaluator, to: _IType) => Evaluator<any> | nil): IValue<any> {\n        const to = _to as TypeBase;\n        if (to === this) {\n            return a;\n        }\n        if (!(a instanceof Evaluator)) {\n            throw new CastError(this, to);\n        }\n\n        let converted: Evaluator | nil;\n        if (to.doCanBuildFrom?.(this)) {\n            if (!to.doBuildFrom) {\n                throw new CastError(this, to);\n            }\n            converted = to.doBuildFrom(a, this);\n        } else {\n            converted = perform(a, to);\n        }\n\n        if (!converted) {\n            throw new CastError(this, to);\n        }\n        return converted.setType(to);\n    }\n\n    asArray(): _IType<TRaw[]> {\n        if (this._asArray) {\n            return this._asArray;\n        }\n        return this._asArray = new ArrayType(this, false);\n    }\n\n    asList(): _IType<TRaw[]> {\n        if (this._asList) {\n            return this._asList;\n        }\n        return this._asList = new ArrayType(this, true);\n    }\n\n    hash(value: any): string | number | null {\n        if (nullIsh(value)) {\n            return null;\n        }\n        if (this.doGetHash) {\n            return this.doGetHash(value);\n        }\n        if (typeof value === 'number') {\n            return value;\n        }\n        return objectHash(value);\n    }\n\n    drop(t: _Transaction): void {\n        throw new QueryError('drop type not implemented');\n    }\n\n}\n","import { _ISelection, _IIndex, IValue, setId, getId, _IType, _Transaction, _Column, _ITable, _Explainer, _SelectExplanation, IndexKey, _IndexExplanation, IndexExpression, IndexOp, Stats, _IAlias } from '../interfaces-private';\nimport { QueryError, ColumnNotFound, AmbiguousColumn, nil } from '../interfaces';\nimport { buildValue } from '../parser/expression-builder';\nimport { Evaluator } from '../evaluator';\nimport { TransformBase } from './transform-base';\nimport { SelectedColumn, Expr, astVisitor, ExprRef } from 'pgsql-ast-parser';\nimport { aggregationFunctions, buildGroupBy } from './aggregation';\n\nimport { asSingleQName, colByName, colToStr, isSelectAllArgList, suggestColumnName } from '../utils';\nimport { withSelection } from '../parser/context';\n\n\nexport function buildSelection(on: _ISelection, select: SelectedColumn[] | nil) {\n    select = select ?? [];\n\n    // if this is a \"SELECT *\" => just ignore\n    if (isSelectAllArgList(select.map(x => x.expr))) {\n        if (!on.columns.length) {\n            throw new QueryError('SELECT * with no tables specified is not valid');\n        }\n        return on;\n    }\n\n    // if there is any aggregation function\n    // check if there is any aggregation\n    for (const col of select ?? []) {\n        if (!on.isAggregation() && 'expr' in col && hasAggreg(col.expr)) {\n            // yea, there is an aggregation somewhere in selection\n            return buildGroupBy(on, []).select(select);\n        }\n    }\n\n    return new Selection(on, select);\n}\n\n\nfunction hasAggreg(e: Expr) {\n    let has = false;\n    astVisitor(visitor => ({\n        call: expr => {\n            const nm = asSingleQName(expr.function, 'pg_catalog');\n            if (nm && aggregationFunctions.has(nm)) {\n                // yea, this is an aggregation\n                has = true;\n                return;\n            }\n            visitor.super().call(expr);\n        }\n    })).expr(e);\n    return has\n}\n\n\n\nexport function columnEvaluator(this: void, on: _ISelection, id: string, type: _IType) {\n    if (!id) {\n        throw new Error('Invalid column id');\n    }\n    const ret = new Evaluator(\n        type\n        , id\n        , id\n        , null\n        , raw => raw[id]\n        , {\n            isColumnOf: on,\n        });\n    return ret;\n}\n\nfunction* buildCols(this: void, base: _ISelection, columns: (SelectedColumn | CustomAlias)[]): Iterable<CustomAlias> {\n    for (const s of columns) {\n        if ('val' in s) {\n            if (s.val.origin !== base) {\n                throw new Error('Corrupted selection');\n            }\n            yield s;\n            continue;\n        }\n        if (s.expr.type === 'ref' && s.expr.name === '*') {\n            // handle select \"*\"\n            if (s.alias) {\n                throw new QueryError('Cannot alias *');\n            }\n            let of: _IAlias = base;\n            const alias = s.expr.table;\n            if (alias) {\n                // handle select \"x.*\"\n                const sub = base.selectAlias(alias.name);\n                if (!sub) {\n                    throw new QueryError(`Unknown alias \"${alias.name}\"`);\n                }\n                of = sub;\n            }\n\n            for (const val of of.listColumns()) {\n                yield { val };\n            }\n\n        } else {\n            const val = buildValue(s.expr);\n            yield { val, as: s.alias?.name, expr: s.expr };\n        }\n    }\n}\n\nexport interface CustomAlias {\n    val: IValue;\n    as?: string;\n    expr?: Expr\n}\n\nexport class Selection<T = any> extends TransformBase<T> implements _ISelection<T> {\n\n    private columnIds: string[] = [];\n    private columnsOrigin: IValue[] = [];\n    private columnMapping = new Map<IValue, IValue>();\n    private indexCache = new Map<IValue, _IIndex>();\n    private columnsById = new Map<string, IValue[]>();\n    private symbol = Symbol();\n\n    readonly columns: IValue[] = [];\n\n    isAggregation() {\n        return false;\n    }\n\n\n    constructor(base: _ISelection, _columns: (SelectedColumn | CustomAlias)[]) {\n        super(base);\n\n        // build non-conflicting column ids based on existing ones\n        const columns = withSelection(base, () => [...buildCols(base, _columns)]);\n        this.columnIds = columns.map(x => x.as ?? x.val.id!);\n\n        // build column ids\n        let anonymousBases = new Map<string, number>();\n        for (let i = 0; i < this.columnIds.length; i++) {\n            if (!this.columnIds[i]) {\n                let id = suggestColumnName(columns[i].expr) ?? 'column';\n\n                // check no collision with an existing column\n                let cnt = anonymousBases.get(id);\n                this.columnIds[i] = id + (cnt ? cnt : '');\n                anonymousBases.set(id, (cnt ?? 0) + 1);\n            }\n        }\n\n\n        // build columns to select\n        for (let i = 0; i < columns.length; i++) {\n            this.refColumn(columns[i].val, this.columnIds[i]);\n        }\n\n\n        // ONLY ONCE COLUMNS HAVE BEEN REFERENCED BY ID,\n        // rename ids for columns which have the same id\n        // this allows yielding ambiguous columns data\n        const has = new Map<string, number>();\n        for (let i = 0; i < columns.length; i++) {\n            const orig = this.columnIds[i];\n            const oi = has.get(orig);\n            if (typeof oi !== 'number') {\n                has.set(orig, i);\n                continue;\n            }\n            let ret: string = orig;\n            let k = 0;\n            do {\n                ret = orig + (++k);\n            } while (this.columnIds.includes(ret));\n            this.columnIds[i] = ret;\n            has.set(ret, i);\n        }\n    }\n\n    private refColumn(fromCol: IValue, alias: string) {\n        const col = columnEvaluator(this, alias, fromCol.type);\n        this.columns.push(col);\n        this.columnMapping.set(col, fromCol);\n        this.columnsOrigin.push(fromCol);\n        if (!col.id) {\n            return;\n        }\n        let ci = this.columnsById.get(col.id);\n        if (!ci) {\n            this.columnsById.set(col.id, ci = []);\n        }\n        ci.push(col);\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        return this.base.stats(t);\n    }\n\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        for (const item of this.base.enumerate(t)) {\n            yield this.build(item, t);\n        }\n    }\n\n    build(item: any, t: _Transaction): T {\n        const ret: any = {};\n        setId(ret, getId(item));\n        ret[this.symbol] = this.symbol;\n        for (let i = 0; i < this.columns.length; i++) {\n            const col = this.columnsOrigin[i];\n            ret[this.columnIds[i]] = col.get(item, t) ?? null;\n        }\n        return ret as any;\n    }\n\n    hasItem(value: T, t: _Transaction): boolean {\n        return (value as any)[this.symbol] === this.symbol;\n    }\n\n    getColumn(column: string | ExprRef): IValue;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil {\n        const ret = colByName(this.columnsById, column, true);\n        if (!ret?.length) {\n            if (nullIfNotFound) {\n                return null;\n            }\n            throw new ColumnNotFound(colToStr(column));\n        }\n        if (ret.length !== 1) {\n            throw new AmbiguousColumn(colToStr(column));\n        }\n        return ret[0];\n    }\n\n    getIndex(val: IValue): _IIndex | nil {\n        if (this.indexCache.has(val)) {\n            return this.indexCache.get(val);\n        }\n        const mapped = this.columnMapping.get(val);\n        const originIndex = this.base.getIndex(mapped!);\n        const ret = originIndex && new SelectionIndex(this, originIndex);\n        this.indexCache.set(val, ret!);\n        return ret;\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'map',\n            of: this.base.explain(e),\n            select: this.columnIds.map((x, i) => ({\n                what: this.columnsOrigin[i].explain(e),\n                as: x\n            })),\n        };\n    }\n}\n\n\nexport class SelectionIndex<T> implements _IIndex<T> {\n    constructor(readonly owner: Selection<T>, private base: _IIndex) {\n    }\n\n    stats(t: _Transaction, key?: IndexKey) {\n        return this.base.stats(t, key);\n    }\n\n    iterateKeys(t: _Transaction) {\n        return this.base.iterateKeys(t);\n    }\n\n    get expressions(): IndexExpression[] {\n        return this.base.expressions;\n    }\n\n    entropy(op: IndexOp): number {\n        // same as source\n        return this.base.entropy(op);\n    }\n\n    eqFirst(rawKey: IndexKey, t: _Transaction) {\n        return this.base.eqFirst(rawKey, t);\n    }\n\n    *enumerate(op: IndexOp): Iterable<T> {\n        for (const i of this.base.enumerate(op)) {\n            yield this.owner.build(i, op.t);\n        }\n    }\n\n\n    explain(e: _Explainer): _IndexExplanation {\n        return {\n            _: 'indexMap',\n            of: this.base.explain(e),\n        }\n    }\n}","import { IValue, _IIndex, _ISelection, _IType, _Transaction, _Explainer, _ExprExplanation, _ISchema, Parameter } from './interfaces-private';\nimport { DataType, QueryError, CastError, nil, ISchema, IType, ArgDefDetails } from './interfaces';\nimport hash from 'object-hash';\nimport { Types, ArrayType, isNumeric, reconciliateTypes } from './datatypes';\nimport { buildCall } from './parser/function-call';\nimport { nullIsh, executionCtx } from './utils';\nimport { QName } from 'pgsql-ast-parser';\n\n\nexport class Evaluator<T = any> implements IValue<T> {\n\n    readonly isConstantLiteral: boolean;\n    readonly usedColumns = new Set<IValue>();\n    readonly forceNotConstant?: boolean;\n\n    get index(): _IIndex | nil {\n        return this.origin?.getIndex(this);\n    }\n\n    get isConstant(): boolean {\n        return !this.usedColumns.size && !this.forceNotConstant;\n    }\n\n    get isConstantReal(): boolean {\n        return typeof this.val !== 'function';\n    }\n\n    origin: _ISelection | nil;\n\n    get isAny(): boolean {\n        return this.opts?.isAny ?? false;\n    }\n\n    constructor(readonly type: _IType<T>\n        , readonly id: string | nil\n        , readonly hash: string\n        , dependencies: IValue | IValue[] | nil\n        , public val: nil | Object | number | string | Date | ((raw: any, transaction: _Transaction | nil) => any)\n        , private opts?: {\n            isAny?: boolean;\n            isColumnOf?: _ISelection;\n            forceNotConstant?: boolean;\n            unpure?: boolean;\n        }) {\n        this.isConstantLiteral = typeof val !== 'function';\n        if (opts?.forceNotConstant) {\n            this.forceNotConstant = true;\n        }\n\n        // fetch columns to depend on\n        let depArray: IValue[] | undefined = undefined;\n        let hasNotConstant = false;\n        if (dependencies) {\n            if (!Array.isArray(dependencies)) {\n                depArray = [dependencies];\n                this.usedColumns = dependencies.usedColumns as Set<IValue>;\n                hasNotConstant = !dependencies.isConstant;\n                this.origin = dependencies.origin;\n            } else {\n                this.usedColumns = new Set();\n                for (const d of dependencies) {\n                    if (d.origin) {\n                        if (this.origin && d.origin && this.origin !== d.origin) {\n                            throw new Error('You cannot evaluate an expression which is coming from multiple origins');\n                        }\n                        this.origin = d.origin;\n                    }\n                    if (!d.isConstant) {\n                        hasNotConstant = true;\n                    }\n                    for (const u of d.usedColumns) {\n                        this.usedColumns.add(u);\n                    }\n                }\n            }\n        }\n\n        if (opts?.isColumnOf) {\n            this.usedColumns.add(this);\n            this.origin = opts.isColumnOf;\n            delete opts.isColumnOf;\n        }\n        if (hasNotConstant && !this.usedColumns.size) {\n            this.forceNotConstant = true;\n        }\n\n        if (!this.usedColumns.size // no used columns\n            && !this.origin\n            && !this.opts?.unpure\n            && !this.forceNotConstant\n            && !depArray?.some(x => !x.isConstantReal)  // all real constant dependencies\n        ) {\n            // no dependency => this is a real constant => evaluate it.\n            if (typeof this.val === 'function') {\n                this.val = this.val(null, null);\n            }\n        }\n    }\n\n    setType(type: _IType) {\n        if (this.type === type) {\n            return this;\n        }\n        return new Evaluator<T>(type\n            , this.id\n            , this.hash\n            , this\n            , this.val\n            , this.opts\n        );\n    }\n\n\n\n    setConversion(converter: (val: T, t: _Transaction | nil) => any\n        , hashConv: (hash: string) => any) {\n        return new Evaluator<T>(this.type\n            , this.id\n            , hash(hashConv(this.hash))\n            , this\n            , (raw, t) => {\n                let got = this.get(raw, t);\n                if (nullIsh(got)) {\n                    return null;\n                }\n                if (!this.isAny) {\n                    return converter(got, t);\n                }\n                if (!Array.isArray(got)) {\n                    throw new QueryError('Unexpected use of ANY()');\n                }\n                return (got as any[]).map(x => converter(x, t));\n            }\n            , this.opts\n        );\n    }\n\n    setOrigin(origin: _ISelection): IValue<T> {\n        const ret = this.clone();\n        ret.origin = origin;\n        return ret;\n    }\n\n    clone(): Evaluator<T> {\n        return new Evaluator<T>(\n            this.type\n            , this.id\n            , this.hash\n            , this\n            , this.val\n            , this.opts\n        );\n    }\n\n    map<TNew>(mapper: (val: T) => TNew, newType?: _IType<TNew>): IValue<TNew> {\n        if (this.isAny) {\n            throw new QueryError('Unexpected use of ANY()');\n        }\n        const ret = new Evaluator<TNew>(\n            (newType ?? this.type) as _IType\n            , this.id\n            , this.hash\n            , this\n            , (raw, t) => {\n                const got = this.get(raw, t);\n                if (nullIsh(got)) {\n                    return null;\n                }\n                return mapper(got);\n            }\n            , this.opts\n        );\n        ret.origin = this.origin;\n        return ret;\n    }\n\n    setWrapper<TNew>(newOrigin: _ISelection, unwrap: (val: T) => TNew, newType?: _IType<TNew>): IValue<TNew> {\n        if (this.isAny) {\n            throw new QueryError('Unexpected use of ANY()');\n        }\n        const ret = new Evaluator<TNew>(\n            (newType ?? this.type) as _IType\n            , this.id\n            , this.hash\n            , this\n            , (raw, t) => {\n                const got = unwrap(raw)\n                if (nullIsh(got)) {\n                    return null;\n                }\n                return this.get(got, t);\n            }\n            , this.opts\n        );\n        ret.origin = newOrigin;\n        return ret;\n    }\n\n    setId(newId: string): IValue {\n        if (this.id === newId) {\n            return this;\n        }\n        return new Evaluator<T>(\n            this.type\n            , newId\n            , this.hash\n            , this\n            , this.val\n            , this.opts\n        );\n    }\n\n    get(): T;\n    get(raw: any, t: _Transaction | nil): T;\n    get(raw?: any, t?: _Transaction): T {\n        if ((nullIsh(raw) || !t) && !this.isConstant) {\n            throw new Error('Cannot be evaluated as constant');\n        }\n        if (typeof this.val !== 'function') {\n            return this.val as any;\n        }\n        return this.val(raw, t)\n    }\n\n    canCast(to: _IType<T>): boolean {\n        return !!this.type.canCast(to);\n    }\n\n    cast<T = any>(to: _IType<T>): IValue<T> {\n        return this.type.cast(this, to);\n    }\n\n    convertImplicit<T = any>(to: _IType<T>): IValue<T> {\n        return this.type.convertImplicit(this, to);\n    }\n\n\n    explain(e: _Explainer): _ExprExplanation {\n        if (!this.origin) {\n            return {\n                constant: true,\n            }\n        }\n        return {\n            on: e.idFor(this.origin),\n            col: this.id ?? '<complex expression>',\n        };\n    }\n}\n\n// export class ArrayEvaluator<T> implements IValue {\n\n//     constructor(\n//         readonly type: _IType<T>\n//         , readonly id: string\n//         , readonly sql: string\n//         , readonly hash: string\n//         , readonly selection: _ISelection\n//         , public val: T | ((raw: any) => T)) {\n//     }\n\n//     get index() {\n//         return this.selection?.getIndex(this);\n//     }\n\n//     get isConstant(): boolean {\n//         return typeof this.val !== 'function';\n//     }\n\n//     get(raw: any): T {\n//         if (typeof this.val !== 'function') {\n//             return this.val;\n//         }\n//         return (this.val as ((raw: any) => T))(raw);\n//     }\n\n//     asConstant(perform = true) {\n//         if (!perform || typeof this.val !== 'function') {\n//             return this;\n//         }\n//         return new Evaluator(this.type\n//             , this.id\n//             , this.sql\n//             , this.hash\n//             , this.selection\n//             , this.get(null));\n//     }\n\n\n//     setId(newId: string): IValue {\n//         if (this.id === newId) {\n//             return this;\n//         }\n//         return new Evaluator<T>(\n//             this.type\n//             , newId\n//             , this.sql\n//             , this.hash\n//             , this.selection\n//             , this.val\n//         );\n//     }\n\n//     canCast(to: DataType | _IType<T>): boolean {\n//         return this.type.canCast(to);\n//     }\n\n//     cast<T = any>(to: DataType | _IType<T>): IValue<T> {\n//         return this.type.cast(this, to);\n//     }\n// }\n\n\nexport const Value = {\n    null(ofType?: _IType): IValue {\n        return new Evaluator(ofType ?? Types.null, null, 'null', null, null, undefined);\n    },\n    text(value: string, length: number | nil = null): IValue {\n        return new Evaluator(\n            Types.text(length)\n            , null\n            , value\n            , null\n            , value);\n    },\n    number(value: number, type = Types.float): IValue {\n        return new Evaluator(\n            type\n            , null\n            , value.toString(10)\n            , null\n            , value);\n    },\n    function(value: string | QName, args: IValue[]): IValue {\n        return buildCall(value, args);\n    },\n    bool(value: boolean): IValue {\n        const str = value ? 'true' : 'false';\n        return new Evaluator(\n            Types.bool\n            , null\n            , str\n            , null\n            , value);\n    },\n    /** @deprecated Use with care */\n    constant(_type: _IType, value: any): IValue {\n        const type = nullIsh(value)\n            ? Types.null\n            : _type;\n        return new Evaluator(\n            type\n            , null\n            , (null as any)\n            , null\n            , value);\n    },\n    /** @deprecated Use with care */\n    converter(type: _IType, to: _IType): (val: any, t: _Transaction | nil) => any {\n        let last: any = null;\n        const evaluator = new Evaluator(\n            type\n            , null\n            , (null as any)\n            , null\n            , () => last\n            , { forceNotConstant: true })\n            .cast(to);\n        return (val: any, t) => {\n            if (nullIsh(val)) {\n                return null;\n            }\n            last = val;\n            const ret = evaluator.get(val, t);\n            last = null;\n            return ret;\n        };\n    },\n    in(value: IValue, array: IValue, inclusive: boolean): IValue {\n        if (!value) {\n            throw new Error('Argument null');\n        }\n        if (array.type.primary !== DataType.list && array.type) {\n            array = Value.list([array]);\n        }\n        const of = (array.type as ArrayType).of;\n\n        // cast both sides (see #castArrayIn in uts)\n        const type = reconciliateTypes([value, Value.null(of)])\n        value = value.cast(type);\n        array = array.cast(type.asArray());\n\n        return new Evaluator(\n            Types.bool\n            , null\n            , hash({ val: value.hash, in: array.hash })\n            , [value, array]\n            , (raw, t) => {\n                const rawValue = value.get(raw, t);\n                const rawArray = array.get(raw, t);\n                if (!Array.isArray(rawArray)) {\n                    return false;\n                }\n                const has = rawArray.some(x => of.equals(rawValue, x));\n                return inclusive ? has : !has;\n            });\n    },\n    isNull(leftValue: IValue, expectNull: boolean): IValue {\n        return new Evaluator(\n            Types.bool\n            , null\n            , hash({ isNull: leftValue.hash, expectNull })\n            , leftValue\n            , (raw, t) => {\n                const left = leftValue.get(raw, t);\n                // check that result is null (will never return NULL)\n                const ret = nullIsh(left);\n                return expectNull ? ret : !ret;\n            })\n    },\n    isTrue(leftValue: IValue, expectTrue: boolean): IValue {\n        leftValue = leftValue.cast(Types.bool);\n        return new Evaluator(\n            Types.bool\n            , null\n            , hash({ isTrue: leftValue.hash, expectTrue })\n            , leftValue\n            , expectTrue ? ((raw, t) => {\n                const left = leftValue.get(raw, t);\n                return left === true; // never returns null\n            }) : ((raw, t) => {\n                const left = leftValue.get(raw, t);\n                return !(left === true); //  never returns null\n            }));\n    },\n    isFalse(leftValue: IValue, expectFalse: boolean): IValue {\n        leftValue = leftValue.cast(Types.bool);\n        return new Evaluator(\n            Types.bool\n            , null\n            , hash({ isFalse: leftValue.hash, expectFalse })\n            , leftValue\n            , expectFalse ? ((raw, t) => {\n                const left = leftValue.get(raw, t);\n                return left === false; // never returns null\n            }) : ((raw, t) => {\n                const left = leftValue.get(raw, t);\n                return !(left === false); //  never returns null\n            }));\n    },\n    negate(value: IValue): IValue {\n        if (value.type === Types.bool) {\n            return (value as Evaluator)\n                .setConversion(x => !x, x => ({ not: x }));\n        }\n        if (!isNumeric(value.type)) {\n            throw new QueryError('Can only apply \"-\" unary operator to numeric types');\n        }\n        return (value as Evaluator)\n            .setConversion(x => -x, x => ({ neg: x }));\n    },\n    array(values: IValue[]): IValue {\n        return arrayOrList(values, false);\n    },\n    list(values: IValue[]): IValue {\n        return arrayOrList(values, true);\n    }\n} as const;\n\n\nfunction arrayOrList(values: IValue[], list: boolean) {\n    const type = values.reduce((t, v) => {\n        if (v.canCast(t)) {\n            return t;\n        }\n        if (!t.canCast(v.type)) {\n            throw new CastError(t.primary, v.type.primary);\n        }\n        return v.type;\n    }, Types.null);\n    // const sel = values.find(x => !!x.selection)?.selection;\n    const converted = values.map(x => x.cast(type));\n    return new Evaluator(\n        list ? type.asList() : type.asArray()\n        , null\n        , hash(converted.map(x => x.hash))\n        , converted\n        , (raw, t) => {\n            const arr = values.map(x => x.get(raw, t));\n            return arr;\n        });\n}\n\n\nexport function buildParameterList(statementName: string | null, args: ArgDefDetails[]) {\n    return args.map<Parameter>(({ type, name }, i) => {\n        const value = new Evaluator(\n            type as _IType\n            , name\n            , hash({ param: name })\n            , null\n            , () => {\n                const { parametersValues } = executionCtx();\n                if (!parametersValues || parametersValues.length <= i) {\n                    throw new QueryError(`bind message supplies ${parametersValues?.length ?? 0} parameters, but prepared statement \"${statementName}\" requires ${args.length}`, '08P01');\n                }\n                return parametersValues[i];\n            }, {\n            forceNotConstant: true,\n        });\n        return { value, index: i };\n    })\n}","import { _IStatementExecutor, _Transaction, StatementResult, _IStatement, _ISelection, NotSupported, QueryError, asSelectable, nil, OnStatementExecuted, _ISchema } from '../interfaces-private';\nimport { WithStatementBinding, SelectStatement, SelectFromUnion, WithStatement, ValuesStatement, SelectFromStatement, QNameMapped, Name, SelectedColumn, Expr, OrderByStatement } from 'pgsql-ast-parser';\nimport { Deletion } from './records-mutations/deletion';\nimport { Update } from './records-mutations/update';\nimport { Insert } from './records-mutations/insert';\nimport { ValuesTable } from '../schema/values-table';\nimport { ignore, suggestColumnName, notNil, modifyIfNecessary } from '../utils';\nimport { JoinSelection } from '../transforms/join';\nimport { cleanResults } from './clean-results';\nimport { MutationDataSourceBase } from './records-mutations/mutation-base';\nimport { locOf } from './exec-utils';\nimport { buildCtx, withBindingScope } from '../parser/context';\nimport { buildValue } from '../parser/expression-builder';\nimport { ArrayType } from '../datatypes';\nimport { RecordType } from '../datatypes/t-record';\nimport { FunctionCallTable } from '../schema/function-call-table';\n\n\n\n\nexport function buildValues(p: ValuesStatement, acceptDefault?: boolean): _ISelection {\n    const ret = new ValuesTable('', p.values, null, acceptDefault);\n    return ret.selection;\n}\n\n\nfunction buildWithable(p: WithStatementBinding): _ISelection {\n    switch (p.type) {\n        case 'select':\n        case 'union':\n        case 'union all':\n        case 'with':\n        case 'with recursive':\n        case 'values':\n            return buildSelect(p);\n        case 'delete':\n            return new Deletion(p);\n        case 'update':\n            return new Update(p);\n        case 'insert':\n            return new Insert(p);\n        default:\n            throw NotSupported.never(p);\n    }\n}\n\nexport function buildSelect(p: SelectStatement): _ISelection {\n    switch (p.type) {\n        case 'union':\n        case 'union all':\n            return buildUnion(p);\n        case 'with':\n            return buildWith(p, false);\n        case 'select':\n            return buildRawSelect(p);\n        case 'values':\n            return buildValues(p);\n        case 'with recursive':\n            throw new NotSupported('recursirve with statements not implemented by pg-mem');\n        default:\n            throw NotSupported.never(p);\n    }\n}\n\n\nfunction buildUnion(p: SelectFromUnion): _ISelection {\n    const left = buildSelect(p.left);\n    const right = buildSelect(p.right);\n    const ret = left.union(right);\n    if (p.type === 'union all') {\n        return ret;\n    }\n    return ret.distinct();\n}\n\nexport function buildWith(p: WithStatement, topLevel: boolean): _ISelection {\n    return withBindingScope(() => {\n        const { setTempBinding } = buildCtx();\n        // declare temp bindings\n        for (const { alias, statement } of p.bind) {\n            const prepared = (topLevel ? buildWithable(statement) : buildSelect(checkReadonlyWithable(statement)))\n                .setAlias(alias.name);\n            setTempBinding(alias.name, prepared);\n        }\n        return buildSelect(checkReadonlyWithable(p.in));\n    })\n}\n\n\nfunction buildRawSelectSubject(p: SelectFromStatement): _ISelection | nil {\n    // compute data source\n    let sel: _ISelection | undefined = undefined;\n    for (const from of p.from ?? []) {\n        // find what to select\n        let newT: _ISelection;\n        switch (from.type) {\n            case 'table':\n                newT = getSelectable(from.name);\n                break;\n            case 'statement':\n                newT = mapColumns(from.alias\n                    , buildSelect(from.statement)\n                    , from.columnNames\n                    , true)\n                    .setAlias(from.alias);\n                break;\n            case 'call':\n                const fnName = from.alias?.name ?? from.function?.name;\n                const fromValue = buildValue(from);\n                if (ArrayType.matches(fromValue.type) && RecordType.matches(fromValue.type.of)) {\n                    // if the function returns an array of records (= \"a table\"), then lets use it as a table\n                    const cols = fromValue.type.of.columns;\n                    newT = new FunctionCallTable(cols, fromValue);\n                } else {\n                    // if the function returns a single value, then lets transform this into a table\n                    // nb: the function call will be re-built in here, but its OK (coz' of build cache)\n                    newT = new ValuesTable(fnName, [[from]], [fnName])\n                        .setAlias(from.alias?.name ?? suggestColumnName(from) ?? '');\n                }\n                break;\n            default:\n                throw NotSupported.never(from);\n        }\n\n        if (!sel) {\n            // first table to be selected\n            sel = newT;\n            continue;\n        }\n\n        switch (from.join?.type) {\n            case 'INNER JOIN':\n                sel = new JoinSelection(sel, newT, from.join!, true);\n                break;\n            case 'LEFT JOIN':\n                sel = new JoinSelection(sel, newT, from.join!, false);\n                break;\n            case 'RIGHT JOIN':\n                sel = new JoinSelection(newT, sel, from.join!, false);\n                break;\n            case null:\n            case undefined:\n                // cross join (equivalent to INNER JOIN ON TRUE)\n                sel = new JoinSelection(sel, newT, {\n                    type: 'INNER JOIN',\n                    on: { type: 'boolean', value: true }\n                }, true);\n                break;\n            default:\n                throw new NotSupported('Join type not supported ' + (from.join?.type ?? '<no join specified>'));\n        }\n    }\n    return sel;\n}\n\n\nfunction buildRawSelect(p: SelectFromStatement): _ISelection {\n    const distinct = !p.distinct || p.distinct === 'all'\n        ? null\n        : p.distinct;\n\n    // ignore \"for update\" clause (not useful in non-concurrent environements)\n    ignore(p.for);\n\n    let sel = buildRawSelectSubject(p);\n\n\n    // filter & select\n    sel = sel ?? buildCtx().schema.dualTable.selection;\n    sel = sel.filter(p.where);\n\n    // postgres helps users: you can use group-by & order-by on aliases.\n    // ... but you cant use aliases in a computation (only in simple order by statements)\n    // this hack reproduces this behaviour\n    const aliases = new Map(notNil(p.columns?.filter(c => !!c.alias?.name)).map(c => [c.alias!.name, c.expr]));\n    const orderBy = modifyIfNecessary(p.orderBy ?? [], o => {\n        const by = o.by.type === 'ref' && !o.by.table && aliases.get(o.by.name);\n        return by ? { ...o, by } : null;\n    });\n\n\n    if (p.groupBy) {\n        const groupBy = modifyIfNecessary(p.groupBy ?? [], o => {\n            const group = o.type === 'ref' && !o.table && !sel?.getColumn(o.name, true) && aliases.get(o.name);\n            return group || null;\n        });\n        sel = sel.groupBy(groupBy);\n    }\n\n    // order selection\n    sel = sel.orderBy(orderBy);\n\n    // when not grouping by, distinct is handled before\n    // selection => can distinct on non selected values\n    if (!p.groupBy && Array.isArray(p.distinct)) {\n        sel = sel.distinct(p.distinct);\n    }\n\n    // select columns\n    sel = sel.select(p.columns!);\n\n\n    // when grouping by, distinct is handled after selection\n    //  => can distinct on key, or selected\n    if (p.groupBy && Array.isArray(p.distinct)) {\n        sel = sel.distinct(p.distinct);\n    }\n\n    // handle 'distinct' on result set\n    if (distinct === 'distinct') {\n        sel = sel.distinct();\n    }\n\n    if (p.limit) {\n        sel = sel.limit(p.limit);\n    }\n    return sel;\n}\n\nfunction getSelectable(name: QNameMapped): _ISelection {\n    const { schema, getTempBinding } = buildCtx();\n    const temp = !name.schema\n        && getTempBinding(name.name);\n\n    let ret = temp || asSelectable(schema.getObject(name)).selection;\n    ret = mapColumns(name.name, ret, name.columnNames, false);\n\n    if (name.alias) {\n        ret = ret.setAlias(name.alias);\n    }\n    return ret;\n}\n\nfunction mapColumns(tableName: string, sel: _ISelection, columnNames: Name[] | nil, appendNonMapped: boolean) {\n    if (!columnNames?.length) {\n        return sel;\n    }\n    if (columnNames.length > sel.columns.length) {\n        throw new QueryError(`table \"${tableName}\" has ${sel.columns.length} columns available but ${columnNames.length} columns specified`, '42P10')\n    }\n\n    const mapped = new Set<string>(columnNames.map(x => x.name));\n    const cols = sel.columns.map<SelectedColumn>((col, i) => ({\n        expr: {\n            type: 'ref',\n            name: col.id!,\n        },\n        // when realiasing table columns, columns which have not been mapped\n        //  must not be removed\n        // see ut \"can map column names\"\n        alias: columnNames[i]\n            ?? {\n            name: mapped.has(sel.columns[i].id!)\n                ? `${sel.columns[i].id!}1`\n                : sel.columns[i].id!,\n        },\n    }));\n\n    return sel.select(\n        cols\n    )\n}\n\n\nexport class SelectExec implements _IStatementExecutor {\n    readonly selection: _ISelection;\n\n    constructor(private statement: _IStatement, private p: WithStatementBinding) {\n        // a bit of a special case for top level withs.\n        this.selection = p.type === 'with' ? buildWith(p, true) : buildWithable(p);\n    }\n\n    get schema() {\n        return this.statement.schema;\n    }\n\n\n\n    execute(t: _Transaction): StatementResult {\n        const rows = cleanResults([...this.selection.enumerate(t)]);\n        let unnamedFields = 0;\n        const nextDefaultFieldName = () => {\n            const unnamedField = `column${unnamedFields || ''}`;\n            unnamedFields += 1;\n            return unnamedField;\n        }\n        return {\n            result: {\n                rows,\n                rowCount: t.getTransient(MutationDataSourceBase.affectedRows) ?? rows.length,\n                command: this.p.type.toUpperCase(),\n                fields: this.selection.columns.map(\n                    c => ({\n                        name: c.id ?? nextDefaultFieldName(),\n                        type: c.type.primary,\n                        [TYPE_SYMBOL]: c.type,\n                    })\n                ),\n                location: locOf(this.p),\n            },\n            state: t,\n        };\n    }\n}\n\nexport const TYPE_SYMBOL = Symbol('type');\n\n\nfunction checkReadonlyWithable(st: WithStatementBinding) {\n    switch (st.type) {\n        case 'delete':\n        case 'insert':\n        case 'update':\n            throw new NotSupported(`\"WITH\" nested statement with query type '${st.type}'`);\n    }\n    return st;\n}\n","module.exports = require(\"pgsql-ast-parser\");","import { IValue, _IIndex, _ISelection, _IType, _ISchema } from '../interfaces-private';\nimport { DataType, CastError, IType, QueryError, nil } from '../interfaces';\nimport { nullIsh } from '../utils';\nimport { Evaluator, Value } from '../evaluator';\nimport { parseArrayLiteral } from 'pgsql-ast-parser';\nimport { parseGeometricLiteral } from 'pgsql-ast-parser';\nimport { bufCompare, bufFromString, bufToString, TBuffer } from '../misc/buffer-node';\nimport { TypeBase } from './datatype-base';\nimport { BoxType, CircleType, LineType, LsegType, PathType, PointType, PolygonType } from './datatypes-geometric';\nimport { IntervalType } from './t-interval';\nimport { TimeType } from './t-time';\nimport { TimestampType } from './t-timestamp';\nimport { JSONBType } from './t-jsonb';\nimport { RegTypeImpl } from './t-regtype';\nimport { RegClassImpl } from './t-regclass';\nimport { RecordType } from './t-record';\nimport { INetType } from './t-inet';\nimport { buildCtx } from '../parser/context';\n\n\nclass UUIDtype extends TypeBase<string> {\n\n\n    get primary(): DataType {\n        return DataType.uuid;\n    }\n\n    doCanCast(to: _IType) {\n        switch (to.primary) {\n            case DataType.text:\n                return true;\n        }\n        return null;\n    }\n\n    doCast(value: Evaluator, to: _IType) {\n        switch (to.primary) {\n            case DataType.text:\n                return value;\n        }\n        throw new Error('Unexpected cast error');\n    }\n}\n\n\n\nclass NullType extends TypeBase<null> {\n\n    get primary(): DataType {\n        return DataType.null;\n    }\n\n    doCast(value: Evaluator<any>, to: _IType): Evaluator<any> {\n        return new Evaluator(to, null, 'null', null, null);\n    }\n\n    doCanCast(to: _IType): boolean {\n        return true;\n    }\n\n    doCanConvertImplicit() {\n        return true;\n    }\n\n    doEquals(a: any, b: any): boolean {\n        return false;\n    }\n\n    doGt(a: any, b: any): boolean {\n        return false;\n    }\n\n    doLt(a: any, b: any): boolean {\n        return false;\n    }\n\n    doPrefer(type: _IType) {\n        return type; // always prefer notnull types\n    }\n}\n\nexport class DefaultType extends NullType {\n}\n\nexport const integers: ReadonlySet<DataType> = new Set([DataType.integer, DataType.bigint]);\nexport const floats: ReadonlySet<DataType> = new Set([DataType.decimal, DataType.float]);\nexport const numbers: ReadonlySet<DataType> = new Set([...integers, ...floats]);\nexport const numberPriorities = [DataType.integer, DataType.bigint, DataType.decimal, DataType.float]\n    .reduce<Record<DataType, number>>((a, x, i) => ({\n        ...a,\n        [x]: i\n    }), {} as Record<DataType, number>);\n\nexport function isNumeric(t: DataType | IType) {\n    const type = typeof t === 'string' ? t : t.primary;\n    return numbers.has(type);\n}\nexport function isInteger(t: DataType | IType) {\n    const type = typeof t === 'string' ? t : t.primary;\n    return integers.has(type);\n}\n\nclass NumberType extends TypeBase<number> {\n\n    constructor(readonly primary: DataType) {\n        super();\n    }\n\n    doCanConvertImplicit(to: _IType) {\n        switch (to.primary) {\n            case DataType.integer:\n            case DataType.bigint:\n            case DataType.float:\n            case DataType.decimal:\n            case DataType.regtype:\n            case DataType.regclass:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    doPrefer(type: _IType): _IType | null {\n        switch (type.primary) {\n            case DataType.integer:\n            case DataType.bigint:\n                return this;\n            case DataType.float:\n            case DataType.decimal:\n                return type;\n        }\n        return null;\n    }\n\n    doCanCast(to: _IType) {\n        switch (to.primary) {\n            case DataType.integer:\n            case DataType.bigint:\n            case DataType.float:\n            case DataType.decimal:\n            case DataType.regtype:\n            case DataType.regclass:\n                return true;\n            case DataType.text:\n                return true;\n            default:\n                return false;\n        }\n    }\n    doCast(value: Evaluator<any>, to: _IType): Evaluator<any> {\n        if (!integers.has(value.type.primary) && integers.has(to.primary)) {\n            return new Evaluator(\n                to\n                , value.id\n                , value.hash\n                , value\n                , (raw, t) => {\n                    const got = value.get(raw, t);\n                    return typeof got === 'number'\n                        ? Math.round(got)\n                        : got;\n                }\n            );\n        }\n        const { schema } = buildCtx();\n        switch (to.primary) {\n            case DataType.regtype:\n                return value\n                    .setType(Types.regtype)\n                    .setConversion((int: number) => {\n                        const got = schema.getType(int, { nullIfNotFound: true });\n                        if (!got) {\n                            throw new CastError(DataType.integer, DataType.regtype);\n                        }\n                        return got.name;\n                    }\n                        , intToRegType => ({ intToRegType }));\n            case DataType.regclass:\n                return value\n                    .setType(Types.regclass)\n                    .setConversion((int: number) => {\n                        // === int -> regclass\n                        const obj = schema.getObjectByRegOrName(int, { nullIfNotFound: true });\n                        return obj?.reg.classId ?? int;\n                    }\n                        , intToRegClass => ({ intToRegClass }));\n            case DataType.text:\n                return value\n                    .setType(to)\n                    .setConversion((int: number) => int.toString()\n                        , toTxt => ({ toTxt }));\n        }\n        return value.setType(to);\n    }\n}\n\n\n\nclass ByteArrayType extends TypeBase<TBuffer> {\n\n    get primary(): DataType {\n        return DataType.bytea;\n    }\n\n\n    doCanCast(to: _IType) {\n        switch (to.primary) {\n            case DataType.text:\n                return true;\n        }\n        return null;\n    }\n\n    doCast(value: Evaluator, to: _IType) {\n        switch (to.primary) {\n            case DataType.text:\n                return value\n                    .setConversion(raw => bufToString(raw)\n                        , toStr => ({ toStr }));\n        }\n        throw new Error('Unexpected cast error');\n    }\n\n    doEquals(a: TBuffer, b: TBuffer): boolean {\n        return bufCompare(a, b) === 0;\n    }\n\n    doGt(a: TBuffer, b: TBuffer): boolean {\n        return bufCompare(a, b) > 0;\n    }\n\n    doLt(a: TBuffer, b: TBuffer): boolean {\n        return bufCompare(a, b) < 0;\n    }\n}\n\n\nclass TextType extends TypeBase<string> {\n\n    get name(): string {\n        if (this.citext) {\n            return 'citext';\n        }\n        return this.len ? 'character varying' : 'text';\n    }\n\n    get primary(): DataType {\n        return this.citext\n            ? DataType.citext\n            : DataType.text;\n    }\n\n    constructor(readonly len: number | null, private citext?: boolean) {\n        super();\n    }\n\n    doPrefer(to: _IType) {\n        if (to instanceof TextType) {\n            // returns the broader type\n            if (!to.len) {\n                return to;\n            }\n            if (!this.len) {\n                return this;\n            }\n            return to.len > this.len ? to : this;\n        }\n        if (this.canCast(to)) {\n            return to;\n        }\n        return null;\n    }\n\n    doCanConvertImplicit(to: _IType): boolean {\n        // text is implicitely convertible to dates\n        switch (to.primary) {\n            case DataType.text:\n            case DataType.bool:\n            case DataType.uuid:\n            case DataType.bytea:\n                return true;\n        }\n        return false;\n    }\n\n    doCanCast(to: _IType): boolean | nil {\n        switch (to.primary) {\n            case DataType.text:\n            case DataType.citext:\n                return true;\n            case DataType.text:\n            case DataType.uuid:\n                return true;\n            case DataType.bool:\n                return true;\n            case DataType.array:\n                return this.canCast((to as ArrayType).of);\n            case DataType.bytea:\n                return true;\n        }\n        if (numbers.has(to.primary)) {\n            return true;\n        }\n        if (isGeometric(to.primary)) {\n            return true;\n        }\n        return undefined;\n    }\n\n    doCast(value: Evaluator<string>, to: _IType) {\n        switch (to.primary) {\n            case DataType.citext:\n                return value.setType(to);\n            case DataType.bool:\n                return value\n                    .setConversion(rawStr => {\n                        if (nullIsh(rawStr)) {\n                            return null;\n                        }\n                        if (rawStr === '0') {\n                            return false;\n                        } else if (rawStr === '1') {\n                            return true;\n                        }\n                        const str = (rawStr as string).toLowerCase();\n                        if ('true'.startsWith(str)) {\n                            return true;\n                        } else if ('false'.startsWith(str)) {\n                            return false;\n                        }\n                        if ('yes'.startsWith(str)) {\n                            return true;\n                        } else if ('no'.startsWith(str)) {\n                            return false;\n                        }\n                        throw new CastError(DataType.text, DataType.bool, 'string ' + rawStr);\n                    }\n                        , toBool => ({ toBool }));\n            case DataType.uuid:\n                return value\n                    .setConversion((_rawStr: string) => {\n                        let rawStr = _rawStr;\n                        if (nullIsh(rawStr)) {\n                            return null;\n                        }\n                        // check schema\n                        if (rawStr[0] === '{') {\n                            if (rawStr[rawStr.length - 1] !== '}') {\n                                throw new CastError(DataType.text, DataType.uuid, 'string: ' + JSON.stringify(_rawStr));\n                            }\n                            rawStr = rawStr.substr(1, rawStr.length - 2);\n                        }\n                        rawStr = rawStr.toLowerCase();\n                        const [full, a, b, c, d, e] = /^([0-9a-f]{8})-?([0-9a-f]{4})-?([0-9a-f]{4})-?([0-9a-f]{4})-?([0-9a-f]{12})$/.exec(rawStr) ?? [];\n                        if (!full) {\n                            throw new CastError(DataType.text, DataType.uuid, 'string: ' + JSON.stringify(_rawStr));\n                        }\n                        return `${a}-${b}-${c}-${d}-${e}`;\n                    }\n                        , toUuid => ({ toUuid }));\n            case DataType.text:\n                const fromStr = to as TextType;\n                const toStr = to as TextType;\n                if (toStr.len === null || (fromStr.len ?? -1) < toStr.len) {\n                    // no need to truncate\n                    return value;\n                }\n                return value\n                    .setConversion(str => {\n                        if (str && str.length > toStr.len!) {\n                            throw new QueryError(`value too long for type character varying(${toStr.len})`);\n                        }\n                        return str;\n                    }\n                        , truncate => ({ truncate, len: toStr.len }));\n\n            case DataType.array:\n                return value\n                    .setType(to)\n                    .setConversion((str: string) => {\n                        const array = parseArrayLiteral(str);\n                        (to as ArrayType).convertLiteral(array);\n                        return array;\n                    }\n                        , parseArray => ({ parseArray }));\n            case DataType.bytea:\n                return value\n                    .setConversion(str => {\n                        return bufFromString(str);\n                    }\n                        , toBytea => ({ toBytea }));\n\n        }\n        if (numbers.has(to.primary)) {\n            const isInt = integers.has(to.primary);\n            return value\n                .setConversion(str => {\n                    const val = Number.parseFloat(str);\n                    if (!Number.isFinite(val)) {\n                        throw new QueryError(`invalid input syntax for ${to.primary}: ${str}`);\n                    }\n                    if (isInt && Math.floor(val) !== val) {\n                        throw new QueryError(`invalid input syntax for ${to.primary}: ${str}`)\n                    }\n                    return val;\n                }\n                    , castNum => ({ castNum, to: to.primary }));\n        }\n        if (isGeometric(to.primary)) {\n            return value\n                .setConversion(str => {\n                    const ret = parseGeometricLiteral(str, to.primary as any);\n                    return ret;\n                }\n                    , castGeo => ({ castGeo, to: to.primary }));\n        }\n        return undefined;\n    }\n\n    doEquals(a: string, b: string) {\n        if (this.citext) {\n            return a.localeCompare(b, undefined, { sensitivity: 'accent' }) === 0;\n        }\n\n        return super.doEquals(a, b);\n    }\n}\n\n\n\nclass BoolType extends TypeBase<boolean> {\n    get primary(): DataType {\n        return DataType.bool;\n    }\n\n    doCanCast(to: _IType): boolean | nil {\n        switch (to.primary) {\n            case DataType.text:\n            case DataType.citext:\n            case DataType.bool:\n            case DataType.integer:\n                return true;\n        }\n        return false;\n    }\n\n    doCast(value: Evaluator, to: _IType) {\n        switch (to.primary) {\n            case DataType.text:\n            case DataType.citext:\n                return new Evaluator(\n                  to\n                  , value.id\n                  , value.hash!\n                  , value\n                  , (raw, t) => {\n                      const got = value.get(raw, t);\n                      return got ? 'true' : 'false';\n                  });\n            case DataType.bool:\n                return value;\n            case DataType.integer:\n                return new Evaluator(\n                  to\n                  , value.id\n                  , value.hash!\n                  , value\n                  , (raw, t) => {\n                      const got = value.get(raw, t);\n                      return got ? 1 : 0;\n                  });\n        }\n        throw new Error('Unexpected cast error');\n    }\n}\n\nexport class ArrayType extends TypeBase<any[]> {\n\n    public static matches(type: IType): type is ArrayType {\n        return type.primary === DataType.array;\n    }\n\n    get primary(): DataType {\n        if (this.list) {\n            return DataType.list;\n        }\n        return DataType.array;\n    }\n\n    get name(): string {\n        return this.of.name + '[]';\n    }\n\n\n    constructor(readonly of: _IType, private list: boolean) {\n        super();\n    }\n\n    doCanCast(to: _IType) {\n        if (to instanceof ArrayType) {\n            return this.of.canCast(to.of);\n        }\n        return this.of.canCast(to);\n    }\n\n    doCast(value: Evaluator, _to: _IType) {\n        if (_to instanceof ArrayType) {\n\n            const to = _to as ArrayType;\n            const valueType = value.type as ArrayType;\n            return new Evaluator(\n                to\n                , value.id\n                , value.hash!\n                , value\n                , (raw, t) => {\n                    const arr = value.get(raw, t) as any[];\n                    return arr.map(x => Value.constant(valueType.of, x).cast(to.of).get(raw, t));\n                });\n        }\n        if (_to.primary === DataType.text) {\n            return this.toText(_to, value);\n        }\n        return this.toSingleColumn(_to, value);\n    }\n\n    toText(to: _IType, value: Evaluator) {\n        const valueType = value.type as ArrayType;\n        const converter = Value.converter(valueType.of, Types.text());\n        return new Evaluator(\n            to\n            , value.id\n            , value.hash!\n            , value\n            , (raw, t) => {\n                const arr = value.get(raw, t) as any[];\n                const strs = arr.map(x => converter(x, t));\n                const data = strs.join(',');\n                return this.list\n                    ? '(' + data + ')'\n                    : '{' + data + '}';\n            }, { forceNotConstant: true });\n    }\n\n    toSingleColumn(to: _IType, value: Evaluator) {\n        const valueType = value.type as ArrayType;\n        const converter = Value.converter(valueType.of, to);\n        return new Evaluator(\n            to\n            , value.id\n            , value.hash!\n            , value\n            , (raw, t) => {\n                const arr = value.get(raw, t) as any[];\n                return converter(arr[0], t);\n            }, { forceNotConstant: true });\n    }\n\n    doEquals(a: any[], b: any[]): boolean {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (!this.of.equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    doGt(a: any[], b: any[]): boolean {\n        const len = Math.min(a.length, b.length);\n        for (let i = 0; i < len; i++) {\n            if (this.of.gt(a[i], b[i])) {\n                return true;\n            }\n        }\n        return a.length > b.length;\n    }\n\n    doLt(a: any[], b: any[]): boolean {\n        const len = Math.min(a.length, b.length);\n        for (let i = 0; i < len; i++) {\n            if (this.of.lt(a[i], b[i])) {\n                return true;\n            }\n        }\n        return a.length < b.length;\n    }\n\n    convertLiteral(elts: any) {\n        if (nullIsh(elts)) {\n            return;\n        }\n        if (!Array.isArray(elts)) {\n            throw new QueryError('Array depth mismatch: was expecting an array item.');\n        }\n        if (this.of instanceof ArrayType) {\n            for (let i = 0; i < elts.length; i++) {\n                this.of.convertLiteral(elts[i]);\n            }\n        } else {\n            for (let i = 0; i < elts.length; i++) {\n                if (Array.isArray(elts[i])) {\n                    throw new QueryError('Array depth mismatch: was not expecting an array item.');\n                }\n                elts[i] = Value.text(elts[i])\n                    .cast(this.of)\n                    .get();\n            }\n        }\n        return elts;\n    }\n}\n\nexport interface RecordCol {\n    readonly name: string;\n    readonly type: _IType;\n}\n\n/** Basic types */\nexport const Types = {\n    [DataType.record]: (columns: RecordCol[]) => new RecordType(columns) as _IType,\n    [DataType.bool]: new BoolType() as _IType,\n    [DataType.text]: (len: number | nil = null) => makeText(len) as _IType,\n    [DataType.citext]: new TextType(null, true),\n    [DataType.timestamp]: (len: number | nil = null) => makeTimestamp(DataType.timestamp, len) as _IType,\n    [DataType.timestamptz]: (len: number | nil = null) => makeTimestamp(DataType.timestamptz, len) as _IType,\n    [DataType.uuid]: new UUIDtype() as _IType,\n    [DataType.date]: new TimestampType(DataType.date) as _IType,\n    [DataType.interval]: new IntervalType() as _IType,\n    [DataType.time]: new TimeType(DataType.time) as _IType,\n    [DataType.timetz]: new TimeType(DataType.timetz) as _IType,\n    [DataType.jsonb]: new JSONBType(DataType.jsonb) as _IType,\n    [DataType.regtype]: new RegTypeImpl() as _IType,\n    [DataType.regclass]: new RegClassImpl() as _IType,\n    [DataType.json]: new JSONBType(DataType.json) as _IType,\n    [DataType.null]: new NullType() as _IType,\n    [DataType.float]: new NumberType(DataType.float) as _IType,\n    [DataType.integer]: new NumberType(DataType.integer) as _IType,\n    [DataType.bigint]: new NumberType(DataType.bigint) as _IType,\n    [DataType.bytea]: new ByteArrayType() as _IType,\n    [DataType.point]: new PointType() as _IType,\n    [DataType.line]: new LineType() as _IType,\n    [DataType.lseg]: new LsegType() as _IType,\n    [DataType.box]: new BoxType() as _IType,\n    [DataType.inet]: new INetType() as _IType,\n    [DataType.path]: new PathType() as _IType,\n    [DataType.polygon]: new PolygonType() as _IType,\n    [DataType.circle]: new CircleType() as _IType,\n    default: new DefaultType() as _IType,\n}\n\nexport const dateTypes: ReadonlySet<DataType> = new Set([\n    DataType.timestamp\n    , DataType.timestamptz\n    , DataType.date\n    , DataType.time\n]);\n\nexport function isDateType(_type: _IType | DataType) {\n    const t = typeof _type === 'string' ? _type : _type.primary;\n    return dateTypes.has(t);\n}\n\nexport function isGeometric(dt: DataType) {\n    switch (dt) {\n        case DataType.point:\n        case DataType.line:\n        case DataType.lseg:\n        case DataType.box:\n        case DataType.path:\n        case DataType.polygon:\n        case DataType.circle:\n            return true;\n    }\n    return false;\n}\n\nconst texts = new Map<number | null, _IType>();\nfunction makeText(len: number | nil = null) {\n    len = len ?? null;\n    let got = texts.get(len);\n    if (!got) {\n        texts.set(len, got = new TextType(len));\n    }\n    return got;\n}\n\nconst timestamps = new Map<string, _IType>();\nfunction makeTimestamp(primary: DataType, len: number | nil = null) {\n    len = len ?? null;\n    const key = primary + '/' + len;\n    let got = timestamps.get(key);\n    if (!got) {\n        timestamps.set(key, got = new TimestampType(primary, len));\n    }\n    return got;\n}\n\n\n\n\n\n\n\nexport const typeSynonyms: { [key: string]: DataType | { type: DataType; ignoreConfig: boolean } } = {\n    'varchar': DataType.text,\n    'char': DataType.text,\n    'character': DataType.text,\n    'character varying': DataType.text,\n\n    'int': DataType.integer,\n    'int4': DataType.integer,\n    'serial': DataType.integer,\n    'bigserial': DataType.integer,\n    'smallserial': DataType.integer,\n    'smallint': DataType.integer,\n    'bigint': DataType.integer,\n    'oid': DataType.integer,\n\n    'decimal': DataType.float,\n    'float': DataType.float,\n    'double precision': DataType.float,\n    'numeric': { type: DataType.float, ignoreConfig: true },\n    'real': DataType.float,\n    'money': DataType.float,\n\n    'timestamp with time zone': DataType.timestamptz,\n    'timestamp without time zone': DataType.timestamp,\n\n    'boolean': DataType.bool,\n\n    'time with time zone': DataType.timetz,\n    'time without time zone': DataType.time,\n}\n\n\n/** Finds a common type by implicit conversion */\nexport function reconciliateTypes(values: IValue[], nullIfNoMatch?: false): _IType;\nexport function reconciliateTypes(values: IValue[], nullIfNoMatch: true): _IType | nil;\nexport function reconciliateTypes(values: IValue[], nullIfNoMatch?: boolean): _IType | nil\nexport function reconciliateTypes(values: IValue[], nullIfNoMatch?: boolean): _IType | nil {\n    // FROM  https://www.postgresql.org/docs/current/typeconv-union-case.html\n\n    const nonNull = values\n        .filter(x => x.type.primary !== DataType.null);\n\n    if (!nonNull.length) {\n        // If all inputs are of type unknown, resolve as type text (the preferred type of the string category). Otherwise, unknown inputs are ignored for the purposes of the remaining rules.\n        return Types.text();\n    }\n\n    // If all inputs are of the same type, and it is not unknown, resolve as that type.\n    const single = new Set(nonNull\n        .map(v => v.type.reg.typeId));\n    if (single.size === 1) {\n        return nonNull[0].type;\n    }\n\n    return reconciliateTypesRaw(nonNull, nullIfNoMatch);\n}\n\n\n\n/** Finds a common type by implicit conversion */\nfunction reconciliateTypesRaw(values: IValue[], nullIfNoMatch?: false): _IType;\nfunction reconciliateTypesRaw(values: IValue[], nullIfNoMatch: true): _IType | nil;\nfunction reconciliateTypesRaw(values: IValue[], nullIfNoMatch?: boolean): _IType | nil\nfunction reconciliateTypesRaw(values: IValue[], nullIfNoMatch?: boolean): _IType | nil {\n    // find the matching type among non constants\n    const foundType = values\n        .reduce((final, c) => {\n            if (c.type === Types.null) {\n                return final;\n            }\n            const pref = final.prefer(c.type);\n            if (!pref) {\n                throw new CastError(c.type.primary, final.primary, c.id ?? undefined);\n            }\n            return pref;\n        }, Types.null);\n\n    // check that all constant literals are matching this.\n    for (const x of values) {\n        if (!x.isConstantLiteral && !x.type.canConvertImplicit(foundType)) {\n            if (nullIfNoMatch) {\n                return null;\n            }\n            throw new CastError(x.type.primary, foundType.primary);\n        }\n    }\n\n    return foundType;\n}\n","module.exports = require(\"object-hash\");","module.exports = require(\"immutable\");","module.exports = require(\"moment\");","import { nullIsh } from '../utils';\n\nexport const JSON_NIL = Symbol('null');\nexport const IS_PARTIAL_INDEXING = Symbol('partial_indexing');\nexport const SELECT_ALL = Symbol('select *');\n\n\nexport function cleanResults(results: any[]): any {\n    // ugly hack to turn jsonb nulls & partial indexed results into actual nulls\n    // This will bite me someday ... but please dont judge me, I too try to have a life outside here 🤔\n    // The sane thing to do would be to refactor things & introduce a DBNULL value in pgmem\n    //   since the need of such DBNULL value could arise somehow on another type\n    //   see:\n    //   - `can select jsonb null` test in nulls.spec.ts\n    //   - `executes array multiple index incomplete indexing` test in operators.queries.spec.ts\n\n    function cleanObj(obj: any) {\n        if (!obj || typeof obj !== 'object') {\n            return;\n        }\n        for (const [k, v] of Object.entries(obj)) {\n            if (v === JSON_NIL) {\n                obj[k] = null;\n            } else if (Array.isArray(v)) {\n                if ((v as any)[IS_PARTIAL_INDEXING]) {\n                    obj[k] = null;\n                } else {\n                    for (let i = 0; i < v.length; i++) {\n                        if (obj[i] === JSON_NIL) {\n                            obj[i] = null;\n                        } else {\n                            cleanObj(v);\n                        }\n                    }\n                }\n            } else {\n                cleanObj(v);\n            }\n        }\n    }\n\n    for (let i = 0; i < results.length; i++) {\n        const sel = results[i][SELECT_ALL];\n        if (sel) {\n            results[i] = sel();\n        }\n        cleanObj(results[i]);\n    }\n    return results;\n}","import { DataType, getId, nil, QueryError, _IType, _ISelection, _Transaction, setId } from '../interfaces-private';\nimport { TypeBase } from './datatype-base';\nimport { RecordCol } from './datatypes';\nimport { Evaluator } from '../evaluator';\n\nexport class RecordType extends TypeBase<any> {\n\n\n    public static matches(type: _IType): type is RecordType {\n        return type.primary === DataType.record;\n    }\n\n    constructor(readonly columns: readonly RecordCol[]) {\n        super();\n    }\n\n    get primary(): DataType {\n        return DataType.record;\n    }\n\n    doEquals(a: any, b: any): boolean {\n        return getId(a) === getId(b);\n    }\n\n    public static from(selection: _ISelection): RecordType {\n        const recordCols = selection.columns\n            .filter(c => !!c.id)\n            .map<RecordCol>(x => ({ name: x.id!, type: x.type }));\n        return new RecordType(recordCols);\n    }\n\n    /** Build a function that will transform a record of this type to a record of the target type  */\n    transformItemFrom(source: _ISelection): ((raw: any, t: _Transaction, execId: string) => any) | null {\n        if (source.columns.length !== this.columns.length) {\n            return null;\n        }\n        const setters: ((oldItem: any, newItem: any, t: _Transaction) => any)[] = [];\n        for (let i = 0; i < this.columns.length; i++) {\n            const to = this.columns[i];\n            const from = source.columns[i];\n            if (!from.type.canConvertImplicit(to.type)) {\n                return null;\n            }\n            const casted = from.cast(to.type);\n            setters.push((old, neu, t) => neu[to.name] = casted.get(old, t));\n        }\n\n        return (raw: any, t, execId) => {\n            const ret = {};\n            // alter the items id, so each execution will have a different id\n            setId(ret, execId + getId(raw));\n            for (const s of setters) {\n                s(raw, ret, t);\n            }\n            return ret;\n        };\n    }\n\n    doCanCast(to: _IType): boolean | nil {\n        // lets say that any type can cast to a record with no columns\n        // this is a hack ... see row_to_json() UT\n        return to instanceof RecordType && !to.columns.length;\n    }\n\n    doCast(value: Evaluator<any>, to: _IType): Evaluator<any> | nil {\n        return value;\n    }\n}\n","import { DataSourceBase } from '../../transforms/transform-base';\nimport { ArrayFilter } from '../../transforms/array-filter';\nimport { cleanResults } from '../clean-results';\nimport { _ISelection, _ISchema, _ITable, _Transaction, IValue, _IIndex, _Explainer, _IStatement, QueryError, _Column } from '../../interfaces-private';\nimport { InsertStatement, UpdateStatement, DeleteStatement, SetStatement, ExprRef } from 'pgsql-ast-parser';\nimport { buildSelection } from '../../transforms/selection';\nimport { MemoryTable } from '../../table';\nimport { buildValue } from '../../parser/expression-builder';\nimport { withSelection, buildCtx } from '../../parser/context';\nimport { colToStr } from '../../utils';\n\ntype MutationStatement = InsertStatement | UpdateStatement | DeleteStatement;\n\n\nexport abstract class MutationDataSourceBase<T> extends DataSourceBase<T> {\n    public static readonly affectedRows = Symbol('affectedRows');\n\n    /** Perform the mutation, and returns the affected elements */\n    protected abstract performMutation(t: _Transaction): T[];\n\n    private returningRows?: ArrayFilter;\n    private returning?: _ISelection;\n    private mutationResult = Symbol('mutationResult');\n\n    get isExecutionWithNoResult(): boolean {\n        return !this.returning;\n    }\n\n    isAggregation() {\n        return false;\n    }\n\n    get columns() {\n        return this.returning?.columns ?? [];\n    }\n\n    constructor(protected table: _ITable, protected mutatedSel: _ISelection, p: MutationStatement) {\n        super(table.ownerSchema);\n\n        // prepare \"returning\" statement\n        if (p.returning) {\n            this.returningRows = new ArrayFilter(this.mutatedSel, [])\n            this.returning = buildSelection(this.returningRows, p.returning);\n        }\n\n        const { onFinishExecution } = buildCtx();\n        // force execution if it has not yet been executed once the current statement finishes its execution.\n        // see \"only inserts once with statement is executed\" test\n        onFinishExecution(t => {\n            this._doExecuteOnce(t);\n        });\n    }\n\n    private _doExecuteOnce(t: _Transaction): any[] {\n        // check if this mutation has already been executed in the statement being executed\n        // and get the result from cache to avoid re-excuting it\n        // see unit test \"can use delete result multiple times in select\"\n        let affected = t.getTransient<T[]>(this.mutationResult);\n        if (!affected) {\n            // execute mutation if nescessary\n            affected = this.performMutation(t);\n            t.setTransient(this.mutationResult, affected);\n        }\n\n\n        // set the result count\n        t.setTransient(MutationDataSourceBase.affectedRows, affected.length);\n        return affected;\n    }\n\n    *enumerate(t: _Transaction): Iterable<any> {\n\n        const affected = this._doExecuteOnce(t);\n\n        if (!this.returning) {\n            return;\n        }\n\n        // handle \"returning\" statement\n        try {\n            cleanResults(affected);\n            this.returningRows!.rows = affected;\n            yield* this.returning.enumerate(t);\n        } finally {\n            this.returningRows!.rows = []\n        }\n    }\n\n    entropy(t: _Transaction): number {\n        // To ensure that a muation will always be prioritary\n        //  on a join, then just return 0.\n        return 0;\n    }\n\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean | undefined): IValue<any> {\n        if (!this.returning) {\n            throw new Error(`Cannot get column \"${colToStr(column)}\" from a mutation that has no returning statement`);\n        }\n        return this.returning.getColumn(column, nullIfNotFound)!;\n    }\n\n    hasItem(value: any, t: _Transaction): boolean {\n        throw new Error('To fix: Joins cannot call hasItem on a mutation');\n    }\n\n    getIndex(forValue: IValue<any>): _IIndex<any> | null | undefined {\n        return null;\n    }\n\n    explain(e: _Explainer): never {\n        throw new Error('not implemented');\n    }\n\n    isOriginOf(a: IValue<any>): boolean {\n        return !!this.returning && a.origin === this.returning;\n    }\n\n    stats(t: _Transaction): null {\n        return null;\n    }\n}\n\n\nexport type Setter = (t: _Transaction, target: any, source: any) => void;\nexport function createSetter(this: void, setTable: _ITable, setSelection: _ISelection, _sets: SetStatement[]): Setter {\n    return withSelection(setSelection, () => {\n        const alreadySet = new Set<_Column>();\n        const sets = _sets.map(x => {\n            const col = (setTable as MemoryTable).getColumnRef(x.column.name);\n            if (alreadySet.has(col)) {\n                throw new QueryError(` multiple assignments to same column \"${col.name}\"`, '42601');\n            }\n            alreadySet.add(col);\n            return {\n                col,\n                value: x.value,\n                getter: x.value.type !== 'default'\n                    ? buildValue(x.value).cast(col.expression.type)\n                    : null,\n            };\n        });\n\n        return (t: _Transaction, target: any, source: any) => {\n            for (const s of sets) {\n                if (s.value.type === 'default') {\n                    target[s.col.expression.id!] = s.col.default?.get() ?? undefined;\n                } else {\n                    target[s.col.expression.id!] = s.getter?.get(source, t) ?? null;\n                }\n            }\n        }\n    });\n}\n","export type TBuffer = Buffer;\n\n\nexport function bufToString(buf: TBuffer): string {\n    return buf?.toString('utf-8');\n}\n\nexport function bufCompare(a: TBuffer, b: TBuffer) {\n    return Buffer.compare(a, b);\n}\n\nexport function bufFromString(str: string) {\n    return Buffer.from(str);\n}\n\nexport function isBuf(v: any): v is TBuffer {\n    return Buffer.isBuffer(v);\n}\n\nexport function bufClone(buf: TBuffer): TBuffer {\n    const bufcopy = Buffer.alloc(buf.length);\n    buf.copy(bufcopy);\n    return bufcopy;\n}","module.exports = require(\"lru-cache\");","import { TransformBase } from './transform-base';\nimport { _ISelection, _Transaction, IValue, _IIndex, _Explainer, _SelectExplanation, _IType, IndexKey, _ITable, Stats, AggregationComputer, AggregationGroupComputer, setId, _IAggregation } from '../interfaces-private';\nimport { Expr, ExprRef, ExprCall } from 'pgsql-ast-parser';\nimport { buildValue } from '../parser/expression-builder';\nimport { nil, NotSupported } from '../interfaces';\nimport hash from 'object-hash';\nimport { Evaluator } from '../evaluator';\nimport { buildCount } from './aggregations/count';\nimport { buildMinMax } from './aggregations/max-min';\nimport { buildSum } from './aggregations/sum';\nimport { buildArrayAgg } from './aggregations/array_agg';\nimport { buildAvg } from './aggregations/avg';\nimport { Selection } from './selection';\nimport { buildCtx, withSelection } from '../parser/context';\nimport { buildJsonAgg } from './aggregations/json_aggs';\nimport { nullIsh } from '../utils';\nimport { buildBoolAgg } from './aggregations/bool-aggregs';\n\nexport const aggregationFunctions = new Set([\n    'array_agg',\n    'avg',\n    'bit_and',\n    'bit_or',\n    'bool_and',\n    'bool_or',\n    'count',\n    'every',\n    'json_agg',\n    'jsonb_agg',\n    'json_object_agg',\n    'jsonb_object_agg',\n    'max',\n    'min',\n    'string_agg',\n    'sum',\n    'xmlagg',\n])\n\nexport function buildGroupBy(on: _ISelection, groupBy: Expr[]) {\n    const agg = new Aggregation(on, groupBy);\n    return agg;\n}\n\nlet idCnt = 0;\n\nexport function getAggregator(): _IAggregation | null {\n    const on = buildCtx().selection;\n    if (!on) {\n        return null;\n    }\n    if (on.isAggregation()) {\n        return on;\n    }\n    if (!(on instanceof Selection)) {\n        return null;\n    }\n    if (!(on.base.isAggregation())) {\n        return null;\n    }\n    return on.base;\n}\n\ntype AggregItem = any;\n\ninterface AggregationInstance {\n    getter: IValue;\n    id: symbol;\n    computer: AggregationComputer;\n    distinct: IValue[] | nil;\n}\n\nfunction isIntegralType(value: any): boolean {\n    return typeof value === 'number' || typeof value === 'string' || value instanceof Date;\n}\n\nexport class Aggregation<T> extends TransformBase<T> implements _ISelection<T>, _IAggregation {\n\n    columns: readonly IValue<any>[];\n    /**\n     * Group-by values\n     * - key: column in source hash\n     * - value: column in this, evaluated against temporary entity.\n     **/\n    private readonly symbol = Symbol();\n    private readonly aggId = idCnt++;\n    private readonly groupIndex?: _IIndex<any> | nil;\n    private aggregations = new Map<string, AggregationInstance>();\n\n    /** How to get grouping values on the base table raw items (not on \"this.enumerate()\" raw items)  */\n    private groupingValuesOnbase: IValue[];\n\n    /** How to get the grouped values on \"this.enumerate()\" raw items output */\n    private groupByMapping = new Map<string, IValue>();\n\n    isAggregation() {\n        return true;\n    }\n\n    constructor(on: _ISelection, _groupedBy: Expr[]) {\n        super(on);\n\n\n        // === preassign columns that are reachable (grouped by)\n        this.groupingValuesOnbase = withSelection(on, () => _groupedBy.map(x => buildValue(x)));\n        for (let _i = 0; _i < this.groupingValuesOnbase.length; _i++) {\n            const i = _i;\n            const g = this.groupingValuesOnbase[i];\n            this.groupByMapping.set(g.hash!, new Evaluator(\n                g.type\n                , g.id\n                , g.hash!\n                , [g]\n                // keys are stored wrapped in a symbol (because not necessarily selected)\n                , v => v[this.symbol][i]\n            ));\n        }\n\n        // try to find an index matching our groupby clause\n        this.groupIndex = on.getIndex(...this.groupingValuesOnbase);\n        this.columns = [];\n    }\n\n    getColumn(column: string | ExprRef): IValue;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue<any> | nil {\n        return this.base.getColumn(column, nullIfNotFound);\n    }\n\n    checkIfIsKey(got: IValue<any>): IValue<any> {\n        return this.groupByMapping.get(got.hash!) ?? got;\n    }\n\n\n    entropy(t: _Transaction): number {\n        return this.groupByMapping.size || 1;\n    }\n\n    stats(): Stats | null {\n        // cannot be computed without iterating\n        return null;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        for (const item of this._enumerateAggregationKeys(t)) {\n            const sym = item[this.symbol];\n            setId(item, `agg_${this.aggId}_${hash(sym)}`)\n            yield item as any;\n        }\n    }\n\n    private _enumerateAggregationKeys(t: _Transaction): Iterable<AggregItem> {\n        // ===== try to compute directly (will only succeed when no grouping, and simple statements like count(*))\n        const ret = this.computeDirect(t);\n        if (ret) {\n            return [ret];\n        }\n\n        // ===== try to compute base on index\n        const fromIndex = this.iterateFromIndex(t);\n        if (fromIndex) {\n            return fromIndex;\n        }\n\n        // ==== seq-scan computation\n        return this.seqScan(t);\n    }\n\n    private iterateFromIndex(t: _Transaction): AggregItem[] | null {\n        if (!this.groupIndex) {\n            return null;\n        }\n        const aggs = [...this.aggregations.values()];\n        const allByGroup = !aggs.some(x => !x.computer.computeFromIndex);\n\n        if (!allByGroup) {\n            return null;\n        }\n\n        const indexKeys = this.groupIndex.iterateKeys(t);\n        if (!indexKeys) {\n            return null;\n        }\n\n        // iterate all index keys\n        const computed: AggregItem[] = []\n        for (const k of indexKeys) {\n            const ret: any = { [this.symbol]: k };\n            // try to compute from index\n            for (const agg of aggs) {\n                const val = agg.computer.computeFromIndex?.(k, this.groupIndex, t);\n                if (typeof val === 'undefined') {\n                    if (computed.length) {\n                        throw new Error('Compute from index has succeeded on an index key, but failed on another (which must not happen)');\n                    }\n                    return null;\n                }\n                ret[agg.id] = val;\n            }\n            computed.push(ret);\n        }\n        return computed;\n    }\n\n\n    private *seqScan(t: _Transaction): Iterable<AggregItem> {\n        const aggs = [...this.aggregations.values()];\n        const groups = new Map<string, {\n            key: IndexKey;\n            aggs: {\n                computer: AggregationGroupComputer;\n                distinctHash: Set<any>;\n                instance: AggregationInstance,\n            }[];\n        }>();\n\n        // === feed all items\n        for (const item of this.base.enumerate(t)) {\n            // get group-by values\n            const key: IndexKey = this.groupingValuesOnbase.map(g => g.get(item, t));\n\n            // add group if necessary\n            const groupingKey = hash(key);\n            let group = groups.get(groupingKey);\n            if (!group) {\n                groups.set(groupingKey, group = {\n                    key,\n                    aggs: aggs.map(x => ({\n                        computer: x.computer.createGroup(t),\n                        instance: x,\n                        distinctHash: new Set(),\n                    })),\n                });\n            }\n\n            // process aggregators in group\n            for (const g of group.aggs) {\n                if (!g.computer) {\n                    continue;\n                }\n                if (g.instance.distinct) {\n                    const distinctValues = g.instance.distinct.map(x => x.get(item, t));\n                    if (distinctValues.length === 1 && nullIsh(distinctValues[0])) {\n                        // ignore single nulls.\n                        continue;\n                    }\n                    let valuesHash: any;\n                    if (distinctValues.length === 1 && isIntegralType(distinctValues[0])) {\n                        // optimization to avoid hashing on objects supported by \"Set\"\n                        valuesHash = distinctValues[0];\n                    } else {\n                        valuesHash = hash(distinctValues);\n                    }\n                    if (g.distinctHash.has(valuesHash)) {\n                        continue;\n                    }\n                    g.distinctHash.add(valuesHash);\n                }\n                g.computer.feedItem(item);\n            }\n        }\n\n        // if this.base is empty, and this is not a group by...\n        //  👉 Must return a result.\n        //   ex:\n        //      - select max(a) from empty              👉 [{max: null}]\n        //      - select max(a) from empty group by id  👉 []\n        if (groups.size === 0 && !this.groupingValuesOnbase.length) {\n            const key: IndexKey = [];\n            const groupingKey = hash(key);\n            groups.set(groupingKey, {\n                key,\n                aggs: aggs.map(x => ({\n                    computer: x.computer.createGroup(t),\n                    instance: x,\n                    distinctHash: new Set(),\n                })),\n            });\n        }\n\n        // === return results\n        for (const g of groups.values()) {\n            const ret: AggregItem = {\n                // specify the grouping key\n                [this.symbol]: g.key\n            };\n\n            // fill aggregations values\n            for (const { instance: { id }, computer } of g.aggs) {\n                ret[id] = computer.finish() ?? null;\n            }\n            yield ret;\n        }\n    }\n\n    private computeDirect(t: _Transaction): AggregItem | null {\n        // When there is no grouping...\n        if (this.groupByMapping.size) {\n            return null;\n        }\n        // check if all selected aggregations can be computed directly (typically: count(*))\n        const aggs = [...this.aggregations.values()];\n        const allNoGroup = !aggs.some(x => !x.computer.computeNoGroup);\n        if (!allNoGroup) {\n            return null;\n        }\n        const ret: AggregItem = {\n            [this.symbol]: [],\n        };\n        for (const agg of this.aggregations.values()) {\n            const val = agg.computer.computeNoGroup?.(t);\n            if (typeof val === 'undefined') {\n                return null;\n            }\n            ret[agg.id] = val;\n        }\n        return ret;\n    }\n\n    getAggregation(name: string, call: ExprCall): IValue {\n        const hashed = hash(call);\n        const agg = this.aggregations.get(hashed);\n        if (agg) {\n            return agg.getter;\n        }\n        const got = this._getAggregation(name, call);\n\n        const id = Symbol(name);\n        const getter = new Evaluator(\n            got.type\n            , null\n            , hashed\n            , []\n            , raw => raw[id]\n            , {\n                forceNotConstant: true,\n            });\n\n        let distinct: IValue[] | null = null;\n        if (call.distinct === 'distinct') {\n            if (call.args.length === 1 && call.args[0].type === 'list') {\n                // hack in case we get a record-like thing - ex: select count(distinct (a,b))\n                // cf UT behaves nicely with nulls on multiple count\n                distinct = call.args[0].expressions.map(x => buildValue(x));\n            } else {\n                distinct = call.args.map(x => buildValue(x));\n            }\n        }\n\n        this.aggregations.set(hashed, {\n            id,\n            getter,\n            computer: got,\n            distinct,\n        });\n        return getter;\n    }\n\n    private _getAggregation(name: string, call: ExprCall): AggregationComputer {\n        switch (name) {\n            case 'count':\n                return buildCount(this.base, call);\n            case 'max':\n            case 'min':\n                return buildMinMax(this.base, call.args, name);\n            case 'sum':\n                return buildSum(this.base, call);\n            case 'array_agg':\n                return buildArrayAgg(this.base, call);\n            case 'avg':\n                return buildAvg(this.base, call);\n            case 'jsonb_agg':\n            case 'json_agg':\n                return buildJsonAgg(this.base, call, name);\n            case 'bool_and':\n            case 'bool_or':\n                return buildBoolAgg(this.base, call, name);\n            default:\n                throw new NotSupported('aggregation function ' + name);\n        }\n    }\n\n\n    hasItem(value: T, t: _Transaction): boolean {\n        return !!(value as any)[this.symbol];\n    }\n\n    getIndex(forValue: IValue<any>): _IIndex<any> | nil {\n        // there is no index on aggregations\n        return null;\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            _: 'aggregate',\n            id: e.idFor(this),\n            aggregator: null as any,\n        }\n    }\n\n}\n","import { _ISelection, IValue, _IIndex, _IDb, setId, getId, _Transaction, _ISchema, _SelectExplanation, _Explainer, IndexExpression, IndexOp, IndexKey, _IndexExplanation, Stats, _IAlias, TR, _IStatement } from '../interfaces-private';\nimport { buildBinaryValue, buildValue, uncache } from '../parser/expression-builder';\nimport { QueryError, ColumnNotFound, NotSupported, nil, DataType } from '../interfaces';\nimport { DataSourceBase, TransformBase } from './transform-base';\nimport { Expr, ExprRef, JoinClause, Name, SelectedColumn } from 'pgsql-ast-parser';\nimport { colToStr, nullIsh, SRecord } from '../utils';\nimport { Types } from '../datatypes';\nimport { SELECT_ALL } from '../execution/clean-results';\nimport { CustomAlias, Selection } from './selection';\nimport { withSelection, buildCtx } from '../parser/context';\n\nlet jCnt = 0;\n\ninterface JoinRaw<TLeft, TRight> {\n    '>restrictive': TLeft;\n    '>joined': TRight;\n}\ninterface JoinStrategy {\n    iterate: _ISelection;\n    iterateSide: 'joined' | 'restrictive';\n    joinIndex: _IIndex<any>;\n    onValue: IValue;\n    othersPredicate?: IValue<any>;\n}\n\ninterface Equality {\n    left: IValue;\n    right: IValue;\n    eq: IValue;\n}\n\nfunction* extractAnds(this: void, on: Expr): Iterable<Expr> {\n    if (on.type === 'binary' && on.op === 'AND') {\n        yield* extractAnds(on.left);\n        yield* extractAnds(on.right);\n        return;\n    }\n    yield on;\n}\n\nfunction chooseStrategy(this: void, t: _Transaction, strategies: JoinStrategy[]) {\n    strategies.sort((a, b) => a.iterate.entropy(t) > b.iterate.entropy(t) ? 1 : -1);\n    return strategies[0];\n}\n\nexport class JoinSelection<TLeft = any, TRight = any> extends DataSourceBase<JoinRaw<TLeft, TRight>> {\n\n    get isExecutionWithNoResult(): boolean {\n        return false;\n    }\n\n    private _columns: IValue<any>[] = [];\n    private seqScanExpression!: IValue<any>;\n    private joinId: number;\n    private columnsMappingParentToThis = new Map<IValue, IValue>();\n    // mapping of the left table columns mapped to the actual their inner value\n    private indexOnRestrictingTableByValue = new Map<IValue, _IIndex>();\n    private indexCache = new Map<IValue, _IIndex>();\n    strategies: JoinStrategy[] = [];\n    private building = false;\n    private ignoreDupes?: Set<IValue>;\n    private mergeSelect?: Selection;\n\n\n    isOriginOf(a: IValue<any>): boolean {\n        return this.joined.isOriginOf(a) || this.restrictive.isOriginOf(a);\n    }\n\n    get columns(): IValue<any>[] {\n        return this._columns;\n    }\n\n    entropy(t: _Transaction): number {\n        const strategy = chooseStrategy(t, this.strategies);\n        if (!strategy) {\n            // catastophic join... very high entropy...\n            return this.restrictive.entropy(t) * this.joined.entropy(t);\n        }\n\n        // todo: multiply that by the mean count per keys in strategy.joinIndex ?\n        const ret = strategy.iterate.entropy(t);\n        return ret;\n    }\n\n    constructor(readonly restrictive: _ISelection<TLeft>\n        , readonly joined: _ISelection<TRight>\n        , on: JoinClause\n        , readonly innerJoin: boolean) {\n        super(buildCtx().schema);\n\n\n        this.joinId = jCnt++;\n        for (const c of this.restrictive.listSelectableIdentities()) {\n            const nc = c.setWrapper(this, x => (x as any)['>restrictive']);\n            this.columnsMappingParentToThis.set(c, nc);\n            if (c.type.primary === DataType.record) {\n                continue;\n            }\n            this._columns.push(nc);\n            if (c.index) {\n                this.indexOnRestrictingTableByValue.set(nc, c.index);\n            }\n        }\n        for (const c of this.joined.listSelectableIdentities()) {\n            const nc = c.setWrapper(this, x => (x as any)['>joined']);\n            this.columnsMappingParentToThis.set(c, nc);\n            if (c.type.primary === DataType.record) {\n                continue;\n            }\n            this._columns.push(nc);\n        }\n\n        withSelection(this, () => {\n            if (on.on) {\n                this.fetchOnStrategies(on.on);\n            } else if (on.using?.length) {\n                this.fetchUsingStrategies(on.using);\n            } else {\n                throw new Error('Unspecified join ON clause');\n            }\n        });\n    }\n\n    private wrap(v: IValue) {\n        const ret = this.columnsMappingParentToThis.get(v);\n        if (!ret) {\n            throw new Error('Corrupted join (unknown column)');\n        }\n        return ret;\n    }\n\n    listSelectableIdentities(): Iterable<IValue> {\n        return this.columnsMappingParentToThis.values();\n    }\n\n    private fetchOnStrategies(_on: Expr) {\n        // build equalities eligible to a strategy\n        const ands: Equality[] = [];\n        const others: IValue[] = [];\n        for (const on of extractAnds(_on)) {\n            if (on.type !== 'binary' || on.op !== '=') {\n                // join 'ON' clause not compatible with an indexed strategy\n                others.push(buildValue(on));\n                continue;\n            }\n            this.building = true;\n            const left = buildValue(on.left);\n            const right = buildValue(on.right);\n            this.building = false;\n            // necessary because of the 'this.building' hack\n            uncache(this);\n            ands.push({\n                left,\n                right,\n                eq: buildValue(on),\n            });\n        }\n\n        // compute strategies\n        this.fetchAndStrategies(ands, others);\n\n\n        // build seq-scan expression\n        this.seqScanExpression = buildValue(_on).cast(Types.bool);\n    }\n\n    private fetchUsingStrategies(_using: Name[]) {\n        // build equalities eligible to a strategy\n        const ands = _using.map<Equality>(n => {\n            const left = this.restrictive.getColumn(n.name);\n            const right = this.joined.getColumn(n.name);\n            return {\n                left,\n                right,\n                eq: buildBinaryValue(\n                    this.wrap(left)\n                    , '='\n                    , this.wrap(right))\n            }\n        });\n        this.ignoreDupes = new Set(ands.map(x => this.wrap(x.left)));\n\n        // compute strategies\n        this.fetchAndStrategies(ands, []);\n\n        // build seq-scan expression\n        this.seqScanExpression = ands.slice(1)\n            .reduce((a, b) => buildBinaryValue(a, 'AND', b.eq), ands[0].eq);\n    }\n\n    private fetchAndStrategies(ands: Equality[], otherPredicates: IValue[]) {\n\n        for (let i = 0; i < ands.length; i++) {\n            const { left, right } = ands[i];\n            const strats = [...this.fetchEqStrategyOn(left, right)];\n            if (!strats.length) {\n                continue;\n            }\n            const others = [\n                ...ands.slice(0, i).map(x => x.eq),\n                ...ands.slice(i + 1).map(x => x.eq),\n                ...otherPredicates\n            ];\n            if (others.length) {\n                const and = others.slice(1)\n                    .reduce<IValue>((v, c) => buildBinaryValue(c, 'AND', v)\n                        , others[0]);\n                for (const s of strats) {\n                    s.othersPredicate = and;\n                }\n            }\n            this.strategies.push(...strats);\n        }\n    }\n\n    private *fetchEqStrategyOn(a: IValue, b: IValue): Iterable<JoinStrategy> {\n        let restrictedVal: IValue | undefined = undefined;\n        let joinedVal: IValue | undefined = undefined;\n\n        // const aIndex = a.wrappedOrigin?.getIndex()\n        if (this.restrictive.isOriginOf(a) && this.joined.isOriginOf(b)) {\n            restrictedVal = a;\n            joinedVal = b;\n        } else if (this.restrictive.isOriginOf(b) && this.joined.isOriginOf(a)) {\n            restrictedVal = b;\n            joinedVal = a;\n        }\n\n        let processInner = this.innerJoin;\n        let iterateSide: 'restrictive' | 'joined' = 'restrictive'\n        while (restrictedVal && joinedVal) {\n            // can always iterat on restricted value & use joined table foreign index\n            const jindex = joinedVal.index;\n            if (jindex && jindex.expressions.length === 1) {\n                yield {\n                    iterate: iterateSide === 'restrictive' ? this.restrictive : this.joined,\n                    iterateSide,\n                    onValue: restrictedVal,\n                    joinIndex: jindex,\n                }\n            }\n            if (!processInner) {\n                break;\n            }\n            // if is an inner join, then both sides can be interverted\n            processInner = false;\n            const t = restrictedVal;\n            restrictedVal = joinedVal;\n            joinedVal = t;\n            iterateSide = 'joined';\n        }\n    }\n\n    getColumn(column: string | ExprRef): IValue;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue<any> | nil {\n        let onLeft = this.restrictive.getColumn(column, true);\n        let onRight = this.joined.getColumn(column, true);\n        if (!onLeft && !onRight) {\n            if (nullIfNotFound) {\n                return null;\n            }\n            throw new ColumnNotFound(colToStr(column));\n        }\n        if (!!onLeft && !!onRight) {\n            throw new QueryError(`column reference \"${colToStr(column)}\" is ambiguous`);\n        }\n        const on = onLeft ?? onRight;\n        if (this.building) {\n            return on;\n        }\n        const mapped = this.columnsMappingParentToThis.get(on!);\n        if (mapped) {\n            return mapped;\n        }\n        throw new Error('Corrupted join');\n    }\n\n    stats(t: _Transaction): Stats | null {\n        return null;\n    }\n\n    *enumerate(t: _Transaction): Iterable<any> {\n        const strategy = chooseStrategy(t, this.strategies);\n        if (strategy) {\n            // choose the iterator that has less values\n            // find the right value using index\n            for (const l of strategy.iterate.enumerate(t)) {\n                yield* this.iterateStrategyItem(l, strategy, t);\n            }\n        } else {\n            // perform a seq scan\n            this.db.raiseGlobal('catastrophic-join-optimization');\n            const others = [...this.joined.enumerate(t)];\n            for (const l of this.restrictive.enumerate(t)) {\n                yield* this.iterateCatastrophicItem(l, others, 'restrictive', t);\n            }\n        }\n    }\n\n\n    selectAlias(alias: string): _IAlias | nil {\n        let onLeft = this.restrictive.selectAlias(alias);\n        let onRight = this.joined.selectAlias(alias);\n        if (!onLeft && !onRight) {\n            return null;\n        }\n        if (!!onLeft && !!onRight) {\n            throw new QueryError(`alias \"${alias}\" is ambiguous`);\n        }\n        return new JoinMapAlias(this, onLeft ?? onRight!, onLeft ? '>restrictive' : '>joined');\n    }\n\n    *iterateCatastrophicItem(item: any, others: any[], side: 'joined' | 'restrictive', t: _Transaction) {\n        const { template, buildItem } = this.builder(item, side);\n        let yielded = false;\n        for (const cr of others) {\n            const combined = buildItem(cr);\n            const result = this.seqScanExpression.get(combined, t);\n            if (result) {\n                yielded = true;\n                yield combined;\n            }\n        }\n        if (!this.innerJoin && !yielded) {\n            yield template;\n        }\n    }\n\n    private builder(item: any, side: 'joined' | 'restrictive') {\n\n        // if we're in an inner join, and the chosen strategy\n        // has inverted join order, then invert built items\n        let template: any;\n        let buildItem: (x: any) => any;\n        if (side === 'joined') {\n            buildItem = x => this.buildItem(x, item);\n            template = this.buildItem(null as any, item);\n        } else {\n            buildItem = x => this.buildItem(item, x);\n            template = this.buildItem(item, null as any);\n        }\n        return { buildItem, template };\n    }\n\n    *iterateStrategyItem(item: any, strategy: JoinStrategy, t: _Transaction) {\n\n        const { template, buildItem } = this.builder(item, strategy.iterateSide);\n\n        const joinValue = strategy.onValue.get(item, t);\n        let yielded = false;\n        if (!nullIsh(joinValue)) {\n            // get corresponding right value(s)\n            for (const o of strategy.joinIndex.enumerate({\n                type: 'eq',\n                key: [joinValue],\n                t,\n            })) {\n\n                // build item\n                const item = buildItem(o);\n\n                // check othre predicates (in case the join has an AND statement)\n                if (strategy.othersPredicate) {\n                    const others = strategy.othersPredicate.get(item, t);\n                    if (!others) {\n                        continue;\n                    }\n                }\n\n                // finally, yieldvalue\n                yielded = true;\n                yield item;\n            }\n        }\n\n        if (!this.innerJoin && !yielded) {\n            yield template;\n        }\n    }\n\n    buildItem(l: TLeft, r: TRight) {\n        const ret = {\n            '>joined': r,\n            '>restrictive': l,\n            [SELECT_ALL]: () => this.merge(ret),\n        }\n        setId(ret, `join${this.joinId}-${getId(l)}-${getId(r)}`);\n        return ret;\n    }\n\n    private merge(item: any) {\n        if (!this.mergeSelect) {\n            let sel = this.columns.map<CustomAlias>(val => ({ val }));\n            if (this.ignoreDupes) {\n                sel = sel.filter(t => !this.ignoreDupes?.has(t.val));\n            }\n            this.mergeSelect = new Selection(this, sel);\n        }\n\n        // nb: second argument is null... this is a hack : we KNOW it wont use the transaction.\n        const ret = this.mergeSelect.build(item, Symbol('hack') as any);\n        return ret;\n    }\n\n    hasItem(value: JoinRaw<TLeft, TRight>): boolean {\n        throw new NotSupported('lookups on joins');\n    }\n\n    getIndex(forValue: IValue<any>): _IIndex<any> | nil {\n        if (this.indexCache.has(forValue)) {\n            return this.indexCache.get(forValue);\n        }\n        // check if the restrictive table (left part) has an index\n        // cant use indexes on joined table (right part), see #306 unit test\n        // todo: filter using indexes of tables (index propagation)'\n        const mapped = this.indexOnRestrictingTableByValue.get(forValue);\n        if (!mapped) {\n            return null;\n        }\n        const ret = new JoinIndex(this, mapped);\n        this.indexCache.set(forValue, ret);\n        return ret;\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        const strategy = chooseStrategy(e.transaction, this.strategies);\n        return {\n            id: e.idFor(this),\n            _: 'join',\n            restrictive: this.restrictive.explain(e),\n            joined: this.joined.explain(e),\n            inner: this.innerJoin,\n            on: strategy ? {\n                iterate: e.idFor(strategy.iterate),\n                iterateSide: strategy.iterateSide,\n                joinIndex: strategy.joinIndex.explain(e),\n                matches: strategy.onValue.explain(e),\n                ...strategy.othersPredicate ? { filtered: true } : {},\n            } : {\n                seqScan: this.seqScanExpression.explain(e),\n            },\n        };\n    }\n}\n\n\nclass JoinMapAlias implements _IAlias {\n\n\n    constructor(private owner: JoinSelection, private target: _IAlias, private map: string) {\n    }\n\n    *listColumns(): Iterable<IValue<any>> {\n        for (const c of this.target.listColumns()) {\n            yield c.setWrapper(this.owner, x => (x as any)[this.map]);\n        }\n    }\n}\n\nexport class JoinIndex<T> implements _IIndex<T> {\n    constructor(readonly owner: JoinSelection<T>, private base: _IIndex) {\n    }\n\n    get expressions(): IndexExpression[] {\n        return this.base.expressions;\n    }\n\n    stats(t: _Transaction, key?: IndexKey): Stats | null {\n        return null;\n    }\n\n    iterateKeys() {\n        return null;\n    }\n\n    entropy(op: IndexOp): number {\n        const strategy = this.chooseStrategy(op.t);\n        if (!strategy) {\n            // very high entropy (catastophic join)\n            return this.base.entropy(op) * this.owner.joined.entropy(op.t);\n        }\n        // todo: multiply that by the mean count per keys in strategy.joinIndex ?\n        return this.base.entropy(op);\n    }\n\n    eqFirst(rawKey: IndexKey, t: _Transaction): T | null {\n        for (const i of this.enumerate({\n            type: 'eq',\n            key: rawKey,\n            t,\n        })) {\n            return i;\n        }\n        return null;\n    }\n\n    private chooseStrategy(t: _Transaction) {\n        const strats = this.owner.strategies.filter(x => x.iterateSide === 'restrictive');\n        if (!strats.length) {\n            return null;\n        }\n        return chooseStrategy(t, strats);\n    }\n\n    *enumerate(op: IndexOp): Iterable<T> {\n        const strategy = this.chooseStrategy(op.t);\n        if (strategy) {\n            for (const i of this.base.enumerate(op)) {\n                yield* this.owner.iterateStrategyItem(i, strategy, op.t);\n            }\n        } else {\n            // not sure we can reach that...\n            this.owner.db.raiseGlobal('catastrophic-join-optimization');\n            const all = [...this.owner.joined.enumerate(op.t)];\n\n            for (const i of this.base.enumerate(op)) {\n                yield* this.owner.iterateCatastrophicItem(i, all, 'restrictive', op.t);\n            }\n        }\n    }\n\n\n    explain(e: _Explainer): _IndexExplanation {\n        const strat = this.chooseStrategy(e.transaction);\n        return {\n            _: 'indexOnJoin',\n            index: this.base.explain(e),\n            strategy: strat?.joinIndex?.explain(e) ?? 'catastrophic',\n        }\n    }\n}","import { TransformBase, FilterBase } from './transform-base';\nimport { _Transaction, IValue, _Explainer, _ISelection, _SelectExplanation, QueryError, Stats, nil, _IAlias } from '../interfaces-private';\nimport { Evaluator } from '../evaluator';\nimport { Types, RecordCol } from '../datatypes';\nimport { ExprRef } from 'pgsql-ast-parser';\nimport { asSingleName, colToStr } from '../utils';\nimport { ColumnNotFound } from '../interfaces';\nimport { RecordType } from '../datatypes/t-record';\n\nexport function buildAlias(on: _ISelection, alias?: string): _ISelection {\n    if (!alias) {\n        return on as any;\n    }\n    if (on instanceof Alias && on.name === alias) {\n        return on;\n    }\n    return new Alias(on, alias);\n}\n\nexport class Alias<T> extends TransformBase<T> implements _IAlias {\n\n    private oldToThis = new Map<IValue, IValue>();\n    private thisToOld = new Map<IValue, IValue>();\n    private _columns: IValue<any>[] | null = null;\n    private asRecord!: IValue;\n\n    get isExecutionWithNoResult(): boolean {\n        return this.base.isExecutionWithNoResult;\n    }\n\n    constructor(sel: _ISelection, public name: string) {\n        super(sel);\n    }\n\n    *listSelectableIdentities(): Iterable<IValue> {\n        this.init();\n        yield* super.listSelectableIdentities();\n        yield this.asRecord;\n    }\n\n\n    rebuild() {\n        this._columns = null;\n        this.oldToThis.clear();\n        this.thisToOld.clear();\n    }\n\n    selectAlias(alias: string): _IAlias | nil {\n        if (this.name === alias) {\n            return this;\n        }\n        return null;\n    }\n\n    listColumns(): Iterable<IValue> {\n        return this.columns;\n    }\n\n\n    get debugId() {\n        return this.base.debugId;\n    }\n\n    get columns(): ReadonlyArray<IValue<any>> {\n        this.init();\n        return this._columns!;\n    }\n    init() {\n        if (this._columns) {\n            return;\n        }\n        this._columns = this.base.columns.map(x => {\n            const ret = x.setOrigin(this);\n            this.oldToThis.set(x, ret);\n            this.thisToOld.set(ret, x);\n            return ret;\n        });\n\n        // how to build a record out of this alias?\n        this.asRecord = new Evaluator(\n            RecordType.from(this)\n            , this.name\n            , Math.random().toString()\n            , this._columns\n            , v => ({ ...v })\n            , { forceNotConstant: true });\n    }\n\n    stats(t: _Transaction): Stats | null {\n        return this.base.stats(t);\n    }\n\n    enumerate(t: _Transaction): Iterable<T> {\n        return this.base.enumerate(t);\n    }\n\n    hasItem(value: T, t: _Transaction): boolean {\n        return this.base.hasItem(value, t);\n    }\n\n    getColumn(column: string | ExprRef): IValue;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil {\n        const col = this._getColumn(column);\n        if (col) {\n            return col;\n        }\n\n        if (asSingleName(column) === this.name) {\n            return this.asRecord;\n        }\n\n        if (nullIfNotFound) {\n            return null;\n        }\n        throw new ColumnNotFound(colToStr(column));\n    }\n\n    private _getColumn(column: string | ExprRef): IValue | nil {\n        if (typeof column !== 'string'\n            && column.table) {\n            if (!column.table.schema\n                && column.table.name !== this.name) {\n                return null;\n            }\n            column = column.name;\n        }\n        const got = this.base.getColumn(column, true);\n        if (!got) {\n            return got;\n        }\n        this.init();\n        const ret = this.oldToThis.get(got);\n        if (!ret) {\n            throw new Error('Corrupted alias');\n        }\n        return ret;\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        // no need to explain an alias... it does nothing.\n        return this.base.explain(e);\n        // return {\n        //     id: e.idFor(this),\n        //     type: 'alias',\n        //     alias: this.as,\n        //     of: this.base.explain(e),\n        // };\n    }\n\n    getIndex(...forValue: IValue[]) {\n        return this.base.getIndex(...forValue.map(v => this.thisToOld.get(v) ?? v));\n    }\n\n}","\nimport { QueryError } from '../interfaces';\nimport LRUCache from 'lru-cache';\nimport hash from 'object-hash';\nimport { Expr, parse, Statement } from 'pgsql-ast-parser';\nimport { errorMessage } from '../utils';\n\n\nconst astCache: LRUCache<any, any> = new LRUCache({\n    max: 1000,\n});\n\nlet locationTracking = false;\nexport function enableStatementLocationTracking() {\n    locationTracking = true;\n    astCache.reset();\n}\n\n\n/** Parse an AST from SQL */\nexport function parseSql(sql: string): Statement[];\nexport function parseSql(sql: string, entry: 'expr'): Expr;\nexport function parseSql(sql: string, entry?: string): any {\n    // when 'entry' is not specified, lets cache parsings\n    // => better perf on repetitive requests\n    const key = !entry && hash(sql);\n    if (!entry) {\n        const cached = astCache.get(key);\n        if (cached) {\n            return cached;\n        }\n    }\n\n    try {\n\n        let ret = parse(sql, {\n            entry,\n            locationTracking,\n        });\n\n        // cache result\n        if (!entry) {\n            astCache.set(key, ret);\n        }\n        return ret;\n\n    } catch (e) {\n        const msg = errorMessage(e);\n        if (!/Syntax error/.test(msg)) {\n            throw e;\n        }\n\n\n        // throw a nice parsing error.\n        throw new QueryError(`💔 Your query failed to parse.\nThis is most likely due to a SQL syntax error. However, you might also have hit a bug, or an unimplemented feature of pg-mem.\nIf this is the case, please file an issue at https://github.com/oguimbal/pg-mem along with a query that reproduces this syntax error.\n\n👉 Failed query:\n\n    ${sql}\n\n💀 ${msg}`);\n    }\n\n}\n","import { _IIndex, IValue, _ITable, _IDb, _Transaction, _Explainer, _IndexExplanation, IndexOp, IndexKey, Stats } from '../interfaces-private';\nimport { PermissionDeniedError, NotSupported } from '../interfaces';\n\nexport class TableIndex implements _IIndex {\n    readonly expressions: IValue<any>[];\n\n    get hash(): string {\n        throw new Error('not implemented');\n    }\n    explain(e: _Explainer): _IndexExplanation {\n        throw new Error('not implemented');\n    }\n\n    stats(t: _Transaction, key?: IndexKey): Stats | null {\n        return null;\n    }\n\n    iterateKeys() {\n        return null;\n    }\n\n    constructor(readonly onTable: _ITable & { itemsByTable(table: string, t: _Transaction): Iterable<any>; ownSymbol: any }, private col: IValue) {\n        this.expressions = [col];\n    }\n\n    get indexName(): string {\n        return 'index_table_name_name';\n    }\n\n    entropy(op: IndexOp): number {\n        return this.onTable.db.listSchemas()\n            .reduce((tot, s) => tot + s.tablesCount(op.t) * 10 * 3, 0);\n    }\n\n\n    add(raw: any): void {\n        throw new PermissionDeniedError('tables');\n    }\n\n    eqFirst([key]: any, t: _Transaction) {\n        for (const its of this.onTable.itemsByTable(key, t)) {\n            return its;\n        }\n    }\n    *eq([rawKey]: any, t: _Transaction): Iterable<any> {\n        for (const its of this.onTable.itemsByTable(rawKey, t)) {\n            yield its;\n        }\n    }\n\n    *nin(keys: any[][], t: _Transaction) {\n        const raws = keys.map(x => x[0]) as any[];\n        for (const i of this.onTable.selection.enumerate(t)) {\n            if (raws.includes(i.table_name)) {\n                continue;\n            }\n            yield i;\n        }\n    }\n\n    *neq([rawKey]: any, t: _Transaction) {\n        for (const i of this.onTable.selection.enumerate(t)) {\n            if (i.table_name !== rawKey) {\n                yield i;\n            }\n        }\n    }\n    *gt(rawKey: any, t: _Transaction): Iterable<any> {\n        for (const i of this.onTable.selection.enumerate(t)) {\n            if (i.table_name > rawKey) {\n                yield i;\n            }\n        }\n    }\n    *lt(rawKey: any, t: _Transaction): Iterable<any> {\n        for (const i of this.onTable.selection.enumerate(t)) {\n            if (i.table_name < rawKey) {\n                yield i;\n            }\n        }\n    }\n    *ge(rawKey: any, t: _Transaction): Iterable<any> {\n        for (const i of this.onTable.selection.enumerate(t)) {\n            if (i.table_name >= rawKey) {\n                yield i;\n            }\n        }\n    }\n    *le(rawKey: any, t: _Transaction): Iterable<any> {\n        for (const i of this.onTable.selection.enumerate(t)) {\n            if (i.table_name <= rawKey) {\n                yield i;\n            }\n        }\n    }\n\n\n    enumerate(op: IndexOp): Iterable<any> {\n        switch (op.type) {\n            case 'eq':\n                return this.eq(op.key, op.t);\n            case 'neq':\n                return this.neq(op.key, op.t);\n            case 'ge':\n                return this.ge(op.key, op.t);\n            case 'le':\n                return this.le(op.key, op.t);\n            case 'gt':\n                return this.gt(op.key, op.t);\n            case 'lt':\n                return this.lt(op.key, op.t);\n            case 'outside':\n                return this.outside(op.lo, op.hi, op.t);\n            case 'inside':\n                return this.inside(op.lo, op.hi, op.t);\n            case 'nin':\n                return this.nin(op.keys, op.t);\n            default:\n                throw NotSupported.never(op['type']);\n        }\n    }\n\n    *outside(lo: IndexKey, hi: IndexKey, t: _Transaction): Iterable<any> {\n        yield* this.lt(lo, t);\n        yield* this.gt(hi, t);\n    }\n\n    *inside(lo: IndexKey, hi: IndexKey, t: _Transaction): Iterable<any> {\n        throw new Error('Not implemented');\n    }\n}","module.exports = require(\"json-stable-stringify\");","import { FilterBase } from './transform-base';\nimport { _ISelection, _Explainer, _SelectExplanation, _Transaction, Stats } from '../interfaces-private';\n\nexport class ArrayFilter<T = any> extends FilterBase<T> {\n\n    get index() {\n        return null;\n    }\n\n    entropy() {\n        return this.rows.length;\n    }\n\n    hasItem(raw: T): boolean {\n        return this.rows.includes(raw);\n    }\n\n    getIndex() {\n        return null;\n    }\n\n    constructor(fromTable: _ISelection<T>, public rows: T[]) {\n        super(fromTable);\n    }\n\n    enumerate(): Iterable<T> {\n        return this.rows;\n    }\n\n    stats(t: _Transaction): Stats | null {\n        return {\n            count: this.rows.length,\n        };\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'constantSet',\n            rawArrayLen: this.rows.length,\n        }\n    }\n}","import { _IConstraint, _IIndex, _ITable, _Transaction } from '../interfaces-private';\n\nexport class IndexConstraint implements _IConstraint {\n\n    constructor(readonly name: string, readonly index: _IIndex, private table: _ITable) {\n    }\n\n    uninstall(t: _Transaction): void {\n        this.table.dropIndex(t, this.name);\n    }\n}","// stolen from https://github.com/segmentio/pg-escape/blob/master/index.js\n\nexport function literal(val: any) {\n    if (null == val) return 'NULL';\n    if (Array.isArray(val)) {\n        var vals: any[] = val.map(literal)\n        return \"(\" + vals.join(\", \") + \")\"\n    }\n    var backslash = ~val.indexOf('\\\\');\n    var prefix = backslash ? 'E' : '';\n    val = val.replace(/'/g, \"''\");\n    val = val.replace(/\\\\/g, '\\\\\\\\');\n    return prefix + \"'\" + val + \"'\";\n};\n","import { Evaluator } from '../evaluator';\nimport { TypeBase } from './datatype-base';\nimport { CastError, DataType, nil, QueryError } from '../interfaces';\nimport { _ISchema, _IType, _Transaction } from '../interfaces-private';\n\nexport class CustomEnumType extends TypeBase<string> {\n\n    get primary(): DataType {\n        return this.name as any;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    constructor(readonly schema: _ISchema\n        , private readonly _name: string\n        , readonly values: string[]) {\n        super();\n    }\n\n    install() {\n        this.schema._registerType(this);\n    }\n\n    doCanCast(to: _IType) {\n        return to.primary === DataType.text;\n    }\n\n    doCast(value: Evaluator<string>, to: _IType<string>): Evaluator<any> | nil {\n        return value;\n    }\n\n    prefer(type: _IType<any>): _IType | nil {\n        return this;\n    }\n\n    doCanBuildFrom(from: _IType): boolean | nil {\n        return from.primary === DataType.text;\n    }\n\n    doBuildFrom(value: Evaluator<string>, from: _IType<string>): Evaluator<string> | nil {\n        return value\n            .setConversion((raw: string) => {\n                if (!this.values.includes(raw)) {\n                    throw new QueryError(`invalid input value for enum ${this.name}: \"${raw}\"`);\n                }\n                return raw;\n            }\n                , conv => ({ conv, toCenum: this.name }))\n    }\n\n\n    drop(t: _Transaction): void {\n        this.schema._unregisterType(this);\n    }\n}\n","import { _ISchema, _Transaction, NotSupported, _ISequence, _IStatementExecutor } from '../../interfaces-private';\nimport { QName, CreateSequenceStatement } from 'pgsql-ast-parser';\nimport { Sequence } from '../../schema/sequence';\nimport { checkExistence, ExecHelper } from '../exec-utils';\n\nexport class ExecuteCreateSequence extends ExecHelper implements _IStatementExecutor {\n    schema: _ISchema;\n    constructor(inSchema: _ISchema, private p: CreateSequenceStatement, private acceptTempSequences: boolean) {\n        super(p);\n        const name: QName = p.name;\n        this.schema = inSchema.getThisOrSiblingFor(name);\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because the index sequence creation does support further rollbacks)\n        t = t.fullCommit();\n\n        // create the sequence\n        this.createSeq(t);\n\n        // new implicit transaction\n        t = t.fork();\n        return this.noData(t, 'CREATE');\n    }\n\n    createSeq(t: _Transaction) {\n        const p = this.p;\n        const name: QName = p.name;\n        // const ret = this.simple('CREATE', p);\n\n        let ret: _ISequence | null = null;\n        checkExistence(this.schema, name, p.ifNotExists, () => {\n            if (p.temp && !this.acceptTempSequences) {\n                throw new NotSupported('temp sequences');\n            }\n            ret = new Sequence(name.name, this.schema)\n                .alter(t, p.options);\n            this.schema.db.onSchemaChange();\n        });\n        return ret;\n    }\n}\n","import { watchUse, ignore, errorMessage, pushExecutionCtx, fromEntries } from '../utils';\nimport { _ISchema, _Transaction, _FunctionDefinition, _ArgDefDetails, _IType, _ISelection, _IStatement, NotSupported, QueryError, nil, OnStatementExecuted, _IStatementExecutor, StatementResult, Parameter, IValue } from '../interfaces-private';\nimport { toSql, Statement } from 'pgsql-ast-parser';\nimport { ExecuteCreateTable } from './schema-amends/create-table';\nimport { ExecuteCreateSequence } from './schema-amends/create-sequence';\nimport { locOf, ExecHelper } from './exec-utils';\nimport { CreateIndexExec } from './schema-amends/create-index';\nimport { Alter } from './schema-amends/alter';\nimport { AlterSequence } from './schema-amends/alter-sequence';\nimport { DropIndex } from './schema-amends/drop-index';\nimport { DropTable } from './schema-amends/drop-table';\nimport { DropSequence } from './schema-amends/drop-sequence';\nimport { CommitExecutor, RollbackExecutor, BeginStatementExec } from './transaction-statements';\nimport { TruncateTable } from './records-mutations/truncate-table';\nimport { ShowExecutor } from './show';\nimport { SetExecutor } from './set';\nimport { CreateEnum } from './schema-amends/create-enum';\nimport { CreateView } from './schema-amends/create-view';\nimport { CreateMaterializedView } from './schema-amends/create-materialized-view';\nimport { CreateSchema } from './schema-amends/create-schema';\nimport { CreateFunction } from './schema-amends/create-function';\nimport { DoStatementExec } from './schema-amends/do';\nimport { SelectExec } from './select';\nimport { withSelection, withStatement, withNameResolver, INameResolver } from '../parser/context';\nimport { DropType } from './schema-amends/drop-type';\n\nconst detailsIncluded = Symbol('errorDetailsIncluded');\n\nexport class SimpleExecutor extends ExecHelper implements _IStatementExecutor {\n    constructor(st: Statement, private exec: (t: _Transaction) => void, private opName?: string) {\n        super(st);\n    }\n    execute(t: _Transaction): StatementResult {\n        this.exec(t);\n        return this.noData(t, this.opName);\n    }\n}\n\nclass MapNameResolver implements INameResolver {\n    constructor(private map: Map<string, any>, readonly isolated: boolean) {\n    }\n    resolve(name: string): IValue | nil {\n        return this.map.get(name);\n    }\n}\n\nexport class StatementExec implements _IStatement {\n    private onExecutedCallbacks: OnStatementExecuted[] = []\n    private executor?: _IStatementExecutor;\n    private checkAstCoverage?: (() => void);\n\n    constructor(readonly schema: _ISchema, private statement: Statement, private pAsSql: string | nil, private parameters?: Parameter[]) {\n    }\n\n    onExecuted(callback: OnStatementExecuted): void {\n        this.onExecutedCallbacks.push(callback);\n    }\n\n    private get db() {\n        return this.schema.db;\n    }\n\n\n    private _getExecutor(p: Statement): _IStatementExecutor {\n        switch (p.type) {\n            case 'start transaction':\n            case 'begin':\n                return new BeginStatementExec(p);\n            case 'commit':\n                return new CommitExecutor(p);\n            case 'rollback':\n                return new RollbackExecutor(p);\n            case 'select':\n            case 'delete':\n            case 'update':\n            case 'insert':\n            case 'union':\n            case 'union all':\n            case 'values':\n            case 'with recursive':\n            case 'with':\n                return new SelectExec(this, p);\n            case 'truncate table':\n                return new TruncateTable(p);\n            case 'create table':\n                return new ExecuteCreateTable(p);\n            case 'create index':\n                return new CreateIndexExec(this, p);\n            case 'alter table':\n                return new Alter(this, p);\n            case 'create extension':\n                return new SimpleExecutor(p, () => this.schema.executeCreateExtension(p));\n            case 'create sequence':\n                return new ExecuteCreateSequence(this.schema, p, false);\n            case 'alter sequence':\n                return new AlterSequence(this, p);\n            case 'drop index':\n                return new DropIndex(this, p);\n            case 'drop table':\n                return new DropTable(this, p);\n            case 'drop sequence':\n                return new DropSequence(this, p);\n            case 'drop type':\n                return new DropType(this, p);\n            case 'show':\n                return new ShowExecutor(p);\n            case 'set':\n            case 'set timezone':\n                return new SetExecutor(p);\n            case 'create enum':\n                return new CreateEnum(this, p);\n            case 'create view':\n                return new CreateView(this, p);\n            case 'create materialized view':\n                return new CreateMaterializedView(this, p);\n            case 'create schema':\n                return new CreateSchema(this, p);\n            case 'create function':\n                return new CreateFunction(this, p);\n            case 'drop function':\n                return new SimpleExecutor(p, () => this.schema.dropFunction(p), 'DROP');\n            case 'do':\n                return new DoStatementExec(this, p);\n            case 'comment':\n            case 'raise':\n            case 'deallocate':\n                ignore(p);\n                return new SimpleExecutor(p, () => { });\n\n            case 'refresh materialized view':\n                // todo: a decent materialized view implementation\n                ignore(p);\n                return new SimpleExecutor(p, () => { });\n\n            case 'tablespace':\n                throw new NotSupported('\"TABLESPACE\" statement');\n            case 'prepare':\n                throw new NotSupported('\"PREPARE\" statement');\n            case 'create composite type':\n                throw new NotSupported('create composite type');\n            case 'drop trigger':\n                throw new NotSupported('\"drop trigger\" statement');\n            case 'alter index':\n                throw new NotSupported('\"alter index\" statement');\n            default:\n                throw NotSupported.never(p, 'statement type');\n        }\n    }\n\n\n\n\n    compile(): _IStatementExecutor {\n        return this.niceErrors(() => {\n\n            if (this.executor) {\n                return this.executor!;\n            }\n            // build the AST coverage checker\n            let p = this.statement;\n            if (!this.db.options.noAstCoverageCheck) {\n                const watched = watchUse(p);\n                p = watched.checked;\n                this.checkAstCoverage = () => {\n                    const err = watched.check?.();\n                    if (err) {\n                        throw new NotSupported(err);\n                    }\n                };\n            }\n\n            // build parameters context\n            const namedParams = fromEntries(this.parameters?.filter(p => !!p.value.id).map(x => [x.value.id!, x]) ?? []);\n            const nameResolver = new MapNameResolver(namedParams, true);\n\n\n            // parse the AST\n            withNameResolver(nameResolver,\n                () => withStatement(this,\n                    () => withSelection(this.schema.dualTable.selection,\n                        () => this.executor = this._getExecutor(p)\n                    )\n                )\n            );\n\n            return this.executor!;\n        });\n    }\n\n\n    executeStatement(t: _Transaction): StatementResult {\n        return this.niceErrors(() => pushExecutionCtx({\n            transaction: t,\n            schema: this.schema,\n        }, () => {\n\n            t.clearTransientData();\n\n            // actual execution\n            if (!this.executor) {\n                throw new Error('Statement not prepared')\n            }\n            const result = this.executor.execute(t);\n\n            // post-execution\n            for (const s of this.onExecutedCallbacks) {\n                s(t);\n            }\n\n\n            // check AST coverage if necessary\n            this.checkAstCoverage?.();\n\n\n            return result;\n        }));\n    }\n\n    private niceErrors<T>(act: () => T): T {\n        try {\n            return act();\n        } catch (e) {\n            // handle reeantrant calls (avoids including error tips twice)\n            if (e && typeof e === 'object' && (e as any)[detailsIncluded]) {\n                throw e;\n            }\n\n            // include error tips\n            if (!this.db.options.noErrorDiagnostic && (e instanceof Error) || e instanceof NotSupported) {\n\n                // compute SQL\n                const msgs = [e.message];\n\n\n                if (e instanceof QueryError) {\n                    msgs.push(`🐜 This seems to be an execution error, which means that your request syntax seems okay,\n    but the resulting statement cannot be executed → Probably not a pg-mem error.`);\n                } else if (e instanceof NotSupported) {\n                    msgs.push(`👉 pg-mem is work-in-progress, and it would seem that you've hit one of its limits.`);\n                } else {\n                    msgs.push('💥 This is a nasty error, which was unexpected by pg-mem. Also known \"a bug\" 😁 Please file an issue !')\n                }\n\n                if (!this.db.options.noErrorDiagnostic) {\n                    if (this.pAsSql) {\n                        msgs.push(`*️⃣ Failed SQL statement: ${this.pAsSql}`);\n                    } else {\n                        try {\n                            msgs.push(`*️⃣ Reconsituted failed SQL statement: ${toSql.statement(this.statement)}`);\n                        } catch (f) {\n                            msgs.push(`*️⃣ <Failed to reconsitute SQL - ${errorMessage(f)}>`);\n                        }\n                    }\n                }\n                msgs.push('👉 You can file an issue at https://github.com/oguimbal/pg-mem along with a way to reproduce this error (if you can), and  the stacktrace:')\n                e.message = msgs.join('\\n\\n') + '\\n\\n';\n            }\n\n            // set error location\n            if (e && typeof e === 'object') {\n                (e as any).location = locOf(this.statement);\n                (e as any)[detailsIncluded] = true;\n            }\n            throw e;\n        }\n    }\n\n}\n","import { QueryError, Reg, _Explainer, _ISchema, _ISelection, _IView, _Transaction } from '../interfaces-private';\nimport { DataSourceBase, FilterBase } from '../transforms/transform-base';\n\nexport class View extends FilterBase<any> implements _IView {\n    get type(): 'view' {\n        return 'view';\n    }\n\n    private _reg?: Reg;\n    get reg(): Reg {\n        if (!this._reg) {\n            throw new QueryError(`relation \"${this.name}\" does not exist`);\n        }\n        return this._reg;\n    }\n\n    constructor(readonly ownerSchema: _ISchema, readonly name: string, readonly selection: _ISelection) {\n        super(selection);\n    }\n\n\n    enumerate(t: _Transaction): Iterable<any> {\n        return this.selection.enumerate(t);\n    }\n\n    hasItem(value: any, t: _Transaction): boolean {\n        return this.selection.hasItem(value, t);\n    }\n\n    explain(e: _Explainer) {\n        return this.selection.explain(e);\n    }\n\n    stats(t: _Transaction) {\n        return this.selection.stats(t);\n    }\n\n\n    register() {\n        // once fields registered,\n        //  then register the table\n        //  (column registrations need it not to be registered yet)\n        this._reg = this.ownerSchema._reg_register(this);\n        return this;\n    }\n\n    drop(t: _Transaction): void {\n        throw new Error('Method not implemented.');\n    }\n}","import { IValue, _ISelection, _Transaction, _Explainer, _SelectExplanation, Stats } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { Types } from '../datatypes';\n\nexport class SeqScanFilter<T = any> extends FilterBase<T> {\n\n    get index() {\n        return null;\n    }\n\n    entropy(t: _Transaction) {\n        // boost source entropy (in case an index has the same items count)\n        return this.selection.entropy(t) * 1.5;\n    }\n\n    hasItem(raw: T, t: _Transaction): boolean {\n        return !!this.getter.get(raw, t);\n    }\n\n    constructor(private selection: _ISelection<T>, private getter: IValue<T>) {\n        super(selection);\n        this.getter = getter.cast(Types.bool);\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        return null;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        for (const raw of this.selection.enumerate(t)) {\n            const cond = this.getter.get(raw, t);\n            if (cond) {\n                yield raw;\n            }\n        }\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'seqFilter',\n            filtered: this.selection.explain(e),\n        };\n    }\n}","export { newDb } from './db';\nexport { enableStatementLocationTracking } from './parser/parse-cache';\nexport * from './interfaces';\n","import { Schema, IMemoryDb, ISchema, TableEvent, GlobalEvent, QueryError, IBackup, MemoryDbOptions, ISubscription, LanguageCompiler, nil } from './interfaces';\nimport { _IDb, _ISelection, _ITable, _Transaction, _ISchema, _FunctionDefinition, GLOBAL_VARS, _IType, _OperatorDefinition, IValue } from './interfaces-private';\nimport { DbSchema } from './schema/schema';\nimport { initialize } from './transforms/transform-base';\nimport { buildSelection } from './transforms/selection';\nimport { buildAlias } from './transforms/alias';\nimport { buildFilter } from './transforms/build-filter';\nimport { Adapters } from './adapters';\nimport { Transaction } from './transaction';\nimport { buildGroupBy } from './transforms/aggregation';\nimport { buildLimit } from './transforms/limit';\nimport { buildUnion } from './transforms/union';\nimport { buildDistinct } from './transforms/distinct';\nimport { buildOrderBy } from './transforms/order-by';\nimport { setupPgCatalog } from './schema/pg-catalog';\nimport { setupInformationSchema } from './schema/information-schema';\nimport { QName, BinaryOperator } from 'pgsql-ast-parser';\nimport { asSingleQName } from './utils';\n\nexport function newDb(opts?: MemoryDbOptions): IMemoryDb {\n    initialize({\n        buildSelection,\n        buildAlias,\n        buildFilter,\n        buildGroupBy,\n        buildLimit,\n        buildUnion,\n        buildOrderBy,\n        buildDistinct,\n    });\n    // root transaction\n    const root = Transaction.root();\n    const globals = root.getMap(GLOBAL_VARS)\n        .set('server_version', '12.2 (pg-mem)');\n    root.set(GLOBAL_VARS, globals);\n\n    // create db\n    return new MemoryDb(root, undefined, opts ?? {});\n}\n\nclass MemoryDb implements _IDb {\n\n    private handlers = new Map<TableEvent | GlobalEvent, Set<(...args: any[]) => any>>();\n    private schemas = new Map<string, _ISchema>();\n\n    schemaVersion = 1;\n\n    readonly adapters: Adapters = new Adapters(this);\n    private extensions: { [name: string]: (schema: ISchema) => void } = {};\n    private languages: { [name: string]: LanguageCompiler } = {};\n    readonly searchPath = ['pg_catalog', 'public'];\n\n    get public() {\n        return this.getSchema(null)\n    }\n\n    onSchemaChange() {\n        this.schemaVersion++;\n        this.raiseGlobal('schema-change', this);\n    }\n\n    constructor(public data: Transaction, schemas?: Map<string, _ISchema>, readonly options: MemoryDbOptions = {}) {\n        if (!schemas) {\n            this.createSchema('public');\n        } else {\n            this.schemas = schemas;\n        }\n        setupPgCatalog(this);\n        setupInformationSchema(this);\n    }\n\n    backup(): IBackup {\n        return new Backup(this);\n    }\n\n    registerExtension(name: string, install: (schema: ISchema) => void): this {\n        this.extensions[name] = install;\n        return this;\n    }\n\n    registerLanguage(languageName: string, compiler: LanguageCompiler): this {\n        this.languages[languageName.toLowerCase()] = compiler;\n        return this;\n    }\n\n    getLanguage(name: string): LanguageCompiler {\n        const ret = this.languages[name.toLowerCase()];\n        if (!ret) {\n            throw new QueryError(`Unkonwn language \"${name}\". If you plan to use a script language, you must declare it to pg-mem via \".registerLanguage()\"`);\n        }\n        return ret;\n    }\n\n\n    getExtension(name: string): (schema: ISchema) => void {\n        const ret = this.extensions[name];\n        if (!ret) {\n            throw new Error('Extension does not exist: ' + name);\n        }\n        return ret;\n    }\n\n\n    createSchema(name: string): DbSchema {\n        if (this.schemas.has(name)) {\n            throw new Error('Schema exists: ' + name);\n        }\n        this.onSchemaChange();\n        const ret = new DbSchema(name, this);\n        this.schemas.set(name, ret);\n        return ret;\n    }\n\n    getTable(name: string): _ITable;\n    getTable(name: string, nullIfNotExists?: boolean): _ITable | null {\n        return this.public.getTable(name, nullIfNotExists);\n    }\n\n    resolveFunction(name: string | QName, types: IValue[]): _FunctionDefinition | nil {\n        const asSingle = asSingleQName(name);\n        if (asSingle) {\n            for (const sp of this.searchPath) {\n                const found = this.getSchema(sp).resolveFunction(name, types, true);\n                if (found) {\n                    return found;\n                }\n            }\n            return null;\n        } else {\n            const q = name as QName;\n            return this.getSchema(q.schema!).resolveFunction(q.name, types, true);\n        }\n    }\n\n    resolveOperator(name: BinaryOperator, left: IValue, right: IValue): _OperatorDefinition | nil {\n        for (const sp of this.searchPath) {\n            const found = this.getSchema(sp).resolveOperator(name, left, right, true);\n            if (found) {\n                return found;\n            }\n        }\n        return null;\n    }\n\n\n\n    on(event: GlobalEvent | TableEvent, handler: (...args: any[]) => any): ISubscription {\n        let lst = this.handlers.get(event);\n        if (!lst) {\n            this.handlers.set(event, lst = new Set());\n        }\n        lst.add(handler);\n        return {\n            unsubscribe: () => lst?.delete(handler),\n        };\n    }\n\n    raiseTable(table: string, event: TableEvent): void {\n        const got = this.handlers.get(event);\n        for (const h of got ?? []) {\n            h(table);\n        }\n    }\n\n    raiseGlobal(event: GlobalEvent, ...data: any[]): void {\n        const got = this.handlers.get(event);\n        for (const h of got ?? []) {\n            h(...data);\n        }\n    }\n\n\n    getSchema(db?: string | null, nullIfNotFound?: false): _ISchema;\n    getSchema(db: string, nullIfNotFound: true): _ISchema | null;\n    getSchema(db?: string | null, nullIfNotFound?: boolean): _ISchema | null {\n        db = db ?? 'public';\n        const got = this.schemas.get(db);\n        if (!got) {\n            if (nullIfNotFound) {\n                return null;\n            }\n            throw new QueryError('schema not found: ' + db);\n        }\n        return got;\n    }\n\n    listSchemas() {\n        return [...this.schemas.values()];\n    }\n\n}\n\nclass Backup implements IBackup {\n    private readonly data: Transaction;\n    private readonly schemaVersion: number;\n    constructor(private db: MemoryDb) {\n        this.data = db.data.clone();\n        this.schemaVersion = db.schemaVersion;\n    }\n\n    restore() {\n        if (this.schemaVersion !== this.db.schemaVersion) {\n            throw new Error('You cannot restore this backup: schema has been changed since this backup has been created => prefer .clone() in this kind of cases.');\n        }\n        this.db.data = this.data.clone();\n    }\n}","import { ISchema, DataType, IType, RelationNotFound, Schema, QueryResult, SchemaField, nil, FunctionDefinition, PermissionDeniedError, TypeNotFound, ArgDefDetails, IEquivalentType, QueryInterceptor, ISubscription, QueryError, typeDefToStr, OperatorDefinition, QueryOrAst } from '../interfaces';\nimport { _IDb, _ISelection, _ISchema, _Transaction, _ITable, _SelectExplanation, _Explainer, IValue, _IIndex, _IType, _IRelation, QueryObjOpts, _ISequence, _INamedIndex, RegClass, Reg, TypeQuery, asType, _ArgDefDetails, BeingCreated, _FunctionDefinition, _OperatorDefinition } from '../interfaces-private';\nimport { asSingleQName, ignore, isType, parseRegClass, randomString, schemaOf } from '../utils';\nimport { typeSynonyms } from '../datatypes';\nimport { DropFunctionStatement, BinaryOperator, QName, DataTypeDef, CreateSequenceOptions, CreateExtensionStatement, Statement } from 'pgsql-ast-parser';\nimport { MemoryTable } from '../table';\nimport { parseSql } from '../parser/parse-cache';\nimport { migrate } from '../migrate/migrate';\nimport { CustomEnumType } from '../datatypes/t-custom-enum';\nimport { regGen } from '../datatypes/datatype-base';\nimport { EquivalentType } from '../datatypes/t-equivalent';\nimport { OverloadResolver } from './overload-resolver';\nimport { ExecuteCreateSequence } from '../execution/schema-amends/create-sequence';\nimport { StatementExec } from '../execution/statement-exec';\nimport { SelectExec } from '../execution/select';\nimport { MigrationParams } from '../migrate/migrate-interfaces';\n\nexport class DbSchema implements _ISchema, ISchema {\n\n    readonly dualTable: _ITable;\n    private relsByNameCas = new Map<string, _IRelation>();\n    private relsByCls = new Map<number, _IRelation>();\n    private relsByTyp = new Map<number, _IRelation>();\n    private _tables = new Set<_ITable>();\n\n    private fns = new OverloadResolver<_FunctionDefinition>(false);\n    private ops = new OverloadResolver<_OperatorDefinition>(false);\n    private installedExtensions = new Set<string>();\n    private readonly: any;\n    private interceptors = new Set<{ readonly intercept: QueryInterceptor }>();\n    private lastSelect?: _ISelection;\n\n    constructor(readonly name: string, readonly db: _IDb) {\n        this.dualTable = new MemoryTable(this, this.db.data, { fields: [], name: 'dual' }).register();\n        this.dualTable.insert({});\n        this.dualTable.setReadonly();\n        this._reg_unregister(this.dualTable);\n    }\n\n    setReadonly() {\n        this.readonly = true;\n        return this;\n    }\n\n\n    none(query: QueryOrAst): void {\n        this.query(query);\n    }\n\n    one(query: QueryOrAst): any {\n        const [result] = this.many(query);\n        return result;\n    }\n\n    many(query: QueryOrAst): any[] {\n        return this.query(query).rows;\n    }\n\n\n    query(text: QueryOrAst): QueryResult {\n        // intercept ?\n        if (typeof text === 'string') {\n            for (const { intercept } of this.interceptors) {\n                const ret = intercept(text);\n                if (ret) {\n                    return {\n                        command: text,\n                        fields: [],\n                        location: { start: 0, end: text.length },\n                        rowCount: 0,\n                        rows: ret,\n                    };\n                }\n            }\n        }\n\n        // execute.\n        let last: QueryResult | undefined;\n        for (const r of this.queries(text)) {\n            last = r;\n        }\n        return last ?? {\n            command: typeof text === 'string' ? text : '<custom ast>',\n            fields: [],\n            location: { start: 0, end: typeof text === 'string' ? text.length : 0 },\n            rowCount: 0,\n            rows: [],\n        };\n    }\n\n    private parse(query: QueryOrAst): Statement[] {\n        if (typeof query === 'string') {\n            return parseSql(query);\n        }\n        return Array.isArray(query) ? query : [query];\n    }\n\n    *queries(query: QueryOrAst): Iterable<QueryResult> {\n        query = typeof query === 'string' ? query + ';' : query;\n        try {\n\n            // Parse statements\n            let parsed = this.parse(query);\n            if (!Array.isArray(parsed)) {\n                parsed = [parsed];\n            }\n            const singleSql = typeof query === 'string' && parsed.length === 1 ? query : undefined;\n\n            // Prepare statements\n            const prepared = parsed\n                .filter(s => !!s)\n                .map(x => new StatementExec(this, x, singleSql));\n\n            // Start an implicit transaction\n            //  (to avoid messing global data if an operation fails mid-write)\n            let t = this.db.data.fork();\n\n            // Execute statements\n            for (const p of prepared) {\n\n                // Prepare statement\n                const executor = p.compile();\n\n                // store last select for debug purposes\n                if (executor instanceof SelectExec) {\n                    this.lastSelect = executor.selection;\n                }\n\n                // Execute statement\n                const { state, result } = p.executeStatement(t);\n                yield result;\n                t = state;\n            }\n\n            // implicit final commit\n            t.fullCommit();\n            this.db.raiseGlobal('query', query);\n        } catch (e) {\n            this.db.raiseGlobal('query-failed', query);\n            throw e;\n        }\n    }\n\n\n\n    registerEnum(name: string, values: string[]) {\n        new CustomEnumType(this, name, values).install();\n    }\n\n    getThisOrSiblingFor(name: QName): _ISchema {\n        if (!name?.schema || name.schema === this.name) {\n            return this;\n        }\n        return this.db.getSchema(name.schema);\n    }\n\n\n\n\n\n    private simpleTypes: { [key: string]: _IType } = {};\n    private sizeableTypes: {\n        [key: string]: {\n            ctor: (...sz: number[]) => _IType;\n            regs: Map<number | string | undefined, _IType>;\n        };\n    } = {};\n\n\n    parseType(native: string): _IType {\n        if (/\\[\\]$/.test(native)) {\n            const inner = this.parseType(native.substr(0, native.length - 2));\n            return inner.asArray();\n        }\n        return this.getType({ name: native });\n    }\n\n\n    getOwnType(t: DataTypeDef): _IType | null {\n        if (t.kind === 'array') {\n            const $of = this.getOwnType(t.arrayOf);\n            if (!$of) {\n                return null;\n            }\n            return $of.asArray();\n        }\n        // fetch synonyms\n        const synonym = t.doubleQuoted ? null : typeSynonyms[t.name];\n        let name: string;\n        let ignoreConfig = false;\n        if (typeof synonym === 'object' && synonym && 'type' in synonym) {\n            name = synonym.type;\n            ignoreConfig = synonym.ignoreConfig;\n        } else {\n            name = synonym ?? t.name;\n        }\n        const sizeable = this.sizeableTypes[name];\n        if (sizeable) {\n            const key = t.config?.length === 1\n                ? t.config[0]\n                : t.config?.join(',') ?? undefined;\n            let ret = sizeable.regs.get(key);\n            if (!ret) {\n                sizeable.regs.set(key, ret = sizeable.ctor(...t.config ?? []));\n            }\n            return ret;\n        } else if (ignoreConfig) {\n            ignore(t.config);\n        }\n\n        return this.simpleTypes[name] ?? null;\n    }\n\n\n    getTypePub(t: DataType | IType): _IType {\n        return this.getType(t as TypeQuery);\n    }\n\n    getType(t: TypeQuery): _IType;\n    getType(_t: TypeQuery, opts?: QueryObjOpts): _IType | null {\n        if (typeof _t === 'number') {\n            const byOid = this.relsByTyp.get(_t);\n            if (byOid) {\n                return asType(byOid);\n            }\n            throw new TypeNotFound(_t);\n        }\n        if (typeof _t === 'string') {\n            return this.getType({ name: _t });\n        }\n        if (isType(_t)) {\n            return _t;\n        }\n        const t = _t;\n        function chk<T>(ret: T): T {\n            if (!ret && !opts?.nullIfNotFound) {\n                throw new TypeNotFound(t);\n            }\n            return ret;\n        }\n        const schema = schemaOf(t);\n        if (schema) {\n            if (schema === this.name) {\n                return chk(this.getOwnType(t));\n            } else {\n                return chk(this.db.getSchema(schema)\n                    .getType(t, opts));\n            }\n        }\n        if (opts?.skipSearch) {\n            return chk(this.getOwnType(t));\n        }\n        for (const sp of this.db.searchPath) {\n            const rel = this.db.getSchema(sp).getOwnType(t);\n            if (rel) {\n                return rel;\n            }\n        }\n        return chk(this.getOwnType(t));\n    }\n\n\n    getObject(p: QName): _IRelation;\n    getObject(p: QName, opts: BeingCreated): _IRelation;\n    getObject(p: QName, opts?: QueryObjOpts): _IRelation | null;\n    getObject(p: QName, opts?: QueryObjOpts): _IRelation | null {\n        function chk(ret: _IRelation | null): _IRelation | null {\n            const bc = opts?.beingCreated;\n            if (!ret && bc && (\n                !p.schema || p.schema === bc.ownerSchema?.name\n            ) && bc.name === p.name) {\n                ret = bc;\n            }\n            if (!ret && !opts?.nullIfNotFound) {\n                throw new RelationNotFound(p.name);\n            }\n            return ret;\n        }\n        if (p.schema) {\n            if (p.schema === this.name) {\n                return chk(this.getOwnObject(p.name));\n            } else {\n                return chk(this.db.getSchema(p.schema)\n                    .getObject(p, opts));\n            }\n        }\n\n        if (opts?.skipSearch) {\n            return chk(this.getOwnObject(p.name));\n        }\n        for (const sp of this.db.searchPath) {\n            const rel = this.db.getSchema(sp).getOwnObject(p.name);\n            if (rel) {\n                return rel;\n            }\n        }\n        return chk(this.getOwnObject(p.name));\n    }\n\n    getOwnObject(name: string): _IRelation | null {\n        return this.relsByNameCas.get(name)\n            ?? null;\n    }\n\n    getObjectByRegOrName(reg: RegClass): _IRelation;\n    getObjectByRegOrName(reg: RegClass, opts?: QueryObjOpts): _IRelation | null;\n    getObjectByRegOrName(_reg: RegClass, opts?: QueryObjOpts): _IRelation | null {\n        const reg = parseRegClass(_reg);\n\n        if (typeof reg === 'number') {\n            return this.getObjectByRegClassId(reg, opts);\n        }\n\n        return this.getObject(reg, opts);\n    }\n\n    getObjectByRegClassId(reg: number): _IRelation;\n    getObjectByRegClassId(reg: number, opts?: QueryObjOpts): _IRelation | null;\n    getObjectByRegClassId(reg: number, opts?: QueryObjOpts) {\n        function chk<T>(ret: T): T {\n            if (!ret && !opts?.nullIfNotFound) {\n                throw new RelationNotFound(reg.toString());\n            }\n            return ret;\n        }\n        if (opts?.skipSearch) {\n            return chk(this.getOwnObjectByRegClassId(reg));\n        }\n        for (const sp of this.db.searchPath) {\n            const rel = this.db.getSchema(sp).getOwnObjectByRegClassId(reg);\n            if (rel) {\n                return rel;\n            }\n        }\n        return chk(this.getOwnObjectByRegClassId(reg));\n    }\n\n    getOwnObjectByRegClassId(reg: number): _IRelation | null {\n        return this.relsByCls.get(reg)\n            ?? null;\n    }\n\n    createSequence(t: _Transaction, opts: CreateSequenceOptions | nil, _name: QName | nil): _ISequence {\n        _name = _name ?? {\n            name: randomString(),\n        };\n        return new ExecuteCreateSequence(this, {\n            type: 'create sequence',\n            name: _name,\n            options: opts ?? {},\n        }, true).createSeq(t)!;\n    }\n\n    explainLastSelect(): _SelectExplanation | undefined {\n        return this.lastSelect?.explain(new Explainer(this.db.data));\n    }\n\n    explainSelect(sql: string): _SelectExplanation {\n        let parsed = this.parse(sql);\n        if (parsed.length !== 1) {\n            throw new Error('Expecting a single statement');\n        }\n        if (parsed[0].type !== 'select') {\n            throw new Error('Expecting a select statement');\n        }\n        const prepared = new StatementExec(this, parsed[0], sql)\n            .compile();\n        if (!(prepared instanceof SelectExec)) {\n            throw new Error('Can only explain selection executors');\n        }\n        return prepared\n            .selection\n            .explain(new Explainer(this.db.data))\n    }\n\n    executeCreateExtension(p: CreateExtensionStatement) {\n        const ext = this.db.getExtension(p.extension.name);\n        const schema = p.schema\n            ? this.db.getSchema(p.schema.name)\n            : this;\n        this.db.raiseGlobal('create-extension', p.extension, schema, p.version, p.from);\n        const ne = p.ifNotExists; // evaluate outside\n        if (this.installedExtensions.has(p.extension.name)) {\n            if (ne) {\n                return;\n            }\n            throw new QueryError('Extension already created !');\n        }\n\n        ext(schema);\n        this.installedExtensions.add(p.extension.name);\n    }\n\n    getTable(name: string): _ITable;\n    getTable(name: string, nullIfNotFound?: boolean): _ITable | null;\n    getTable(name: string, nullIfNotFound?: boolean): _ITable | null {\n        const ret = this.getOwnObject(name);\n        if ((!ret || ret.type !== 'table')) {\n            if (nullIfNotFound) {\n                return null;\n            }\n            throw new RelationNotFound(name);\n        }\n        return ret;\n    }\n\n\n\n    declareTable(table: Schema, noSchemaChange?: boolean): MemoryTable {\n        const trans = this.db.data.fork();\n        const ret = new MemoryTable(this, trans, table).register();\n        trans.commit();\n        if (!noSchemaChange) {\n            this.db.onSchemaChange();\n        }\n        return ret;\n    }\n\n    registerEquivalentType(type: IEquivalentType): IType {\n        const ret = new EquivalentType(type);\n        this._registerType(ret);\n        return ret;\n    }\n\n    _registerTypeSizeable(name: string, ctor: (sz?: number) => _IType): this {\n        if (this.simpleTypes[name] || this.sizeableTypes[name]) {\n            throw new QueryError(`type \"${name}\" already exists`);\n        }\n        this.sizeableTypes[name] = {\n            ctor,\n            regs: new Map(),\n        };\n        return this;\n    }\n\n    _registerType(type: _IType): this {\n        if (this.simpleTypes[type.primary] || this.sizeableTypes[type.primary] || this.getOwnObject(type.primary)) {\n            throw new QueryError(`type \"${type.primary}\" already exists`);\n        }\n        this.simpleTypes[type.primary] = type;\n        this._reg_register(type);\n        return this;\n    }\n\n    _unregisterType(type: _IType): this {\n        delete this.simpleTypes[type.primary];\n        this._reg_unregister(type);\n        return this;\n    }\n\n\n    _reg_register(rel: _IRelation): Reg {\n        if (this.readonly) {\n            throw new PermissionDeniedError()\n        }\n        if (this.relsByNameCas.has(rel.name)) {\n            throw new Error(`relation \"${rel.name}\" already exists`);\n        }\n        const ret: Reg = regGen();\n        this.relsByNameCas.set(rel.name, rel);\n        this.relsByCls.set(ret.classId, rel);\n        this.relsByTyp.set(ret.typeId, rel);\n        if (rel.type === 'table') {\n            this._tables.add(rel);\n        }\n        return ret;\n    }\n\n    _reg_unregister(rel: _IRelation): void {\n        if (this.readonly) {\n            throw new PermissionDeniedError()\n        }\n        this.relsByNameCas.delete(rel.name);\n        this.relsByCls.delete(rel.reg.classId);\n        this.relsByTyp.delete(rel.reg.typeId);\n        if (rel.type === 'table') {\n            this._tables.delete(rel);\n        }\n    }\n\n    _reg_rename(rel: _IRelation, oldName: string, newName: string): void {\n        if (this.readonly) {\n            throw new PermissionDeniedError()\n        }\n        if (this.relsByNameCas.has(newName)) {\n            throw new Error('relation exists: ' + newName);\n        }\n        if (this.relsByNameCas.get(oldName) !== rel) {\n            throw new Error('consistency error while renaming relation');\n        }\n        this.relsByNameCas.delete(oldName);\n        this.relsByNameCas.set(newName, rel);\n    }\n\n\n\n    tablesCount(t: _Transaction): number {\n        return this._tables.size;\n    }\n\n\n    *listTables(): Iterable<_ITable> {\n        for (const t of this._tables.values()) {\n            if (!t.hidden) {\n                yield t;\n            }\n        }\n    }\n\n    registerFunction(fn: FunctionDefinition, replace?: boolean): this {\n        const def: _FunctionDefinition = {\n            name: fn.name,\n            args: (fn.args?.map<ArgDefDetails>(x => {\n                if (typeof x === 'string' || isType(x)) {\n                    return {\n                        type: this.getTypePub(x),\n                    };\n                }\n                return x;\n            }) ?? []) as _ArgDefDetails[],\n            argsVariadic: fn.argsVariadic && this.getTypePub(fn.argsVariadic),\n            returns: fn.returns && this.getTypePub(fn.returns),\n            impure: !!fn.impure,\n            implementation: fn.implementation,\n            allowNullArguments: fn.allowNullArguments,\n        };\n\n        this.fns.add(def, replace ?? true);\n        return this;\n    }\n\n    registerOperator(op: OperatorDefinition, replace?: boolean): this {\n        this._registerOperator(op, replace ?? true);\n        if (op.commutative && op.left !== op.right) {\n            this._registerOperator({\n                ...op,\n                left: op.right,\n                right: op.left,\n                implementation: (a, b) => op.implementation(b, a),\n            }, replace ?? true);\n        }\n        return this;\n    }\n\n    private _registerOperator(fn: OperatorDefinition, replace: boolean): this {\n        const args = [fn.left, fn.right].map<ArgDefDetails>(x => {\n            if (typeof x === 'string' || isType(x)) {\n                return {\n                    type: this.getTypePub(x),\n                };\n            }\n            return x;\n        }) as _ArgDefDetails[];\n        const def: _OperatorDefinition = {\n            name: fn.operator,\n            args,\n            left: args[0].type,\n            right: args[1].type,\n            returns: fn.returns && this.getTypePub(fn.returns),\n            impure: !!fn.impure,\n            implementation: fn.implementation,\n            allowNullArguments: fn.allowNullArguments,\n            commutative: fn.commutative ?? false,\n        };\n\n        this.ops.add(def, replace);\n        return this;\n    }\n\n\n    resolveFunction(name: string | QName, args: IValue[], forceOwn?: boolean): _FunctionDefinition | nil {\n        const asSingle = asSingleQName(name, this.name);\n        if (!asSingle || !forceOwn) {\n            return this.db.resolveFunction(name, args);\n        }\n        return this.fns.resolve(asSingle, args);\n    }\n\n    getFunction(name: string, args: _IType[]): _FunctionDefinition | nil {\n        return this.fns.getExact(name, args);\n    }\n\n\n    dropFunction(fn: DropFunctionStatement): void {\n        if (fn.name.schema && fn.name.schema !== this.name) {\n            return (this.db.getSchema(fn.name.schema) as DbSchema).dropFunction(fn);\n        }\n        const fns = this.fns.getOverloads(fn.name.name);\n\n        // === determine which function to delete\n        let toRemove: _FunctionDefinition;\n        if (fn.arguments) {\n            const targetArgs = fn.arguments;\n            const match = fns?.filter(x => x.args.length === targetArgs.length\n                && !x.args.some((a, i) => a.type !== this.getType(targetArgs[i].type)));\n            if (!match?.length) {\n                if (fn.ifExists) {\n                    return;\n                }\n                throw new QueryError(`function ${fn.name.name}(${targetArgs.map(t => typeDefToStr(t.type)).join(',')}) does not exist`, '42883');\n            }\n            if (match.length > 1) {\n                throw new QueryError(`function name \"${fn.name.name}\" is ambiguous`, '42725');\n            }\n            toRemove = match[0];\n        } else {\n            if (!fns?.length) {\n                if (fn.ifExists) {\n                    return;\n                }\n                throw new QueryError(`could not find a function named \"${fn.name.name}\"`, '42883');\n            }\n            if (fns?.length !== 1) {\n                throw new QueryError(`function name \"${fn.name.name}\" is not unique`, '42725');\n            }\n            toRemove = fns[0];\n        }\n\n\n        this.fns.remove(toRemove);\n    }\n\n    resolveOperator(name: BinaryOperator, left: IValue, right: IValue, forceOwn?: boolean): _OperatorDefinition | nil {\n        if (!forceOwn) {\n            return this.db.resolveOperator(name, left, right);\n        }\n        return this.ops.resolve(name, [left, right]);\n    }\n\n\n    async migrate(config?: MigrationParams) {\n        await migrate(this, config);\n    }\n\n\n\n    interceptQueries(intercept: QueryInterceptor): ISubscription {\n        const qi = { intercept } as const;\n        this.interceptors.add(qi);\n        return {\n            unsubscribe: () => {\n                this.interceptors.delete(qi);\n            }\n        };\n    }\n}\n\nclass Explainer implements _Explainer {\n    private sels = new Map<_ISelection, number>();\n    constructor(readonly transaction: _Transaction) {\n    }\n\n    idFor(sel: _ISelection): string | number {\n        if (sel.debugId) {\n            return sel.debugId;\n        }\n        if (this.sels.has(sel)) {\n            return this.sels.get(sel)!;\n        }\n        const id = this.sels.size + 1;\n        this.sels.set(sel, id);\n        return id;\n    }\n\n}\n","import { IValue, _IType, _ISelection, _ISchema, _IDb, _Transaction } from '../interfaces-private';\nimport { Types, ArrayType } from '../datatypes';\nimport { QueryError, NotSupported, nil } from '../interfaces';\nimport { Evaluator } from '../evaluator';\nimport hash from 'object-hash';\nimport { parseArrayLiteral, QName } from 'pgsql-ast-parser';\nimport { asSingleQName, nullIsh, qnameToStr } from '../utils';\nimport { buildCtx } from './context';\n\n\nexport function buildCall(name: string | QName, args: IValue[]): IValue {\n    let type: _IType | nil = null;\n    let get: (...args: any[]) => any;\n\n    let impure = false;\n    let acceptNulls = false;\n    const { schema } = buildCtx();\n\n    // put your ugly hack here 😶 🏴‍☠️ ...\n    switch (asSingleQName(name)) {\n        case 'any':\n            return buildAnyCall(args);\n        case 'current_schema':\n            type = Types.text();\n            get = () => 'public';\n            break;\n        // a set of functions that are calledby Tyopeorm, but we dont needto support them yet\n        // since there is not result (function never actually called)\n        case 'pg_get_constraintdef':\n        case 'pg_get_expr':\n            type = Types.text();\n            get = () => {\n                throw new NotSupported(qnameToStr(name) + ' is not supported');\n            };\n            break;\n        case 'unnest':\n            if (args.length !== 1) {\n                throw new QueryError('unnest expects 1 arguments, given ' + args.length);\n            }\n            const utype = args[0].type;\n            if (!(utype instanceof ArrayType)) {\n                throw new QueryError('unnest expects enumerable argument ' + utype.primary);\n            }\n            type = utype.of;\n            get = () => {\n                throw new NotSupported(qnameToStr(name) + ' is not supported');\n            };\n            break;\n        case 'coalesce':\n            acceptNulls = true;\n            if (!args.length) {\n                throw new QueryError('coalesce expects at least 1 argument');\n            }\n            type = args.reduce<_IType>((a, b) => {\n                if (a === b.type) {\n                    return a;\n                }\n                if (b.type.canCast(a)) {\n                    return a;\n                }\n                if (a.canCast(b.type)) {\n                    return b.type;\n                }\n                throw new QueryError(`COALESCE types ${a.name} and ${b.type.name} cannot be matched`, '42804');\n            }, args[0].type);\n            args = args.map(x => x.cast(type!));\n            get = (...args: any[]) => args.find(x => !nullIsh(x));\n            break;\n        default:\n            // try to find a matching custom function overloads\n            acceptNulls = true;\n            const resolved = schema.resolveFunction(name, args);\n            if (resolved) {\n                args = args.map((x, i) => x.cast(resolved.args[i]?.type ?? resolved.argsVariadic));\n                type = resolved.returns;\n                get = resolved.implementation;\n                impure = !!resolved.impure;\n                acceptNulls = !!resolved.allowNullArguments;\n            }\n            break;\n\n    }\n    if (!get!) {\n        throw new QueryError({\n            error: `function ${qnameToStr(name)}(${args.map(a => a.type.name).join(',')}) does not exist`,\n            hint: `🔨 Please note that pg-mem implements very few native functions.\n\n            👉 You can specify the functions you would like to use via \"db.public.registerFunction(...)\"`\n        })\n    }\n    return new Evaluator(\n        type ?? Types.null\n        , null\n        , hash({ call: name, args: args.map(x => x.hash) })\n        , args\n        , (raw, t) => {\n            const argRaw = args.map(x => x.get(raw, t));\n            if (!acceptNulls && argRaw.some(nullIsh)) {\n                return null;\n            }\n            return get(...argRaw);\n        }, impure ? { unpure: impure } : undefined);\n}\n\n\nfunction buildAnyCall(args: IValue[]) {\n    if (args.length !== 1) {\n        throw new QueryError('ANY() expects 1 argument, given ' + args.length);\n    }\n    const array = args[0];\n\n    // == if ANY(select something) ... get the element type\n    if (array.type instanceof ArrayType) {\n        return new Evaluator(\n            array.type.of\n            , null\n            , hash({ any: array.hash })\n            , args\n            , (raw, t) => {\n                return array.get(raw, t);\n            }\n            , { isAny: true } // <== isAny !\n        );\n    }\n\n    // == if ANY('{elements}') ... will be an array of text => keep text\n\n    if (array.type !== Types.text() || !array.isConstantLiteral) {\n        throw new QueryError('ANY() expects either a selection, or an array literal');\n    }\n    // parse ANY() array literal\n    const arrayValue = parseArrayLiteral(array.get());\n    return new Evaluator(\n        Types.text()\n        , null\n        , hash({ any: array.hash })\n        , args\n        , arrayValue\n        , { isAny: true } // <== isAny !\n    );\n}","import { DataType, QueryError } from '../interfaces';\nimport { _IType } from '../interfaces-private';\nimport { Box, Circle, Line, Path, Point, Polygon, Segment } from 'pgsql-ast-parser';\nimport { Evaluator } from '../evaluator';\nimport { TypeBase } from './datatype-base';\n\nexport function pointToStr(p: Point) {\n    return `(${p.x},${p.y})`;\n}\n\nexport function pointEq(a: Point, b: Point) {\n    return a.x === b.x && a.y === b.y;\n}\n\nexport class PointType extends TypeBase<Point> {\n    get primary(): DataType {\n        return DataType.point;\n    }\n    get name() {\n        return 'point';\n    }\n    doCanCast(t: _IType) {\n        return t.primary === DataType.text;\n    }\n\n    doCast(value: Evaluator<Point>, to: _IType) {\n        if (to.primary !== DataType.text) {\n            throw new QueryError(`Invalid cast to: ` + to.primary);\n        }\n        return value\n            .setConversion((p: Point) => {\n                return pointToStr(p);\n            }\n                , pointToTxt => ({ pointToTxt }));\n    }\n\n    doEquals(a: Point, b: Point) {\n        return pointEq(a, b);\n    }\n\n    doGt(a: Point, b: Point) {\n        if (a.x !== b.x) {\n            return a.x > b.x;\n        }\n        return a.y > b.y;\n    }\n\n    doLt(a: Point, b: Point) {\n        if (a.x !== b.x) {\n            return a.x < b.x;\n        }\n        return a.y < b.y;\n    }\n}\n\n\n\nexport class LineType extends TypeBase<Line> {\n\n    get primary(): DataType {\n        return DataType.line;\n    }\n    get name() {\n        return 'line';\n    }\n    doCanCast(t: _IType) {\n        return t.primary === DataType.text;\n    }\n\n    doCast(value: Evaluator<Line>, to: _IType) {\n        if (to.primary !== DataType.text) {\n            throw new QueryError(`Invalid cast to: ` + to.primary);\n        }\n        return value\n            .setConversion((l: Line) => {\n                return `{${l.a},${l.b},${l.c}}`;\n            }\n                , lineToTxt => ({ lineToTxt }));\n    }\n\n    doEquals(a: Line, b: Line) {\n        return a.a === b.a && a.b === b.b && a.c === b.c;\n    }\n}\n\nexport class LsegType extends TypeBase<Segment> {\n\n    get primary(): DataType {\n        return DataType.lseg;\n    }\n    get name() {\n        return 'lseg';\n    }\n    doCanCast(t: _IType) {\n        return t.primary === DataType.text;\n    }\n\n    doCast(value: Evaluator<Segment>, to: _IType) {\n        if (to.primary !== DataType.text) {\n            throw new QueryError(`Invalid cast to: ` + to.primary);\n        }\n        return value\n            .setConversion(([a, b]: Segment) => {\n                return `[${pointToStr(a)},${pointToStr(b)}]`;\n            }\n                , SegmentToTxt => ({ SegmentToTxt }));\n    }\n\n    doEquals([as, ae]: Segment, [bs, be]: Segment) {\n        return pointEq(as, bs) && pointEq(ae, be);\n    }\n}\n\nexport class BoxType extends TypeBase<Box> {\n\n    get primary(): DataType {\n        return DataType.box;\n    }\n    get name() {\n        return 'box';\n    }\n    doCanCast(t: _IType) {\n        return t.primary === DataType.text;\n    }\n\n    doCast(value: Evaluator<Box>, to: _IType) {\n        if (to.primary !== DataType.text) {\n            throw new QueryError(`Invalid cast to: ` + to.primary);\n        }\n        return value\n            .setConversion(([a, b]: Box) => {\n                return `${pointToStr(a)},${pointToStr(b)}`;\n            }\n                , BoxToTxt => ({ BoxToTxt }));\n    }\n\n    doEquals([as, ae]: Box, [bs, be]: Box) {\n        return pointEq(as, bs) && pointEq(ae, be);\n    }\n}\n\nexport class PathType extends TypeBase<Path> {\n\n    get primary(): DataType {\n        return DataType.path;\n    }\n    get name() {\n        return 'path';\n    }\n    doCanCast(t: _IType) {\n        return t.primary === DataType.text;\n    }\n\n    doCast(value: Evaluator<Path>, to: _IType) {\n        if (to.primary !== DataType.text) {\n            throw new QueryError(`Invalid cast to: ` + to.primary);\n        }\n        return value\n            .setConversion((p: Path) => {\n                const vals = p.path.map(pointToStr).join(',');\n                return p.closed\n                    ? '(' + vals + ')'\n                    : '[' + vals + ']';\n            }\n                , PathToTxt => ({ PathToTxt }));\n    }\n\n    doEquals(a: Path, b: Path) {\n        // Yup, you read that right ...\n        //  Try it... path equality always returns true (???)\n        return true;\n        // return !!a.closed === !!b.closed\n        //     && a.path.length === b.path.length\n        //     && a.path.every((x, i) => pointEq(x, b.path[i]));\n    }\n}\n\nexport class PolygonType extends TypeBase<Polygon> {\n\n    get primary(): DataType {\n        return DataType.polygon;\n    }\n    get name() {\n        return 'polygon';\n    }\n    doCanCast(t: _IType) {\n        return t.primary === DataType.text;\n    }\n\n    doCast(value: Evaluator<Polygon>, to: _IType) {\n        if (to.primary !== DataType.text) {\n            throw new QueryError(`Invalid cast to: ` + to.primary);\n        }\n        return value\n            .setConversion((p: Polygon) => {\n                const vals = p.map(pointToStr).join(',');\n                return '(' + vals + ')';\n            }\n                , PolygonToTxt => ({ PolygonToTxt }));\n    }\n\n    doEquals(a: Polygon, b: Polygon) {\n        return a.length === b.length\n            && a.every((x, i) => pointEq(x, b[i]));\n    }\n}\n\n\nexport class CircleType extends TypeBase<Circle> {\n\n    get primary(): DataType {\n        return DataType.circle;\n    }\n    get name() {\n        return 'circle';\n    }\n    doCanCast(t: _IType) {\n        return t.primary === DataType.text;\n    }\n\n    doCast(value: Evaluator<Circle>, to: _IType) {\n        if (to.primary !== DataType.text) {\n            throw new QueryError(`Invalid cast to: ` + to.primary);\n        }\n        return value\n            .setConversion((p: Circle) => {\n                return `<${pointToStr(p.c)},${p.r}>`\n            }\n                , CircleToTxt => ({ CircleToTxt }));\n    }\n\n    doEquals(a: Circle, b: Circle) {\n        return pointEq(a.c, b.c) && a.r === b.r;\n    }\n}\n","import { DataType, nil, _IType } from '../interfaces-private';\nimport { Interval, normalizeInterval, parseIntervalLiteral } from 'pgsql-ast-parser';\nimport { TypeBase } from './datatype-base';\nimport { Evaluator } from '../evaluator';\nimport { intervalToSec } from '../utils';\n\nexport class IntervalType extends TypeBase<Interval> {\n\n    get primary(): DataType {\n        return DataType.interval;\n    }\n\n    doCanBuildFrom(from: _IType) {\n        switch (from.primary) {\n            case DataType.text:\n                return true;\n        }\n        return false;\n    }\n\n    doBuildFrom(value: Evaluator, from: _IType): Evaluator<Interval> | nil {\n        switch (from.primary) {\n            case DataType.text:\n                return value\n                    .setConversion(str => {\n                        const conv = normalizeInterval(parseIntervalLiteral(str));\n                        return conv;\n                    }\n                        , toInterval => ({ toInterval }));\n        }\n        return null;\n    }\n\n    doEquals(a: Interval, b: Interval): boolean {\n        return intervalToSec(a) === intervalToSec(b);\n    }\n    doGt(a: Interval, b: Interval): boolean {\n        return intervalToSec(a) > intervalToSec(b);\n    }\n    doLt(a: Interval, b: Interval): boolean {\n        return intervalToSec(a) < intervalToSec(b);\n    }\n}\n","import { DataType, nil, _IType } from '../interfaces-private';\nimport { TypeBase } from './datatype-base';\nimport { Evaluator } from '../evaluator';\nimport { parseTime } from '../utils';\n\n\nexport class TimeType extends TypeBase<string> {\n\n\n    constructor(readonly primary: DataType.time | DataType.timetz) {\n        super();\n    }\n\n\n    get name(): string {\n        return this.primary === DataType.timetz\n            ? 'time with time zone'\n            : 'time without time zone';\n    }\n\n\n    doCanCast(to: _IType) {\n        switch (to.primary) {\n            case DataType.text:\n            case DataType.timetz:\n            case DataType.time:\n                return true;\n        }\n        return null;\n    }\n\n\n    doCanConvertImplicit(to: _IType) {\n        switch (to.primary) {\n            case DataType.timetz:\n                return true;\n            case DataType.time:\n                return this.primary === DataType.time;\n        }\n        return false;\n    }\n\n\n    doCast(value: Evaluator, to: _IType) {\n        switch (to.primary) {\n            case DataType.text:\n            case DataType.time:\n            case DataType.timetz:\n                return value\n                    .setType(to);\n        }\n        throw new Error('Unexpected cast error');\n    }\n\n\n    doCanBuildFrom(from: _IType) {\n        switch (from.primary) {\n            case DataType.text:\n                return true;\n        }\n        return false;\n    }\n\n    doBuildFrom(value: Evaluator, from: _IType): Evaluator<string> | nil {\n        switch (from.primary) {\n            case DataType.text:\n                return value\n                    .setConversion(str => {\n                        const conv = parseTime(str);\n                        const ret = conv.format('HH:mm:ss');\n                        const ms = conv.milliseconds();\n                        return ms\n                            ? ret + (ms / 1000).toString(10).substr(1)\n                            : ret;\n                    }\n                        , toTime => ({ toTime }));\n        }\n        return null;\n    }\n\n}\n","import { DataType, nil, QueryError, _IType } from '../interfaces-private';\nimport { TypeBase } from './datatype-base';\nimport { Evaluator } from '../evaluator';\nimport moment from 'moment';\nimport { parseTime, nullIsh } from '../utils';\n\nexport class TimestampType extends TypeBase<Date> {\n\n\n    constructor(readonly primary: DataType, readonly precision: number | null = null) {\n        super();\n    }\n\n    get name(): string {\n        if (!nullIsh(this.precision)) {\n            return `${this.primary}(${this.precision})`;\n        }\n        switch (this.primary) {\n            case DataType.timestamp:\n                return 'timestamp without time zone';\n            case DataType.timestamptz:\n                return 'timestamp with time zone';\n            case DataType.date:\n                return 'date';\n            case DataType.time:\n                return 'time without time zone';\n            case DataType.timetz:\n                return 'time with time zone';\n        }\n        return this.primary;\n    }\n\n    doCanCast(to: _IType) {\n        switch (to.primary) {\n            case DataType.timestamp:\n            case DataType.timestamptz:\n            case DataType.date:\n                return this.primary !== DataType.time && this.primary !== DataType.timetz;\n            case DataType.time:\n                return this.primary !== DataType.date;\n            case DataType.timetz:\n                return this.primary !== DataType.date && this.primary !== DataType.timestamp;\n        }\n        return null;\n    }\n\n    doCanConvertImplicit(to: _IType) {\n        switch (to.primary) {\n            case DataType.timestamp:\n                return this.primary === DataType.timestamp\n                    || this.primary === DataType.date;\n            case DataType.timestamptz:\n                return this.primary !== DataType.time;\n            case DataType.date:\n                return this.primary === DataType.date;\n            case DataType.time:\n                return this.primary === DataType.time; // nothing can implicitly cast to time\n        }\n        return false;\n    }\n\n    doCast(value: Evaluator, to: _IType) {\n        switch (to.primary) {\n            case DataType.timestamp:\n            case DataType.timestamptz:\n                return value;\n            case DataType.date:\n                return value\n                    .setConversion(raw => moment.utc(raw).startOf('day').toDate()\n                        , toDate => ({ toDate }));\n            case DataType.time:\n            case DataType.timetz:\n                return value\n                    .setConversion(raw => moment.utc(raw).format('HH:mm:ss') + '.000000'\n                        , toDate => ({ toDate }));\n        }\n        throw new Error('Unexpected cast error');\n    }\n\n\n    doCanBuildFrom(from: _IType) {\n        switch (from.primary) {\n            case DataType.text:\n                return true;\n        }\n        return false;\n    }\n\n    doBuildFrom(value: Evaluator, from: _IType): Evaluator<Date> | nil {\n        switch (from.primary) {\n            case DataType.text:\n                switch (this.primary) {\n                    case DataType.timestamp:\n                    case DataType.timestamptz:\n                        return value\n                            .setConversion(str => {\n                                const conv = moment.utc(str);\n                                if (!conv.isValid()) {\n                                    throw new QueryError(`Invalid timestamp format: ` + str);\n                                }\n                                return conv.toDate()\n                            }\n                                , toTs => ({ toTs, t: this.primary }));\n                    case DataType.date:\n                        return value\n                            .setConversion(str => {\n                                const conv = moment.utc(str);\n                                if (!conv.isValid()) {\n                                    throw new QueryError(`Invalid timestamp format: ` + str);\n                                }\n                                return conv.startOf('day').toDate();\n                            }\n                                , toDate => ({ toDate }));\n                    case DataType.time:\n                    case DataType.timetz:\n                        return value\n                            .setConversion(str => {\n                                parseTime(str); // will throw an error if invalid format\n                                return str;\n                            }\n                                , toTime => ({ toTime, t: this.primary }));\n                }\n        }\n        return null;\n    }\n\n\n\n    doEquals(a: any, b: any): boolean {\n        return Math.abs(moment(a).diff(moment(b))) < 0.1;\n    }\n    doGt(a: any, b: any): boolean {\n        return moment(a).diff(moment(b)) > 0;\n    }\n    doLt(a: any, b: any): boolean {\n        return moment(a).diff(moment(b)) < 0;\n    }\n}","import { DataType, nil, _IType } from '../interfaces-private';\nimport { TypeBase } from './datatype-base';\nimport { Evaluator } from '../evaluator';\nimport { deepCompare, deepEqual, errorMessage } from '../utils';\nimport { Types } from './datatypes';\nimport { JSON_NIL } from '../execution/clean-results';\nimport { QueryError } from '../interfaces';\nimport stringify from 'json-stable-stringify';\n\nexport class JSONBType extends TypeBase<any> {\n\n\n    constructor(readonly primary: DataType) {\n        super();\n    }\n\n    doCanCast(_to: _IType): boolean | nil {\n        switch (_to.primary) {\n            case DataType.text:\n            case DataType.json:\n            case DataType.jsonb:\n            case DataType.float:\n            case DataType.bool:\n            case DataType.integer:\n                return true;\n        }\n        return null;\n    }\n\n    doCast(a: Evaluator, to: _IType): Evaluator {\n        switch (to.primary) {\n            case DataType.text:\n                return a\n                    .setType(Types.text())\n                    .setConversion(json => stringify(this.toResult(json))\n                        , toJsonB => ({ toJsonB }))\n                    .cast(to) as Evaluator; // <== might need truncation\n            case DataType.jsonb:\n            case DataType.json:\n                return a.setType(to);\n            case DataType.float:\n            case DataType.integer:\n                const isInt = to.primary === DataType.integer;\n                return a\n                    .setType(to)\n                    .setConversion(json => {\n                        if (json === JSON_NIL) {\n                            throw new QueryError('cannot cast jsonb null to type ' + (isInt ? 'integer' : 'double precision'), '22023');\n                        }\n                        if (typeof json !== 'number') {\n                            throw new QueryError('cannot cast jsonb string to type ' + (isInt ? 'integer' : 'double precision'), '22023');\n                        }\n                        return isInt ? Math.round(json) : json;\n                    }, toFloat => ({ toFloat }));\n            case DataType.bool:\n                return a\n                    .setType(to)\n                    .setConversion(json => {\n                        if (typeof json !== 'boolean') {\n                            throw new QueryError('cannot cast jsonb string to type boolean', '22023');\n                        }\n                        return json;\n                    }, toFloat => ({ toFloat }));\n            default:\n                return a.setType(to);\n        }\n\n    }\n\n\n\n    doCanBuildFrom(from: _IType) {\n        switch (from.primary) {\n            case DataType.text:\n                return true;\n        }\n        return false;\n    }\n\n    doBuildFrom(value: Evaluator, from: _IType): Evaluator<Date> | nil {\n        switch (from.primary) {\n            case DataType.text:\n                return value\n                    .setConversion(raw => {\n                        try {\n                            return JSON.parse(raw, (_, x) => x ?? JSON_NIL) ?? JSON_NIL\n                        } catch (e) {\n                            throw new QueryError({\n                                error: `invalid input syntax for type json`,\n                                details: errorMessage(e),\n                                code: '22P02',\n                            });\n                        }\n                    }\n                        , toJsonb => ({ toJsonb }));\n        }\n        return null;\n    }\n\n\n\n    doEquals(a: any, b: any): boolean {\n        return deepEqual(this.toResult(a), this.toResult(b), false);\n    }\n\n    doGt(a: any, b: any): boolean {\n        return deepCompare(this.toResult(a), this.toResult(b)) > 0;\n    }\n\n    doLt(a: any, b: any): boolean {\n        return deepCompare(this.toResult(a), this.toResult(b)) < 0;\n    }\n\n    toResult(result: any): any {\n        return result === JSON_NIL\n            ? null\n            : result;\n    }\n\n}\n","import { DataType, nil, QueryError, RegClass, RegType, _IType } from '../interfaces-private';\nimport { TypeBase } from './datatype-base';\nimport { Evaluator } from '../evaluator';\nimport { Types } from './datatypes';\nimport { buildCtx } from '../parser/context';\n\nexport class RegTypeImpl extends TypeBase<RegType> {\n\n\n    get primary(): DataType {\n        return DataType.regtype;\n    }\n\n    doCanCast(_to: _IType): boolean | nil {\n        switch (_to.primary) {\n            case DataType.text:\n            case DataType.integer:\n                return true;\n        }\n        return null;\n    }\n\n    doCast(a: Evaluator<RegType>, to: _IType): Evaluator {\n        switch (to.primary) {\n            case DataType.text:\n                return a\n                    .setType(to)\n                    .setConversion(raw => raw.toString(10)\n                        , toText => ({ toText }))\n            case DataType.integer:\n                const { schema } = buildCtx();\n                return a\n                    .setType(to)\n                    .setConversion((raw: RegType) => {\n                        if (typeof raw === 'number') {\n                            return raw;\n                        }\n                        const t = schema.parseType(raw);\n                        return t.reg.typeId;\n                    }\n                        , toText => ({ toText }))\n        }\n        throw new Error('failed to cast');\n    }\n\n\n    doCanBuildFrom(from: _IType) {\n        switch (from.primary) {\n            case DataType.text:\n                return true;\n        }\n        return false;\n    }\n\n    doBuildFrom(value: Evaluator, from: _IType): Evaluator<RegClass> | nil {\n        switch (from.primary) {\n            case DataType.text:\n                const { schema } = buildCtx();\n                return value\n                    .setType(Types.regtype)\n                    .setConversion((str: string) => {\n                        let repl = str.replace(/[\"\\s]+/g, '');\n                        if (repl.startsWith('pg_catalog.')) {\n                            repl = repl.substr('pg_catalog.'.length);\n                        }\n                        return schema.parseType(repl).name;\n                    }\n                        , strToRegType => ({ strToRegType }));\n        }\n        return null;\n    }\n\n}\n","import { DataType, nil, QueryError, RegClass, _IType } from '../interfaces-private';\nimport { TypeBase } from './datatype-base';\nimport { Evaluator } from '../evaluator';\nimport { parseRegClass } from '../utils';\nimport { Types } from './datatypes';\nimport { buildCtx } from '../parser/context';\n\nexport class RegClassImpl extends TypeBase<RegClass> {\n\n\n\n    get primary(): DataType {\n        return DataType.regclass;\n    }\n\n    doCanCast(_to: _IType): boolean | nil {\n        switch (_to.primary) {\n            case DataType.text:\n            case DataType.integer:\n                return true;\n        }\n        return null;\n    }\n\n    doCast(a: Evaluator, to: _IType): Evaluator {\n        const { schema } = buildCtx();\n        switch (to.primary) {\n            case DataType.text:\n                return a\n                    .setType(Types.text())\n                    .setConversion((raw: RegClass) => {\n                        return raw?.toString();\n                    }\n                        , toText => ({ toText }))\n            case DataType.integer:\n                return a\n                    .setType(Types.text())\n                    .setConversion((raw: RegClass) => {\n\n                        // === regclass -> int\n\n                        const cls = parseRegClass(raw);\n\n                        // if its a number, then try to get it.\n                        if (typeof cls === 'number') {\n                            return schema.getObjectByRegOrName(cls)\n                                ?.reg.classId\n                                ?? cls;\n                        }\n\n                        // get the object or throw\n                        return schema.getObjectByRegOrName(raw)\n                            .reg.classId;\n                    }\n                        , toText => ({ toText }))\n        }\n        throw new Error('failed to cast');\n    }\n\n\n\n    doCanBuildFrom(from: _IType) {\n        switch (from.primary) {\n            case DataType.text:\n                return true;\n        }\n        return false;\n    }\n\n    doBuildFrom(value: Evaluator, from: _IType): Evaluator<RegClass> | nil {\n        const { schema } = buildCtx();\n        switch (from.primary) {\n            case DataType.text:\n                return value\n                    .setConversion((str: string) => {\n                        // === text -> regclass\n\n                        const cls = parseRegClass(str);\n\n                        // if its a number, then try to get it.\n                        if (typeof cls === 'number') {\n                            return schema.getObjectByRegOrName(cls)\n                                ?.name\n                                ?? cls;\n                        }\n\n                        // else, get or throw.\n                        return schema.getObject(cls)\n                            .name;\n                    }\n                        , strToRegClass => ({ strToRegClass }));\n        }\n        return null;\n    }\n\n}\n","import { Evaluator } from '../evaluator';\nimport { TypeBase } from './datatype-base';\nimport { DataType, nil, QueryError } from '../interfaces';\nimport { _ISchema, _IType } from '../interfaces-private';\n\n// https://www.postgresql.org/docs/13/datatype-net-types.html#DATATYPE-INET\n\nexport class INetType extends TypeBase<string> {\n\n    get primary(): DataType {\n        return DataType.inet\n    }\n\n    doCanCast(to: _IType) {\n        return to.primary === DataType.text;\n    }\n\n    doCast(value: Evaluator<string>, to: _IType<string>): Evaluator<any> | nil {\n        return value;\n    }\n\n    prefer(type: _IType<any>): _IType | nil {\n        return this;\n    }\n\n    doCanBuildFrom(from: _IType): boolean | nil {\n        return from.primary === DataType.text;\n    }\n\n    doBuildFrom(value: Evaluator<string>, from: _IType<string>): Evaluator<string> | nil {\n        return value\n            .setConversion(x => {\n                const [_, a, b, c, d, __, m] = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)(\\/(\\d+))?$/.exec(x) ?? []\n                if ([a, b, c, d].some(notByte) || notMask(m)) {\n                    throw new QueryError(`invalid input syntax for type inet: ${x}`);\n                }\n                return x;\n            }, toInet => ({ toInet }));\n    }\n}\n\nfunction notByte(b: string) {\n    return !b\n        || b.length > 1 && b[0] === '0'\n        || parseInt(b, 10) > 255;\n}\n\nfunction notMask(b: string) {\n    return b\n        && (b.length > 1 && b[0] === '0'\n            || parseInt(b, 10) > 32);\n}","import { IMemoryTable, Schema, QueryError, TableEvent, PermissionDeniedError, NotSupported, IndexDef, ISubscription, nil, ColumnDef } from './interfaces';\nimport { IValue, _ITable, setId, getId, CreateIndexDef, CreateIndexColDef, _Transaction, _ISchema, _Column, _IType, SchemaField, _IIndex, _Explainer, _SelectExplanation, ChangeHandler, Stats, DropHandler, IndexHandler, asIndex, Reg, ChangeOpts, _IConstraint, TruncateHandler, TruncateOpts } from './interfaces-private';\nimport { buildValue } from './parser/expression-builder';\nimport { BIndex } from './schema/btree-index';\nimport { columnEvaluator } from './transforms/selection';\nimport { nullIsh, deepCloneSimple, Optional, indexHash, findTemplate, colByName } from './utils';\nimport { Map as ImMap } from 'immutable';\nimport { CreateColumnDef, TableConstraintForeignKey, TableConstraint, Expr, Name, ExprRef } from 'pgsql-ast-parser';\nimport { ColRef } from './column';\nimport { buildAlias, Alias } from './transforms/alias';\nimport { DataSourceBase } from './transforms/transform-base';\nimport { ForeignKey } from './constraints/foreign-key';\nimport { Types } from './datatypes';\nimport { withSelection } from './parser/context';\nimport { SubscriptionConstraint } from './constraints/subscription';\nimport { ConstraintWrapper } from './constraints/wrapped';\nimport { IndexConstraint } from './constraints/index-cst';\n\n\ntype Raw<T> = ImMap<string, T>;\n\n\ninterface ChangeSub<T> {\n    before: Set<ChangeHandler<T>>;\n    after: Set<ChangeHandler<T>>;\n}\n\ninterface ChangePlan<T> {\n    before(): void\n    after(): void;\n}\n\nclass ColumnManager {\n    private _columns?: readonly IValue[];\n    readonly map = new Map<string, ColRef>();\n\n    get columns(): readonly IValue[] {\n        if (!this._columns) {\n            this._columns = Object.freeze(Array.from(this.map.values(), c => c.expression));\n        }\n        return this._columns!;\n    }\n    invalidateColumns() {\n        this._columns = undefined;\n    }\n\n    // Pass-through methods\n    get = this.map.get.bind(this.map);\n    has = this.map.has.bind(this.map)\n    values = this.map.values.bind(this.map);\n\n    set(name: string, colDef: ColRef) {\n        this.invalidateColumns();\n        return this.map.set(name, colDef);\n    }\n\n    delete(name: string) {\n        this.invalidateColumns();\n        return this.map.delete(name);\n    }\n}\n\nexport class MemoryTable<T = any> extends DataSourceBase<T> implements IMemoryTable, _ITable<T> {\n    get isExecutionWithNoResult(): boolean {\n        return false;\n    }\n    private handlers = new Map<TableEvent, Set<() => void>>();\n    readonly selection: Alias<T>;\n    private _reg?: Reg;\n    get reg(): Reg {\n        if (!this._reg) {\n            throw new QueryError(`relation \"${this.name}\" does not exist`);\n        }\n        return this._reg;\n    }\n    get columns() {\n        return this.columnMgr.columns;\n    }\n    private it = 0;\n    private cstGen = 0;\n    private hasPrimary: BIndex | null = null;\n    private readonly = false;\n    hidden = false;\n    private dataId = Symbol();\n    private serialsId: symbol = Symbol();\n    private constraintsByName = new Map<string, _IConstraint>();\n    private indexByHashAndName = new Map<string, Map<string, {\n        index: BIndex<T>;\n        expressions: IValue[];\n    }>>();\n    readonly columnMgr = new ColumnManager();\n    name: string;\n\n    private changeHandlers = new Map<_Column | null, ChangeSub<T>>();\n    private truncateHandlers = new Set<TruncateHandler>();\n    private drophandlers = new Set<DropHandler>();\n    private indexHandlers = new Set<IndexHandler>();\n\n    get type() {\n        return 'table' as const;\n    }\n\n    get debugId() {\n        return this.name;\n    }\n\n    entropy(t: _Transaction) {\n        return this.bin(t).size;\n    }\n\n    isOriginOf(a: IValue<any>): boolean {\n        return a.origin === this.selection;\n    }\n\n    constructor(schema: _ISchema, t: _Transaction, _schema: Schema) {\n        super(schema);\n        this.name = _schema.name;\n        this.selection = buildAlias(this, this.name) as Alias<T>;\n\n        // fields\n        for (const s of _schema.fields) {\n            this.addColumn(s, t);\n        }\n\n\n        // other table constraints\n        for (const c of _schema.constraints ?? []) {\n            this.addConstraint(c, t);\n        }\n    }\n\n    register() {\n        // once fields registered,\n        //  then register the table\n        //  (column registrations need it not to be registered yet)\n        this._reg = this.ownerSchema._reg_register(this);\n        return this;\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        return {\n            count: this.bin(t).size,\n        };\n    }\n\n    rename(name: string) {\n        const on = this.name;\n        if (on === name) {\n            return this;\n        }\n        this.name = name;\n        this.ownerSchema._reg_rename(this, on, name);\n        (this.selection as Alias<T>).name = this.name;\n        this.db.onSchemaChange();\n        return this;\n    }\n\n    getColumn(column: string | ExprRef): IValue;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue<any> | nil {\n        return colByName(this.columnMgr.map, column, nullIfNotFound)\n            ?.expression;\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            _: 'table',\n            table: this.name,\n        };\n    }\n\n    addColumn(column: SchemaField | CreateColumnDef, t: _Transaction): _Column {\n        if ('dataType' in column) {\n            const tp: SchemaField = {\n                ...column,\n                name: column.name.name,\n                type: this.ownerSchema.getType(column.dataType),\n            };\n            delete (tp as any as Optional<CreateColumnDef>).dataType;\n            return this.addColumn(tp, t);\n        }\n\n        if (this.columnMgr.has(column.name)) {\n            throw new QueryError(`Column \"${column.name}\" already exists`);\n        }\n        const type = typeof column.type === 'string'\n            ? this.ownerSchema.getType(column.type)\n            : column.type;\n        const cref = new ColRef(this, columnEvaluator(this.selection, column.name, type as _IType), column, column.name);\n\n\n        // auto increments\n        if (column.serial) {\n            t.set(this.serialsId, t.getMap(this.serialsId).set(column.name, 0));\n        }\n\n        this.columnMgr.set(column.name, cref);\n\n        try {\n            if (column.constraints?.length) {\n                cref.addConstraints(column.constraints, t);\n            }\n            const hasDefault = column.constraints?.some(x => x.type === 'default');\n            if (!hasDefault) {\n                this.remapData(t, x => (x as any)[column.name] = (x as any)[column.name] ?? null);\n            }\n        } catch (e) {\n            this.columnMgr.delete(column.name);\n            throw e;\n        }\n\n        // once constraints created, reference them. (constraint creation might have thrown)m\n        this.db.onSchemaChange();\n        this.selection.rebuild();\n        return cref;\n    }\n\n\n    getColumnRef(column: string): ColRef;\n    getColumnRef(column: string, nullIfNotFound?: boolean): ColRef | nil;\n    getColumnRef(column: string, nullIfNotFound?: boolean): ColRef | nil {\n        const got = this.columnMgr.get(column);\n        if (!got) {\n            if (nullIfNotFound) {\n                return null;\n            }\n            throw new QueryError(`Column \"${column}\" not found`);\n        }\n        return got;\n    }\n\n    bin(t: _Transaction) {\n        return t.getMap<Raw<T>>(this.dataId);\n    }\n\n    setBin(t: _Transaction, val: Raw<T>) {\n        return t.set(this.dataId, val);\n    }\n\n    on(event: TableEvent, handler: () => any): ISubscription {\n        let lst = this.handlers.get(event);\n        if (!lst) {\n            this.handlers.set(event, lst = new Set());\n        }\n        lst.add(handler);\n        return {\n            unsubscribe: () => lst!.delete(handler),\n        };\n    }\n\n    raise(event: TableEvent) {\n        const got = this.handlers.get(event);\n        for (const h of got ?? []) {\n            h();\n        }\n        this.db.raiseTable(this.name, event);\n    }\n\n    setReadonly() {\n        this.readonly = true;\n        return this;\n    }\n    setHidden() {\n        this.hidden = true;\n        return this;\n    }\n\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        this.raise('seq-scan');\n        for (const v of this.bin(t).values()) {\n            yield deepCloneSimple(v); // copy the original data to prevent it from being mutated.\n        }\n    }\n\n    find(template?: T, columns?: (keyof T)[]): Iterable<T> {\n        return findTemplate(this.selection, this.db.data, template, columns);\n    }\n\n    remapData(t: _Transaction, modify: (newCopy: T) => any) {\n        // convert raw data (⚠ must copy the whole thing,\n        // because it can throw in the middle of this process !)\n        //  => this would result in partially converted tables.\n        const converted = this.bin(t).map(x => {\n            const copy = { ...x };\n            modify(copy);\n            return copy;\n        });\n        this.setBin(t, converted);\n    }\n\n    insert(toInsert: T): T | null {\n        const ret = this.doInsert(this.db.data, deepCloneSimple(toInsert));\n        if (ret == null) {\n            return null\n        }\n        return deepCloneSimple(ret);\n    }\n\n    doInsert(t: _Transaction, toInsert: T, opts?: ChangeOpts): T | null {\n        if (this.readonly) {\n            throw new PermissionDeniedError(this.name);\n        }\n\n        // get ID of this item\n        const newId = this.name + '_' + (this.it++);\n        setId(toInsert, newId);\n\n        // serial (auto increments) columns\n        let serials = t.getMap(this.serialsId);\n        for (const [k, v] of serials.entries()) {\n            if (!nullIsh((toInsert as any)[k])) {\n                continue;\n            }\n            (toInsert as any)[k] = v + 1;\n            serials = serials.set(k, v + 1);\n        }\n        t.set(this.serialsId, serials);\n\n        // set default values\n        for (const c of this.columnMgr.values()) {\n            c.setDefaults(toInsert, t);\n        }\n\n        // check change handlers (foreign keys)\n        const changePlan = this.changePlan(t, null, toInsert, opts);\n        changePlan.before();\n\n        // check \"on conflict\"\n        const onConflict = opts?.onConflict;\n        if (onConflict) {\n            if ('ignore' in onConflict) {\n                if (onConflict.ignore === 'all') {\n                    for (const map of this.indexByHashAndName.values()) {\n                        for (const k of map.values()) {\n                            if (!k.index.unique) {\n                                continue;\n                            }\n                            const key = k.index.buildKey(toInsert, t);\n                            const found = k.index.eqFirst(key, t);\n                            if (found) {\n                                // This function returns the inserted row,\n                                // but in this case we had a conflict and no row was inserted.\n                                // So we return null.\n                                return null; // ignore.\n                            }\n                        }\n                    }\n                } else {\n                    const index = onConflict.ignore as BIndex;\n                    const key = index.buildKey(toInsert, t);\n                    const found = index.eqFirst(key, t);\n                    if (found) {\n                        return found; // ignore.\n                    }\n                }\n            } else {\n                const index = onConflict.onIndex as BIndex;\n                const key = index.buildKey(toInsert, t);\n                const got = index.eqFirst(key, t);\n                if (got) {\n                    // update !\n                    onConflict.update(got, toInsert, t);\n                    return this.update(t, got);\n                }\n            }\n        }\n\n        // check constraints\n        for (const c of this.columnMgr.values()) {\n            c.checkConstraints(toInsert, t);\n        }\n\n        // check change handlers (foreign keys)\n        changePlan.after();\n\n        // index & check indx contrainsts\n        this.indexElt(t, toInsert);\n        this.setBin(t, this.bin(t).set(newId, toInsert));\n        return toInsert;\n    }\n\n    private changePlan(t: _Transaction, old: T | null, neu: T | null, _opts: ChangeOpts | nil): ChangePlan<T> {\n        const opts = _opts ?? {};\n        let iter: () => IterableIterator<ChangeSub<T>>;\n        if (!old || !neu) {\n            iter = () => this.changeHandlers.values();\n        } else {\n            const ret: ChangeSub<T>[] = [];\n            const global = this.changeHandlers.get(null);\n            if (global) {\n                ret.push(global);\n            }\n            for (const def of this.columnMgr.values()) {\n                const h = this.changeHandlers.get(def);\n                if (!h) {\n                    continue;\n                }\n                const oldVal = (old as any)[def.expression.id!];\n                const neuVal = (neu as any)[def.expression.id!];\n                if (def.expression.type.equals(oldVal, neuVal)) {\n                    continue;\n                }\n                ret.push(h);\n            }\n            iter = ret[Symbol.iterator].bind(ret);\n        }\n        return {\n            before: () => {\n                const ran = new Set();\n                for (const { before } of iter()) {\n                    for (const b of before) {\n                        if (!b || ran.has(b)) {\n                            continue;\n                        }\n                        b(old, neu, t, opts);\n                        ran.add(b);\n                    }\n                }\n            },\n            after: () => {\n                const ran = new Set();\n                for (const { after } of iter()) {\n                    for (const a of after) {\n                        if (!a || ran.has(a)) {\n                            continue;\n                        }\n                        a(old, neu, t, opts);\n                        ran.add(a);\n                    }\n                }\n            },\n        }\n    }\n\n    update(t: _Transaction, toUpdate: T): T {\n        if (this.readonly) {\n            throw new PermissionDeniedError(this.name);\n        }\n        const bin = this.bin(t);\n        const id = getId(toUpdate);\n        const exists = bin.get(id) ?? null;\n\n        // set default values\n        for (const c of this.columnMgr.values()) {\n            c.setDefaults(toUpdate, t);\n        }\n\n\n\n        // check change handlers (foreign keys)\n        const changePlan = this.changePlan(t, exists, toUpdate, null);\n        changePlan.before();\n        changePlan.after();\n\n\n        // check constraints\n        for (const c of this.columnMgr.values()) {\n            c.checkConstraints(toUpdate, t);\n        }\n\n        // remove old version from index\n        if (exists) {\n            for (const map of this.indexByHashAndName.values()) {\n                for (const k of map.values()) {\n                    k.index.delete(exists, t);\n                }\n            }\n        }\n\n        // add new version to index\n        this.indexElt(t, toUpdate);\n\n        // store raw\n        this.setBin(t, bin.delete(id).set(id, toUpdate));\n        return toUpdate;\n    }\n\n    delete(t: _Transaction, toDelete: T) {\n        const id = getId(toDelete);\n        const bin = this.bin(t);\n        const got = bin.get(id);\n        if (!id || !got) {\n            throw new Error('Unexpected error: an operation has been asked on an item which does not belong to this table');\n        }\n\n        // check change handlers (foreign keys)\n        const changePlan = this.changePlan(t, toDelete, null, null);\n        changePlan.before();\n        changePlan.after();\n\n        // remove from indices\n        for (const map of this.indexByHashAndName.values()) {\n            for (const k of map.values()) {\n                k.index.delete(got, t);\n            }\n        }\n        this.setBin(t, bin.delete(id));\n\n        return got;\n    }\n\n    truncate(t: _Transaction, _opts?: TruncateOpts): void {\n        const opts: TruncateOpts = _opts ?? {};\n        // call truncate handlers\n        for (const h of this.truncateHandlers) {\n            h(t, opts);\n        }\n        // truncate indices\n        for (const map of this.indexByHashAndName.values()) {\n            for (const k of map.values()) {\n                k.index.truncate(t);\n            }\n        }\n        this.setBin(t, ImMap());\n    }\n\n\n    private indexElt(t: _Transaction, toInsert: T) {\n        for (const map of this.indexByHashAndName.values()) {\n            for (const k of map.values()) {\n                k.index.add(toInsert, t);\n            }\n        }\n    }\n\n    hasItem(item: T, t: _Transaction) {\n        const id = getId(item);\n        return this.bin(t).has(id);\n    }\n\n    getIndex(...forValues: IValue[]): _IIndex | nil {\n        if (!forValues.length || forValues.some(x => !x || !this.isOriginOf(x))) {\n            return null;\n        }\n        const ihash = indexHash(forValues);\n        if (this.hasPrimary?.hash === ihash) {\n            return this.hasPrimary;\n        }\n        const map = this.indexByHashAndName.get(ihash);\n        const got = map?.values().next().value;\n        return got?.index ?? null;\n    }\n\n    constraintNameGen(constraintName?: string) {\n        return constraintName\n            ?? (this.name + '_constraint_' + (++this.cstGen));\n    }\n\n    addCheck(_t: _Transaction, check: Expr, constraintName?: string): _IConstraint {\n        constraintName = this.constraintNameGen(constraintName);\n        this.checkNoConstraint(constraintName);\n        const getter = withSelection(this.selection, () => buildValue(check).cast(Types.bool));\n\n        const checkVal = (t: _Transaction, v: any) => {\n            const value = getter.get(v, t);\n            if (value === false) {\n                throw new QueryError(`check constraint \"${constraintName}\" is violated by some row`)\n            }\n        }\n\n        // check that everything matches (before adding check)\n        for (const v of this.enumerate(_t)) {\n            checkVal(_t, v);\n        }\n\n        // add a check for future updates\n        const sub = this.onBeforeChange('all', (old, neu, ct) => {\n            if (!neu) {\n                return;\n            }\n            checkVal(ct, neu);\n        });\n\n        const ret = new SubscriptionConstraint(constraintName, () => sub.unsubscribe());\n        return new ConstraintWrapper(this.constraintsByName, ret);\n    }\n\n\n    createIndex(t: _Transaction, expressions: CreateIndexDef): _IConstraint | nil;\n    createIndex(t: _Transaction, expressions: Name[], type: 'primary' | 'unique', indexName?: string | nil): _IConstraint;\n    createIndex(t: _Transaction, expressions: Name[] | CreateIndexDef, _type?: 'primary' | 'unique', _indexName?: string): _IConstraint | nil {\n        if (this.readonly) {\n            throw new PermissionDeniedError(this.name);\n        }\n        if (!_indexName && _type === 'primary') {\n            _indexName = `${this.name}_pkey`;\n        }\n        if (Array.isArray(expressions)) {\n            const keys: CreateIndexColDef[] = [];\n            for (const e of expressions) {\n                const getter = this.selection.getColumn(e.name);\n                keys.push({\n                    value: getter,\n                });\n            }\n            return this.createIndex(t, {\n                columns: keys,\n                primary: _type === 'primary',\n                notNull: _type === 'primary',\n                unique: !!_type,\n                indexName: _indexName,\n            });\n        }\n\n        if (!expressions?.columns?.length) {\n            throw new QueryError('Empty index');\n        }\n\n        if (expressions.primary && this.hasPrimary) {\n            throw new QueryError('Table ' + this.name + ' already has a primary key');\n        }\n        if (expressions.primary) {\n            expressions.notNull = true;\n            expressions.unique = true;\n        }\n\n\n        const ihash = indexHash(expressions.columns.map(x => x.value));\n\n        const indexName = this.determineIndexRelName(expressions.indexName, ihash, expressions.ifNotExists, 'idx');\n        if (!indexName) {\n            return null;\n        }\n        this.checkNoConstraint(indexName);\n\n\n        const index = new BIndex(t\n            , indexName\n            , expressions.columns\n            , this\n            , ihash\n            , !!expressions.unique\n            , !!expressions.notNull\n            , expressions.predicate);\n\n        // fill index (might throw if constraint not respected)\n        const bin = this.bin(t);\n        for (const e of bin.values()) {\n            index.add(e, t);\n        }\n\n        // =========== reference index ============\n        this.indexHandlers.forEach(h => h('create', index));\n        // ⚠⚠ This must be done LAST, to avoid throwing an execption if index population failed\n        for (const col of index.expressions) {\n            for (const used of col.usedColumns) {\n                this.getColumnRef(used.id!).usedInIndexes.add(index);\n            }\n        }\n        const indexesByHash = this.indexByHashAndName.get(ihash) || new Map<string, { index: BIndex<T>; expressions: IValue[] }>();\n        indexesByHash.set(indexName, { index, expressions: index.expressions });\n        this.indexByHashAndName.set(ihash, indexesByHash);\n        if (expressions.primary) {\n            this.hasPrimary = index;\n        }\n        const ret = new IndexConstraint(indexName, index, this);\n        this.constraintsByName.set(indexName, ret);\n        return ret;\n    }\n\n    private determineIndexRelName(indexName: string | nil, ihash: string, ifNotExists: boolean | nil, sufix: string): string | nil {\n        if (indexName) {\n            if (this.ownerSchema.getOwnObject(indexName)) {\n                if (ifNotExists) {\n                    return null;\n                }\n                throw new QueryError(`relation \"${indexName}\" already exists`);\n            }\n            return indexName;\n        } else {\n            const baseName = indexName = `${this.name}_${ihash}_${sufix}`;\n            let i = 1;\n            while (this.ownerSchema.getOwnObject(indexName)) {\n                indexName = baseName + (i++);\n            }\n            return indexName!;\n        }\n    }\n\n    dropIndex(t: _Transaction, uName: string) {\n        const u = asIndex(this.ownerSchema.getOwnObject(uName)) as BIndex;\n        if (!u || !this.indexByHashAndName.has(u.hash) || !this.indexByHashAndName.get(u.hash)?.has(uName)) {\n            throw new QueryError('Cannot drop index that does not belong to this table: ' + uName);\n        }\n        this.indexHandlers.forEach(h => h('drop', u));\n        this.indexByHashAndName.get(u.hash)?.delete(uName);\n        if (this.indexByHashAndName.get(u.hash)?.size == 0) {\n            this.indexByHashAndName.delete(u.hash);\n        }\n        u.dropFromData(t);\n        this.ownerSchema._reg_unregister(u);\n        this.constraintsByName.delete(uName);\n        if (this.hasPrimary === u) {\n            this.hasPrimary = null;\n        }\n        for (const col of u.expressions) {\n            for (const used of col.usedColumns) {\n                this.getColumnRef(used.id!).usedInIndexes.delete(u);\n            }\n        }\n    }\n\n\n    onIndex(sub: IndexHandler): ISubscription {\n        this.indexHandlers.add(sub);\n        return {\n            unsubscribe: () => this.indexHandlers.delete(sub),\n        };\n    }\n\n    listIndices(): IndexDef[] {\n        return ([] as IndexDef[]).concat(...\n            [...this.indexByHashAndName.values()]\n                .map(indexMap => [...indexMap.values()]\n                    .map<IndexDef>(x => ({\n                        name: x.index.name!,\n                        expressions: x.expressions.map(x => x.id!)\n                    }))\n                )\n        );\n    }\n\n    get primaryIndex(): IndexDef | null {\n        return this.hasPrimary && {\n            name: this.hasPrimary.name!,\n            expressions: this.hasPrimary.expressions.map(x => x.id!)\n        };\n    }\n\n    addForeignKey(cst: TableConstraintForeignKey, t: _Transaction): _IConstraint | nil {\n        const ihash = indexHash(cst.localColumns.map(x => x.name));\n        const constraintName = this.determineIndexRelName(cst.constraintName?.name, ihash, false, 'fk');\n        if (!constraintName) {\n            return null;\n        }\n        const ret = new ForeignKey(constraintName)\n            .install(t, cst, this);\n        return new ConstraintWrapper(this.constraintsByName, ret);\n    }\n\n    getConstraint(constraint: string): _IConstraint | nil {\n        return this.constraintsByName.get(constraint);\n    }\n\n    addConstraint(cst: TableConstraint, t: _Transaction): _IConstraint | nil {\n        switch (cst.type) {\n            case 'foreign key':\n                return this.addForeignKey(cst, t);\n            case 'primary key':\n                return this.createIndex(t, cst.columns, 'primary', cst.constraintName?.name);\n            case 'unique':\n                return this.createIndex(t, cst.columns, 'unique', cst.constraintName?.name);\n            case 'check':\n                return this.addCheck(t, cst.expr, cst.constraintName?.name);\n            default:\n                throw NotSupported.never(cst, 'constraint type');\n        }\n    }\n\n    private checkNoConstraint(name: string) {\n        if (this.constraintsByName.has(name)) {\n            throw new QueryError(`relation \"${name}\" already exists`, '42P07');\n        }\n    }\n\n    onBeforeChange(columns: 'all' | (string | _Column)[], check: ChangeHandler<T>): ISubscription {\n        return this._subChange('before', columns, check);\n    }\n    onCheckChange(columns: string[], check: ChangeHandler<T>): ISubscription {\n        return this._subChange('before', columns, check);\n    }\n\n    *getColumns(): Iterable<ColumnDef> {\n        for (const c of this.columns) {\n            yield {\n                name: c.id!,\n                type: c.type,\n                nullable: !this.columnMgr.get(c.id!)!.notNull,\n            };\n        }\n    }\n\n    private _subChange(key: keyof ChangeSub<T>, columns: 'all' | (string | _Column)[], check: ChangeHandler<T>): ISubscription {\n        const unsubs: (() => void)[] = [];\n\n        const add = (ref: _Column | ColRef | null) => {\n            let ch = this.changeHandlers.get(ref);\n            if (!ch) {\n                this.changeHandlers.set(ref, ch = {\n                    after: new Set(),\n                    before: new Set(),\n                });\n            }\n            ch[key].add(check);\n            unsubs.push(() => ch![key].delete(check));\n        }\n        if (columns === 'all') {\n            add(null);\n        } else {\n            for (const c of columns) {\n                const ref = typeof c === 'string'\n                    ? this.getColumnRef(c)\n                    : c;\n                add(ref);\n            }\n        }\n        return {\n            unsubscribe: () => {\n                for (const u of unsubs) {\n                    u();\n                }\n            }\n        }\n    }\n\n\n    drop(t: _Transaction, cascade: boolean) {\n        this.drophandlers.forEach(d => d(t, cascade));\n        t.delete(this.dataId);\n        for (const map of this.indexByHashAndName.values()) {\n            for (const i of map.values()) {\n                i.index.dropFromData(t);\n            }\n        }\n        // todo should also check foreign keys, cascade, ...\n        return this.ownerSchema._reg_unregister(this);\n    }\n\n    onDrop(sub: DropHandler): ISubscription {\n        this.drophandlers.add(sub);\n        return {\n            unsubscribe: () => {\n                this.drophandlers.delete(sub);\n            }\n        }\n    }\n\n    onTruncate(sub: TruncateHandler): ISubscription {\n        this.truncateHandlers.add(sub);\n        return {\n            unsubscribe: () => {\n                this.truncateHandlers.delete(sub);\n            }\n        }\n\n    }\n}\n","import { _IIndex, IValue, IndexExpression, _Transaction, IndexKey, _Explainer, _IndexExplanation, IndexOp, _ISelection, Stats } from '../interfaces-private';\n\nexport class RestrictiveIndex<T> implements _IIndex<T> {\n    constructor(private base: _IIndex<T>, readonly filter: _ISelection<T>) {\n    }\n\n    private match(raw: T, t: _Transaction) {\n        return this.filter.hasItem(raw, t);\n    }\n\n    get expressions(): IndexExpression[] {\n        return this.base.expressions;\n    }\n\n    stats(t: _Transaction, key?: IndexKey): Stats | null {\n        // cannot comput without iterating\n        return null;\n    }\n\n    iterateKeys() {\n        // cannot comput without iterating\n        // (we know underlying keys, but we dont know which have items that match our filter)\n        return null;\n    }\n\n    eqFirst(rawKey: IndexKey, t: _Transaction) {\n        for (const i of this.base.enumerate({\n            key: rawKey,\n            t: t,\n            type: 'eq',\n        })) {\n            if (this.match(i, t)) {\n                return i;\n            }\n        }\n        return null;\n    }\n\n\n    entropy(t: IndexOp): number {\n        return this.base.entropy(t);\n    }\n\n    *enumerate(op: IndexOp): Iterable<T> {\n        for (const i of this.base.enumerate(op)) {\n            if (this.match(i, op.t)) {\n                yield i;\n            }\n        }\n    }\n\n    explain(e: _Explainer): _IndexExplanation {\n        return {\n            _: 'indexRestriction',\n            lookup: this.base.explain(e),\n            for: this.filter.explain(e),\n            // criteria: this.restrict.explain(e),\n        }\n    }\n}","import { AggregationComputer, AggregationGroupComputer, IndexKey, IValue, QueryError, _IIndex, _ISelection, _IType, _Transaction } from '../../interfaces-private';\nimport { ExprCall } from 'pgsql-ast-parser';\nimport { isSelectAllArgList, nullIsh } from '../../utils';\nimport { buildValue } from '../../parser/expression-builder';\nimport { Types } from '../../datatypes';\nimport { withSelection } from '../../parser/context';\n\nexport function buildCount(this: void, base: _ISelection, call: ExprCall) {\n    return withSelection(base, () => {\n        const args = call.args;\n        if (isSelectAllArgList(args)) {\n            return new CountStar(base);\n        }\n        if (args.length !== 1) {\n            throw new QueryError('COUNT expects one argument, given ' + args.length);\n        }\n        const what = buildValue(args[0]);\n        return new CountExpr(what);\n    });\n}\n\nclass CountStar implements AggregationComputer<number> {\n\n    constructor(private on: _ISelection) {\n    }\n\n    get type(): _IType<any> {\n        return Types.bigint;\n    }\n\n    computeFromIndex(key: IndexKey, index: _IIndex<any>, t: _Transaction) {\n        const stats = index.stats(t, key);\n        return stats?.count;\n    }\n\n    computeNoGroup(t: _Transaction) {\n        return this.on.stats(t)?.count;\n    }\n\n    createGroup(): AggregationGroupComputer<number> {\n        let cnt = 0;\n        return {\n            feedItem: () => cnt++,\n            finish: () => cnt,\n        };\n    }\n\n}\n\nclass CountExpr implements AggregationComputer<number> {\n\n    constructor(private exp: IValue) {\n    }\n\n    get type(): _IType<any> {\n        return Types.bigint;\n    }\n\n    createGroup(t: _Transaction): AggregationGroupComputer<number> {\n        let cnt = 0;\n        return {\n            feedItem: (item) => {\n                const value = this.exp.get(item, t);\n                if (!nullIsh(value)) {\n                    cnt++;\n                }\n            },\n            finish: () => cnt,\n        };\n    }\n}\n","import { AggregationComputer, AggregationGroupComputer, IValue, nil, QueryError, _ISelection, _IType, _Transaction } from '../../interfaces-private';\nimport { Expr } from 'pgsql-ast-parser';\nimport { buildValue } from '../../parser/expression-builder';\nimport { nullIsh } from '../../utils';\nimport { DataType } from '../../interfaces';\nimport { withSelection } from '../../parser/context';\n\n\nclass MinMax implements AggregationComputer<number> {\n\n    constructor(private exp: IValue, private isMax: boolean) {\n    }\n\n    get type(): _IType<any> {\n        return this.exp.type;\n    }\n\n    createGroup(t: _Transaction): AggregationGroupComputer<number> {\n        let val: number | nil = null;\n        return {\n            feedItem: (item) => {\n                const value = this.exp.get(item, t);\n                if (!nullIsh(value) && (nullIsh(val) || (\n                    this.isMax\n                        ? val! < value\n                        : val! > value\n                ))) {\n                    val = value;\n                }\n            },\n            finish: () => val,\n        };\n    }\n}\n\n\nexport function buildMinMax(this: void, base: _ISelection, args: Expr[], op: 'max' | 'min') {\n    return withSelection(base, () => {\n        if (args.length !== 1) {\n            throw new QueryError(op.toUpperCase() + ' expects one argument, given ' + args.length);\n        }\n\n        const what = buildValue(args[0]);\n\n        switch (what.type.primary) {\n            case DataType.bigint:\n            case DataType.integer:\n            case DataType.decimal:\n            case DataType.date:\n            case DataType.float:\n            case DataType.text:\n            case DataType.time:\n            case DataType.timetz:\n            case DataType.timestamp:\n            case DataType.timestamptz:\n                break;\n            default:\n                throw new QueryError(`function min(${what.type.primary}) does not exist`, '42883');\n        }\n        return new MinMax(what, op === 'max');\n    });\n}\n","import { AggregationComputer, AggregationGroupComputer, IValue, nil, QueryError, _ISelection, _IType, _Transaction } from '../../interfaces-private';\nimport { ExprCall } from 'pgsql-ast-parser';\nimport { buildValue } from '../../parser/expression-builder';\nimport { Types } from '../../datatypes';\nimport { nullIsh } from '../../utils';\nimport { withSelection } from '../../parser/context';\n\nclass SumExpr implements AggregationComputer<number> {\n\n    constructor(private exp: IValue) {\n    }\n\n    get type(): _IType<any> {\n        return Types.bigint;\n    }\n\n    createGroup(t: _Transaction): AggregationGroupComputer<number> {\n        let val: number | nil = null;\n        return {\n            feedItem: (item) => {\n                const value = this.exp.get(item, t);\n                if (!nullIsh(value)) {\n                    val = nullIsh(val) ? value : val + value;\n                }\n            },\n            finish: () => val,\n        }\n    }\n}\n\nexport function buildSum(this: void, base: _ISelection, call: ExprCall) {\n    return withSelection(base, () => {\n        const args = call.args;\n        if (args.length !== 1) {\n            throw new QueryError('SUM expects one argument, given ' + args.length);\n        }\n\n        const what = buildValue(args[0]);\n        return new SumExpr(what);\n\n    });\n}\n","import { AggregationComputer, AggregationGroupComputer, IValue, nil, QueryError, _ISelection, _IType, _Transaction } from '../../interfaces-private';\nimport { ExprCall } from 'pgsql-ast-parser';\nimport { buildValue } from '../../parser/expression-builder';\nimport { Types } from '../../datatypes';\nimport { withSelection } from '../../parser/context';\n\n\nclass ArrayAggExpr implements AggregationComputer<any[]> {\n\n    constructor(private exp: IValue) {\n    }\n\n    get type(): _IType<any> {\n        return Types.integer.asArray();\n    }\n\n    createGroup(t: _Transaction): AggregationGroupComputer<any[]> {\n        let val: any[] = [];\n        return {\n            feedItem: (item) => {\n                const value = this.exp.get(item, t);\n                val = [...val, value];\n            },\n            finish: () => val,\n        }\n    }\n}\n\nexport function buildArrayAgg(this: void, base: _ISelection, call: ExprCall) {\n    return withSelection(base, () => {\n        const args = call.args;\n        if (args.length !== 1) {\n            throw new QueryError('ARRAY_AGG expects one argument, given ' + args.length);\n        }\n\n        const what = buildValue(args[0]);\n        return new ArrayAggExpr(what);\n    })\n}\n","import { AggregationComputer, AggregationGroupComputer, IValue, nil, QueryError, _ISelection, _IType, _Transaction } from '../../interfaces-private';\nimport { ExprCall } from 'pgsql-ast-parser';\nimport { buildValue } from '../../parser/expression-builder';\nimport { Types } from '../../datatypes';\nimport { nullIsh, sum } from '../../utils';\nimport { withSelection } from '../../parser/context';\n\n\nclass AvgExpr implements AggregationComputer<number> {\n\n    constructor(private exp: IValue) {\n    }\n\n    get type(): _IType<any> {\n        return Types.bigint;\n    }\n\n    createGroup(t: _Transaction): AggregationGroupComputer<number> {\n        let full: number[] = [];\n        return {\n            feedItem: (item) => {\n                const value = this.exp.get(item, t);\n                if (!nullIsh(value)) {\n                    full.push(value);\n                }\n            },\n            finish: () => full.length === 0 ? null : sum(full) / full.length,\n        }\n    }\n}\n\n\nexport function buildAvg(this: void, base: _ISelection, call: ExprCall) {\n    return withSelection(base, () => {\n        const args = call.args;\n        if (args.length !== 1) {\n            throw new QueryError('AVG expects one argument, given ' + args.length);\n        }\n\n        const what = buildValue(args[0]);\n        return new AvgExpr(what);\n    });\n}\n","import { _ISelection, QueryError, AggregationComputer, IValue, _IType, _Transaction, AggregationGroupComputer } from '../../interfaces-private';\nimport { ExprCall } from 'pgsql-ast-parser';\nimport { withSelection } from '../../parser/context';\nimport { buildValue } from '../../parser/expression-builder';\nimport { nullIsh } from '../../utils';\nimport { Types } from '../../datatypes';\n\n\nclass JsonAggExpr implements AggregationComputer<any[]> {\n\n    constructor(private exp: IValue, readonly type: _IType) {\n    }\n\n    createGroup(t: _Transaction): AggregationGroupComputer<any[]> {\n        let full: any[][] = [];\n        return {\n            feedItem: (item) => {\n                const value = this.exp.get(item, t);\n                if (!nullIsh(value)) {\n                    full.push(value);\n                }\n            },\n            finish: () => full.length === 0 ? null : full,\n        }\n    }\n}\n\n\nexport function buildJsonAgg(this: void, base: _ISelection, call: ExprCall, fn: 'json_agg' | 'jsonb_agg') {\n    return withSelection(base, () => {\n        const args = call.args;\n        if (args.length !== 1) {\n            throw new QueryError(fn + ' expects one argument, given ' + args.length);\n        }\n        const type = fn === 'json_agg' ? Types.json : Types.jsonb;\n        const what = buildValue(args[0]);\n        return new JsonAggExpr(what, type);\n    });\n}\n","import { _ISelection, QueryError, AggregationComputer, IValue, _IType, _Transaction, AggregationGroupComputer } from '../../interfaces-private';\nimport { ExprCall } from 'pgsql-ast-parser';\nimport { withSelection } from '../../parser/context';\nimport { buildValue } from '../../parser/expression-builder';\nimport { nullIsh } from '../../utils';\nimport { Types } from '../../datatypes';\n\n\nclass BoolAgg implements AggregationComputer<boolean> {\n\n    constructor(private exp: IValue, private isOr: boolean) {\n    }\n\n    get type() {\n        return Types.bool;\n    }\n\n    createGroup(t: _Transaction): AggregationGroupComputer<boolean> {\n        let result: boolean | null = null;\n        return {\n            feedItem: (item) => {\n                if (result === this.isOr) {\n                    // no need to compute it further\n                    return;\n                }\n                const value = this.exp.get(item, t);\n                if (nullIsh(value)) {\n                    return;\n                }\n                result = !!value;\n            },\n            finish: () => result,\n        }\n    }\n}\n\n\n\nexport function buildBoolAgg(this: void, base: _ISelection, call: ExprCall, fn: 'bool_and' | 'bool_or') {\n    return withSelection(base, () => {\n        const args = call.args;\n        if (args.length !== 1) {\n            throw new QueryError(fn + ' expects one argument, given ' + args.length);\n        }\n        const what = buildValue(args[0]).cast(Types.bool);\n        return new BoolAgg(what, fn === 'bool_or');\n    });\n}\n","import { _ITable, _Transaction, IValue, _Explainer, _ISchema, asTable, _ISelection, _IIndex, _IStatement } from '../../interfaces-private';\nimport { DeleteStatement } from 'pgsql-ast-parser';\nimport { MutationDataSourceBase } from './mutation-base';\nimport { buildCtx } from '../../parser/context';\n\nexport class Deletion extends MutationDataSourceBase<any> {\n\n\n    constructor(ast: DeleteStatement) {\n        const { schema } = buildCtx();\n        const table = asTable(schema.getObject(ast.from));\n        const mutatedSel = table\n            .selection\n            .filter(ast.where);\n\n        super(table, mutatedSel, ast);\n    }\n\n    protected performMutation(t: _Transaction): any[] {\n        // perform deletion\n        const rows = [];\n        for (const item of this.mutatedSel.enumerate(t)) {\n            this.table.delete(t, item);\n            rows.push(item);\n        }\n        return rows;\n    }\n}\n","import { _ITable, _Transaction, _Explainer, _ISchema, asTable, _ISelection, _IIndex, _IStatement } from '../../interfaces-private';\nimport { UpdateStatement } from 'pgsql-ast-parser';\nimport { MutationDataSourceBase, Setter, createSetter } from './mutation-base';\nimport { buildCtx } from '../../parser/context';\nimport { buildSelect } from '../select';\nimport { Selection } from '../../transforms/selection';\nimport { JoinSelection } from '../../transforms/join';\n\nexport class Update extends MutationDataSourceBase<any> {\n\n    private setter: Setter;\n    private fetchObjectToUpdate?: ((x: any) => any);\n\n    constructor(ast: UpdateStatement) {\n        const { schema } = buildCtx();\n        const into = asTable(schema.getObject(ast.table));\n        let mutatedSel: _ISelection;\n        let fetchObjectToUpdate: ((x: any) => any) | undefined;\n        if (ast.from) {\n\n            //  => UPDATE-FROM-SELECT\n\n            // build a join that selects the full record to update,\n            // based on the data from the original selection\n            mutatedSel = buildSelect({\n                type: 'select',\n                // join from:\n                from: [\n                    ast.from,\n                    {\n                        type: 'table',\n                        name: ast.table,\n                        join: {\n                            type: 'INNER JOIN',\n                            on: ast.where,\n                        }\n                    }],\n                // // select the whole updated record\n                columns: [{\n                    expr: {\n                        type: 'ref',\n                        table: ast.table,\n                        name: '*',\n                    }\n                }]\n            });\n\n            // this should have built a selection on a join statement\n            if (!(mutatedSel instanceof Selection)) {\n                throw new Error('Invalid select-from statement');\n            }\n            mutatedSel = mutatedSel.base;\n            if (!(mutatedSel instanceof JoinSelection)) {\n                // should not happen\n                throw new Error('Invalid select-from statement');\n            }\n            // use hack to get the full joined source in the selection\n            fetchObjectToUpdate = x => x['>joined'];\n        } else {\n\n            //  => REGULAR UPDATE\n            mutatedSel = into\n                .selection\n                .filter(ast.where);\n        }\n\n\n        super(into, mutatedSel, ast);\n\n        this.setter = createSetter(this.table, this.mutatedSel, ast.sets);\n        this.fetchObjectToUpdate = fetchObjectToUpdate;\n\n    }\n\n    protected performMutation(t: _Transaction): any[] {\n        // perform update\n        const rows: any[] = [];\n        for (const i of this.mutatedSel.enumerate(t)) {\n            const data = this.fetchObjectToUpdate\n                ? this.fetchObjectToUpdate(i)\n                : i;\n            this.setter(t, data, i);\n            rows.push(this.table.update(t, data));\n        }\n        return rows;\n    }\n}\n","import { _ITable, _Transaction, IValue, _Explainer, nil, _ISchema, asTable, _ISelection, _IIndex, QueryError, OnConflictHandler, ChangeOpts, _IStatement, NotSupported } from '../../interfaces-private';\nimport { InsertStatement } from 'pgsql-ast-parser';\nimport { buildValue } from '../../parser/expression-builder';\nimport { Types } from '../../datatypes';\nimport { JoinSelection } from '../../transforms/join';\nimport { MutationDataSourceBase, createSetter } from './mutation-base';\nimport { ArrayFilter } from '../../transforms/array-filter';\nimport { withSelection, buildCtx } from '../../parser/context';\nimport { buildValues, buildSelect } from '../../execution/select';\nimport { IndexConstraint } from '../../constraints/index-cst';\n\nexport class Insert extends MutationDataSourceBase<any> {\n\n    private valueRawSource: _ISelection;\n    private insertColumns!: string[];\n    private valueConvertedSource!: IValue<any>[];\n    private opts!: ChangeOpts;\n\n\n    constructor(ast: InsertStatement) {\n        const { schema } = buildCtx();\n        // get table to insert into\n        const table = asTable(schema.getObject(ast.into));\n        const selection = table\n            .selection\n            .setAlias(ast.into.alias);\n\n        // init super\n        super(table, selection, ast);\n\n        // get data to insert\n        this.valueRawSource = ast.insert.type === 'values'\n            ? buildValues(ast.insert, true)\n            : buildSelect(ast.insert);\n\n\n        withSelection(this, () => this.visit(ast));\n    }\n\n    private visit(ast: InsertStatement) {\n\n        // check not inserting too many values\n        this.insertColumns = ast.columns?.map(x => x.name)\n            ?? this.table.selection.columns.map(x => x.id!)\n                .slice(0, this.valueRawSource.columns.length);\n        if (this.valueRawSource.columns.length > this.insertColumns.length) {\n            throw new QueryError(`INSERT has more expressions than target columns`);\n        }\n\n        // check insert types\n        this.valueConvertedSource = this.insertColumns.map((col, i) => {\n            const value = this.valueRawSource.columns[i];\n            const insertInto = this.table.selection.getColumn(col);\n            // It seems that the explicit conversion is only performed when inserting values.\n            const canConvert = ast.insert.type === 'values'\n                ? value.type.canCast(insertInto.type)\n                : value.type.canConvertImplicit(insertInto.type);\n            if (!canConvert) {\n                throw new QueryError(`column \"${col}\" is of type ${insertInto.type.name} but expression is of type ${value.type.name}`);\n            }\n            return value.type === Types.default\n                ? value  // handle \"DEFAULT\" values\n                : value.cast(insertInto.type);\n        });\n\n\n        // build 'on conflict' strategy\n        let ignoreConflicts: OnConflictHandler | nil = undefined;\n        if (ast.onConflict) {\n            // find the targeted index\n            let onIndex: _IIndex | nil = null;\n            const _on = ast.onConflict.on;\n            switch (_on?.type) {\n                case 'on expr':\n                    const exprs = _on.exprs;\n                    const on = withSelection(this.table.selection, () => exprs.map(x => buildValue(x)));\n                    onIndex = this.table.getIndex(...on);\n                    break;\n                case 'on constraint':\n                    const cst = this.table.getConstraint(_on.constraint.name);\n                    if (cst instanceof IndexConstraint) {\n                        onIndex = cst.index;\n                    }\n                    break;\n                case undefined:\n                    // on \"on constraint\" in statement\n                    break;\n                default:\n                    throw NotSupported.never(_on, 'unexpected \"on conflict\" type');\n            }\n            if (!!_on && !onIndex?.unique) {\n                throw new QueryError(`There is no unique or exclusion constraint matching the ON CONFLICT specification`);\n            }\n\n            // check if 'do nothing'\n            if (ast.onConflict.do === 'do nothing') {\n                ignoreConflicts = { ignore: onIndex ?? 'all' };\n            } else {\n                if (!onIndex) {\n                    throw new QueryError(`ON CONFLICT DO UPDATE requires inference specification or constraint name`);\n                }\n                const subject = new JoinSelection(\n                    this.mutatedSel\n                    // fake data... we're only using this to get the multi table column resolution:\n                    , new ArrayFilter(this.table.selection, []).setAlias('excluded')\n                    , {\n                        type: 'LEFT JOIN',\n                        on: { type: 'boolean', value: false }\n                    }\n                    , false\n                );\n                const setter = createSetter(this.table, subject, ast.onConflict.do.sets,);\n                const _where = ast.onConflict.where;\n                const where = _where && withSelection(subject, () => buildValue(_where));\n                ignoreConflicts = {\n                    onIndex,\n                    update: (item, excluded, t) => {\n                        // build setter context\n                        const jitem = subject.buildItem(item, excluded);\n\n                        // check \"WHERE\" clause on conflict\n                        if (where) {\n                            const whereClause = where.get(jitem, t);\n                            if (whereClause !== true) {\n                                return;\n                            }\n                        }\n\n                        // execute set\n                        setter(t, item, jitem);\n                    },\n                }\n            }\n        }\n\n        this.opts = {\n            onConflict: ignoreConflicts,\n            overriding: ast.overriding\n        };\n    }\n\n    protected performMutation(t: _Transaction): any[] {\n\n        // enumerate & get\n        const values: any[][] = [];\n        for (const o of this.valueRawSource.enumerate(t)) {\n            const nv = [];\n            for (let i = 0; i < this.insertColumns.length; i++) {\n                const _custom = this.valueConvertedSource[i].get(o, t);\n                nv.push(_custom);\n            }\n            values.push(nv);\n        }\n\n\n        // insert values\n        const ret: any[] = [];\n\n        for (const val of values) {\n            if (val.length !== this.insertColumns.length) {\n                throw new QueryError('Insert columns / values count mismatch');\n            }\n            const toInsert: any = {};\n            for (let i = 0; i < val.length; i++) {\n                const v = val[i];\n                const col = this.valueConvertedSource[i];\n                if (col.type === Types.default) {\n                    continue; // insert a 'DEFAULT' value\n                }\n                toInsert[this.insertColumns[i]] = v;\n                // if ('_custom' in v) {\n                //      toInsert[columns[i]] = v._custom;\n                // } else {\n                //     const notConv = buildValue(table.selection, v);\n                //     const converted = notConv.cast(col.type);\n                //     if (!converted.isConstant) {\n                //         throw new QueryError('Cannot insert non constant expression');\n                //     }\n                //     toInsert[columns[i]] = converted.get();\n                // }\n            }\n            const insertedRow = this.table.doInsert(t, toInsert, this.opts)\n            if (insertedRow) {\n                ret.push(insertedRow);\n            }\n        }\n\n        return ret;\n    }\n}\n","import { nil, QueryError, Schema, SchemaField } from '../interfaces';\nimport { IValue, setId, _ISchema, _IType, _Transaction } from '../interfaces-private';\nimport { Expr } from 'pgsql-ast-parser';\nimport { ReadOnlyTable } from './readonly-table';\nimport { buildValue } from '../parser/expression-builder';\nimport { Types } from '../datatypes';\nimport { withSelection, buildCtx } from '../parser/context';\n\nlet cnt = 0;\nexport class ValuesTable extends ReadOnlyTable {\n    private symbol = Symbol();\n    _schema!: Schema;\n    private assignments!: (IValue<any> | \"default\")[][];\n\n    entropy(t: _Transaction): number {\n        return 0;\n    }\n\n    enumerate(t: _Transaction): Iterable<any> {\n        const ret = this.assignments.map(vals => {\n            const ret = { [this.symbol]: true } as any;\n            setId(ret, 'vtbl' + (++cnt));\n            for (let i = 0; i < vals.length; i++) {\n                const v = vals[i];\n                ret[this._schema.fields[i].name] = v === 'default'\n                    ? null\n                    : v.get({}, t);\n            }\n            return ret;\n        });\n        return ret;\n    }\n\n    hasItem(value: any, t: _Transaction): boolean {\n        return !!value[this.symbol];\n    }\n\n    constructor(alias: string, items: Expr[][], columnNames: string[] | nil, acceptDefault?: boolean) {\n        super(buildCtx().schema);\n        withSelection(buildCtx().schema.dualTable.selection, () => {\n            const len = new Set(items.map(x => x.length));\n            if (len.size !== 1) {\n                throw new QueryError('VALUES lists must all be the same length');\n            }\n            if (columnNames && columnNames.length > items[0].length) {\n                throw new QueryError(`table \"${alias}\" has ${items[0].length} columns available but ${columnNames.length} columns specified`);\n            }\n            type V = IValue | 'default';\n            let builtVals: V[][] = items.map(vals => vals.map(e => {\n                if (acceptDefault && e.type === 'default') {\n                    return 'default';\n                }\n                return buildValue(e);\n            }));\n            const types = items[0].map((_, i) => {\n                return preferedType(builtVals.map(x => {\n                    const v = x[i];\n                    return v === 'default'\n                        ? null\n                        : v.type;\n                }))\n            });\n            this._schema = {\n                name: alias,\n                fields: types.map<SchemaField>((type, i) => {\n                    return {\n                        type: type ?? Types.default,\n                        name: columnNames?.[i] ?? `column${i + 1}`,\n                    }\n                })\n            };\n            this.assignments = builtVals.map(vals => vals.map((v, i) => v === 'default' ? v : v.cast(types[i]!)))\n        });\n    }\n}\n\nfunction preferedType(types: (_IType | null)[]) {\n    return types.reduce((a, b) => {\n        if (!a) {\n            return b;\n        }\n        if (!b) {\n            return a;\n        }\n        const ret = a.prefer(b);\n        if (!ret) {\n            throw new QueryError('Incompatible value types');\n        }\n        return ret;\n    }, types[0]);\n}","import { _Transaction, IValue, _Explainer, _IIndex, _SelectExplanation, Stats } from '../interfaces-private';\nimport { RecordCol } from '../datatypes';\nimport { buildCtx } from '../parser/context';\nimport { DataSourceBase } from '../transforms/transform-base';\nimport { columnEvaluator } from '../transforms/selection';\nimport { colByName, fromEntries } from '../utils';\n\nexport class FunctionCallTable extends DataSourceBase<any> {\n    readonly columns: readonly IValue<any>[];\n    private readonly colsByName: Map<string, IValue<any>>;\n    private symbol = Symbol();\n\n    get isExecutionWithNoResult(): boolean {\n        return false;\n    }\n\n    constructor(cols: readonly RecordCol[], private evaluator: IValue) {\n        super(buildCtx().schema);\n        this.columns = cols.map(c => columnEvaluator(this, c.name, c.type).setOrigin(this));\n        this.colsByName = fromEntries(this.columns.map(c => [c.id!, c]));\n    }\n\n    entropy(t: _Transaction): number {\n        return 0;\n    }\n\n    enumerate(t: _Transaction): Iterable<any> {\n        const results = this.evaluator.get(null, t);\n        for (const result of results ?? []) {\n            result[this.symbol] = true;\n        }\n        return results;\n    }\n\n    hasItem(value: any, t: _Transaction): boolean {\n        return !!(value as any)[this.symbol];\n    }\n\n    getColumn(column: string, nullIfNotFound?: boolean | undefined): IValue<any> {\n        return colByName(this.colsByName, column, nullIfNotFound)!;\n    }\n\n    getIndex(forValue: IValue<any>): _IIndex<any> | null | undefined {\n        return null;\n    }\n\n    isOriginOf(value: IValue<any>): boolean {\n        return value.origin === this;\n    }\n\n\n    explain(e: _Explainer): _SelectExplanation {\n        throw new Error('Method not implemented.');\n    }\n\n    stats(t: _Transaction): Stats | null {\n        throw new Error('Method not implemented.');\n    }\n}\n","import { IValue, _IIndex, _ITable, getId, IndexKey, CreateIndexColDef, _Transaction, _Explainer, _IndexExplanation, IndexExpression, IndexOp, Stats, _INamedIndex, Reg, _ISchema } from '../interfaces-private';\n// @ts-ignore\nimport createTree from 'functional-red-black-tree';\nimport { QueryError, NotSupported, nil } from '../interfaces';\nimport { Set as ImSet, Map as ImMap } from 'immutable';\nimport { deepCloneSimple, nullIsh, hasNullish } from '../utils';\n\n\n// https://www.npmjs.com/package/functional-red-black-tree\ninterface BTree<T> {\n    readonly keys: Iterable<IndexKey>;\n    readonly values: Iterable<IndexKey>;\n    readonly length: number;\n    get(key: IndexKey): T;\n    insert(key: IndexKey, value: T): BTree<T>;\n    remove(key: IndexKey): BTree<T>;\n    find(key: IndexKey): BIterator<T>;\n    /** Find the first item in the tree whose key is >= key */\n    ge(key: IndexKey): BIterator<T>;\n    /** Finds the first item in the tree whose key is > key */\n    gt(key: IndexKey): BIterator<T>;\n    /** Finds the last item in the tree whose key is < key */\n    lt(key: IndexKey): BIterator<T>;\n    /** Finds the last item in the tree whose key is <= key */\n    le(key: IndexKey): BIterator<T>;\n\n    at(pos: number): BIterator<T>;\n\n    readonly begin: BIterator<T>;\n    readonly end: BIterator<T>;\n    /**  If a truthy value is returned from the visitor, then iteration is stopped. */\n    forEach(fn: (key: IndexKey, value: T) => boolean, low?: number, high?: number): void;\n    // root;\n}\n\ninterface BIterator<T> {\n    readonly key: IndexKey;\n    readonly value: T;\n    // tree;\n    readonly index: any;\n    readonly valid: boolean;\n    clone(): BIterator<T>;\n    remove(): BTree<T>;\n    update(value: T): BTree<T>;\n    next(): void;\n    prev(): void;\n    readonly hasNext: boolean;\n    readonly hasPrev: boolean;\n}\n\ntype RawTree<T> = BTree<ImMap<string, T>>;\n\nexport class BIndex<T = any> implements _INamedIndex<T> {\n\n    get type(): 'index' {\n        return 'index';\n    }\n\n    readonly reg: Reg;\n\n    // private asBinary: RawTree;\n    expressions: (IndexExpression & IValue)[];\n    private treeBinId = Symbol();\n    private treeCountId = Symbol();\n\n\n    get ownerSchema(): _ISchema {\n        return this.onTable.ownerSchema;\n    }\n\n    constructor(t: _Transaction\n        , readonly name: string\n        , readonly cols: readonly CreateIndexColDef[]\n        , readonly onTable: _ITable<T>\n        , readonly hash: string\n        , readonly unique: boolean\n        , readonly notNull: boolean\n        , readonly predicate: IValue | nil) {\n        this.reg = onTable.ownerSchema._reg_register(this);\n        this.truncate(t);\n        this.expressions = cols.map(x => x.value);\n    }\n\n    drop(t: _Transaction): void {\n        this.onTable.dropIndex(t, this.name);\n    }\n\n    compare(_a: any, _b: any) {\n        for (let i = 0; i < this.expressions.length; i++) {\n            const k = this.cols[i];\n            const a = _a[i];\n            const b = _b[i];\n            const an = nullIsh(a);\n            const bn = nullIsh(b);\n            if (an || bn) {\n                if (an === bn) {\n                    continue;\n                }\n                return (an\n                    ? -1\n                    : 1) * (k.nullsLast ? 1 : -1);\n            }\n            if (k.value.type.equals(a, b)) {\n                continue;\n            }\n            return (k.value.type.gt(a, b)\n                ? 1\n                : -1)// * (k.desc ? -1 : 1);\n        }\n        return 0;\n    }\n\n    buildKey(raw: any, t: _Transaction): any[] {\n        return this.expressions.map(k => k.get(raw, t));\n    }\n\n    truncate(t: _Transaction) {\n        const asBinary = createTree((a: any, b: any) => {\n            return this.compare(a, b);\n        });\n        this.setBin(t, asBinary);\n    }\n\n    dropFromData(t: _Transaction) {\n        t.delete(this.treeBinId);\n    }\n\n    private bin(t: _Transaction) {\n        return t.get<RawTree<T>>(this.treeBinId);\n    }\n    private setBin(t: _Transaction, val: RawTree<T>) {\n        return t.set(this.treeBinId, val);\n    }\n\n    private setCount(t: _Transaction, val: number) {\n        return t.set(this.treeCountId, val);\n    }\n    private getCount(t: _Transaction): number {\n        return t.get<number>(this.treeCountId) ?? 0;\n    }\n\n    hasKey(key: IndexKey[], t: _Transaction): boolean {\n        const it = this.bin(t).find(key);\n        return it.valid;\n    }\n\n    add(raw: T, t: _Transaction) {\n        // check that predicate is OK\n        if (this.predicate) {\n            const val = this.predicate.get(raw, t);\n            if (nullIsh(val) || val === false) {\n                return;\n            }\n        }\n\n        // build key and object id\n        const id = getId(raw);\n        const key = this.buildKey(raw, t);\n        const hasNil = hasNullish(...key);\n        if (this.notNull && hasNil) {\n            throw new QueryError('Cannot add a null record in index ' + this.name);\n        }\n        if (this.unique && !hasNil && this.hasKey(key, t)) {\n            const idCols = this.cols.map(it => it.value.id);\n            throw new QueryError({\n                error: `insert into \"${this.onTable.name}\" (${Object.keys(raw as any).join(', ')}) `\n                    + `values (${Object.keys(raw as any).map((_, i) => `$${i + 1}`).join(', ')}) returning \"${idCols}\" `\n                    + `- duplicate key value violates unique constraint \"${this.onTable.name}_pkey\"`,\n                details: `Key (${idCols})=(${key}) already exists.`,\n                code: '23505'\n            });\n        }\n        // get tree\n        let tree = this.bin(t);\n        // get key in tree\n        let keyValues = tree.find(key);\n        if (keyValues.valid) {\n            if (keyValues.value.has(id)) {\n                return; // already exists\n            }\n            tree = keyValues.update(keyValues.value.set(id, raw));\n        } else {\n            tree = tree.insert(key, ImMap<string, T>().set(id, raw));\n        }\n        this.setBin(t, tree);\n        this.setCount(t, this.getCount(t) + 1);\n\n    }\n\n    delete(raw: any, t: _Transaction) {\n        const key = this.buildKey(raw, t);\n        let tree = this.bin(t);\n        let keyValues = tree.find(key);\n        if (!keyValues.valid) {\n            return; // key does not exists\n        }\n        const id = getId(raw);\n        if (!keyValues.value.has(id)) {\n            return; // element does not exists\n        }\n        const newKeyValues = keyValues.value.delete(id);\n        if (!newKeyValues.size) {\n            tree = keyValues.remove();\n        } else {\n            tree = keyValues.update(newKeyValues);\n        }\n        this.setBin(t, tree);\n        this.setCount(t, this.getCount(t) - 1);\n    }\n\n    eqFirst(rawKey: IndexKey, t: _Transaction): T | null {\n        for (const r of this.eq(rawKey, t, false)) {\n            return deepCloneSimple(r);\n        }\n        return null;\n    }\n\n\n    *nin(rawKey: IndexKey[], t: _Transaction): Iterable<T> {\n        rawKey.sort((a, b) => this.compare(a, b));\n        const kit = rawKey[Symbol.iterator]();\n        let cur = kit.next();\n        const bin = this.bin(t);\n        let it = bin.begin;\n        while (!cur.done) {\n            // yield previous\n            while (it.valid && this.compare(it.key, cur.value) < 0) {\n                yield* it.value.values();\n                it.next();\n            }\n            // skip equals\n            if (this.compare(it.key, cur.value) === 0) {\n                it = bin.gt(cur.value);\n            }\n            cur = kit.next();\n        }\n\n        // finish\n        while (it.valid) {\n            yield* it.value.values();\n            it.next();\n        }\n    }\n\n\n    entropy(op: IndexOp) {\n        const bin = this.bin(op.t);\n        if (!bin.length) {\n            return 0;\n        }\n        const all = op.t.get<number>(this.treeCountId) ?? 0;\n        // evaluate number of keys included in this operation\n        const e = this._keyCount(op);\n        // multiply by average values per key\n        return e * all / bin.length;\n    }\n\n    stats(t: _Transaction, key?: IndexKey): Stats {\n        if (!key) {\n            return {\n                count: t.get<number>(this.treeCountId) ?? 0,\n            };\n        }\n        const found = this.bin(t).get(key);\n        return {\n            count: found?.size ?? 0,\n        };\n    }\n\n    iterateKeys(t: _Transaction): Iterable<IndexKey> {\n        const bin = this.bin(t);\n        return bin.keys;\n    }\n\n\n    private _keyCount(op: IndexOp) {\n        const bin = this.bin(op.t);\n        switch (op.type) {\n            case 'eq': {\n                const begin = bin.find(op.key);\n                if (!begin.valid) {\n                    return 0;\n                }\n                const end = bin.gt(op.key);\n                if (!end.valid) {\n                    return bin.length - begin.index;\n                }\n                return end.index - begin.index + 1;\n            }\n            case 'neq': {\n                let cnt = 0;\n                const first = bin.find(op.key);\n                if (!first.valid) {\n                    return bin.length;\n                }\n                cnt += first.valid\n                    ? first.index\n                    : 0;\n                const end = bin.gt(op.key);\n                cnt += end.valid\n                    ? (bin.length - end.index)\n                    : 0;\n                return cnt;\n            }\n            case 'ge': {\n                const found = bin.ge(op.key);\n                return found.valid\n                    ? (bin.length - found.index)\n                    : 0;\n            }\n            case 'gt': {\n                const found = bin.gt(op.key);\n                return found.valid\n                    ? (bin.length - found.index)\n                    : 0;\n            }\n            case 'le': {\n                const found = bin.gt(op.key);\n                return found.valid\n                    ? found.index\n                    : bin.length;\n            }\n            case 'lt': {\n                const found = bin.ge(op.key);\n                return found.valid\n                    ? found.index\n                    : bin.length;\n            }\n            case 'inside': {\n                const begin = bin.ge(op.lo);\n                if (!begin.valid) {\n                    return 0;\n                }\n                const end = bin.gt(op.hi);\n                if (!end.valid) {\n                    return bin.length - begin.index;\n                }\n                return end.index - begin.index;\n            }\n            case 'outside': {\n                let cnt = 0;\n                const first = bin.lt(op.lo);\n                cnt += first.valid\n                    ? first.index + 1\n                    : 0;\n                const end = bin.gt(op.hi);\n                cnt += end.valid\n                    ? (bin.length - end.index)\n                    : 0;\n                return cnt;\n            }\n            case 'nin': {\n                let cnt = bin.length;\n                for (const e of op.keys) {\n                    const f = bin.find(e);\n                    if (f.valid) {\n                        cnt--;\n                    }\n                }\n                return cnt;\n            }\n            default:\n                throw NotSupported.never(op['type']);\n        }\n    }\n\n    *enumerate(op: IndexOp): Iterable<T> {\n        for (const x of this._enumerate(op)) {\n            yield deepCloneSimple(x);\n        }\n    }\n    private _enumerate(op: IndexOp): Iterable<T> {\n        switch (op.type) {\n            case 'eq':\n                return this.eq(op.key, op.t, op.matchNull!);\n            case 'neq':\n                return this.neq(op.key, op.t, op.matchNull!);\n            case 'ge':\n                return this.ge(op.key, op.t);\n            case 'le':\n                return this.le(op.key, op.t);\n            case 'gt':\n                return this.gt(op.key, op.t);\n            case 'lt':\n                return this.lt(op.key, op.t);\n            case 'outside':\n                return this.outside(op.lo, op.hi, op.t);\n            case 'inside':\n                return this.inside(op.lo, op.hi, op.t);\n            case 'nin':\n                return this.nin(op.keys, op.t);\n            default:\n                throw NotSupported.never(op['type']);\n        }\n    }\n\n    *eq(key: IndexKey, t: _Transaction, matchNull: boolean): Iterable<T> {\n        if (!matchNull && key.some(nullIsh)) {\n            return;\n        }\n        const it = this.bin(t).find(key);\n        while (it.valid && this.compare(it.key, key) === 0) {\n            yield* it.value.values();\n            it.next();\n        }\n    }\n\n\n\n    *neq(key: IndexKey, t: _Transaction, matchNull: boolean): Iterable<T> {\n        if (!matchNull && key.some(nullIsh)) {\n            return;\n        }\n        // yield before\n        const bin = this.bin(t);\n        let it = bin.begin;\n        while (it.valid && this.compare(it.key, key) < 0) {\n            yield* it.value.values();\n            it.next();\n        }\n        // yield after\n        it = bin.gt(key);\n        while (it.valid) {\n            yield* it.value.values();\n            it.next();\n        }\n    }\n\n    *gt(key: IndexKey, t: _Transaction): Iterable<T> {\n        const it = this.bin(t).gt(key);\n        while (it.valid) {\n            yield* it.value.values();\n            it.next();\n        }\n    }\n\n    *ge(key: IndexKey, t: _Transaction): Iterable<T> {\n        const it = this.bin(t).ge(key);\n        while (it.valid) {\n            yield* it.value.values();\n            it.next();\n        }\n    }\n\n    *lt(key: IndexKey, t: _Transaction): Iterable<T> {\n        const bin = this.bin(t);\n        const limit = bin.lt(key);\n        const it = bin.begin;\n        if (!limit.valid) {\n            // yield all\n            while (it.valid) {\n                yield* it.value.values();\n                it.next();\n            }\n            return;\n        }\n        while (it.valid && limit.index >= it.index) {\n            yield* it.value.values();\n            it.next();\n        }\n        // const it = this.asBinary.lt(key);\n        // while (it.valid) {\n        //     yield* it.value.values();\n        //     it.prev();\n        // }\n    }\n\n    *le(key: IndexKey, t: _Transaction): Iterable<T> {\n        const bin = this.bin(t);\n        const limit = bin.le(key);\n        const it = bin.begin;\n        if (!limit.valid) {\n            // yield all\n            while (it.valid) {\n                yield* it.value.values();\n                it.next();\n            }\n            return;\n        }\n        while (it.valid && limit.index >= it.index) {\n            yield* it.value.values();\n            it.next();\n        }\n        // const it = this.asBinary.le(key);\n        // while (it.valid) {\n        //     yield* it.value.values();\n        //     it.prev();\n        // }\n    }\n\n    *outside(lo: IndexKey, hi: IndexKey, t: _Transaction): Iterable<T> {\n        yield* this.lt(lo, t);\n        yield* this.gt(hi, t);\n    }\n\n    *inside(lo: IndexKey, hi: IndexKey, t: _Transaction): Iterable<T> {\n        const it = this.bin(t).ge(lo);\n        while (it.valid && this.compare(it.key, hi) <= 0) {\n            yield* it.value.values();\n            it.next();\n        }\n    }\n\n    explain(e: _Explainer): _IndexExplanation {\n        return {\n            _: 'btree',\n            onTable: this.onTable.name,\n            btree: this.expressions.map(x => x.id!),\n        }\n    }\n}","module.exports = require(\"functional-red-black-tree\");","import { _Column, IValue, _IIndex, NotSupported, _Transaction, QueryError, _IType, SchemaField, ChangeHandler, nil, ISubscription, DropHandler } from './interfaces-private';\nimport type { MemoryTable } from './table';\nimport { Evaluator } from './evaluator';\nimport { ColumnConstraint, AlterColumn } from 'pgsql-ast-parser';\nimport { nullIsh } from './utils';\nimport { columnEvaluator } from './transforms/selection';\nimport { BIndex } from './schema/btree-index';\nimport { GeneratedIdentityConstraint } from './constraints/generated';\nimport { buildValue } from './parser/expression-builder';\nimport { withSelection } from './parser/context';\n\n\n\nexport class ColRef implements _Column {\n\n    default: IValue | nil;\n    notNull = false;\n    usedInIndexes = new Set<BIndex>();\n    private drophandlers = new Set<DropHandler>();\n\n    constructor(readonly table: MemoryTable\n        , public expression: Evaluator\n        , _schema: SchemaField\n        , public name: string) {\n    }\n\n    addConstraints(clist: ColumnConstraint[], t: _Transaction): this {\n        const notNull = clist.some(x => x.type === 'not null' || x.type === 'primary key');\n        const acceptNil = clist.some(x => x.type === 'null');\n        if (notNull && acceptNil) {\n            throw new QueryError(`conflicting NULL/NOT NULL declarations for column \"${this.name}\" of table \"${this.table.name}\"`)\n        }\n        for (const c of clist) {\n            const cname = c.constraintName;\n            switch (c.type) {\n                case 'not null':\n                case 'null':\n                    // dealt with that above.\n                    break;\n                case 'primary key':\n                    this.table.createIndex(t, {\n                        columns: [{ value: this.expression }],\n                        primary: true,\n                        // default constraint name:\n                        indexName: cname?.name ?? `${this.table.name}_pkey`,\n                    });\n                    break;\n                case 'unique':\n                    this.table.createIndex(t, {\n                        columns: [{ value: this.expression }],\n                        notNull: notNull,\n                        unique: true,\n                        // default constraint name:\n                        indexName: cname?.name ?? `${this.table.name}_${this.name}_key`,\n                    });\n                    break;\n                case 'default':\n                    this.alter({\n                        type: 'set default',\n                        default: c.default,\n                        updateExisting: true,\n                    }, t);\n                    break;\n                case 'check':\n                    this.table.addCheck(t, c.expr, cname?.name);\n                    break;\n                case 'add generated':\n                    new GeneratedIdentityConstraint(c.constraintName?.name, this)\n                        .install(t, c);\n                    break;\n                case 'reference':\n                    this.table.addForeignKey({\n                        ...c,\n                        type: 'foreign key',\n                        localColumns: [{ name: this.name }],\n                    }, t);\n                    break;\n                default:\n                    throw NotSupported.never(c, 'add constraint type');\n            }\n        }\n        if (notNull) {\n            this.addNotNullConstraint(t);\n        }\n        this.table.db.onSchemaChange();\n        return this;\n    }\n\n\n    private addNotNullConstraint(t: _Transaction) {\n        // check has no null value\n        const bin = this.table.bin(t);\n        for (const e of bin.values()) {\n            const val = this.expression.get(e, t);\n            if (nullIsh(val)) {\n                throw new QueryError(`Cannot add not null constraint on column \"${this.expression.id}\": it contains null values`);\n            }\n        }\n        this.notNull = true;\n\n        // just amend schema (for cloning)\n        this.table.db.onSchemaChange();\n    }\n\n    rename(to: string, t: _Transaction): this {\n        if (this.table.getColumnRef(to, true)) {\n            throw new QueryError(`Column \"${to}\" already exists`);\n        }\n\n        // first, move data (this cannot throw => OK to modify mutable data)\n        this.table.remapData(t, v => {\n            const ov = v[this.expression.id!];\n            delete v[this.expression.id!];\n            v[to] = ov;\n        });\n        // for (const v of this.table.bin(t)) {\n        //     const ov = v[this.expression.id];\n        //     delete v[this.expression.id];\n        //     v[to] = ov;\n        // }\n\n        // === do nasty things to rename column\n        this.replaceExpression(to, this.expression.type);\n        this.table.db.onSchemaChange();\n        this.table.selection.rebuild();\n        this.name = to;\n        return this;\n    }\n\n    alter(alter: AlterColumn, t: _Transaction): this {\n        switch (alter.type) {\n            case 'drop default':\n                this.default = null;\n                break;\n            case 'set default':\n                if (alter.default.type === 'null') {\n                    this.default = null;\n                    break;\n                }\n                const df = withSelection(this.table.selection, () => buildValue(alter.default));\n                if (!df.isConstant) {\n                    throw new QueryError('cannot use column references in default expression');\n                }\n                if (alter.updateExisting) {\n                    const defVal = df.get();\n                    this.table.remapData(t, x => x[this.expression.id!] = defVal);\n                }\n                this.default = df;\n                break;\n            case 'set not null':\n                this.addNotNullConstraint(t);\n                break;\n            case 'drop not null':\n                this.notNull = false;\n                break;\n            case 'set type':\n                const newType = this.table.ownerSchema.getType(alter.dataType);\n                const conv = this.expression.cast(newType);\n                const eid = this.expression.id;\n\n                this.table.remapData(t, x => x[this.expression.id!] = conv.get(x, t));\n\n                // once converted, do nasty things to change expression\n                this.replaceExpression(eid!, newType);\n                break;\n            case 'add generated':\n                new GeneratedIdentityConstraint(alter.constraintName?.name, this)\n                    .install(t, alter);\n                break;\n            default:\n                throw NotSupported.never(alter, 'alter column type');\n        }\n        this.table.db.onSchemaChange();\n        this.table.selection.rebuild();\n        return this;\n    }\n\n    private replaceExpression(newId: string, newType: _IType) {\n        const on = this.expression.id!;\n        const nn = newId;\n        this.expression = columnEvaluator(this.table, newId, newType);\n\n        // replace in table\n        this.table.columnMgr.delete(on);\n        this.table.columnMgr.set(nn, this);\n    }\n\n    drop(t: _Transaction): void {\n        const on = this.expression.id!;\n        if (!this.table.columnMgr.has(on)) {\n            throw new Error('Corrupted table');\n        }\n\n        // remove indices\n        for (const u of this.usedInIndexes) {\n            this.table.dropIndex(t, u.name);\n        }\n\n        // remove associated data\n        this.table.remapData(t, x => delete x[this.expression.id!]);\n\n        // nasty business to remove columns\n        this.table.columnMgr.delete(on);\n        this.table.selection.rebuild();\n        this.drophandlers.forEach(d => d(t, false));\n        this.table.db.onSchemaChange();\n    }\n\n    checkConstraints(toInsert: any, t: _Transaction) {\n        if (!this.notNull) {\n            return;\n        }\n        const col = this.expression.get(toInsert, t);\n        if (nullIsh(col)) {\n            throw new QueryError(`null value in column \"${this.expression.id}\" violates not-null constraint`);\n        }\n    }\n\n    setDefaults(toInsert: any, t: _Transaction) {\n        const col = this.expression.get(toInsert, t);\n        if (col !== undefined) {\n            return;\n        }\n        if (!this.default) {\n            toInsert[this.expression.id!] = null;\n        } else {\n            toInsert[this.expression.id!] = this.default.get();\n        }\n    }\n\n\n    onDrop(sub: DropHandler): ISubscription {\n        this.drophandlers.add(sub);\n        return {\n            unsubscribe: () => {\n                this.drophandlers.delete(sub);\n            }\n        }\n    }\n\n}\n","import { ISubscription, NotSupported, QueryError } from '../interfaces';\nimport { AlterColumnAddGenerated, nil } from 'pgsql-ast-parser';\nimport { _Column, _IConstraint, _ITable, _Transaction } from '../interfaces-private';\nimport { nullIsh } from '../utils';\n\nexport class GeneratedIdentityConstraint implements _IConstraint {\n    private subs: ISubscription[] = [];\n\n    private get table() {\n        return this.column.table;\n    }\n    private get schema() {\n        return this.table.ownerSchema;\n    }\n    constructor(readonly name: string | nil, private column: _Column) {\n    }\n\n    uninstall(t: _Transaction): void {\n        for (const s of this.subs) {\n            s.unsubscribe();\n        };\n        this.subs = [];\n    }\n\n\n    install(ct: _Transaction, _c: AlterColumnAddGenerated) {\n        if (!this.column.notNull) {\n            // if it's a table creation, then force 'not null'\n            const tableCreation = !this.schema.getTable(this.table.name, true);\n            if (tableCreation) {\n                this.column.alter({\n                    type: 'set not null',\n                }, ct);\n            } else {\n                // else, throw an error\n                throw new QueryError(`column \"${this.column.name}\" of relation \"${this.table.name}\" must be declared NOT NULL before identity can be added`);\n            }\n        }\n\n        const seq = this.schema.createSequence(ct, _c.sequence, _c.sequence?.name);\n\n        // todo : Review this... it's a complete bluff (dont have time to check spec)\n        const mode = _c.always ?? 'always';\n        this.subs.push(this.table.onBeforeChange([this.column], (old, neu, dt, opts) => {\n            // only act on new things\n            if (old) {\n                return;\n            }\n            const gen = () => neu[this.column.name] = seq.nextValue(dt);\n\n            if (nullIsh(neu[this.column.name])) {\n                // no value has been provided => generate one.\n                gen();\n                return;\n            }\n\n            // a value has been provided => check if must be overriden.\n            switch (mode) {\n                case 'by default':\n                    switch (opts.overriding ?? 'system') {\n                        case 'system':\n                            break;\n                        default:\n                            gen();\n                            break;\n\n                    }\n                    break;\n                case 'always':\n                    // column is 'GENREATED ALWAYS'\n                    // => must specify 'overriding system value'\n                    if (opts.overriding !== 'system') {\n                        throw new QueryError({\n                            error: `cannot insert into column \"${this.column.name}\"`,\n                            details: ` Column \"${this.column.name}\" is an identity column defined as GENERATED ALWAYS.`,\n                            hint: 'Use OVERRIDING SYSTEM VALUE to override.',\n                        })\n                    }\n                    break;\n                default:\n                    throw NotSupported.never(mode);\n            }\n\n        }));\n\n        this.subs.push(this.table.onTruncate((t, { restartIdentity }) => {\n            if (!restartIdentity) {\n                return;\n            }\n            seq.restart(t);\n        }))\n    }\n\n}","import { ISubscription, NotSupported, QueryError } from '../interfaces';\nimport { Expr, ExprBinary, TableConstraintForeignKey } from 'pgsql-ast-parser';\nimport { asTable, CreateIndexColDef, _IConstraint, _ITable, _Transaction } from '../interfaces-private';\nimport { nullIsh } from '../utils';\n\nexport class ForeignKey implements _IConstraint {\n\n    private unsubs: ISubscription[] = [];\n\n    private table!: _ITable;\n    private foreignTable!: _ITable;\n\n\n\n    get db() {\n        return this.table.ownerSchema.db;\n    }\n\n    get schema() {\n        return this.table.ownerSchema;\n    }\n\n\n    constructor(readonly name: string) {\n    }\n\n    install(_t: _Transaction, cst: TableConstraintForeignKey, table: _ITable) {\n        const ftable = asTable(table.ownerSchema.getObject(cst.foreignTable, { beingCreated: table }));\n        const cols = cst.localColumns.map(x => table.getColumnRef(x.name));\n        const fcols = cst.foreignColumns.map(x => ftable.getColumnRef(x.name));\n        this.table = table;\n        this.foreignTable = ftable;\n        if (cols.length !== fcols.length) {\n            throw new QueryError('Foreign key count mismatch');\n        }\n        cols.forEach((c, i) => {\n            if (fcols[i].expression.type !== c.expression.type) {\n                throw new QueryError(`Foreign key column type mismatch`);\n            }\n        });\n\n        if ((cst.match ?? 'simple') !== 'simple' && cols.length !== 1) {\n            throw new NotSupported(`matching mode '${cst.match}' on mutliple columns foreign keys`);\n        }\n\n        // check that there is an unique index on this table for the given expressions\n        const findex = ftable.getIndex(...fcols.map(x => x.expression));\n        if (!findex?.unique) {\n            throw new QueryError(`there is no unique constraint matching given keys for referenced table \"${ftable.name}\"`);\n        }\n\n\n        // auto-create indices\n        if (this.db.options.autoCreateForeignKeyIndices) {\n            table.createIndex(_t, {\n                ifNotExists: true,\n                columns: cols.map<CreateIndexColDef>(x => ({\n                    value: x.expression,\n                })),\n            });\n        }\n\n        // ========================\n        // when changing the foreign table key, check correspondances in this table\n        // ========================\n        const onUpdate = cst.onUpdate ?? 'no action';\n        const onDelete = cst.onDelete ?? 'no action';\n        this.unsubs.push(ftable.onBeforeChange(cst.foreignColumns.map(x => x.name), (old, neu, dt) => {\n            if (!old) {\n                return;\n            }\n            const oVals = fcols.map(x => old[x.expression.id!]);\n            if (oVals.some(nullIsh)) {\n                return;\n            }\n            // build foreign key equality expression\n            const equals = cst.localColumns.map<ExprBinary>((x, i) => ({\n                type: 'binary',\n                op: '=',\n                left: { type: 'ref', name: x.name, table: { name: table.name } },\n                // hack, see #fkcheck\n                right: {\n                    type: 'constant',\n                    value: oVals[i],\n                    dataType: fcols[i].expression.type as any, // hack\n                },\n            }));\n            const expr = equals.slice(1).reduce<Expr>((a, b) => ({\n                type: 'binary',\n                op: 'AND',\n                left: a,\n                right: b,\n            }), equals[0]);\n\n            // check nothing matches\n            for (const local of table.selection.filter(expr).enumerate(dt)) {\n                // ====== ON DELETE\n                switch (neu ? onUpdate : onDelete) {\n                    case 'no action':\n                    case 'restrict':\n                        throw new QueryError(`update or delete on table \"${ftable.name}\" violates foreign key constraint on table \"${this.name}\"`);\n                    case 'cascade':\n                        if (neu) {\n                            for (let i = 0; i < fcols.length; i++) {\n                                local[cst.localColumns[i].name] = neu[cst.foreignColumns[i].name];\n                            }\n                            table.update(dt, local);\n                        } else {\n                            table.delete(dt, local);\n                        }\n                        break;\n                    case 'set default':\n                    case 'set null':\n                        for (const c of cst.localColumns) {\n                            local[c.name] = null;\n                        }\n                        table.update(dt, local);\n                        break;\n                }\n            }\n        }));\n\n        // =====================\n        //  when changing something in this table,\n        //  then there must be a key match in the foreign table\n        // =====================\n        this.unsubs.push(table.onBeforeChange(cst.localColumns.map(x => x.name), (_, neu, dt) => {\n            if (!neu) {\n                return;\n            }\n            const vals = cols.map(x => (neu as any)[x.expression.id!]);\n            if (vals.some(nullIsh)) {\n                return;\n            }\n            // build foreign key equality expression\n            const equals = cst.foreignColumns.map<ExprBinary>((x, i) => ({\n                type: 'binary',\n                op: '=',\n                left: { type: 'ref', name: x.name, table: { name: ftable.name } },\n                // hack, see #fkcheck\n                right: {\n                    type: 'constant',\n                    value: vals[i],\n                    dataType: cols[i].expression.type as any, // hack\n                },\n            }));\n            const expr = equals.slice(1).reduce<Expr>((a, b) => ({\n                type: 'binary',\n                op: 'AND',\n                left: a,\n                right: b,\n            }), equals[0]);\n\n            // check there is a match\n            let yielded = false;\n            for (const _ of ftable.selection.filter(expr).enumerate(dt)) {\n                yielded = true;\n            }\n            if (!yielded) {\n                throw new QueryError(`insert or update on table \"${ftable.name}\" violates foreign key constraint on table \"${this.name}\"`);\n            }\n        }));\n\n\n        // =====================\n        //  prevent foreign table from being dropped\n        // =====================\n        this.unsubs.push(ftable.onDrop((t, cascade) => {\n            //  (todo implement multiple drops)\n            if (cascade) {\n                this.uninstall(t);\n            } else {\n                throw new QueryError({\n                    error: `cannot drop table \"${ftable.name}\" because other objects depend on it`,\n                    details: `constraint ${this.name} on table ${table.name} depends on table \"${ftable.name}\"`,\n                    hint: `Use DROP ... CASCADE to drop the dependent objects too.`,\n                });\n            }\n        }));\n\n        // =====================\n        //  prevent foreign table truncation\n        // =====================\n        this.unsubs.push(ftable.onTruncate((t, { cascade }) => {\n            if (cascade) {\n                this.table.truncate(t, { cascade: true });\n                return;\n            }\n            throw new QueryError({\n                error: `cannot truncate a table referenced in a foreign key constraint`,\n                details: `Table \"${table.name}\" references \"${ftable.name}\".`,\n                hint: `HINT:  Truncate table \"${table.name}\" at the same time, or use TRUNCATE ... CASCADE.`,\n            })\n        }));\n\n        // =====================\n        //  when this table is dropped => remove hooks on foreign table\n        // =====================\n        table.onDrop(dt => {\n            this.uninstall(dt);\n        });\n\n        return this;\n    }\n\n    uninstall(t: _Transaction): void {\n        this.unsubs.forEach(x => x.unsubscribe());\n        this.unsubs = [];\n    }\n}","import { _IConstraint, _Transaction } from '../interfaces-private';\n\nexport class SubscriptionConstraint implements _IConstraint {\n    constructor(readonly name: string, readonly uninstall: (t: _Transaction) => void) {\n    }\n}","import { _IConstraint, _Transaction } from '../interfaces-private';\n\nexport class ConstraintWrapper implements _IConstraint {\n    constructor(private refs: Map<string, _IConstraint>, private inner: _IConstraint) {\n        if (inner.name) {\n            refs.set(inner.name, this);\n        }\n    }\n    get name() {\n        return this.inner.name;\n    }\n    uninstall(t: _Transaction): void {\n        this.inner.uninstall(t);\n        if (this.name) {\n            this.refs.delete(this.name);\n        }\n    }\n}\n","\nimport { _ISchema } from '../interfaces-private'\n\n\nimport { literal } from '../misc/pg-escape'\nimport { MigrationData, MigrationFile, MigrationParams } from './migrate-interfaces';\n\ndeclare var __non_webpack_require__: any;\ndeclare var process: any;\n\nexport async function readMigrations(migrationPath?: string) {\n  const path = __non_webpack_require__('path');\n  const fs = __non_webpack_require__('fs');\n  const migrationsPath = migrationPath || path.join(process.cwd(), 'migrations')\n  const location = path.resolve(migrationsPath)\n\n  // Get the list of migration files, for example:\n  //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n  //   { id: 2, name: 'feature', filename: '002-feature.sql' }\n  const migrationFiles = await new Promise<MigrationFile[]>(\n    (resolve, reject) => {\n      fs.readdir(location, (err: any, files: string[]) => {\n        if (err) {\n          return reject(err)\n        }\n\n        resolve(\n          files\n            .map(x => x.match(/^(\\d+).(.*?)\\.sql$/))\n            .filter(x => x !== null)\n            .map(x => ({ id: Number(x![1]), name: x![2], filename: x![0] }))\n            .sort((a, b) => Math.sign(a.id - b.id))\n        )\n      })\n    }\n  )\n\n  if (!migrationFiles.length) {\n    throw new Error(`No migration files found in '${location}'.`)\n  }\n\n  // Get the list of migrations, for example:\n  //   { id: 1, name: 'initial', filename: '001-initial.sql', up: ..., down: ... }\n  //   { id: 2, name: 'feature', filename: '002-feature.sql', up: ..., down: ... }\n  return Promise.all(\n    migrationFiles.map(\n      migration =>\n        new Promise<MigrationData>((resolve, reject) => {\n          const filename = path.join(location, migration.filename)\n          fs.readFile(filename, 'utf-8', (err: any, data: string) => {\n            if (err) {\n              return reject(err)\n            }\n\n            const [up, down] = data.split(/^--\\s+?down\\b/im)\n\n            const migrationData = migration as Partial<MigrationData>\n            migrationData.up = up.replace(/^-- .*?$/gm, '').trim() // Remove comments\n            migrationData.down = down ? down.trim() : '' // and trim whitespaces\n            resolve(migrationData as MigrationData)\n          })\n        })\n    )\n  )\n}\n\n/**\n * Migrates database schema to the latest version\n */\nexport async function migrate(db: _ISchema, config: MigrationParams = {}) {\n  config.force = config.force || false\n  config.table = config.table || 'migrations'\n\n  const { force, table } = config\n  const migrations = config.migrations\n    ? config.migrations\n    : await readMigrations(config.migrationsPath)\n\n  // Create a database table for migrations meta data if it doesn't exist\n  await db.none(`CREATE TABLE IF NOT EXISTS \"${table}\" (\n  id   INTEGER PRIMARY KEY,\n  name TEXT    NOT NULL,\n  up   TEXT    NOT NULL,\n  down TEXT    NOT NULL\n)`)\n\n  // Get the list of already applied migrations\n  let dbMigrations = await db.many(\n    `SELECT id, name, up, down FROM \"${table}\" ORDER BY id ASC`\n  )\n\n  // Undo migrations that exist only in the database but not in files,\n  // also undo the last migration if the `force` option is enabled.\n  const lastMigration = migrations[migrations.length - 1]\n  for (const migration of dbMigrations\n    .slice()\n    .sort((a, b) => Math.sign(b.id - a.id))) {\n    if (\n      !migrations.some(x => x.id === migration.id) ||\n      (force && migration.id === lastMigration.id)\n    ) {\n      // await db.run('BEGIN')\n      try {\n        await db.none(migration.down)\n        await db.none(`DELETE FROM \"${table}\" WHERE id = ${migration.id}`)\n        // await db.run('COMMIT')\n        dbMigrations = dbMigrations.filter(x => x.id !== migration.id)\n      } catch (err) {\n        // await db.run('ROLLBACK')\n        throw err\n      }\n    } else {\n      break\n    }\n  }\n\n  // Apply pending migrations\n  const lastMigrationId = dbMigrations.length\n    ? dbMigrations[dbMigrations.length - 1].id\n    : 0\n  for (const migration of migrations) {\n    if (migration.id > lastMigrationId) {\n      // await db.run('BEGIN')\n      try {\n        await db.none(migration.up)\n        await db.none(\n          `INSERT INTO \"${table}\" (id, name, up, down) VALUES (\n          ${migration.id},\n          ${literal(migration.name)},\n          ${literal(migration.up)},\n          ${literal(migration.down)})`\n        )\n        // await db.run('COMMIT')\n      } catch (err) {\n        // await db.run('ROLLBACK')\n        throw err\n      }\n    }\n  }\n}","import { Evaluator } from '../evaluator';\nimport { TypeBase } from './datatype-base';\nimport { CastError, DataType, IEquivalentType, IType, nil, QueryError, typeDefToStr } from '../interfaces';\nimport { _ISchema, _IType } from '../interfaces-private';\nimport { Types } from './datatypes';\n\nexport class EquivalentType extends TypeBase<string> {\n\n    private equiv: IType;\n\n    constructor(private def: IEquivalentType) {\n        super();\n        if (typeof def.equivalentTo === 'string') {\n            let eq = (Types as any)[def.equivalentTo];\n            if (typeof eq === 'function') {\n                eq = eq();\n            }\n            this.equiv = eq;\n        } else {\n            this.equiv = def.equivalentTo;\n        }\n\n        if (!this.equiv) {\n            throw new Error(`Invalid equilvalent type`);\n        }\n    }\n\n    get primary(): DataType {\n        return this.def.name as any;\n    }\n\n    doCanCast(to: _IType) {\n        return to.primary === this.equiv.primary;\n    }\n\n    doCast(value: Evaluator<string>, to: _IType<string>): Evaluator<any> | nil {\n        return value;\n    }\n\n    prefer(type: _IType<any>): _IType | nil {\n        return this;\n    }\n\n    doCanBuildFrom(from: _IType): boolean | nil {\n        return from.primary === this.equiv.primary;\n    }\n\n    doBuildFrom(value: Evaluator<string>, from: _IType<string>): Evaluator<string> | nil {\n        return value\n            .setConversion(x => {\n                if (!this.def.isValid(x)) {\n                    throw new QueryError(`invalid input syntax for type ${typeDefToStr(this)}: ${x}`);\n                }\n                return x;\n            }, val => ({ val, to: this.equiv.primary }));\n    }\n}\n","import { _IType, _ArgDefDetails, nil, DataType, IValue } from '../interfaces-private';\nimport { Types } from '../datatypes';\nimport { it } from '../utils';\nimport { QueryError } from '../interfaces';\n\nexport interface HasSig {\n    name: string;\n    args: _ArgDefDetails[];\n    argsVariadic?: _IType | nil;\n}\n\nexport class OverloadResolver<T extends HasSig> {\n\n    private byName = new Map<string, OverloadNode<T>>();\n\n    constructor(private implicitCastOnly: boolean) { }\n\n    add(value: T, replaceIfExists: boolean) {\n        let ret = this.byName.get(value.name);\n        if (!ret) {\n            this.byName.set(value.name, ret = new OverloadNode<T>(Types.null, this.implicitCastOnly, 0));\n        }\n        ret.index(value, replaceIfExists);\n    }\n\n    getOverloads(name: string) {\n        const ovr = this.byName.get(name);\n        if (!ovr) {\n            return [];\n        }\n        return [...ovr.all()];\n    }\n\n    remove(value: T) {\n        this.byName.get(value.name)?.unindex(value);\n    }\n\n    resolve(name: string, args: IValue[]) {\n        return this.byName.get(name)?.resolve(args);\n    }\n\n    getExact(name: string, types: _IType[]): T | nil {\n        return this.byName.get(name)?.getExact(types);\n    }\n}\n\n\nclass OverloadNode<T extends HasSig> {\n\n    private nexts = new Map<DataType, OverloadNode<T>[]>();\n    private leaf: T | nil;\n\n    constructor(readonly type: _IType, private implicitCastOnly: boolean, private at: number) {\n    }\n\n    *all(): IterableIterator<T> {\n        if (this.leaf) {\n            yield this.leaf;\n        }\n        for (const children of this.nexts.values()) {\n            for (const child of children) {\n                yield* child.all();\n            }\n        }\n    }\n\n    index(value: T, replaceIfExists: boolean) {\n        if (this.at >= value.args.length) {\n            if (this.leaf && !replaceIfExists) {\n                throw new QueryError('Function already exists: ' + value.name);\n            }\n            this.leaf = value;\n            return;\n        }\n        const arg = value.args[this.at];\n        const primary = arg.type.primary;\n        let lst = this.nexts.get(primary);\n        if (!lst) {\n            this.nexts.set(primary, lst = []);\n        }\n        // get or add corresponding node\n        let node = lst.find(x => x.type === arg.type);\n        if (!node) {\n            lst.push(node = new OverloadNode(arg.type, this.implicitCastOnly, this.at + 1));\n        }\n\n        // process arg list\n        node.index(value, replaceIfExists);\n    }\n\n    unindex(value: T) {\n        if (this.leaf === value) {\n            this.leaf = null;\n            return;\n        }\n        for (const children of this.nexts.values()) {\n            for (const child of children) {\n                child.unindex(value);\n            }\n        }\n    }\n\n    getExact(types: _IType[]): T | nil {\n        if (this.at >= types.length) {\n            return this.leaf;\n        }\n        const target = types[this.at];\n        const found = this.nexts.get(target.primary)\n            ?.find(x => x.type == target);\n        return found?.getExact(types);\n    }\n\n    resolve(args: IValue[]): T | nil {\n        if (this.at >= args.length) {\n            return this.leaf;\n        }\n\n        // gets the child which type matches the current arg better\n        const arg = args[this.at];\n        const sigsToCheck = it(\n            this.nexts // perf tweak: search by primary type\n                .get(arg.type.primary)\n            ?? it(this.nexts.values()).flatten() // else, search all registered overloads\n        );\n\n        const match = sigsToCheck.reduce<OverloadNode<T> | nil>((acc, x) => {\n            // check that arg can be converted to the target type\n            if (!this.compatible(arg, x.type)) {\n                return acc;\n            }\n            // first match\n            if (!acc) {\n                return x;\n            }\n            // returns the prefered type\n            return acc.type.prefer(x.type) === x.type ? x : acc;\n        }, null);\n\n        if (match) {\n            return match.resolve(args);\n        }\n\n        // handle variadic args\n        if (this.leaf && this.leaf.argsVariadic && this.compatible(arg, this.leaf.argsVariadic)) {\n            return this.leaf;\n        }\n\n        // not found\n        return null;\n    }\n\n    private compatible(givenArg: IValue, expectedArg: _IType) {\n        if (givenArg.type === expectedArg) {\n            return true;\n        }\n        return givenArg.isConstantLiteral\n            ? givenArg.type.canCast(expectedArg)\n            : givenArg.type.canConvertImplicit(expectedArg) ?? givenArg.type.canCast(expectedArg);\n    }\n}","import { AlterSequenceChange, CreateSequenceOptions } from 'pgsql-ast-parser';\nimport { combineSubs, ignore, nullIsh } from '../utils';\nimport { NotSupported, asTable, _ISchema, _ISequence, _IType, _Transaction, RegClass, Reg } from '../interfaces-private';\nimport { ISubscription, nil, QueryError } from '../interfaces';\nimport { Types } from '../datatypes';\n\ninterface SeqData {\n    currval: number | undefined;\n    nextval: number;\n}\n\nexport class Sequence implements _ISequence {\n\n    get type(): 'sequence' {\n        return 'sequence';\n    }\n\n    private symbol = Symbol();\n    private owner?: ISubscription;\n    private cfg: {\n        start?: number;\n        max?: number;\n        min?: number;\n        cycle?: boolean;\n        inc?: number;\n        dataType?: _IType;\n    } = {};\n\n    readonly reg: Reg;\n\n\n    get cycle() {\n        return this.cfg.cycle ?? false;\n    }\n\n    get dataType() {\n        return this.cfg.dataType ?? Types.integer;\n    }\n\n    get inc() {\n        return this.cfg.inc ?? 1;\n    }\n\n\n    constructor(public name: string, readonly ownerSchema: _ISchema) {\n        this.reg = ownerSchema._reg_register(this);\n    }\n\n\n    get start() {\n        return this.cfg.start ?? (this.inc > 0\n            ? this.min\n            : this.max);\n    }\n\n    get max() {\n        return this.cfg.max\n            ?? (this.inc > 0\n                ? Number.MAX_SAFE_INTEGER - 1\n                : -1);\n    }\n\n    get min() {\n        return this.cfg.min\n            ?? (this.inc > 0\n                ? 1\n                : Number.MIN_SAFE_INTEGER + 1);\n    }\n\n    alter(t: _Transaction, opts: CreateSequenceOptions | AlterSequenceChange | nil): this {\n        if (!opts) {\n            return this;\n        }\n        const oldCfg = { ...this.cfg };\n        try {\n            if (!('type' in opts)) {\n                return this.alterOpts(t, opts);\n            }\n            switch (opts.type) {\n                case 'set options':\n                    this.alterOpts(t, opts);\n                    if (opts.restart === true || typeof opts.restart === 'number') {\n                        if (typeof opts.restart === 'number') {\n                            if (opts.restart < this.min) {\n                                throw new QueryError(`RESTART value (${opts.restart}) cannot be less than MINVALUE (${this.min})`, '22023');\n                            }\n                            this.cfg.start = opts.restart;\n                        }\n                        const data: SeqData = {\n                            currval: t.get<SeqData>(this.symbol)?.currval,\n                            nextval: this.start,\n                        }\n                        t.set(this.symbol, data);\n                    }\n                    return this;\n                case 'set schema':\n                    if (opts.newSchema.name === this.ownerSchema.name) {\n                        return this;\n                    }\n                    throw new NotSupported('Sequence schema change');\n                case 'rename':\n                    const to = opts.newName.name.toLowerCase();\n                    this.ownerSchema._reg_rename(this, this.name, to);\n                    this.name = to;\n                    return this;\n                case 'owner to':\n                    // todo: implement sequence owners ? ...ignored to support pg_dump exports.\n                    ignore(opts);\n                    return this;\n                default:\n                    throw NotSupported.never(opts);\n            }\n        } catch (e) {\n            this.cfg = oldCfg;\n            throw e;\n        }\n    }\n\n    nextValue(t: _Transaction): number {\n        let v = t.get<SeqData>(this.symbol)?.nextval;\n        if (v === undefined) {\n            v = this.start;\n        }\n        this.setValue(t, v);\n        return v;\n    }\n\n    setValue(t: _Transaction, value: number) {\n        if (value > this.max) {\n            throw new QueryError(`reached maximum value of sequence \"${this.name}\"`);\n        }\n        if (value < this.min) {\n            throw new QueryError(`reached minimum value of sequence \"${this.name}\"`);\n        }\n        const data: SeqData = {\n            currval: value,\n            nextval: value + this.inc,\n        };\n        t.set(this.symbol, data);\n    }\n\n    restart(t: _Transaction) {\n        t.delete(this.symbol);\n    }\n\n    currentValue(t: _Transaction): number {\n        const v = t.get<SeqData>(this.symbol)?.currval;\n        if (v === undefined) {\n            throw new QueryError(`currval of sequence \"${this.name}\" is not yet defined in this session`, '55000');\n        }\n        return v;\n    }\n\n\n    private alterOpts(t: _Transaction, opts: CreateSequenceOptions) {\n        if (opts.as) {\n            ignore(opts.as);\n            this.cfg.dataType = this.ownerSchema.getType(opts.as);\n        }\n        ignore(opts.cache);\n        if (opts.cycle) {\n            this.cfg.cycle = opts.cycle === 'cycle';\n        }\n\n        if (typeof opts.incrementBy === 'number') {\n            this.cfg.inc = opts.incrementBy;\n        }\n\n        if (typeof opts.maxValue === 'number') {\n            this.cfg.max = opts.maxValue;\n        } else if (opts.maxValue) {\n            this.cfg.max = undefined;\n        }\n\n        if (typeof opts.minValue === 'number') {\n            this.cfg.min = opts.minValue;\n        } else if (opts.maxValue) {\n            this.cfg.min = undefined;\n        }\n\n        if (typeof opts.startWith === 'number') {\n            this.cfg.start = opts.startWith;\n        }\n\n\n        if (opts.ownedBy === 'none') {\n            this.owner?.unsubscribe();\n        } else if (opts.ownedBy) {\n            this.owner?.unsubscribe();\n\n            const tbl = asTable(this.ownerSchema.getObject({\n                name: opts.ownedBy.table,\n                schema: opts.ownedBy.schema\n            }));\n\n            const owner = tbl.getColumnRef(opts.ownedBy.column);\n\n            this.owner = combineSubs(\n                owner.onDrop(dt => this.drop(dt)),\n                tbl.onDrop(dt => this.drop(dt)),\n            );\n        }\n\n        // === validate\n        if (this.max < this.min) {\n            throw new QueryError('Invalid squeuence min-max');\n        }\n\n        if (!this.inc) {\n            throw new QueryError('Invalid increment');\n        }\n\n        if (this.start > this.max || this.start < this.min) {\n            throw new QueryError('Invalid sequence starting value');\n        }\n        return this;\n    }\n\n    drop(t: _Transaction) {\n        this.owner?.unsubscribe();\n        this.owner = undefined;\n        t.delete(this.symbol);\n        this.ownerSchema._reg_unregister(this);\n    }\n}","import { _ISchema, _Transaction, SchemaField, NotSupported, _ITable, _IStatementExecutor, Schema, DataType, QueryError } from '../../interfaces-private';\nimport { CreateTableStatement, QName } from 'pgsql-ast-parser';\nimport { ignore, Optional } from '../../utils';\nimport { checkExistence, ExecHelper } from '../exec-utils';\nimport { buildCtx } from '../../parser/context';\n\nexport class ExecuteCreateTable extends ExecHelper implements _IStatementExecutor {\n    private toDeclare: Schema;\n    private ifNotExists: boolean;\n    private name: QName;\n    private schema: _ISchema;\n\n    constructor(p: CreateTableStatement) {\n        super(p);\n        const { db } = buildCtx();\n        this.schema = db.getSchema(p.name.schema);\n        let fields: SchemaField[] = [];\n        for (const f of p.columns) {\n            switch (f.kind) {\n                case 'column':\n                    if (!f.dataType.kind && f.dataType.name === DataType.record) {\n                        throw new QueryError(`column \"${f.name.name}\" has pseudo-type record`, '42P16');\n                    }\n                    // TODO: #collation\n                    ignore(f.collate);\n                    const nf = {\n                        ...f,\n                        name: f.name.name,\n                        type: this.schema.getType(f.dataType),\n                        serial: !f.dataType.kind && (f.dataType.name === 'serial' || f.dataType.name === 'bigserial'),\n                    };\n                    delete (nf as Optional<typeof nf>).dataType;\n                    fields.push(nf);\n                    break;\n                case 'like table':\n                    throw new NotSupported('\"like table\" statement');\n                default:\n                    throw NotSupported.never(f);\n            }\n        }\n        this.ifNotExists = !!p.ifNotExists;\n        this.name = p.name;\n        this.toDeclare = {\n            name: p.name.name,\n            constraints: p.constraints,\n            fields,\n        };\n    }\n\n    execute(t: _Transaction) {\n\n        // commit pending data before making changes\n        //  (because the creation does not support further rollbacks)\n        t = t.fullCommit();\n\n        // perform creation\n        checkExistence(this.schema, this.name, this.ifNotExists, () => {\n            this.schema.declareTable(this.toDeclare);\n        });\n\n\n        // new implicit transaction\n        t = t.fork();\n        return this.noData(t, 'CREATE');\n    }\n}","import { _Transaction, asTable, _ISchema, NotSupported, CreateIndexColDef, _ITable, CreateIndexDef, _IStatement, _IStatementExecutor } from '../../interfaces-private';\nimport { CreateIndexStatement } from 'pgsql-ast-parser';\nimport { ignore } from '../../utils';\nimport { ExecHelper } from '../exec-utils';\nimport { buildValue } from '../../parser/expression-builder';\nimport { withSelection } from '../../parser/context';\n\nexport class CreateIndexExec extends ExecHelper implements _IStatementExecutor {\n    private onTable: _ITable;\n    private indexDef: CreateIndexDef;\n\n    constructor({ schema }: _IStatement, p: CreateIndexStatement) {\n        super(p);\n        const indexName = p.indexName?.name;\n        this.onTable = asTable(schema.getObject(p.table));\n        // check that index algorithm is supported\n        if (p.using && p.using.name.toLowerCase() !== 'btree') {\n            if (schema.db.options.noIgnoreUnsupportedIndices) {\n                throw new NotSupported('index type: ' + p.using);\n            }\n            ignore(p);\n        }\n\n        this.indexDef = withSelection(this.onTable.selection, () => {\n\n            // index columns\n            const columns = p.expressions\n                .map<CreateIndexColDef>(x => {\n                    return {\n                        value: buildValue(x.expression),\n                        nullsLast: x.nulls === 'last', // nulls are first by default\n                        desc: x.order === 'desc',\n                    }\n                });\n\n            // compile predicate (if any)\n            const predicate = p.where && buildValue(p.where);\n\n            return {\n                columns,\n                indexName,\n                unique: p.unique,\n                ifNotExists: p.ifNotExists,\n                predicate,\n            };\n        });\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because the index creation does not support further rollbacks)\n        t = t.fullCommit();\n\n        // create index\n        this.onTable\n            .createIndex(t, this.indexDef);\n\n        // new implicit transaction\n        t = t.fork();\n        return this.noData(t, 'CREATE');\n    }\n}\n","import { _ISchema, _Transaction, SchemaField, NotSupported, _ITable, _IStatementExecutor, asTable, QueryError, _IStatement } from '../../interfaces-private';\nimport { AlterTableStatement } from 'pgsql-ast-parser';\nimport { ignore } from '../../utils';\nimport { ExecHelper } from '../exec-utils';\n\nexport class Alter extends ExecHelper implements _IStatementExecutor {\n\n    private table: _ITable;\n\n    constructor({ schema }: _IStatement, private p: AlterTableStatement) {\n        super(p);\n        this.table = asTable(schema.getObject(p.table));\n        ignore(p.only);\n    }\n\n    execute(t: _Transaction) {\n\n        let ignored = 0;\n\n        // commit pending data before making changes\n        //  (because  does not support further rollbacks)\n        t = t.fullCommit();\n\n\n        for (const change of this.p.changes) {\n            function ignoreChange() {\n                ignore(change);\n                ignored++;\n            }\n            switch (change.type) {\n                case 'rename':\n                    this.table.rename(change.to.name);\n                    break;\n                case 'add column': {\n                    const col = this.table.selection.getColumn(change.column.name.name, true);\n                    if (col) {\n                        if (change.ifNotExists) {\n                            ignoreChange();\n                            break;\n                        } else {\n                            throw new QueryError('Column already exists: ' + col.id);\n                        }\n                    } else {\n                        ignore(change.ifNotExists);\n                    }\n                    this.table.addColumn(change.column, t);\n                    break;\n                }\n                case 'drop column':\n                    const col = this.table.getColumnRef(change.column.name, change.ifExists);\n                    if (!col) {\n                        ignoreChange();\n                    } else {\n                        col.drop(t);\n                    }\n                    break;\n                case 'drop constraint':\n                    const cst = this.table.getConstraint(change.constraint.name);\n                    if (change.ifExists && !cst) {\n                        ignoreChange();\n                        break;\n                    }\n                    if (!cst) {\n                        throw new QueryError(`constraint \"${change.constraint.name}\" of relation \"${this.table.name}\" does not exist`, '42704')\n                    }\n                    cst.uninstall(t);\n                    break;\n                case 'rename column':\n                    this.table.getColumnRef(change.column.name)\n                        .rename(change.to.name, t);\n                    break;\n                case 'alter column':\n                    this.table.getColumnRef(change.column.name)\n                        .alter(change.alter, t);\n                    break;\n                case 'rename constraint':\n                    throw new NotSupported('rename constraint');\n                case 'add constraint':\n                    this; this.table.addConstraint(change.constraint, t);\n                    break;\n                case 'owner':\n                    // owner change statements are not supported.\n                    // however, in order to support, pg_dump, we're just ignoring them.\n                    ignoreChange();\n                    break;\n                default:\n                    throw NotSupported.never(change, 'alter request');\n\n            }\n        }\n\n\n        // new implicit transaction\n        t = t.fork();\n        return this.noData(t, 'ALTER');\n    }\n}\n","import { _ISchema, _Transaction, _ISequence, _IStatementExecutor, _IStatement, asSeq } from '../../interfaces-private';\nimport { AlterSequenceStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { ignore } from '../../utils';\n\nexport class AlterSequence extends ExecHelper implements _IStatementExecutor {\n    private seq: _ISequence | null;\n\n\n    constructor({ schema }: _IStatement, private p: AlterSequenceStatement) {\n        super(p);\n\n        this.seq = asSeq(schema.getObject(p.name, {\n            nullIfNotFound: p.ifExists,\n        }));\n        if (!this.seq) {\n            ignore(this.p);\n        }\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because the index sequence creation does support further rollbacks)\n        t = t.fullCommit();\n\n        // alter the sequence\n        this.seq?.alter(t, this.p.change);\n\n        // new implicit transaction\n        t = t.fork();\n\n        return this.noData(t, 'ALTER');\n    }\n}\n","import { _ISchema, _Transaction, _ISequence, _IStatementExecutor, _IStatement, asSeq, asIndex, _INamedIndex } from '../../interfaces-private';\nimport { DropStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { ignore, notNil } from '../../utils';\n\nexport class DropIndex extends ExecHelper implements _IStatementExecutor {\n    private idx: _INamedIndex<any>[];\n\n\n    constructor({ schema }: _IStatement, statement: DropStatement) {\n        super(statement);\n\n        this.idx = notNil(statement.names.map(x => asIndex(schema.getObject(x, {\n            nullIfNotFound: statement.ifExists,\n        }))));\n\n        if (this.idx.length) {\n            ignore(statement.concurrently);\n        } else {\n            ignore(statement);\n        }\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because the index sequence creation does support further rollbacks)\n        t = t.fullCommit();\n\n        // alter the sequence\n        for (const idx of this.idx) {\n            idx.onTable.dropIndex(t, idx.name);\n        }\n\n        // new implicit transaction\n        t = t.fork();\n\n        return this.noData(t, 'DROP');\n    }\n}\n","import { _ISchema, _Transaction, _ISequence, _IStatementExecutor, _IStatement, asSeq, asIndex, _INamedIndex, _ITable, asTable } from '../../interfaces-private';\nimport { DropStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { ignore, notNil } from '../../utils';\n\nexport class DropTable extends ExecHelper implements _IStatementExecutor {\n    private tables: _ITable[];\n    private cascade: boolean;\n\n\n    constructor({ schema }: _IStatement, statement: DropStatement) {\n        super(statement);\n\n        this.tables = notNil(statement.names.map(x => asTable(schema.getObject(x, {\n            nullIfNotFound: statement.ifExists,\n        }))));\n\n        this.cascade = statement.cascade === 'cascade';\n\n        if (!this.tables.length) {\n            ignore(statement);\n        }\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because it does not support further rollbacks)\n        t = t.fullCommit();\n\n        // drop table\n        for (const table of this.tables) {\n            table.drop(t, this.cascade);\n        }\n\n        // new implicit transaction\n        t = t.fork();\n\n        return this.noData(t, 'DROP');\n    }\n}\n","import { _ISchema, _Transaction, _ISequence, _IStatementExecutor, _IStatement, asSeq } from '../../interfaces-private';\nimport { DropStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { ignore, notNil } from '../../utils';\n\nexport class DropSequence extends ExecHelper implements _IStatementExecutor {\n    private seqs: _ISequence[];\n\n    constructor({ schema }: _IStatement, statement: DropStatement) {\n        super(statement);\n\n        this.seqs = notNil(statement.names.map(x => asSeq(schema.getObject(x, {\n            nullIfNotFound: statement.ifExists,\n        }))));\n        if (!this.seqs.length) {\n            ignore(statement);\n        }\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because the index sequence creation does support further rollbacks)\n        t = t.fullCommit();\n\n        // drop the sequence\n        for (const seq of this.seqs) {\n            seq.drop(t);\n        }\n\n        // new implicit transaction\n        t = t.fork();\n\n        return this.noData(t, 'DROP');\n    }\n}\n","import { _IStatementExecutor, _Transaction, StatementResult } from '../interfaces-private';\nimport { ExecHelper } from './exec-utils';\nimport { CommitStatement, RollbackStatement, StartTransactionStatement, BeginStatement } from 'pgsql-ast-parser';\nimport { ignore } from '../utils';\n\nexport class CommitExecutor extends ExecHelper implements _IStatementExecutor {\n\n    constructor(statement: CommitStatement) {\n        super(statement)\n    }\n\n    execute(t: _Transaction): StatementResult {\n        t = t.commit();\n        // recreate an implicit transaction if we're at root\n        // (I can see how its usfull, but this is dubious...)\n        if (!t.isChild) {\n            t = t.fork();\n        }\n        return this.noData(t, 'COMMIT');\n    }\n\n}\n\nexport class RollbackExecutor extends ExecHelper implements _IStatementExecutor {\n    constructor(statement: RollbackStatement) {\n        super(statement);\n        ignore(statement);\n    }\n\n    execute(t: _Transaction): StatementResult {\n        t = t.rollback();\n        return this.noData(t, 'ROLLBACK');\n    }\n}\n\n\nexport class BeginStatementExec extends ExecHelper implements _IStatementExecutor {\n    constructor(statement: BeginStatement | StartTransactionStatement) {\n        super(statement);\n        ignore(statement);\n    }\n\n    execute(t: _Transaction): StatementResult {\n        t = t.fork();\n        return this.noData(t, 'BEGIN');\n    }\n}\n","import { _ISchema, _Transaction, SchemaField, NotSupported, _ITable, _IStatementExecutor, asTable, StatementResult, _IStatement, TruncateOpts } from '../../interfaces-private';\nimport { TruncateTableStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { buildCtx } from '../../parser/context';\n\nexport class TruncateTable extends ExecHelper implements _IStatementExecutor {\n    private table: _ITable;\n    private opts: TruncateOpts;\n\n    constructor(statement: TruncateTableStatement) {\n        super(statement);\n        if (statement.tables.length !== 1) {\n            throw new NotSupported('Multiple truncations');\n        }\n        this.opts = {\n            cascade: statement.cascade === 'cascade',\n            restartIdentity: statement.identity === 'restart',\n        };\n        const { schema } = buildCtx();\n        this.table = asTable(schema.getObject(statement.tables[0]));\n    }\n\n    execute(t: _Transaction): StatementResult {\n        this.table.truncate(t, this.opts);\n        return this.noData(t, 'TRUNCATE');\n    }\n}\n","import { _IStatementExecutor, _Transaction, StatementResult, GLOBAL_VARS, QueryError } from '../interfaces-private';\nimport { ShowStatement } from 'pgsql-ast-parser';\nimport { locOf } from './exec-utils';\n\nexport class ShowExecutor implements _IStatementExecutor {\n    constructor(private statement: ShowStatement) { }\n\n    execute(t: _Transaction): StatementResult {\n        const p = this.statement;\n        const got = t.getMap(GLOBAL_VARS);\n        if (!got.has(p.variable.name)) {\n            throw new QueryError(`unrecognized configuration parameter \"${p.variable.name}\"`);\n        }\n        return {\n            state: t,\n            result: {\n                rows: [{ [p.variable.name]: got.get(p.variable.name) }],\n                rowCount: 1,\n                command: 'SHOW',\n                fields: [],\n                location: locOf(p),\n            },\n        }\n    }\n}\n","import { _IStatementExecutor, _Transaction, StatementResult, GLOBAL_VARS, QueryError } from '../interfaces-private';\nimport { SetGlobalStatement, SetTimezone } from 'pgsql-ast-parser';\nimport { ignore } from '../utils';\nimport { ExecHelper } from './exec-utils';\n\nexport class SetExecutor extends ExecHelper implements _IStatementExecutor {\n\n    constructor(private p: SetGlobalStatement | SetTimezone) {\n        super(p);\n        // todo handle set statements timezone ?\n        // They are just ignored as of today (in order to handle pg_dump exports)\n        ignore(p);\n    }\n\n    execute(t: _Transaction): StatementResult {\n        const p = this.p;\n        if (p.type === 'set' && p.set.type === 'value') {\n            t.set(GLOBAL_VARS, t.getMap(GLOBAL_VARS)\n                .set(p.variable.name, p.set.value));\n        }\n        return this.noData(t, 'SET');\n    }\n}\n","import { _Transaction, _ISchema, NotSupported, CreateIndexColDef, _ITable, CreateIndexDef, _IStatement, _IStatementExecutor } from '../../interfaces-private';\nimport { CreateEnumType } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\n\nexport class CreateEnum extends ExecHelper implements _IStatementExecutor {\n    private onSchema: _ISchema;\n    private values: string[];\n    private name: string;\n\n    constructor({ schema }: _IStatement, st: CreateEnumType) {\n        super(st);\n        this.onSchema = schema.getThisOrSiblingFor(st.name);\n        this.values = st.values.map(x => x.value);\n        this.name = st.name.name;\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because does not support further rollbacks)\n        t = t.fullCommit();\n\n        // register enum\n        this.onSchema\n            .registerEnum(this.name, this.values);\n\n        // new implicit transaction\n        t = t.fork();\n        return this.noData(t, 'CREATE');\n    }\n}\n","import { _Transaction, asTable, _ISchema, NotSupported, CreateIndexColDef, _ITable, CreateIndexDef, _IStatement, _IStatementExecutor, asView, _IView, QueryError } from '../../interfaces-private';\nimport { CreateViewStatement, SelectedColumn } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { ignore } from '../../utils';\nimport { View } from '../../schema/view';\nimport { buildSelect } from '../select';\n\nexport class CreateView extends ExecHelper implements _IStatementExecutor {\n    private schema: _ISchema;\n    private drop: boolean;\n    existing: _IView | null;\n    toRegister: View;\n\n\n    constructor(st: _IStatement, p: CreateViewStatement) {\n        super(p);\n        this.schema = st.schema.getThisOrSiblingFor(p.name);\n        // check existence\n        this.existing = asView(this.schema.getObject(p.name, { nullIfNotFound: true }));\n        ignore(p.orReplace);\n        this.drop = !!(p.orReplace && this.existing);\n\n        let view = buildSelect(p.query);\n\n        // optional column mapping\n        if (p.columnNames?.length) {\n            if (p.columnNames.length > view.columns.length) {\n                throw new QueryError('CREATE VIEW specifies more column names than columns', '42601');\n            }\n            view = view.select(view.columns.map<string | SelectedColumn>((x, i) => {\n                const alias = p.columnNames?.[i]?.name;\n                if (!alias) {\n                    return x.id!;\n                }\n                return {\n                    expr: { type: 'ref', name: x.id! },\n                    alias: { name: alias },\n                }\n            }));\n        }\n\n        this.toRegister = new View(this.schema, p.name.name, view);\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because does not support further rollbacks)\n        t = t.fullCommit();\n\n        // drop if needed\n        if (this.existing && this.drop) {\n            this.existing.drop(t);\n        }\n\n        // view creation\n        this.toRegister.register();\n\n        // new implicit transaction\n        t = t.fork();\n        return this.noData(t, 'CREATE');\n    }\n}\n","import { _Transaction, asTable, _ISchema, NotSupported, CreateIndexColDef, _ITable, CreateIndexDef, _IStatement, _IStatementExecutor, asView, _IView, QueryError } from '../../interfaces-private';\nimport { CreateMaterializedViewStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { View } from '../../schema/view';\nimport { buildSelect } from '../select';\n\nexport class CreateMaterializedView extends ExecHelper implements _IStatementExecutor {\n    private schema: _ISchema;\n    private toRegister?: View;\n\n\n    constructor(st: _IStatement, p: CreateMaterializedViewStatement) {\n        super(p);\n        this.schema = st.schema.getThisOrSiblingFor(p.name);\n        // check existence\n        const existing = this.schema.getObject(p.name, { nullIfNotFound: true });\n        if (existing) {\n            if (p.ifNotExists) {\n                return;\n            }\n            throw new QueryError(`Name already exists: ${p.name.name}`);\n        }\n\n        const view = buildSelect(p.query);\n\n        // hack: materialized views are implemented as simple views :/  (todo ?)\n        this.toRegister = new View(this.schema, p.name.name, view);\n    }\n\n\n    execute(t: _Transaction) {\n        if (!this.toRegister) {\n            return this.noData(t, 'CREATE');\n        }\n\n        // commit pending data before making changes\n        //  (because does not support further rollbacks)\n        t = t.fullCommit();\n\n        // view creation\n        this.toRegister.register();\n\n        // new implicit transaction\n        t = t.fork();\n        return this.noData(t, 'CREATE');\n    }\n}","import { _Transaction, asTable, _ISchema, NotSupported, CreateIndexColDef, _ITable, CreateIndexDef, _IStatement, _IStatementExecutor, QueryError } from '../../interfaces-private';\nimport { CreateSchemaStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { ignore } from '../../utils';\n\nexport class CreateSchema extends ExecHelper implements _IStatementExecutor {\n    private toCreate?: string;\n\n    constructor(private st: _IStatement, p: CreateSchemaStatement) {\n        super(p);\n        const sch = this.st.schema.db.getSchema(p.name.name, true);\n        if (!p.ifNotExists && sch) {\n            throw new QueryError('schema already exists! ' + p.name);\n        }\n        if (sch) {\n            ignore(p);\n        } else {\n            this.toCreate = p.name.name;\n        }\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because does not support further rollbacks)\n        t = t.fullCommit();\n\n        // create schema\n        if (this.toCreate) {\n            this.st.schema.db.createSchema(this.toCreate);\n        }\n\n        // new implicit transaction\n        t = t.fork();\n        return this.noData(t, 'CREATE');\n    }\n}\n","import { _Transaction, _ISchema, NotSupported, _ITable, _IStatement, _IStatementExecutor, QueryError, _ArgDefDetails, IType, _IType, nil, FunctionDefinition } from '../../interfaces-private';\nimport { CreateFunctionStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { buildValue } from '../../parser/expression-builder';\nimport { Types } from '../../datatypes';\nimport { ignore, deepEqual } from '../../utils';\nimport { withSelection } from '../../parser/context';\n\nexport class CreateFunction extends ExecHelper implements _IStatementExecutor {\n    private onSchema: _ISchema;\n    private toRegister: FunctionDefinition;\n    private replace: boolean;\n\n    constructor({ schema }: _IStatement, fn: CreateFunctionStatement) {\n        super(fn);\n        if (!fn.language) {\n            throw new QueryError('Unspecified function language');\n        }\n        this.onSchema = schema.getThisOrSiblingFor(fn.name);\n\n        const lang = schema.db.getLanguage(fn.language.name);\n\n        // determine arg types\n        const args = withSelection(schema.dualTable.selection, () => fn.arguments.map<_ArgDefDetails>(a => ({\n            name: a.name?.name,\n            type: schema.getType(a.type),\n            default: a.default && buildValue(a.default),\n            mode: a.mode,\n        })));\n\n        // determine return type\n        let returns: IType | null = null;\n        if (!fn.returns) {\n            throw new QueryError('Unspecified function return type');\n        }\n        if (typeof fn.code !== 'string') {\n            throw new QueryError('no function body specified');\n        }\n        switch (fn.returns.kind) {\n            case 'table':\n                const columns = fn.returns.columns.map(c => ({\n                    name: c.name.name,\n                    type: schema.getType(c.type),\n                }));\n                returns = Types.record(columns).asArray();\n                break;\n            case 'array':\n            case null:\n            case undefined:\n                returns = schema.getType(fn.returns);\n                break;\n            default:\n                throw NotSupported.never(fn.returns);\n        }\n\n        let argsVariadic: _IType | nil;\n        const variad = args.filter(x => x.mode === 'variadic');\n        if (variad.length > 1) {\n            throw new QueryError(`Expected only one \"VARIADIC\" argument`);\n        } else if (variad.length) {\n            argsVariadic = variad[0].type;\n        }\n\n        // compile & register the associated function\n        const compiled = lang({\n            args,\n            code: fn.code,\n            returns,\n            functionName: fn.name.name,\n            schema: schema,\n        });\n\n        this.toRegister = {\n            name: fn.name.name,\n            returns,\n            implementation: compiled,\n            args: args.filter(x => x.mode !== 'variadic'),\n            argsVariadic,\n            impure: fn.purity !== 'immutable',\n            allowNullArguments: fn.onNullInput === 'call',\n        };\n        this.replace = fn.orReplace ?? false;\n\n        // if the function exists\n        const existing = this.onSchema.getFunction(this.toRegister.name, args.map(x => x.type));\n        if (existing) {\n            if (!this.replace) {\n                throw new QueryError(`function ${this.toRegister.name} lready exists with same argument types`, '42723');\n            }\n\n            //  ... it must be the same type\n            if (existing.returns !== returns) {\n                throw new QueryError(`cannot change return type of existing function`, '42P13');\n            }\n\n            // ... argument names must be the same\n            for (let i = 0; i < args.length; i++) {\n                const exName = existing.args[i].name\n                if (exName ?? null !== args[i].name ?? null) {\n                    throw new QueryError(`cannot change name of input parameter \"${exName}\"`, '42P13');\n                }\n            }\n        }\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because does not support further rollbacks)\n        t = t.fullCommit();\n\n        this.onSchema.registerFunction(this.toRegister, this.replace);\n\n        // new implicit transaction\n        t = t.fork();\n        return this.noData(t, 'CREATE');\n    }\n}\n","import { _IStatementExecutor, _Transaction, StatementResult, _IStatement, CompiledFunction } from '../../interfaces-private';\nimport { DoStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../../execution/exec-utils';\n\nexport class DoStatementExec extends ExecHelper implements _IStatementExecutor {\n    private compiled: CompiledFunction;\n\n    constructor({ schema }: _IStatement, st: DoStatement) {\n        super(st);\n        const lang = schema.db.getLanguage(st.language?.name ?? 'plpgsql');\n        this.compiled = lang({\n            args: [],\n            code: st.code,\n            schema: schema,\n        });\n    }\n\n    execute(t: _Transaction): StatementResult {\n        this.compiled();\n        return this.noData(t, 'DO');\n    }\n}\n","import { _ISchema, _Transaction, _ISequence, _IStatementExecutor, _IStatement, asSeq, asType, _IType } from '../../interfaces-private';\nimport { DropStatement } from 'pgsql-ast-parser';\nimport { ExecHelper } from '../exec-utils';\nimport { ignore, notNil } from '../../utils';\n\nexport class DropType extends ExecHelper implements _IStatementExecutor {\n    private types: _IType[];\n\n    constructor({ schema }: _IStatement, statement: DropStatement) {\n        super(statement);\n\n        this.types = notNil(statement.names.map(x => asType(schema.getObject(x, {\n            nullIfNotFound: statement.ifExists,\n        }))));\n        if (!this.types.length) {\n            ignore(statement);\n        }\n    }\n\n    execute(t: _Transaction) {\n        // commit pending data before making changes\n        //  (because the index sequence creation does support further rollbacks)\n        t = t.fullCommit();\n\n        // drop the sequence\n        for (const seq of this.types) {\n            seq.drop(t);\n        }\n\n        // new implicit transaction\n        t = t.fork();\n\n        return this.noData(t, 'DROP');\n    }\n}\n","import { _ISelection, CastError, DataType, NotSupported, IValue } from '../interfaces-private';\nimport { buildValue } from '../parser/expression-builder';\nimport { Types, ArrayType } from '../datatypes';\nimport { EqFilter } from './eq-filter';\nimport { Value } from '../evaluator';\nimport { FalseFilter } from './false-filter';\nimport { AndFilter } from './and-filter';\nimport { OrFilter } from './or-filter';\nimport { SeqScanFilter } from './seq-scan';\nimport { InFilter } from './in-filter';\nimport { NotInFilter } from './not-in-filter';\nimport { Expr, ExprBinary, ExprUnary, ExprTernary } from 'pgsql-ast-parser';\nimport { StartsWithFilter } from './startswith-filter';\nimport { IneqFilter } from './ineq-filter';\nimport { hasNullish, nullIsh } from '../utils';\nimport { BetweenFilter } from './between-filter';\nimport { QueryError } from '../interfaces';\nimport { withSelection } from '../parser/context';\n\nexport function buildFilter<T>(this: void, on: _ISelection<T>, filter: Expr, parentName: string): _ISelection<T> {\n    return withSelection(on, () => {\n        const where = buildValue(filter);\n        if (!where.type.canConvertImplicit(Types.bool)) {\n            throw new QueryError(`argument of ${parentName} must be type boolean, not type jsonb`, '42804');\n        }\n        return _buildFilter(on, filter, where) ?? new SeqScanFilter(on, where)\n    });\n}\n\nfunction _buildFilter<T>(this: void, on: _ISelection<T>, filter: Expr, built: IValue): _ISelection<T> | null {\n    // check if there is a direct index\n    if (built.index) {\n        if (built.index.expressions.length !== 1) {\n            throw new Error('Was not expecing multiples expressions filter');\n        }\n        const itype = built.index.expressions[0].type;\n        if (itype !== Types.bool) {\n            throw new CastError(itype.primary, DataType.bool);\n        }\n        return new EqFilter(built, true, 'eq', false);\n    }\n\n    // if this filter is a constant expression (ex: 1 = 1)\n    // then return directly\n    if (built.isConstant) {\n        const val = built.cast(Types.bool)\n            .get();\n        if (val) {\n            return on;\n        }\n        return new FalseFilter(on);\n    }\n    switch (filter.type) {\n        case 'binary':\n            return buildBinaryFilter(on, filter);\n        case 'unary':\n            return buildUnaryFilter(on, filter);\n        case 'ternary':\n            return buildTernaryFilter(on, filter);\n        default:\n            return null;\n    }\n}\n\nfunction buildUnaryFilter<T>(this: void, on: _ISelection<T>, filter: ExprUnary): _ISelection<T> | null {\n    const { operand, op } = filter;\n    switch (op) {\n        case 'IS NULL':\n        case 'IS NOT NULL': {\n            const leftValue = buildValue(operand);\n            if (leftValue.index) {\n                return new EqFilter(leftValue, null, op === 'IS NULL' ? 'eq' : 'neq', true);\n            }\n            return new SeqScanFilter(on, Value.isNull(leftValue, op === 'IS NULL'));\n        }\n    }\n    return null;\n}\n\nfunction buildBinaryFilter<T>(this: void, on: _ISelection<T>, filter: ExprBinary): _ISelection<T> | null {\n    const { left, right, op } = filter;\n    switch (op) {\n        case '=':\n        case '!=':\n        case '>':\n        case '<':\n        case '<=':\n        case '>=':\n            return buildComparison(on, filter);\n        case 'AND':\n        case 'OR': {\n            const leftFilter = buildFilter(on, left, op);\n            const rightFilter = buildFilter(on, right, op);\n            if (op === 'OR' && (leftFilter instanceof SeqScanFilter || rightFilter instanceof SeqScanFilter)) {\n                return null;\n            }\n            return op === 'AND'\n                ? new AndFilter([leftFilter, rightFilter])\n                : new OrFilter(leftFilter, rightFilter);\n        }\n        case 'IN':\n        case 'NOT IN': {\n            const value = buildValue(left);\n            let arrayValue = buildValue(right);\n            // to support things like: \"col in (value)\" - which RHS does not parse to an array\n            if (arrayValue.type.primary !== DataType.list) {\n                arrayValue = Value.list([arrayValue]);\n            }\n            const elementType = (arrayValue.type as ArrayType).of.prefer(value.type);\n            const array = arrayValue.cast(elementType!.asList());\n            // only support scanning indexes with one expression\n            if (array.isConstant && value.index?.expressions.length === 1) {\n                const arrCst = array.get();\n                if (nullIsh(arrCst)) {\n                    return new FalseFilter(on);\n                }\n                return op === 'IN'\n                    ? new InFilter(value, arrCst)\n                    : new NotInFilter(value, arrCst);\n            }\n            // todo use indexes on queries like \"WHERE 'whatever' in (indexedOne, indexedTwo)\"\n            //   => this is an OrFilter\n            return new SeqScanFilter(on, Value.in(value, array, op === 'IN'));\n        }\n        case 'LIKE': {\n            const value = buildValue(left);\n            if (value.index && value.index.expressions[0].hash === value.hash) {\n                const valueToCompare = buildValue(right);\n                if (valueToCompare.isConstant) {\n                    const str = valueToCompare.get();\n                    if (nullIsh(str)) {\n                        return new FalseFilter(on);\n                    }\n                    const got = /^([^%_]+)([%_]?.+)$/.exec(str);\n                    if (got) {\n                        const start = got[1];\n                        if (start.length === str) {\n                            // that's a full string with no tokens => just an '='\n                            return buildComparison(on, {\n                                type: 'binary',\n                                op: '=',\n                                left: left,\n                                right: right,\n                            });\n                        }\n                        // yea, we can use an index\n                        const indexed = new StartsWithFilter(value, start);\n                        if (got[2] === '%') {\n                            // just a starsWith\n                            return indexed;\n                        }\n                        // use index, but filter again on it.\n                        return new SeqScanFilter(indexed, buildValue(filter));\n                    }\n                }\n            }\n        }\n    }\n    return null;\n}\n\nfunction buildComparison<T>(this: void, on: _ISelection<T>, filter: ExprBinary): _ISelection<T> | null {\n    const { op, left, right } = filter;\n    let leftValue = buildValue(left);\n    let rightValue = buildValue(right);\n\n    if (leftValue.isConstant && rightValue.isConstant) {\n        const global = buildValue(filter);\n        const got = global.get();\n        if (got) {\n            return on;\n        }\n        return new FalseFilter(on);\n    }\n\n    if (rightValue.isConstant) {\n        rightValue = rightValue.cast(leftValue.type);\n    } else if (leftValue.isConstant) {\n        leftValue = leftValue.cast(rightValue.type);\n    }\n\n    switch (op) {\n        case '=':\n        case '!=': {\n            if (leftValue.index && rightValue.isConstant) {\n                return new EqFilter(leftValue, rightValue.get(), op === '=' ? 'eq' : 'neq', false)\n            }\n            if (rightValue.index && leftValue.isConstant) {\n                return new EqFilter(rightValue, leftValue.get(), op === '=' ? 'eq' : 'neq', false);\n            }\n            break;\n        }\n        case '>':\n        case '>=':\n        case '<':\n        case '<=':\n            if (leftValue.index && leftValue.index.expressions[0].hash === leftValue.hash && rightValue.isConstant) {\n                const fop = op === '>' ? 'gt'\n                    : op === '>=' ? 'ge'\n                        : op === '<' ? 'lt'\n                            : 'le';\n                return new IneqFilter(leftValue, fop, rightValue.get());\n            }\n            if (rightValue.index && rightValue.index.expressions[0].hash === rightValue.hash && leftValue.isConstant) {\n                const fop = op === '>' ? 'le'\n                    : op === '>=' ? 'lt'\n                        : op === '<' ? 'ge'\n                            : 'gt';\n                return new IneqFilter(rightValue, fop, leftValue.get());\n            }\n            break;\n    }\n    return null;\n}\n\nfunction buildTernaryFilter<T>(this: void, on: _ISelection<T>, filter: ExprTernary): _ISelection<T> | null {\n    switch (filter.op) {\n        case 'BETWEEN':\n        case 'NOT BETWEEN': {\n            const value = buildValue(filter.value);\n            const lo = buildValue(filter.lo);\n            const hi = buildValue(filter.hi);\n            const valueIndex = value.index;\n            if (valueIndex && valueIndex.expressions[0].hash === value.hash && lo.isConstant && hi.isConstant) {\n                const lov = lo.get();\n                const hiv = hi.get();\n                if (hasNullish(lov, hiv)) {\n                    return new FalseFilter(on);\n                }\n                return new BetweenFilter(value, lov, hiv, filter.op === 'BETWEEN' ? 'inside' : 'outside');\n            }\n        }\n    }\n    return null;\n}","import { _ISelection, IValue, _IIndex, _ITable, _Transaction, _Explainer, _SelectExplanation, IndexKey, IndexOp, Stats } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { nullIsh } from '../utils';\n\nexport class EqFilter<T = any> extends FilterBase<T> {\n\n    private index: _IIndex;\n    private opDef: IndexOp;\n\n    entropy(t: _Transaction): number {\n        return this.index.entropy({ ...this.opDef, t });\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        const stats = this.index.stats(t, [this.equalsCst]);\n        if (this.op === 'eq' || !stats) {\n            return stats;\n        }\n        // if neq, then compute from eq and all\n        const all = this.index.stats(t);\n        if (!all) {\n            return null;\n        }\n        return {\n            count: all.count - stats.count,\n        };\n    }\n\n    hasItem(item: T, t: _Transaction) {\n        const val = this.onValue.get(item, t);\n        if (nullIsh(val)) {\n            return false;\n        }\n        const eq = this.onValue.type.equals(val, this.equalsCst);\n        if (nullIsh(eq)) {\n            return false;\n        }\n        return this.op === 'eq' ? !!eq : !eq;\n    }\n\n    constructor(private onValue: IValue<T>\n        , private equalsCst: any\n        , private op: 'eq' | 'neq'\n        , private matchNull: boolean) {\n        super(onValue.origin!);\n        if (onValue.index!.expressions.length !== 1) {\n            throw new Error('Unexpected index equality expressions count mismatch');\n        }\n\n        this.index = this.onValue.index!;\n        this.opDef = {\n            type: op,\n            key: [equalsCst],\n            t: null as any,\n            matchNull: this.matchNull,\n        }\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        for (const item of this.index.enumerate({ ...this.opDef, t })) {\n            yield item;\n        }\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: this.op,\n            entropy: this.entropy(e.transaction),\n            on: this.onValue.index!.explain(e),\n        };\n    }\n}\n","import { _ISelection, IValue, _Explainer, _SelectExplanation, _Transaction, Stats } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\n\nexport class FalseFilter<T = any> extends FilterBase<T> {\n\n    get index() {\n        return null;\n    }\n\n    entropy() {\n        return 0;\n    }\n\n    hasItem() {\n        return false;\n    }\n\n    enumerate(): Iterable<T> {\n        return [];\n    }\n\n    stats(t: _Transaction): Stats | null {\n        return {\n            count: 0,\n        }\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'empty',\n        };\n    }\n}","import { _ISelection, _IIndex, _ITable, _Transaction, _Explainer, _SelectExplanation, Stats, nil } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { SeqScanFilter } from './seq-scan';\n\n\n\nexport class AndFilter<T = any> extends FilterBase<T> {\n\n    get index(): _IIndex<T> | nil {\n        return null;\n    }\n\n    private prevEntropy?: { t: _Transaction; ret: number };\n\n    entropy(t: _Transaction) {\n        // just a bit of caching\n        if (t === this.prevEntropy?.t) {\n            return this.prevEntropy.ret;\n        }\n        const { best } = this.plan(t);\n        const ret = best.entropy(t);\n        this.prevEntropy = {\n            ret,\n            t,\n        };\n        return ret;\n    }\n\n    hasItem(value: T, t: _Transaction): boolean {\n        return this.filters.every(x => x.hasItem(value, t));\n    }\n\n    constructor(private filters: _ISelection<T>[]) {\n        super(filters.find(x => !(x instanceof SeqScanFilter)) ?? filters[0]);\n        if (filters.some(f => f.columns !== this.base.columns)) {\n            throw new Error('Column set mismatch');\n        }\n    }\n\n    private plan(t: _Transaction) {\n        const sorted = [...this.filters]\n            .sort((a, b) => a.entropy(t) > b.entropy(t) ? 1 : -1);\n        const [best] = sorted.splice(0, 1);\n        return { best, sorted };\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        return null;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        // sort them so the most restrictive filter is first\n        const { best, sorted } = this.plan(t)\n        for (const item of best.enumerate(t)) {\n            if (!sorted.every(x => x.hasItem(item, t))) {\n                continue;\n            }\n            yield item;\n        }\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        const { best, sorted } = this.plan(e.transaction);\n        return {\n            id: e.idFor(this),\n            _: 'and',\n            enumerate: best.explain(e),\n            andCheck: sorted.map(x => x.explain(e)),\n        };\n    }\n\n}","import { _ISelection, _IIndex, _ITable, getId, _Transaction, _Explainer, _SelectExplanation, Stats } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\n\n\nexport class OrFilter<T = any> extends FilterBase<T> {\n\n    entropy(t: _Transaction) {\n        return this.left.entropy(t) + this.right.entropy(t);\n    }\n\n    hasItem(value: T, t: _Transaction): boolean {\n        return this.left.hasItem(value, t) || this.right.hasItem(value, t);\n    }\n\n    constructor(private left: _ISelection<T>, private right: _ISelection<T>) {\n        super(left);\n        if (left.columns !== right.columns) { //  istanbul ignore next\n            throw new Error('Column set mismatch');\n        }\n    }\n\n    stats(t: _Transaction): Stats | null {\n        return null;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        const yielded = new Set<string>();\n        for (const item of this.left.enumerate(t)) {\n            yield item;\n            yielded.add(getId(item));\n        }\n        for (const item of this.right.enumerate(t)) {\n            const id = getId(item);\n            if (!yielded.has(id)) {\n                yield item;\n            }\n        }\n    }\n\n\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'union',\n            union: [\n                this.left.explain(e),\n                this.right.explain(e),\n            ],\n        };\n    }\n}","import { _ISelection, IValue, _IIndex, _ITable, getId, _Transaction, _Explainer, _SelectExplanation, Stats } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { DataType, CastError, QueryError } from '../interfaces';\nimport { nullIsh } from '../utils';\n\nexport class InFilter<T = any> extends FilterBase<T> {\n\n\n    private index: _IIndex;\n\n    entropy(t: _Transaction) {\n        let ret = 0;\n        for (const a of this.elts) {\n            ret += this.index.entropy({\n                type: 'eq',\n                key: [a],\n                t,\n            });\n        }\n        return ret;\n    }\n\n    hasItem(item: T, t: _Transaction) {\n        const val = this.onValue.get(item, t);\n        return !nullIsh(val)\n            && this.elts.some(x => this.onValue.type.equals(x, val));\n    }\n\n    constructor(private onValue: IValue<T>\n        , private elts: any[]) {\n        super(onValue.origin!);\n        this.index = onValue.index!;\n        if (this.index.expressions.length !== 1) {\n            throw new Error('Only supports IN with signle expressions index');\n        }\n        if (!Array.isArray(elts)) {\n            throw new QueryError('Cannot iterate element list');\n        }\n    }\n\n    stats(t: _Transaction): Stats | null {\n        const elts = this.elts.map(x => this.index.stats(t, [x]));\n        if (elts.some(x => !x)) {\n            return null;\n        }\n        // compute from elements\n        const ret: Stats = {\n            count: 0,\n        };\n        for (const i of elts) {\n            ret.count += i!.count;\n        }\n        return ret;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        for (const a of this.elts) {\n            yield* this.index.enumerate({\n                type: 'eq',\n                key: [a],\n                t,\n            });\n        }\n    }\n\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'eq',\n            entropy: this.entropy(e.transaction),\n            on: this.index.explain(e),\n        };\n    }\n}","import { _ISelection, IValue, _IIndex, _ITable, getId, _Transaction, _Explainer, _SelectExplanation, IndexKey, Stats } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { DataType, CastError, QueryError } from '../interfaces';\nimport { nullIsh } from '../utils';\n\nexport class NotInFilter<T = any> extends FilterBase<T> {\n\n    private index: _IIndex;\n    private keys: IndexKey[];\n\n    entropy(t: _Transaction) {\n        return this.onValue.index!.entropy({\n            type: 'nin',\n            keys: this.keys,\n            t,\n        });\n    }\n\n    hasItem(item: T, t: _Transaction): boolean {\n        const val = this.onValue.get(item, t);\n        return !nullIsh(val)\n            && !this.elts.some(x => this.onValue.type.equals(x, val));\n    }\n\n    constructor(private onValue: IValue<T>\n        , private elts: any[]) {\n        super(onValue.origin!);\n        this.index = onValue.index!;\n        if (this.index.expressions.length !== 1) {\n            throw new Error('Only supports IN with signle expressions index');\n        }\n        if (!Array.isArray(elts)) {\n            throw new QueryError('Cannot iterate element list');\n        }\n        this.keys = elts.map(x => [x]);\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        const all = this.base.stats(t);\n        if (!all) {\n            return null;\n        }\n        const elts = this.elts.map(x => this.index.stats(t, [x]));\n        if (elts.some(x => !x)) {\n            return null;\n        }\n        // compute based on 'all'\n        for (const i of elts) {\n            all.count -= i!.count;\n        }\n        return all;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        yield* this.index.enumerate({\n            type: 'nin',\n            keys: this.keys,\n            t,\n        });\n    }\n\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'neq',\n            entropy: this.entropy(e.transaction),\n            on: this.onValue.index!.explain(e),\n        };\n    }\n}","import { _ISelection, IValue, _IIndex, _ITable, getId, _Transaction, _Explainer, _SelectExplanation, Stats } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { nullIsh } from '../utils';\n\nexport class StartsWithFilter<T = any> extends FilterBase<T> {\n\n    get index() {\n        return null;\n    }\n\n    entropy(t: _Transaction) {\n        return this.onValue.index!.entropy({\n            type: 'ge',\n            key: [this.startWith],\n            t,\n        });\n    }\n\n    hasItem(item: T, t: _Transaction) {\n        const get = this.onValue.get(item, t);\n        return typeof get === 'string'\n            && get.startsWith(this.startWith);\n    }\n\n    constructor(private onValue: IValue<T>\n        , private startWith: string) {\n        super(onValue.origin!);\n        if (onValue.index!.expressions[0].hash !== this.onValue.hash) {\n            throw new Error('Startwith must be the first component of the index');\n        }\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        return null;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        const index = this.onValue.index!;\n        for (const item of index.enumerate({\n            type: 'ge',\n            key: [this.startWith],\n            t,\n        })) {\n            const got: string = this.onValue.get(item, t);\n            if (nullIsh(got) || !got.startsWith(this.startWith)) {\n                break;\n            }\n            yield item;\n        }\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'ineq',\n            entropy: this.entropy(e.transaction),\n            on: this.onValue.index!.explain(e),\n        };\n    }\n}","import { _ISelection, IValue, _IIndex, _ITable, _Transaction, _Explainer, _SelectExplanation, IndexOp, Stats } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { nullIsh } from '../utils';\n\nexport class IneqFilter<T = any> extends FilterBase<T> {\n\n    private index: _IIndex;\n    private opDef: IndexOp;\n\n    entropy(t: _Transaction) {\n        return this.onValue.index!.entropy({ ...this.opDef, t });\n    }\n\n    hasItem(item: T, t: _Transaction) {\n        const val = this.onValue.get(item, t);\n        if (nullIsh(val)) {\n            return false;\n        }\n        return !!this.onValue.type[this.op](val, this.than);\n    }\n\n    constructor(private onValue: IValue<T>\n        , private op: 'gt' | 'ge' | 'lt' | 'le'\n        , private than: any) {\n        super(onValue.origin!);\n\n        this.index = this.onValue.index!;\n        this.opDef = {\n            type: op,\n            key: [than],\n            t: null as any,\n        }\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        return null;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        for (const item of this.index.enumerate({ ...this.opDef, t })) {\n            if (!this.hasItem(item, t)) {\n                break;\n            }\n            yield item;\n        }\n    }\n\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'ineq',\n            entropy: this.entropy(e.transaction),\n            on: this.onValue.index!.explain(e),\n        };\n    }\n}","import { _ISelection, IValue, _IIndex, _ITable, _Transaction, _Explainer, _SelectExplanation, IndexOp, Stats } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { nullIsh } from '../utils';\n\nexport class BetweenFilter<T = any> extends FilterBase<T> {\n\n    private opDef: IndexOp;\n\n\n    entropy(t: _Transaction) {\n        return this.onValue.index!.entropy({ ...this.opDef, t });\n    }\n\n    constructor(private onValue: IValue<T>\n        , private lo: any\n        , private hi: any\n        , private op: 'inside' | 'outside') {\n        super(onValue.origin!);\n        if (onValue.index!.expressions[0]?.hash !== onValue.hash) {\n            throw new Error('Between index misuse');\n        }\n        this.opDef = {\n            type: op,\n            hi: [hi],\n            lo: [lo],\n            t: null as any,\n        }\n    }\n\n    hasItem(value: T, t: _Transaction): boolean {\n        const v = this.onValue.get(value, t);\n        if (nullIsh(v)) {\n            return false;\n        }\n        if (this.op === 'inside') {\n            return !!this.onValue.type.ge(v, this.lo)\n                && !!this.onValue.type.le(v, this.hi);\n        }\n        return !!this.onValue.type.lt(v, this.lo)\n            || !!this.onValue.type.gt(v, this.lo);\n    }\n\n    enumerate(t: _Transaction): Iterable<T> {\n        return this.onValue.index!.enumerate({ ...this.opDef, t });\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        return null;\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: this.op,\n            entropy: this.entropy(e.transaction),\n            on: this.onValue.index!.explain(e),\n        };\n    }\n}\n","export * from './adapters';\n","import { LibAdapters, IMemoryDb, NotSupported, QueryResult } from '../interfaces';\nimport lru from 'lru-cache';\nimport { compareVersions } from '../utils';\nimport { toLiteral } from '../misc/pg-utils';\nimport { _IType } from '../interfaces-private';\nimport { TYPE_SYMBOL } from '../execution/select';\nimport { ArrayType } from '../datatypes';\nimport { CustomEnumType } from '../datatypes/t-custom-enum';\ndeclare var __non_webpack_require__: any;\n\n\n// setImmediate does not exist in Deno\ndeclare var setImmediate: any;\n\n// see https://github.com/oguimbal/pg-mem/issues/170\nfunction timeoutOrImmediate(fn: () => void, time: number) {\n    if (time || typeof setImmediate === 'undefined') {\n        return setTimeout(fn, time);\n    }\n    // nothing to wait for, but still executing \"later\"\n    //  in case calling code relies on some actual async behavior\n    return setImmediate(fn);\n}\n\nconst delay = (time: number | undefined) => new Promise<void>(done => timeoutOrImmediate(done, time ?? 0));\n\nfunction replaceQueryArgs$(this: void, sql: string, values: any[]) {\n    return sql.replace(/\\$(\\d+)/g, (str: any, istr: any) => {\n        const i = Number.parseInt(istr);\n        if (i > values.length) {\n            throw new Error('Unmatched parameter in query ' + str);\n        }\n        const val = values[i - 1];\n        return toLiteral(val);\n    });\n}\n\n\nexport class Adapters implements LibAdapters {\n    private _mikroPatched?: boolean;\n\n    constructor(private db: IMemoryDb) {\n    }\n\n    createPg(queryLatency?: number): { Pool: any; Client: any } {\n        const that = this;\n        // https://node-postgres.com/features/queries\n        interface PgQuery {\n            text: string;\n            values?: any[];\n            rowMode?: 'array';\n            types?: any;\n        }\n        class MemPg {\n\n            connection = this;\n\n            on() {\n                // nop\n            }\n\n            release() {\n            }\n\n            removeListener() {\n            }\n\n            once(what: string, handler: () => void) {\n                if (what === 'connect') {\n                    timeoutOrImmediate(handler, queryLatency ?? 0);\n                }\n            }\n\n            end(callback: any) {\n                if (callback) {\n                    callback();\n                    return null;\n                } else {\n                    return Promise.resolve();\n                }\n            }\n\n            connect(callback: any) {\n                if (callback) {\n                    callback(null, this, () => { });\n                    return null;\n                } else {\n                    return Promise.resolve(this);\n                }\n            }\n            query(query: any, valuesOrCallback: any, callback: any) {\n                let values: any = null;\n                if (Array.isArray(valuesOrCallback)) {\n                    values = valuesOrCallback;\n                }\n                if (callback == null && typeof valuesOrCallback === 'function') {\n                    callback = valuesOrCallback;\n                }\n\n                // adapt results\n\n                const pgquery = this.adaptQuery(query, values);\n                try {\n                    const result = this.adaptResults(query, that.db.public.query(pgquery.text));\n                    if (callback) {\n                        timeoutOrImmediate(() => callback(null, result), queryLatency ?? 0);\n                        return null;\n                    } else {\n                        return new Promise(res => timeoutOrImmediate(() => res(result), queryLatency ?? 0));\n                    }\n                } catch (e) {\n                    if (callback) {\n                        timeoutOrImmediate(() => callback(e), queryLatency ?? 0);\n                        return null;\n                    } else {\n                        return new Promise((_, rej) => timeoutOrImmediate(() => rej(e), queryLatency ?? 0));\n                    }\n                }\n            }\n\n            private adaptResults(query: PgQuery, res: QueryResult) {\n                if (query.rowMode) {\n                    throw new NotSupported('pg rowMode');\n                }\n                return {\n                    ...res,\n                    // clone rows to avoid leaking symbols\n                    rows: res.rows.map(row => {\n                        const rowCopy: any = {};\n                        // copy all\n                        for (const [k, v] of Object.entries(row)) {\n                            rowCopy[k] = v;\n                        }\n                        // ...but amend fields based on their types\n                        for (const f of res.fields) {\n                            const type = (f as any)[TYPE_SYMBOL] as _IType;\n                            const value = row[f.name];\n                            // enum arrays are returned as strings... see #224\n                            if (type instanceof ArrayType && type.of instanceof CustomEnumType && Array.isArray(value)) {\n                                rowCopy[f.name] = `{${value.join(',')}}`;\n                            }\n                        }\n                        return rowCopy;\n                    }),\n                    get fields() {\n                        // to implement if needed ? (never seen a lib that uses it)\n                        return [];\n                    }\n                };\n            }\n\n            private adaptQuery(query: string | PgQuery, values: any): PgQuery {\n                if (typeof query === 'string') {\n                    query = {\n                        text: query,\n                        values,\n                    };\n                } else {\n                    // clean copy to avoid mutating things outside our scope\n                    query = { ...query };\n                }\n                if (!query.values?.length) {\n                    return query;\n                }\n\n                if (query.types?.getTypeParser) {\n                    throw new NotSupported('getTypeParser is not supported');\n                }\n\n                // console.log(query);\n                // console.log('\\n');\n\n                query.text = replaceQueryArgs$(query.text, query.values);\n                return query;\n            }\n        }\n        return {\n            Pool: MemPg,\n            Client: MemPg,\n        };\n    }\n\n    /**\n     * @deprecated Use `createTypeormDataSource` instead.\n     */\n    createTypeormConnection(postgresOptions: any, queryLatency?: number) {\n        const that = this;\n        (postgresOptions as any).postgres = that.createPg(queryLatency);\n        if (postgresOptions?.type !== 'postgres') {\n            throw new NotSupported('Only postgres supported, found ' + postgresOptions?.type ?? '<null>')\n        }\n\n        const { getConnectionManager } = __non_webpack_require__('typeorm')\n        const created = getConnectionManager().create(postgresOptions);\n        created.driver.postgres = that.createPg(queryLatency);\n        return created.connect();\n    }\n\n    createTypeormDataSource(postgresOptions: any, queryLatency?: number) {\n        const that = this;\n        (postgresOptions as any).postgres = that.createPg(queryLatency);\n        if (postgresOptions?.type !== 'postgres') {\n            throw new NotSupported('Only postgres supported, found ' + postgresOptions?.type ?? '<null>')\n        }\n\n        const nr = __non_webpack_require__('typeorm');\n        const { DataSource } = nr;\n        const created = new DataSource(postgresOptions);\n        created.driver.postgres = that.createPg(queryLatency);\n        return created;\n    }\n\n    createSlonik(queryLatency?: number) {\n        const { createMockPool, createMockQueryResult } = __non_webpack_require__('slonik');\n        return createMockPool({\n            query: async (sql: string, args: any[]) => {\n                await delay(queryLatency ?? 0);\n                const formatted = replaceQueryArgs$(sql, args);\n                const ret = this.db.public.many(formatted);\n                return createMockQueryResult(ret);\n            },\n        });\n    }\n\n\n    createPgPromise(queryLatency?: number) {\n        // https://vitaly-t.github.io/pg-promise/module-pg-promise.html\n        // https://github.com/vitaly-t/pg-promise/issues/743#issuecomment-756110347\n        const pgp = __non_webpack_require__('pg-promise')();\n        pgp.pg = this.createPg(queryLatency);\n        const db = pgp('pg-mem');\n        if (compareVersions('10.8.7', db.$config.version) < 0) {\n            throw new Error(`💀 pg-mem cannot be used with pg-promise@${db.$config.version},\n\n       👉 you must install version pg-promise@10.8.7 or newer:\n\n                npm i pg-promise@latest -S\n\n            See https://github.com/vitaly-t/pg-promise/issues/743 for details`);\n        }\n        return db;\n    }\n\n    createPgNative(queryLatency?: number) {\n        queryLatency = queryLatency ?? 0;\n        const prepared = new lru<string, string>({\n            max: 1000,\n            maxAge: 5000,\n        });\n        function handlerFor(a: any, b: any) {\n            return typeof a === 'function' ? a : b;\n        }\n        const that = this;\n        return class Client {\n            async connect(a: any, b: any) {\n                const handler = handlerFor(a, b);\n                await delay(queryLatency);\n                handler?.();\n            }\n\n            connectSync() {\n                // nop\n            }\n\n            async prepare(name: string, sql: string, npar: number, callback: any) {\n                await delay(queryLatency);\n                this.prepareSync(name, sql, npar);\n                callback();\n            }\n\n            prepareSync(name: string, sql: string, npar: number) {\n                prepared.set(name, sql);\n            }\n\n            async execute(name: string, a: any, b: any) {\n                const handler = handlerFor(a, b);\n                const pars = Array.isArray(a) ? a : [];\n                await delay(queryLatency);\n                try {\n                    const rows = this.executeSync(name, pars);\n                    handler(null, rows);\n                } catch (e) {\n                    handler(e);\n                }\n            }\n            executeSync(name: string, pars?: any) {\n                pars = Array.isArray(pars) ? pars : [];\n                const prep = prepared.get(name);\n                if (!prep) {\n                    throw new Error('Unkown prepared statement ' + name);\n                }\n                return this.querySync(prep, pars);\n            }\n\n\n            async query(sql: string, b: any, c: any) {\n                const handler = handlerFor(b, c);\n                const params = Array.isArray(b) ? b : [];\n                try {\n                    await delay(queryLatency);\n                    const result = this.querySync(sql, params);\n                    handler(null, result);\n                } catch (e) {\n                    handler?.(e);\n                }\n            }\n\n            querySync(sql: string, params: any[]) {\n                sql = replaceQueryArgs$(sql, params);\n                const ret = that.db.public.many(sql);\n                return ret;\n            }\n        }\n    }\n\n    createKnex(queryLatency?: number, knexConfig?: object): any {\n        const knex = __non_webpack_require__('knex')({\n            connection: {},\n            ...knexConfig,\n            client: 'pg',\n        });\n        knex.client.driver = this.createPg(queryLatency);\n        knex.client.version = 'pg-mem';\n        return knex;\n    }\n\n    createKysely(queryLatency?: number, kyselyConfig?: object): any {\n        const { Kysely, PostgresDialect } = __non_webpack_require__('kysely');\n        const pg = this.createPg(queryLatency);\n        return new Kysely({\n            ...kyselyConfig,\n            dialect: new PostgresDialect({\n                pool: new pg.Pool(),\n            }),\n        });\n    }\n\n    async createMikroOrm(mikroOrmOptions: any, queryLatency?: number) {\n\n        const { MikroORM } = __non_webpack_require__('@mikro-orm/core');\n        const { AbstractSqlDriver, PostgreSqlConnection, PostgreSqlPlatform } = __non_webpack_require__('@mikro-orm/postgresql');\n        const that = this;\n\n        // see https://github.com/mikro-orm/mikro-orm/blob/aa71065d0727920db7da9bfdecdb33e6b8165cb5/packages/postgresql/src/PostgreSqlConnection.ts#L5\n        class PgMemConnection extends PostgreSqlConnection {\n            protected createKnexClient(type: string) {\n                return that.createKnex();\n            }\n\n        }\n        // see https://github.com/mikro-orm/mikro-orm/blob/master/packages/postgresql/src/PostgreSqlDriver.ts\n        class PgMemDriver extends AbstractSqlDriver<PgMemConnection> {\n            constructor(config: any) {\n                super(config, new PostgreSqlPlatform(), PgMemConnection, ['knex', 'pg']);\n            }\n        }\n\n        // hack: this query is not supported by pgsql-ast-parser\n        if (!this._mikroPatched) {\n            this.db.public.interceptQueries(q => {\n                if (q === `set names 'utf8';`) {\n                    return [];\n                }\n                return null;\n            });\n            this._mikroPatched = true;\n        }\n\n\n        const orm = await MikroORM.init({\n            ...mikroOrmOptions,\n            dbName: 'public',\n            driver: PgMemDriver,\n        });\n        return orm;\n    }\n\n}\n","// ====== ALMOST A COPY-PASTE OF https://github.com/brianc/node-postgres/blob/4b229275cfe41ca17b7d69bd39f91ada0068a5d0/packages/pg/lib/utils.js#L71-L82\n//   see https://github.com/oguimbal/pg-mem/issues/181\n\nimport { nullIsh } from '../utils'\nimport { bufToString, isBuf } from './buffer-node';\nimport { literal } from './pg-escape';\nimport stringify from 'json-stable-stringify';\n\nexport function toLiteral(val: any) {\n  return prepareValue(val);\n}\n\n// converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\nvar prepareValue = function (val: any, seen?: any[]): any {\n  // null and undefined are both null for postgres\n  if (nullIsh(val)) {\n    return 'null';\n  }\n\n  if (isBuf(val)) {\n    return literal(bufToString(val));\n  }\n  if (val instanceof Date) {\n    // if (defaults.parseInputDatesAsUTC) {\n    //   return dateToStringUTC(val)\n    // } else {\n    return literal(dateToString(val));\n    // }\n  }\n\n  if (Array.isArray(val)) {\n    if (val.length === 0) return `'{}'`;\n    return `ARRAY[${val.map(x => toLiteral(x)).join(', ')}]`;\n  }\n  if (typeof val === 'object') {\n    return prepareObject(val, seen);\n  }\n  return literal(val.toString());\n}\n\nfunction prepareObject(val: any, seen?: any[]) {\n  if (val && typeof val.toPostgres === 'function') {\n    seen = seen || []\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query')\n    }\n    seen.push(val)\n\n    return prepareValue(val.toPostgres(prepareValue), seen)\n  }\n  return literal(stringify(val));\n}\n\nfunction pad(number: any, digits: number) {\n  number = '' + number\n  while (number.length < digits) {\n    number = '0' + number\n  }\n  return number\n}\n\nfunction dateToString(date: Date) {\n  var offset = -date.getTimezoneOffset()\n\n  var year = date.getFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    pad(year, 4) +\n    '-' +\n    pad(date.getMonth() + 1, 2) +\n    '-' +\n    pad(date.getDate(), 2) +\n    'T' +\n    pad(date.getHours(), 2) +\n    ':' +\n    pad(date.getMinutes(), 2) +\n    ':' +\n    pad(date.getSeconds(), 2) +\n    '.' +\n    pad(date.getMilliseconds(), 3)\n\n  if (offset < 0) {\n    ret += '-'\n    offset *= -1\n  } else {\n    ret += '+'\n  }\n\n  ret += pad(Math.floor(offset / 60), 2) + ':' + pad(offset % 60, 2)\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction dateToStringUTC(date: Date) {\n  var year = date.getUTCFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    pad(year, 4) +\n    '-' +\n    pad(date.getUTCMonth() + 1, 2) +\n    '-' +\n    pad(date.getUTCDate(), 2) +\n    'T' +\n    pad(date.getUTCHours(), 2) +\n    ':' +\n    pad(date.getUTCMinutes(), 2) +\n    ':' +\n    pad(date.getUTCSeconds(), 2) +\n    '.' +\n    pad(date.getUTCMilliseconds(), 3)\n\n  ret += '+00:00'\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nexport function normalizeQueryConfig(config: any, values: any, callback: any) {\n  // can take in strings or config objects\n  config = typeof config === 'string' ? { text: config } : config\n  if (values) {\n    if (typeof values === 'function') {\n      config.callback = values\n    } else {\n      config.values = values\n    }\n  }\n  if (callback) {\n    config.callback = callback\n  }\n  return config\n}\n","import { _Transaction } from './interfaces-private';\nimport { Map as ImMap, Set as ImSet } from 'immutable';\nimport { NotSupported, QueryError } from './interfaces';\n\nexport class Transaction implements _Transaction {\n    private origData: ImMap<symbol, any>;\n    private transientData: any = {};\n\n    static root() {\n        return new Transaction(null, ImMap());\n    }\n\n    get isChild() {\n        return !!this.parent;\n    }\n\n    private constructor(private parent: Transaction | null, private data: ImMap<symbol, any>) {\n        this.origData = data;\n    }\n\n\n    clone() {\n        return new Transaction(null, this.data);\n    }\n\n    fork(): _Transaction {\n        return new Transaction(this, this.data);\n    }\n\n    commit(): _Transaction {\n        if (!this.parent) {\n            return this;\n        }\n        if (this.parent.data !== this.origData) {\n            throw new NotSupported('Concurrent transactions');\n        }\n        this.parent.data = this.data;\n        return this.parent;\n    }\n\n    delete(identity: symbol): void {\n        this.data = this.data.delete(identity);\n    }\n\n    set<T>(identity: symbol, data: T): T {\n        this.data = this.data.set(identity, data);\n        return data;\n    }\n\n    get<T>(identity: symbol): T {\n        return this.data.get(identity);\n    }\n\n    getMap<T extends ImMap<any, any>>(identity: symbol): T {\n        let got = this.data.get(identity);\n        if (!got) {\n            this.data = this.data.set(identity, got = ImMap());\n        }\n        return got as any as T;\n    }\n\n    getSet<T>(identity: symbol): ImSet<T> {\n        let got = this.data.get(identity);\n        if (!got) {\n            this.data = this.data.set(identity, got = ImSet());\n        }\n        return got as any;\n    }\n\n    fullCommit() {\n        const ret = this.commit();\n        return ret.isChild\n            ? ret.fullCommit()\n            : ret;\n    }\n\n    rollback() {\n        return this.parent ?? this;\n    }\n\n    setTransient<T>(identity: symbol, data: T): T {\n        this.transientData[identity] = data as any;\n        return data;\n    }\n\n    /** Set transient data, which will only exist within the scope of the current statement */\n    getTransient<T>(identity: symbol): T {\n        return this.transientData[identity] as T;\n    }\n\n    clearTransientData(): void {\n        this.transientData = {};\n    }\n}\n","import { IValue, _ISelection, _Transaction, _Explainer, _SelectExplanation, Stats, nil } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { LimitStatement } from 'pgsql-ast-parser';\nimport { buildValue } from '../parser/expression-builder';\nimport { withSelection } from '../parser/context';\n\nexport function buildLimit(on: _ISelection, limit: LimitStatement) {\n    return withSelection(on, () => {\n        const l = limit.limit && buildValue(limit.limit);\n        const o = limit.offset && buildValue(limit.offset);\n        return new LimitFilter(on, l, o);\n    });\n}\n\nclass LimitFilter<T = any> extends FilterBase<T> {\n\n    get index() {\n        return null;\n    }\n\n    entropy(t: _Transaction) {\n        return this.selection.entropy(t);\n    }\n\n    hasItem(raw: T, t: _Transaction): boolean {\n        return this.base.hasItem(raw, t);\n    }\n\n    constructor(private selection: _ISelection<T>, private take: IValue | nil, private skip: IValue | nil) {\n        super(selection);\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        return null;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        let skip = this.skip?.get(null, t) ?? 0;\n        let take = this.take?.get(null, t) ?? Number.MAX_SAFE_INTEGER;\n        if (take <= 0) {\n            return;\n        }\n        for (const raw of this.selection.enumerate(t)) {\n            if (skip > 0) {\n                skip--;\n                continue;\n            }\n            yield raw;\n            take--;\n            if (!take) {\n                return;\n            }\n        }\n    }\n\n\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'limit',\n            take: this.take?.explain(e),\n            skip: this.skip?.explain(e),\n            on: this.selection.explain(e),\n        };\n    }\n}","import { IValue, _ISelection, _Transaction, _Explainer, _SelectExplanation, Stats, _IIndex, _IType, setId, getId } from '../interfaces-private';\nimport { DataSourceBase } from './transform-base';\nimport { ColumnNotFound, nil, NotSupported, QueryError } from '../interfaces';\nimport { columnEvaluator } from './selection';\nimport { reconciliateTypes } from '../datatypes/datatypes';\nimport { ExprRef } from 'pgsql-ast-parser';\nimport { colByName } from '../utils';\n\n// https://www.postgresql.org/docs/current/typeconv-union-case.html\nexport function buildUnion(left: _ISelection, right: _ISelection) {\n    if (left.columns.length !== right.columns.length) {\n        throw new QueryError('each UNION query must have the same number of columns');\n    }\n    const cols: UCol[] = Array(left.columns.length);\n    for (let i = 0; i < left.columns.length; i++) {\n        const l = left.columns[i];\n        const r = right.columns[i];\n\n        const type = reconciliateTypes([l, r], true);\n        if (!type) {\n            throw new QueryError(`UNION types ${l.type.name} and ${r.type.name} cannot be matched`);\n        }\n        cols[i] = {\n            name: l.id ?? ('column' + i),\n            type,\n            lval: l.cast(type),\n            rval: r.cast(type),\n        };\n    }\n    return new Union(cols, left, right);\n}\n\ninterface UCol {\n    name: string;\n    type: _IType;\n    lval: IValue;\n    rval: IValue;\n}\n\nclass Union<T = any> extends DataSourceBase<T> {\n\n    get isExecutionWithNoResult(): boolean {\n        return false;\n    }\n\n    isAggregation() {\n        return false;\n    }\n\n    readonly columns: ReadonlyArray<IValue<any>>;\n    private readonly colsByName = new Map<string, IValue>();\n\n    entropy(t: _Transaction) {\n        return this.left.entropy(t) + this.right.entropy(t);\n    }\n\n    hasItem(raw: T, t: _Transaction): boolean {\n        return this.left.hasItem(raw, t) || this.right.hasItem(raw, t);\n    }\n\n    constructor(private cols: UCol[]\n        , private left: _ISelection\n        , private right: _ISelection) {\n        super(left.ownerSchema);\n        this.columns = cols.map(x => columnEvaluator(this, x.name, x.type));\n        for (const c of this.columns) {\n            this.colsByName.set(c.id!, c);\n        }\n    }\n\n    stats(t: _Transaction): Stats | null {\n        return null;\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        for (const raw of this.left.enumerate(t)) {\n            const ret = {} as any;\n            setId(ret, getId(raw));\n            for (const c of this.cols) {\n                ret[c.name] = c.lval.get(raw, t);\n            }\n            yield ret;\n        }\n        for (const raw of this.right.enumerate(t)) {\n            const ret = {} as any;\n            setId(ret, getId(raw));\n            for (const c of this.cols) {\n                ret[c.name] = c.rval.get(raw, t);\n            }\n            yield ret;\n        }\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'union',\n            union: [this.left.explain(e),\n            this.right.explain(e)],\n        };\n    }\n\n    getColumn(column: string | ExprRef): IValue;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue | nil;\n    getColumn(column: string | ExprRef, nullIfNotFound?: boolean): IValue<any> | nil {\n        return colByName(this.colsByName, column, nullIfNotFound);\n    }\n\n    getIndex(...forValue: IValue<any>[]): _IIndex<any> | null | undefined {\n        // todo use indices on unions\n        return null;\n    }\n\n    isOriginOf(a: IValue<any>): boolean {\n        return a.origin === this || this.left.isOriginOf(a);\n    }\n}\n","import { Expr } from 'pgsql-ast-parser';\nimport { buildValue } from '../parser/expression-builder';\nimport { IValue, Stats, _Explainer, _ISelection, _SelectExplanation, _Transaction } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport objectHash from 'object-hash';\nimport { withSelection } from '../parser/context';\n\nexport function buildDistinct(on: _ISelection, exprs?: Expr[]) {\n    return withSelection(on, () => {\n        const vals = exprs && exprs.length > 0\n            ? exprs.map(v => buildValue(v))\n            : on.columns\n        return new Distinct(on, vals);\n    });\n}\n\n\n// todo: use indices to optimize this (avoid iterating everything)\n\nclass Distinct<T> extends FilterBase<any> {\n\n    get index() {\n        return null;\n    }\n\n    entropy(t: _Transaction) {\n        // cant foresight how many items will be filtered\n        //  => just asumme nothing will be.\n        return this.base.entropy(t);\n    }\n\n    hasItem(raw: T, t: _Transaction): boolean {\n        return this.base.hasItem(raw, t);\n    }\n\n    constructor(selection: _ISelection, private exprs: ReadonlyArray<IValue>) {\n        super(selection);\n    }\n\n    stats(t: _Transaction): Stats | null {\n        return this.base.stats(t);\n    }\n\n    *enumerate(t: _Transaction): Iterable<T> {\n        const got = new Set();\n        for (const i of this.base.enumerate(t)) {\n            const vals = this.exprs.map(v => v.type.hash(v.get(i, t)));\n            const hash = vals.length === 1 ? vals[0] : objectHash(vals);\n            if (got.has(hash)) {\n                continue;\n            }\n            got.add(hash);\n            yield i;\n        }\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'distinct',\n            of: this.base.explain(e),\n        };\n    }\n}","import { IValue, _ISelection, _Transaction, _Explainer, _SelectExplanation, Stats, _IAggregation } from '../interfaces-private';\nimport { FilterBase } from './transform-base';\nimport { OrderByStatement, ExprCall } from 'pgsql-ast-parser';\nimport { buildValue } from '../parser/expression-builder';\nimport { nullIsh } from '../utils';\nimport { withSelection } from '../parser/context';\n\nexport function buildOrderBy(on: _ISelection, order: OrderByStatement[]) {\n    return new OrderBy(on, order);\n}\n\nclass OrderBy<T> extends FilterBase<any> implements _IAggregation {\n    order: {\n        by: IValue<any>;\n        order: 'ASC' | 'DESC';\n        nullsLast: boolean;\n    }[];\n\n    get index() {\n        return null;\n    }\n\n    isAggregation() {\n        return this.selection.isAggregation();\n    }\n\n    getAggregation(name: string, call: ExprCall): IValue {\n        return this.asAggreg.getAggregation(name, call);\n    }\n\n    checkIfIsKey(got: IValue<any>): IValue<any> {\n        return this.asAggreg.checkIfIsKey(got);\n    }\n\n    private get asAggreg(): _IAggregation {\n\n        if (!this.selection.isAggregation()) {\n            throw new Error('Not an aggregation');\n        }\n        return this.selection;\n    }\n\n    entropy(t: _Transaction) {\n        const ret = this.selection.entropy(t);\n        // sort algorithm is n*log(n)\n        return ret * Math.log(ret + 1);\n    }\n\n    hasItem(raw: T, t: _Transaction): boolean {\n        return this.base.hasItem(raw, t);\n    }\n\n    constructor(private selection: _ISelection<T>, order: OrderByStatement[]) {\n        super(selection);\n        this.order = withSelection(selection,\n            () => order.map(x => {\n                const order = x.order ?? 'ASC';\n                return ({\n                    by: buildValue(x.by),\n                    order,\n                    nullsLast: order === 'ASC' ? x.nulls !== 'FIRST' : x.nulls === 'LAST',\n                });\n            }));\n    }\n\n\n    stats(t: _Transaction): Stats | null {\n        return this.base.stats(t);\n    }\n\n\n    getIndex(...forValue: IValue<any>[]) {\n        // same index as underlying selection, given that ordering does not modify indices.\n        return this.base.getIndex(...forValue);\n    }\n\n    enumerate(t: _Transaction): Iterable<T> {\n        const all = [...this.base.enumerate(t)];\n        all.sort((a, b) => {\n            for (const o of this.order) {\n                const aval = o.by.get(a, t);\n                const bval = o.by.get(b, t);\n                const na = nullIsh(aval);\n                const nb = nullIsh(bval);\n                if (na && nb) {\n                    continue;\n                }\n                if (na || nb) {\n                    return nb === o.nullsLast ? -1 : 1;\n                }\n                if (o.by.type.equals(aval, bval)) {\n                    continue;\n                }\n                if (o.by.type.gt(aval, bval)) {\n                    return o.order === 'ASC' ? 1 : -1;\n                }\n                return o.order === 'ASC' ? -1 : 1;\n            }\n            return 0;\n        });\n        return all;\n    }\n\n    explain(e: _Explainer): _SelectExplanation {\n        return {\n            id: e.idFor(this),\n            _: 'orderBy',\n            of: this.selection.explain(e),\n        };\n    }\n}","import { Types } from '../../datatypes';\nimport { DataType, FunctionDefinition, _IDb, _ISchema } from '../../interfaces-private';\nimport { PgAttributeTable } from './pg-attribute-list';\nimport { PgClassListTable } from './pg-class';\nimport { PgConstraintTable } from './pg-constraints-list';\nimport { PgIndexTable } from './pg-index-list';\nimport { PgNamespaceTable } from './pg-namespace-list';\nimport { PgTypeTable } from './pg-type-list';\nimport { allFunctions } from '../../functions';\nimport { PgRange } from './pg-range';\nimport { sqlSubstring } from '../../parser/expression-builder';\nimport { PgDatabaseTable } from './pg-database';\nimport { registerCommonOperators } from './binary-operators';\nimport { registerSqlFunctionLanguage } from './sql-function-language';\n\n\nexport function setupPgCatalog(db: _IDb) {\n    const catalog: _ISchema = db.createSchema('pg_catalog');\n\n    catalog._registerType(Types.bool)\n        ._registerType(Types.citext)\n        ._registerTypeSizeable(DataType.timestamp, Types.timestamp)\n        ._registerTypeSizeable(DataType.timestamptz, Types.timestamptz)\n        ._registerType(Types.uuid)\n        ._registerType(Types.date)\n        ._registerType(Types.time)\n        ._registerType(Types.timetz)\n        ._registerType(Types.jsonb)\n        ._registerType(Types.regtype)\n        ._registerType(Types.regclass)\n        ._registerType(Types.json)\n        ._registerType(Types.null)\n        ._registerType(Types.float)\n        ._registerType(Types.integer)\n        ._registerType(Types.bigint)\n        ._registerType(Types.bytea)\n        ._registerType(Types.point)\n        ._registerType(Types.line)\n        ._registerType(Types.lseg)\n        ._registerType(Types.box)\n        ._registerType(Types.path)\n        ._registerType(Types.polygon)\n        ._registerType(Types.circle)\n        ._registerType(Types.interval)\n        ._registerType(Types.inet)\n        ._registerType(Types.record([])) // hack to support functions with record input (see row_to_json UT)\n        ._registerTypeSizeable(DataType.text, Types.text)\n\n    new PgConstraintTable(catalog).register();\n    new PgClassListTable(catalog).register();\n    new PgNamespaceTable(catalog).register();\n    new PgAttributeTable(catalog).register();\n    new PgIndexTable(catalog).register();\n    new PgTypeTable(catalog).register();\n    new PgRange(catalog).register();\n    new PgDatabaseTable(catalog).register();\n\n\n    // this is an ugly hack...\n    const tbl = catalog.declareTable({\n        name: 'current_schema',\n        fields: [\n            { name: 'current_schema', type: Types.text() },\n        ]\n    }, true);\n    tbl.insert({ current_schema: 'public' });\n    tbl.setHidden().setReadonly();\n\n    addFns(catalog, allFunctions);\n\n    catalog.registerFunction({\n        name: 'set_config',\n        args: [Types.text(), Types.text(), Types.bool],\n        returns: Types.text(),\n        impure: true,\n        implementation: (cfg: string, val: string, is_local: boolean) => {\n            // todo - implement this... used to override search_path in dumps.\n            //       => have a dynamic search_path.\n            //       => not trivial du to the \"is_local\" arg\n            //  https://www.postgresql.org/docs/9.3/functions-admin.html\n            return val;\n        }\n    });\n\n    catalog.registerFunction({\n        name: 'substring',\n        args: [Types.text(), Types.integer],\n        returns: Types.text(),\n        implementation: sqlSubstring,\n    })\n\n    catalog.registerFunction({\n        name: 'substring',\n        args: [Types.text(), Types.integer, Types.integer],\n        returns: Types.text(),\n        implementation: sqlSubstring,\n    });\n\n    catalog.registerFunction({\n        // required for Sequelize introspection\n        name: 'pg_get_indexdef',\n        args: [Types.integer],\n        returns: Types.text(),\n        implementation: (indexId: number) => {\n            throw new Error('This stub implementation of \"pg_get_indexdef\" should not be called');\n        },\n    })\n\n\n    db.getSchema('pg_catalog').registerFunction({\n        name: 'col_description',\n        args: [DataType.integer, DataType.integer],\n        returns: DataType.text,\n        implementation: x => 'Fake description provided by pg-mem',\n    });\n\n    registerCommonOperators(catalog);\n\n\n    registerSqlFunctionLanguage(db);\n\n    catalog.setReadonly()\n}\n\nfunction addFns(catalog: _ISchema, fns: FunctionDefinition[]) {\n    for (const f of fns) {\n        catalog.registerFunction(f);\n    }\n}","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema } from '../../interfaces-private';\nimport { nil, Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\nexport class PgAttributeTable extends ReadOnlyTable implements _ITable {\n\n    _schema: Schema = {\n        name: 'pg_attribute',\n        fields: [\n            { name: 'attrelid', type: Types.integer } // oid\n            , { name: 'attname', type: Types.text() }\n            , { name: 'atttypid', type: Types.integer } // oid\n            , { name: 'attstattarget', type: Types.integer }\n            , { name: 'attlen', type: Types.integer }\n            , { name: 'attnum', type: Types.integer }\n            , { name: 'attndims', type: Types.integer }\n            , { name: 'attcacheoff', type: Types.integer }\n            , { name: 'atttypmod', type: Types.integer }\n            , { name: 'attbyval', type: Types.bool }\n            , { name: 'attstorage', type: Types.text(1) } // char(1)\n            , { name: 'attalign', type: Types.text(1) } // char(1)\n            , { name: 'attnotnull', type: Types.bool }\n            , { name: 'atthasdef', type: Types.bool }\n            , { name: 'atthasmissing', type: Types.bool }\n            , { name: 'attidntity', type: Types.text(1) } // char(1)\n            , { name: 'attisdropped', type: Types.bool }\n            , { name: 'attislocal', type: Types.bool }\n            , { name: 'attinhcount', type: Types.integer }\n            , { name: 'attcollation', type: Types.integer } // oid\n            , { name: 'attacl', type: Types.jsonb } // aclitem[]\n            , { name: 'attoptions', type: Types.text().asArray() }\n            , { name: 'attfdwoptions', type: Types.text().asArray() }\n            , { name: 'attmissingval', type: Types.jsonb }// anyarray\n        ]\n    };\n\n\n    entropy(): number {\n        return 0;\n    }\n\n    *enumerate() {\n    }\n\n    hasItem(value: any): boolean {\n        return false;\n    }\n\n    getIndex(forValue: IValue<any>): _IIndex<any> | nil {\n        return null;\n    }\n\n}\n","import { _ITable, _ISelection, _IIndex, _IDb, _ISchema, _Transaction } from '../../interfaces-private';\nimport { Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\n// https://www.postgresql.org/docs/12/catalog-pg-class.html\n\nconst IS_SCHEMA = Symbol('_is_pg_classlist');\nexport class PgClassListTable extends ReadOnlyTable implements _ITable {\n\n    get ownSymbol() {\n        return IS_SCHEMA;\n    }\n\n\n    _schema: Schema = {\n        name: 'pg_class',\n        fields: [\n            { name: 'oid', type: Types.integer } // hidden oid column\n            , { name: 'relname', type: Types.text() }\n            , { name: 'relnamespace', type: Types.integer } // oid\n            , { name: 'reltype', type: Types.integer } // oid\n            , { name: 'reloftype', type: Types.integer } // oid\n            , { name: 'relowner', type: Types.integer } // oid\n            , { name: 'relam', type: Types.integer } // oid\n            , { name: 'relfilenode', type: Types.integer } // oid\n            , { name: 'reltablespace', type: Types.integer } // oid\n            , { name: 'relpages', type: Types.integer }\n            , { name: 'reltyples', type: Types.integer }\n            , { name: 'relallvisible', type: Types.integer }\n            , { name: 'reltoastrelid', type: Types.integer }\n            , { name: 'relhashindex', type: Types.bool }\n            , { name: 'relisshared', type: Types.bool }\n            , { name: 'relpersistence', type: Types.text(1) } // char(1)\n            , { name: 'relkind', type: Types.text(1) } // char(1)\n            , { name: 'relnatts', type: Types.integer }\n            , { name: 'relchecks', type: Types.integer }\n            , { name: 'relhasoids', type: Types.bool }\n            , { name: 'relhasrules', type: Types.bool }\n            , { name: 'relhastriggers', type: Types.bool }\n            , { name: 'relhassubclass', type: Types.bool }\n            , { name: 'relrowsecurity', type: Types.bool }\n            , { name: 'relforcerowsecurity', type: Types.bool }\n            , { name: 'relispopulated', type: Types.bool }\n            , { name: 'relreplident', type: Types.text(1) } // char(1)\n            , { name: 'relispartition', type: Types.bool }\n            , { name: 'relrewrite', type: Types.integer } // oid\n            , { name: 'relfrozenxid', type: Types.integer } // xid\n            , { name: 'relminmxid', type: Types.integer } // xid\n            , { name: 'relacl', type: Types.text() } // alitem[]\n            , { name: 'reloptions', type: Types.text().asArray() } // text[]\n            , { name: 'relpartbound', type: Types.jsonb } // pg_nod_tr\n        ]\n    };\n\n    // private indexes: { [key: string]: _IIndex } = {\n    //     'oid': new CustomIndex(this, {\n    //         get size() {\n    //             return this.size\n    //         },\n    //         column: this.selection.getColumn('oid'),\n    //         byColumnValue: (oid: string, t: _Transaction) => {\n    //             return [this.byOid(oid, t)]\n    //         }\n    //     }),\n    //     'relname': new CustomIndex(this, {\n    //         get size() {\n    //             return this.size\n    //         },\n    //         column: this.selection.getColumn('relname'),\n    //         byColumnValue: (oid: string, t: _Transaction) => {\n    //             return [this.byRelName(oid, t)];\n    //         }\n    //     }),\n    // }\n\n\n\n    // private byOid(oid: string, t: _Transaction) {\n    //     const { type, id } = parseOid(oid);\n    //     switch (type) {\n    //         case 'table':\n    //             return this.makeTable(this.schema.getTable(id, true)!);\n    //         case 'index':\n    //             return null;\n    //         // return this.makeTable(this.db.getIndex(id, true));\n    //         default:\n    //             throw NotSupported.never(type);\n    //     }\n    // }\n\n    // private byRelName(name: string, t: _Transaction) {\n    //     return this.schema.getTable(name, true);\n    //     // ?? this.db.getIndex(name, true);\n    // }\n\n    entropy(t: _Transaction): number {\n        return 0;\n    }\n\n    *enumerate() {\n        // for (const t of this.db.listTables()) {\n        //     yield this.makeTable(t);\n        // }\n    }\n\n\n    makeInedx(t: _IIndex<any>): any {\n        if (!t) {\n            return null;\n        }\n        // relkind , i = index, S = sequence, t = TOAST table, v = view, m = materialized view, c = composite type, f = foreign table, p = partitioned table, I = partitioned index\n        throw new Error('todo');\n    }\n    makeTable(t: _ITable<any>): any {\n        if (!t) {\n            return null;\n        }\n        throw new Error('todo');\n        // const ret = {\n        //     relname: t.name,\n        //     relnamespace: t instanceof MemoryTable\n        //         ? MAIN_NAMESPACE\n        //         : SCHEMA_NAMESPACE,\n        //     relkind: 'r', //  r = ordinary table\n        //     [IS_SCHEMA]: true,\n        // };\n        // return setId(ret, '/schema/pg_class/table/' + t.name);\n    }\n\n    hasItem(value: any): boolean {\n        return !!value?.[IS_SCHEMA];\n    }\n\n}\n","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema, _Transaction } from '../../interfaces-private';\nimport { nil, Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { TableIndex } from '../table-index';\nimport { ReadOnlyTable } from '../readonly-table';\n\nconst IS_SCHEMA = Symbol('_is_pgconstraint');\nexport class PgConstraintTable extends ReadOnlyTable implements _ITable {\n\n    get ownSymbol() {\n        return IS_SCHEMA;\n    }\n\n    _schema: Schema = {\n        name: 'pg_constraint',\n        fields: [\n            { name: 'oid', type: Types.integer } // hidden oid column\n            , { name: 'conname', type: Types.text() } // <== 'name' type\n            , { name: 'connamespace', type: Types.integer } // <== 'oid' type\n            , { name: 'contype', type: Types.text(1) } // <== 'char(1)' type\n            , { name: 'condeferrable', type: Types.bool }\n            , { name: 'condeferred', type: Types.bool }\n            , { name: 'convalidated', type: Types.bool }\n            , { name: 'conrelid', type: Types.integer } // <== oid\n            , { name: 'contypid', type: Types.integer } // <== oid\n            , { name: 'conindid', type: Types.integer } // <== oid\n            , { name: 'conparentid', type: Types.integer } // <== oid\n            , { name: 'confrelid', type: Types.integer } // <== oid\n            , { name: 'confupdtype', type: Types.text(1) } // <== 'char(1)' type\n            , { name: 'confdeltype', type: Types.text(1) } // <== 'char(1)' type\n            , { name: 'confmatchtype', type: Types.text(1) } // <== 'char(1)' type\n            , { name: 'conislocal', type: Types.bool }\n            , { name: 'coninhcount', type: Types.integer }\n            , { name: 'connoinherit', type: Types.bool }\n            , { name: 'conkey', type: Types.integer.asArray() }\n            , { name: 'confkey', type: Types.integer.asArray() }\n            , { name: 'conpfeqop', type: Types.integer.asArray() } // <== oid[]\n            , { name: 'conppeqop', type: Types.integer.asArray() } // <== oid[]\n            , { name: 'conffeqop', type: Types.integer.asArray() } // <== oid[]\n            , { name: 'conexclop', type: Types.integer.asArray() } // <== oid[]\n            , { name: 'conbin', type: Types.text() } // <== weird type\n            , { name: 'consrc', type: Types.text() }\n        ]\n    };\n\n\n    entropy(t: _Transaction): number {\n        return this.db.listSchemas()\n            .reduce((tot, s) => tot + s.tablesCount(t) * 10 * 3, 0);\n    }\n\n    *enumerate(t: _Transaction) {\n        for (const schema of this.db.listSchemas()) {\n            for (const it of schema.listTables(t)) {\n                yield* this.itemsByTable(it, t);\n            }\n        }\n    }\n\n    make(table: _ITable, i: number, t: IValue<any>): any {\n        if (!t) {\n            return null;\n        }\n        let ret = {};\n        for (const { name } of this._schema.fields) {\n            (ret as any)[name] = null;\n        }\n\n        ret = {\n            ...ret,\n            // table_catalog: 'pgmem',\n\n            [IS_SCHEMA]: true,\n        };\n        setId(ret, `/schema/${table.ownerSchema.name}/pg_constraint/${table.name}/${i}`);\n        return ret;\n    }\n\n    hasItem(value: any): boolean {\n        return !!value?.[IS_SCHEMA];\n    }\n\n    getIndex(forValue: IValue<any>): _IIndex<any> | nil {\n        if (forValue.id === 'table_name') {\n            return new TableIndex(this, forValue);\n        }\n        return null;\n    }\n\n}\n","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema } from '../../interfaces-private';\nimport { Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\nexport class PgIndexTable extends ReadOnlyTable implements _ITable {\n\n    _schema: Schema = {\n        name: 'pg_index',\n        fields: [\n            { name: 'indexrelid', type: Types.integer } // oid\n            , { name: 'indrelid', type: Types.integer } // oid\n            , { name: 'indnatts', type: Types.integer }\n            , { name: 'indnkyatts', type: Types.integer }\n            , { name: 'indisunique', type: Types.bool }\n            , { name: 'indisprimary', type: Types.bool }\n            , { name: 'indisxclusion', type: Types.bool }\n            , { name: 'indimmediate', type: Types.bool }\n            , { name: 'indisclustered', type: Types.bool }\n            , { name: 'indisvalid', type: Types.bool }\n            , { name: 'indcheckxmin', type: Types.bool }\n            , { name: 'indisready', type: Types.bool }\n            , { name: 'indisliv', type: Types.bool }\n            , { name: 'indisreplident', type: Types.bool }\n            , { name: 'indkey', type: Types.integer.asArray() } // int2vector\n            , { name: 'indcollation', type: Types.integer.asArray() } // oidvector\n            , { name: 'indclass', type: Types.integer.asArray() } // oidvector\n            , { name: 'indoption', type: Types.integer.asArray() } // int2vector\n            , { name: 'indeexprs', type: Types.jsonb } // pg_node_tree\n            , { name: 'indpred', type: Types.jsonb } // pg_node_tree\n        ]\n    };\n\n    entropy(): number {\n        return 0;\n    }\n\n    *enumerate() {\n    }\n\n\n\n    hasItem(value: any): boolean {\n        return false;\n    }\n\n}\n","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema } from '../../interfaces-private';\nimport { Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\nexport class PgNamespaceTable extends ReadOnlyTable implements _ITable {\n\n    _schema: Schema = {\n        name: 'pg_namespace',\n        fields: [\n            { name: 'oid', type: Types.integer } // hidden oid column\n            , { name: 'nspname', type: Types.text() }\n            , { name: 'nspowner', type: Types.integer } // oid\n            , { name: 'nspacl', type: Types.jsonb } // aclitem[]\n        ]\n    };\n\n\n    entropy(): number {\n        return 0;\n    }\n\n    *enumerate() {\n\n        // yield {\n        //     oid: MAIN_NAMESPACE,\n        //     nspname: 'public',\n        //     nspowner: null,\n        //     nspacl: null,\n        // };\n        // yield {\n        //     oid: MAIN_NAMESPACE,\n        //     nspname: 'public',\n        //     nspowner: null,\n        //     nspacl: null,\n        // };\n    }\n\n\n\n    hasItem(value: any): boolean {\n        return false;\n    }\n}\n","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema } from '../../interfaces-private';\nimport { Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\nexport class PgTypeTable extends ReadOnlyTable implements _ITable {\n\n\n    _schema: Schema = {\n        name: 'pg_type',\n        fields: [\n            { name: 'oid', type: Types.integer } // hiddn oid column\n            , { name: 'typname', type: Types.text() }\n            , { name: 'typnamespace', type: Types.integer } // oid\n            , { name: 'typowner', type: Types.integer } // oid\n            , { name: 'typlen', type: Types.integer }\n            , { name: 'typbyval', type: Types.bool }\n            , { name: 'typtype', type: Types.text(1) } // char(1)\n            , { name: 'typispreferred', type: Types.bool }\n            , { name: 'typisdefined', type: Types.bool }\n            , { name: 'typdlim', type: Types.text(1) } // char(1)\n            , { name: 'typrelid', type: Types.integer } // oid\n            , { name: 'typelem', type: Types.integer } // oid\n            , { name: 'typarray', type: Types.integer } // oid\n            , { name: 'typinput', type: Types.text() } // regproc\n            , { name: 'typoutput', type: Types.text() } // regproc\n            , { name: 'typreceive', type: Types.text() } // regproc\n            , { name: 'typsend', type: Types.text() } // regproc\n            , { name: 'typmodin', type: Types.text() } // regproc\n            , { name: 'typmodout', type: Types.text() } // regproc\n            , { name: 'typanalyze', type: Types.text() } // regproc\n            , { name: 'typalign', type: Types.text(1) } // char(1)\n            , { name: 'typstorage', type: Types.text(1) } // char(1)\n            , { name: 'typnotnull', type: Types.bool }\n            , { name: 'typbasetype', type: Types.integer } //oid\n            , { name: 'typtypmod', type: Types.integer }\n            , { name: 'typndims', type: Types.integer }\n            , { name: 'typcollation', type: Types.integer } // oid\n            , { name: 'typdfaultbin', type: Types.text() } // pg_nod_tree\n            , { name: 'typdefault', type: Types.text() }\n            , { name: 'typacl', type: Types.jsonb }\n        ]\n    };\n\n\n    entropy(): number {\n        return 0;\n    }\n\n    *enumerate() {\n    }\n\n\n\n    hasItem(value: any): boolean {\n        return false;\n    }\n\n}\n","import { stringFunctions } from './string';\nimport { dateFunctions } from './date';\nimport { systemFunctions } from './system';\nimport { sequenceFunctions } from './sequence-fns';\n\n\nexport const allFunctions = [\n    ...stringFunctions\n    , ... dateFunctions\n    , ... systemFunctions\n    , ... sequenceFunctions\n]","import { DataType, FunctionDefinition } from '../interfaces-private';\n\nexport const stringFunctions: FunctionDefinition[] = [\n    {\n        name: 'lower',\n        args: [DataType.text],\n        returns: DataType.text,\n        implementation: (x: string) => x?.toLowerCase(),\n    },\n    {\n        name: 'upper',\n        args: [DataType.text],\n        returns: DataType.text,\n        implementation: (x: string) => x?.toUpperCase(),\n    },\n    {\n        name: 'concat',\n        args: [DataType.text],\n        argsVariadic: DataType.text,\n        returns: DataType.text,\n        allowNullArguments: true,\n        implementation: (...x: string[]) => x?.join(''),\n    },\n]","import { FunctionDefinition } from '../interfaces';\nimport moment from 'moment';\nimport { DataType, QueryError } from '../interfaces-private';\nimport { nullIsh } from '../utils';\n\n\nexport const dateFunctions: FunctionDefinition[] = [\n    {\n        name: 'to_date',\n        args: [DataType.text, DataType.text],\n        returns: DataType.date,\n        implementation: (data, format) => {\n            if (nullIsh(data) || nullIsh(format)) {\n                return null; // if one argument is null => null\n            }\n            const ret = moment.utc(data, format);\n            if (!ret.isValid()) {\n                throw new QueryError(`The text '${data}' does not match the date format ${format}`);\n            }\n            return ret.toDate();\n        }\n    },\n    {\n        name: 'now',\n        returns: DataType.timestamptz,\n        impure: true,\n        implementation: () => new Date(),\n    },\n];","import { Types } from '../datatypes';\nimport { FunctionDefinition } from '../interfaces';\n\nexport const systemFunctions: FunctionDefinition[] = [\n    {\n        // ugly hack...\n        name: 'current_schema',\n        returns: Types.text(),\n        implementation: () => 'public',\n    },\n]\n","import { executionCtx } from '../utils';\nimport { Types } from '../datatypes';\nimport { FunctionDefinition, QueryError } from '../interfaces';\nimport { asSeq, RegClass, _ISequence } from '../interfaces-private';\n\n// https://www.postgresql.org/docs/8.1/functions-sequence.html\n\nfunction getSeq(id: RegClass) {\n    const { transaction, schema } = executionCtx();\n    if (!transaction) {\n        throw new QueryError('cannot query sequence value in this context');\n    }\n    return {\n        t: transaction,\n        seq: asSeq(schema.getObjectByRegOrName(id)),\n    };\n}\nconst lastVal = Symbol();\nexport const sequenceFunctions: FunctionDefinition[] = [\n\n    {\n        name: 'nextval',\n        args: [Types.regclass],\n        returns: Types.integer,\n        implementation: (seqId: RegClass) => {\n            const { seq, t } = getSeq(seqId);\n            const ret = seq.nextValue(t);\n            t.set(lastVal, ret);\n            return ret;\n        },\n        impure: true,\n    },\n    {\n        name: 'currval',\n        args: [Types.regclass],\n        returns: Types.integer,\n        implementation: (seqId: RegClass) => {\n            const { seq, t } = getSeq(seqId);\n            return seq.currentValue(t);\n        },\n        impure: true,\n    },\n    {\n        name: 'lastval',\n        returns: Types.integer,\n        implementation: (seqId: RegClass) => {\n            const { transaction } = executionCtx();\n            if (!transaction) {\n                throw new QueryError('cannot query lastval in this context');\n            }\n            return transaction.get<number>(lastVal);\n        },\n        impure: true,\n    },\n    {\n        name: 'setval',\n        args: [Types.regclass, Types.integer],\n        returns: Types.integer,\n        implementation: (seqId: RegClass, val: number) => {\n            const { seq, t } = getSeq(seqId);\n            if (typeof val !== 'number') {\n                throw new QueryError('Invalid setval() value');\n            }\n            seq.setValue(t, val);\n            return val;\n        },\n        impure: true,\n    },\n]\n","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema } from '../../interfaces-private';\nimport { Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\n// https://www.postgresql.org/docs/13/catalog-pg-range.html\nexport class PgRange extends ReadOnlyTable implements _ITable {\n\n\n    _schema: Schema = {\n        name: 'pg_range',\n        fields: [\n            { name: 'rngtypid', type: Types.integer } // oid\n            , { name: 'rngsubtype', type: Types.integer } // oid\n            , { name: 'rngcollation', type: Types.integer } // oid\n            , { name: 'rngsubopc', type: Types.integer } // oid\n            , { name: 'rngcanonical', type: Types.integer } // oid\n            , { name: 'rngsubdiff', type: Types.integer } // oid\n        ]\n    };\n\n\n    entropy(): number {\n        return 0;\n    }\n\n    *enumerate() {\n    }\n\n\n\n    hasItem(value: any): boolean {\n        return false;\n    }\n\n}\n","import { _ITable, _ISelection, _IIndex, _IDb, _ISchema, _Transaction, setId } from '../../interfaces-private';\nimport { Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\n// https://www.postgresql.org/docs/12/catalog-pg-class.html\n\nconst IS_SCHEMA = Symbol('_is_pg_database');\nexport class PgDatabaseTable extends ReadOnlyTable implements _ITable {\n\n    get ownSymbol() {\n        return IS_SCHEMA;\n    }\n\n\n    _schema: Schema = {\n        name: 'pg_database',\n        fields: [\n            { name: 'oid', type: Types.integer } // hidden oid column\n            , { name: 'datname', type: Types.text() }\n            , { name: 'datdba', type: Types.integer }\n            , { name: 'encoding', type: Types.integer }\n            , { name: 'datcollate', type: Types.text() }\n            , { name: 'datctype', type: Types.text() }\n            , { name: 'datistemplate', type: Types.bool }\n            , { name: 'datlowconn', type: Types.bool }\n            , { name: 'datconlimit', type: Types.integer }\n            , { name: 'datlastsysoid', type: Types.integer }\n            , { name: 'datfrozenxid', type: Types.integer }\n            , { name: 'datminmxid', type: Types.integer }\n            , { name: 'dattablespace', type: Types.integer }\n            , { name: 'datacl', type: Types.jsonb }\n        ]\n    };\n\n    entropy(t: _Transaction): number {\n        return this.db.listSchemas().length;\n    }\n\n    *enumerate() {\n        // this is 💩, whaterver...\n        let i = 48593;\n        for (const t of this.db.listSchemas()) {\n            const ret = {\n                oid: ++i,\n                datname: t.name,\n                [IS_SCHEMA]: true,\n            };\n            yield setId(ret, '/schema/pg_database/' + t.name);\n        }\n    }\n\n\n    hasItem(value: any): boolean {\n        return !!value?.[IS_SCHEMA];\n    }\n}\n","import { _ISchema, QueryError } from '../../interfaces-private';\nimport { numbers, isInteger, dateTypes, Types, numberPriorities } from '../../datatypes';\nimport { intervalToSec, queryJson } from '../../utils';\nimport moment from 'moment';\n\nexport function registerCommonOperators(schema: _ISchema) {\n    registerNumericOperators(schema);\n    registerDatetimeOperators(schema);\n    registerJsonOperators(schema);\n    registerTextOperators(schema);\n}\n\nfunction* numberPairs() {\n    for (const a of numbers) {\n        for (const b of numbers) {\n            yield [a, b, numberPriorities[a] < numberPriorities[b] ? b : a] as const;\n        }\n    }\n}\n\nfunction registerNumericOperators(schema: _ISchema) {\n    // ======= \"+ - * /\" on numeric types =======\n    for (const [left, right, returns] of numberPairs()) {\n        schema.registerOperator({\n            operator: '+',\n            commutative: true,\n            left,\n            right,\n            returns,\n            implementation: (a, b) => a + b,\n        });\n    }\n    for (const [left, right, returns] of numberPairs()) {\n        schema.registerOperator({\n            operator: '-',\n            commutative: true,\n            left,\n            right,\n            returns,\n            implementation: (a, b) => a - b,\n        });\n    }\n\n    for (const [left, right, returns] of numberPairs()) {\n        schema.registerOperator({\n            operator: '*',\n            commutative: true,\n            left,\n            right,\n            returns,\n            implementation: (a, b) => a * b,\n        });\n    }\n\n    for (const [left, right, returns] of numberPairs()) {\n        schema.registerOperator({\n            operator: '/',\n            commutative: false,\n            left,\n            right,\n            returns,\n            implementation: isInteger(returns)\n                ? ((a, b) => Math.trunc(a / b))\n                : ((a, b) => a / b),\n        });\n    }\n}\n\n\nfunction registerDatetimeOperators(schema: _ISchema) {\n    // ======= date/time \"+ -\" timestamp =======\n    for (const dt of dateTypes) {\n        for (const [operator, f] of [['+', 1], ['-', -1]] as const) {\n            schema.registerOperator({\n                operator,\n                commutative: operator === '+',\n                left: dt,\n                right: Types.interval,\n                returns: dt,\n                implementation: (a, b) => moment(a).add(f * intervalToSec(b), 'seconds').toDate(),\n            });\n        }\n    }\n\n    // ==== date \"+ -\" integer  (add days.. only works on dates, not timestamps)\n    for (const [operator, f] of [['+', 1], ['-', -1]] as const) {\n        schema.registerOperator({\n            operator,\n            commutative: operator === '+',\n            left: Types.date,\n            right: Types.integer,\n            returns: Types.date,\n            implementation: (a, b) => moment(a).add(f * b, 'days').toDate(),\n        });\n    }\n}\n\n\n\nfunction registerJsonOperators(schema: _ISchema) {\n    // ======= \"json @> json\" query operator\n    schema.registerOperator({\n        operator: '@>',\n        left: Types.jsonb,\n        right: Types.jsonb,\n        returns: Types.bool,\n        implementation: (a, b) => queryJson(b, a),\n    });\n\n    // ======= \"json - text\" (remove key)\n    schema.registerOperator({\n        operator: '-',\n        left: Types.jsonb,\n        right: Types.text(),\n        returns: Types.jsonb,\n        implementation: (a, b) => {\n            if (Array.isArray(a)) {\n                return a.filter(x => x !== b);\n            }\n            if (typeof a === 'object') {\n                const ret = { ...a };\n                delete ret[b];\n                return ret;\n            }\n            throw new QueryError('cannot delete from scalar', '22023');\n        },\n    });\n\n    // ======= \"json - int\" (remove index)\n    schema.registerOperator({\n        operator: '-',\n        left: Types.jsonb,\n        right: Types.integer,\n        returns: Types.jsonb,\n        implementation: (a, b) => {\n            if (Array.isArray(a)) {\n                const ret = [...a];\n                ret.splice(b, 1);\n                return ret;\n            }\n            if (typeof a === 'object') {\n                throw new QueryError('cannot delete from object using integer index', '22023');\n            }\n            throw new QueryError('cannot delete from scalar', '22023');\n        },\n    })\n}\n\n\nfunction registerTextOperators(schema: _ISchema) {\n    // ======== \"text || text\" (concat text operator)\n    schema.registerOperator({\n        operator: '||',\n        left: Types.text(),\n        right: Types.text(),\n        returns: Types.text(),\n        implementation: (a, b) => a + b,\n    })\n}\n","import { _IDb, _ISchema, _Transaction, _IType, IValue, _Explainer, _ISelection, setId, getId } from '../../interfaces-private';\nimport { parseSql } from '../../parser/parse-cache';\nimport { QueryError, NotSupported, DataType } from '../../interfaces';\nimport { Statement } from 'pgsql-ast-parser';\nimport { executionCtx as executionCtx, pushExecutionCtx, hasExecutionCtx, ExecCtx, randomString } from '../../utils';\nimport { SelectExec } from '../../execution/select';\nimport { withParameters } from '../../parser/context';\nimport { buildParameterList } from '../../evaluator';\nimport { StatementExec } from '../../execution/statement-exec';\nimport { ArrayType } from '../../datatypes';\nimport { RecordType } from '../../datatypes/t-record';\n\nlet execId = 0;\n\nexport function registerSqlFunctionLanguage(db: _IDb) {\n    db.registerLanguage('sql', ({ code, schema: _schema, args, returns: _returns }) => {\n        const schema = _schema as _ISchema;\n        const returns = _returns as _IType;\n        // parse SQL\n        const _parsed = parseSql(code);\n        let parsed: Statement;\n        if (Array.isArray(_parsed)) {\n            if (_parsed.length !== 1) {\n                throw new QueryError(`Expected 1 statement in function, got ${_parsed.length}`);\n            }\n            parsed = _parsed[0];\n        } else {\n            parsed = _parsed;\n        }\n        switch (parsed.type) {\n            case 'select':\n            case 'union':\n            case 'union all':\n            case 'with':\n            case 'with recursive':\n            case 'values':\n                break;\n            default:\n                throw new NotSupported(`Unsupported statement type in function: ${parsed.type}`);\n        }\n\n        // build parameter list\n        const parameterList = buildParameterList('', args);\n\n\n        // push and push parameters, and a new build context, to avoid leaking parent context in function body\n        // ... then, visit & compile tree\n        const statement = new StatementExec(schema, parsed, code);\n        const executor = withParameters(parameterList, () => statement.compile());\n        if (!(executor instanceof SelectExec)) {\n            throw new NotSupported(`Unsupported statement type in function: ${parsed.type}`);\n        }\n\n\n        // todo: prepare statement here, to avoid optimization on each call.\n\n\n        // get the result transformer, based on the expected function output type\n        let transformResult: (values: any[], t: _Transaction, execId: string) => any;\n        if (!returns || returns.primary === DataType.null) {\n            // returns null\n            transformResult = () => null;\n        } else if (ArrayType.matches(returns) && RecordType.matches(returns.of)) {\n            // returns a table\n            const transformItem = returns.of.transformItemFrom(executor.selection);\n            if (!transformItem) {\n                throw new QueryError(`return type mismatch in function declared to return record`, '42P13');\n            }\n            transformResult = (v, t, eid) => v?.map(x => {\n                return transformItem(x, t, eid);\n            });\n        } else {\n            // returns a single value\n            const cols = executor.selection.columns;\n            if (cols.length !== 1 || !cols[0].type.canConvertImplicit(returns)) {\n                throw new QueryError(`return type mismatch in function declared to return ${returns.name}`, '42P13');\n            }\n            const col = cols[0].cast(returns);\n            transformResult = (v, t) => v[0] ? col.get(v[0], t) : null;\n        }\n\n\n        // return compiled function\n        const implem = (...args: any[]) => {\n            const exec: ExecCtx = hasExecutionCtx() ?\n                {\n                    // if we have a parent execution context, use it.\n                    // except for parameter values, that will be re-bound.\n                    ...executionCtx(),\n                    parametersValues: args,\n                } : {\n                    // else, create a brand new execution context.\n                    // that is used when a pure function is called with constant arguments:\n                    //  => function call will be reduced to a constant based on the\n                    //    db state at the time of the statement begining.\n                    schema,\n                    transaction: db.data,\n                    parametersValues: args,\n                };\n            const eid = 'fne' + execId++;\n            // push a new execution context, to avoid leaking parent paramters in the function\n            return pushExecutionCtx(exec, () => {\n                const ret = executor.execute(exec.transaction);\n                return transformResult(ret.result.rows, exec.transaction, eid);\n            });\n        };\n        // hack to tell the expression visitor that\n        // (implem as any)[fnAsSelectionColumns] = executor.selection.columns;\n        return implem;\n    });\n}\n\n// export const fnAsSelectionColumns = Symbol('asSelection');\n","\nimport { _IDb, _ISchema } from '../../interfaces-private';\nimport { ColumnsListSchema } from './columns-list';\nimport { TablesSchema } from './table-list';\nimport { TableConstraints } from './table-constraints';\nimport { KeyColumnUsage } from './key-column-usage';\nimport { ConstraintColumnUsage } from './constraint-column-usage';\n\nexport function setupInformationSchema(db: _IDb) {\n    const schema: _ISchema = db.createSchema('information_schema');\n\n    // SELECT * FROM \"information_schema\".\"tables\" WHERE (\"table_schema\" = 'public' AND \"table_name\" = 'user')\n    new TablesSchema(schema).register();\n    new ColumnsListSchema(schema).register();\n    new TableConstraints(schema).register();\n    new KeyColumnUsage(schema).register();\n    new ConstraintColumnUsage(schema).register();\n\n    schema.setReadonly();\n}","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _Transaction, _ISchema } from '../../interfaces-private';\nimport { Schema, nil } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { TableIndex } from '../table-index';\nimport { ReadOnlyTable } from '../readonly-table';\n\nconst IS_SCHEMA = Symbol('_is_colmun');\nexport class ColumnsListSchema extends ReadOnlyTable implements _ITable {\n\n    get ownSymbol() {\n        return IS_SCHEMA;\n    }\n\n    _schema: Schema = {\n        name: 'columns',\n        fields: [\n            { name: 'table_catalog', type: Types.text() }\n            , { name: 'table_schema', type: Types.text() }\n            , { name: 'table_name', type: Types.text() }\n            , { name: 'column_name', type: Types.text() }\n            , { name: 'ordinal_position', type: Types.integer }\n            , { name: 'column_default', type: Types.text() }\n            , { name: 'is_nullable', type: Types.text(3) }\n            , { name: 'data_type', type: Types.text() }\n            , { name: 'character_maximum_length', type: Types.integer }\n            , { name: 'character_octet_length', type: Types.integer }\n            , { name: 'numeric_precision', type: Types.integer }\n            , { name: 'numeric_precision_radix', type: Types.integer }\n            , { name: 'numeric_scale', type: Types.integer }\n            , { name: 'datetime_precision', type: Types.integer }\n            , { name: 'interval_type', type: Types.text() }\n            , { name: 'interval_precision', type: Types.integer }\n            , { name: 'character_set_catalog', type: Types.text() }\n            , { name: 'character_set_schema', type: Types.text() }\n            , { name: 'character_set_name', type: Types.text() }\n            , { name: 'collation_catalog', type: Types.text() }\n            , { name: 'collation_schema', type: Types.text() }\n            , { name: 'collation_name', type: Types.text() }\n            , { name: 'domain_catalog', type: Types.text() }\n            , { name: 'domain_schema', type: Types.text() }\n            , { name: 'domain_name', type: Types.text() }\n            , { name: 'udt_catalog', type: Types.text() } // <====\n            , { name: 'udt_schema', type: Types.text() } // <====\n            , { name: 'udt_name', type: Types.text() } // <====\n            , { name: 'scope_catalog', type: Types.text() } // <====\n            , { name: 'scope_schema', type: Types.text() } // <====\n            , { name: 'scope_name', type: Types.text() } // <====\n            , { name: 'maximum_cardinality', type: Types.integer } // <====\n            , { name: 'dtd_identifier', type: Types.integer } // <=== INDEX\n            , { name: 'is_self_referencing', type: Types.text(3) }\n            , { name: 'is_identity', type: Types.text(3) } // <==\n            , { name: 'identity_generation', type: Types.text() } // <==\n            , { name: 'identity_start', type: Types.text() } // <==\n            , { name: 'identity_document', type: Types.text() } // <==\n            , { name: 'identity_increment', type: Types.text() } // <==\n            , { name: 'identity_maximum', type: Types.text() } // <==\n            , { name: 'identity_minimum', type: Types.text() } // <==\n            , { name: 'identity_cycle', type: Types.text(3) } // <==\n            , { name: 'is_generated', type: Types.text() } // <==\n            , { name: 'generation_expression', type: Types.text() } // <==\n            , { name: 'is_updatable', type: Types.text(3) } // <==\n        ]\n    };\n\n\n    entropy(t: _Transaction): number {\n        return this.db.listSchemas()\n            .reduce((tot, s) => tot + s.tablesCount(t) * 10, 0);\n    }\n\n    *enumerate(t: _Transaction) {\n        for (const s of this.db.listSchemas()) {\n            for (const it of s.listTables(t)) {\n                yield* this.itemsByTable(it, t);\n            }\n        }\n    }\n\n    make(table: _ITable, i: number, t: IValue<any>): any {\n        if (!t) {\n            return null;\n        }\n        let ret = {};\n        for (const { name } of this._schema.fields) {\n            (ret as any)[name] = null;\n        }\n\n        ret = {\n            ...ret,\n            table_catalog: 'pgmem',\n            table_schema: 'public',\n            table_name: table.name,\n            column_name: t.id,\n            ordinal_position: i,\n            is_nullable: 'NO',\n            data_type: t.type.primary, // <== todo\n            numeric_precision: null, // <== todo\n            numeric_precision_radix: null, // <== todo\n            numeric_scale: null, // <== todo\n\n            udt_catalog: 'pgmem',\n            udt_schema: 'pg_catalog',\n            udt_name: t.type.primary, // <== todo\n\n            dtd_identifier: i, // <== todo\n\n            is_self_referencing: 'NO',\n            is_identity: 'NO',\n\n            is_updatable: 'YES',\n            is_generated: 'NEVER',\n            identity_cycle: 'NO',\n\n\n            [IS_SCHEMA]: true,\n        };\n        setId(ret, `/schema/${table.ownerSchema.name}/table/${table.name}/${i}`);\n        return ret;\n    }\n\n    hasItem(value: any): boolean {\n        return !!value?.[IS_SCHEMA];\n    }\n\n    getIndex(forValue: IValue<any>): _IIndex<any> | nil {\n        if (forValue.id === 'table_name') {\n            return new TableIndex(this, forValue);\n        }\n        return null;\n    }\n\n}\n","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema, _Transaction, _Explainer } from '../../interfaces-private';\nimport { Schema, nil } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { TableIndex } from '../table-index';\nimport { ReadOnlyTable } from '../readonly-table';\n\nconst IS_SCHEMA = Symbol('_is_schema');\nexport class TablesSchema extends ReadOnlyTable implements _ITable {\n\n    get ownSymbol() {\n        return IS_SCHEMA;\n    }\n\n    isOriginOf(v: IValue): boolean {\n        return v.origin === this || v.origin === this.selection;\n    }\n\n    _schema: Schema = {\n        name: 'tables',\n        fields: [\n            { name: 'table_catalog', type: Types.text() }\n            , { name: 'table_schema', type: Types.text() }\n            , { name: 'table_name', type: Types.text() }\n            , { name: 'table_type', type: Types.text() }\n            , { name: 'self_referencing_column_name', type: Types.text() }\n            , { name: 'reference_generation', type: Types.text() }\n            , { name: 'user_defined_type_catalog', type: Types.text() }\n            , { name: 'user_defined_type_schema', type: Types.text() }\n            , { name: 'user_defined_type_name', type: Types.text() }\n            , { name: 'is_insertable_into', type: Types.text(3) }\n            , { name: 'is_typed', type: Types.text(3) }\n            , { name: 'commit_action', type: Types.text() }\n        ]\n    };\n\n    entropy(t: _Transaction): number {\n        return this.db.listSchemas()\n            .reduce((tot, s) => tot + s.tablesCount(t), 0);\n    }\n\n    *enumerate(t: _Transaction) {\n        for (const s of this.db.listSchemas()) {\n            for (const it of s.listTables(t)) {\n                yield this.make(it);\n            }\n        }\n    }\n\n    make(t: _ITable<any>): any {\n        if (!t) {\n            return null;\n        }\n        const ret = {\n            table_catalog: 'pgmem',\n            table_schema: 'public',\n            table_name: t.name,\n            table_type: 'BASE TABLE',\n            self_referencing_column_name: null,\n            reference_generation: null,\n            user_defined_type_catalog: null,\n            user_defined_type_schema: null,\n            user_defined_type_name: null,\n            is_insertable_into: 'YES',\n            is_typed: 'NO',\n            commit_action: null,\n            [IS_SCHEMA]: true,\n        };\n        setId(ret, '/schema/table/' + t.name);\n        return ret;\n    }\n\n    hasItem(value: any): boolean {\n        return !!value?.[IS_SCHEMA];\n    }\n\n    getIndex(forValue: IValue<any>): _IIndex<any> | nil {\n        if (forValue?.id === 'table_name') {\n            return new TableIndex(this, forValue);\n        }\n        return null;\n    }\n\n}\n","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema } from '../../interfaces-private';\nimport { Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\n// https://www.postgresql.org/docs/13/catalog-pg-range.html\nexport class TableConstraints extends ReadOnlyTable implements _ITable {\n\n\n    _schema: Schema = {\n        name: 'table_constraints',\n        fields: [\n            { name: 'constraint_catalog', type: Types.text() }\n            , { name: 'constraint_schema', type: Types.text() }\n            , { name: 'constraint_name', type: Types.text() }\n            , { name: 'table_catalog', type: Types.text() }\n            , { name: 'table_schema', type: Types.text() }\n            , { name: 'table_name', type: Types.text() }\n            , { name: 'constraint_type', type: Types.text() }\n            , { name: 'is_deferrable', type: Types.bool }\n            , { name: 'initially_deferred', type: Types.bool }\n            , { name: 'enforced', type: Types.bool }\n        ]\n    };\n\n\n    entropy(): number {\n        return 0;\n    }\n\n    *enumerate() {\n    }\n\n\n    hasItem(value: any): boolean {\n        return false;\n    }\n\n}\n","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema } from '../../interfaces-private';\nimport { Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\n\nexport class KeyColumnUsage extends ReadOnlyTable implements _ITable {\n\n\n    _schema: Schema = {\n        name: 'key_column_usage',\n        fields: [\n            { name: 'constraint_catalog', type: Types.text() }\n            , { name: 'constraint_schema', type: Types.text() }\n            , { name: 'constraint_name', type: Types.text() }\n            , { name: 'table_catalog', type: Types.text() }\n            , { name: 'table_schema', type: Types.text() }\n            , { name: 'table_name', type: Types.text() }\n            , { name: 'column_name', type: Types.text() }\n            , { name: 'ordinal_position', type: Types.integer }\n            , { name: 'position_in_unique_constraint', type: Types.integer }\n        ]\n    };\n\n\n    entropy(): number {\n        return 0;\n    }\n\n    *enumerate() {\n    }\n\n\n    hasItem(value: any): boolean {\n        return false;\n    }\n\n}\n","import { _ITable, _ISelection, IValue, _IIndex, _IDb, IndexKey, setId, _ISchema } from '../../interfaces-private';\nimport { Schema } from '../../interfaces';\nimport { Types } from '../../datatypes';\nimport { ReadOnlyTable } from '../readonly-table';\n\nexport class ConstraintColumnUsage extends ReadOnlyTable implements _ITable {\n\n\n    _schema: Schema = {\n        name: 'constraint_column_usage',\n        fields: [\n            { name: 'constraint_catalog', type: Types.text() }\n            , { name: 'constraint_schema', type: Types.text() }\n            , { name: 'constraint_name', type: Types.text() }\n\n            , { name: 'table_catalog', type: Types.text() }\n            , { name: 'table_schema', type: Types.text() }\n            , { name: 'table_name', type: Types.text() }\n\n            , { name: 'column_name', type: Types.text() }\n        ]\n    };\n\n\n    entropy(): number {\n        return 0;\n    }\n\n    *enumerate() {\n    }\n\n\n    hasItem(value: any): boolean {\n        return false;\n    }\n\n}\n","import express from 'express';\nimport {\n    createExpressMiddleware,\n    type CreateExpressContextOptions,\n} from '@trpc/server/adapters/express';\nimport cors from 'cors';\nimport { renderTrpcPanel } from 'trpc-panel';\nimport OpenAI from 'openai';\nimport type { Database } from './database';\nimport { appRouter } from './modules';\nimport type { Context } from './trpc';\n\nexport default function createApp(db: Database, ai: OpenAI) {\n    const app = express();\n\n    app.use(cors());\n    app.use(express.json());\n\n    app.use('/health', (_, res) => {\n        res.status(200).send('OK');\n    });\n\n    app.use('/ready', (_, res) => {\n        res.status(200).send('OK');\n    });\n\n    app.use('/panel', (_, res) =>\n        res.status(200).send(\n            renderTrpcPanel(appRouter, {\n                url: 'http://localhost:3000/v1/trpc',\n                transformer: 'superjson',\n            })\n        )\n    );\n\n    app.use(\n        '/v1/trpc',\n        createExpressMiddleware({\n            createContext: ({\n                req,\n                res,\n            }: CreateExpressContextOptions): Context => ({\n                db,\n                req,\n                res,\n                ai,\n            }),\n\n            router: appRouter,\n        })\n    );\n\n    return app;\n}\n","import { initTRPC } from '@trpc/server';\nimport type { Request, Response } from 'express';\nimport type { AuthUser } from '@server/entities/user/schema';\nimport type { Database } from '@server/database';\nimport SuperJSON from 'superjson';\nimport { ZodError } from 'zod';\nimport { fromZodError } from 'zod-validation-error';\nimport { TRPCPanelMeta } from 'trpc-panel';\nimport OpenAI from 'openai';\n\nexport type Context = {\n    db: Database;\n    ai: OpenAI;\n    // Express types\n    req?: Request;\n    res?: Response;\n    authUser?: AuthUser;\n};\n\nexport type ContextMinimal = Pick<Context, 'db' | 'ai'>;\n\nconst t = initTRPC.context<Context>().meta<TRPCPanelMeta    >().create({\n    transformer: SuperJSON,\n    errorFormatter(opts) {\n        const { shape, error } = opts;\n\n        if (error.cause instanceof ZodError) {\n            const validationError = fromZodError(error.cause);\n\n            return {\n                ...shape,\n                data: {\n                    message: validationError.message,\n                },\n            };\n        }\n\n        return shape;\n    },\n});\n\nexport const {\n    middleware,\n    router,\n    procedure: publicProcedure,\n    mergeRouters,\n} = t;\n",null,null,null,null,null,null,null,null,null,null,"function getType(payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1);\n}\n\nfunction isAnyObject(payload) {\n  return getType(payload) === \"Object\";\n}\n\nfunction isArray(payload) {\n  return getType(payload) === \"Array\";\n}\n\nfunction isBlob(payload) {\n  return getType(payload) === \"Blob\";\n}\n\nfunction isBoolean(payload) {\n  return getType(payload) === \"Boolean\";\n}\n\nfunction isDate(payload) {\n  return getType(payload) === \"Date\" && !isNaN(payload);\n}\n\nfunction isEmptyArray(payload) {\n  return isArray(payload) && payload.length === 0;\n}\n\nfunction isPlainObject(payload) {\n  if (getType(payload) !== \"Object\")\n    return false;\n  const prototype = Object.getPrototypeOf(payload);\n  return !!prototype && prototype.constructor === Object && prototype === Object.prototype;\n}\n\nfunction isEmptyObject(payload) {\n  return isPlainObject(payload) && Object.keys(payload).length === 0;\n}\n\nfunction isEmptyString(payload) {\n  return payload === \"\";\n}\n\nfunction isError(payload) {\n  return getType(payload) === \"Error\" || payload instanceof Error;\n}\n\nfunction isFile(payload) {\n  return getType(payload) === \"File\";\n}\n\nfunction isFullArray(payload) {\n  return isArray(payload) && payload.length > 0;\n}\n\nfunction isFullObject(payload) {\n  return isPlainObject(payload) && Object.keys(payload).length > 0;\n}\n\nfunction isString(payload) {\n  return getType(payload) === \"String\";\n}\n\nfunction isFullString(payload) {\n  return isString(payload) && payload !== \"\";\n}\n\nfunction isFunction(payload) {\n  return typeof payload === \"function\";\n}\n\nfunction isType(payload, type) {\n  if (!(type instanceof Function)) {\n    throw new TypeError(\"Type must be a function\");\n  }\n  if (!Object.prototype.hasOwnProperty.call(type, \"prototype\")) {\n    throw new TypeError(\"Type is not a class\");\n  }\n  const name = type.name;\n  return getType(payload) === name || Boolean(payload && payload.constructor === type);\n}\n\nfunction isInstanceOf(value, classOrClassName) {\n  if (typeof classOrClassName === \"function\") {\n    for (let p = value; p; p = Object.getPrototypeOf(p)) {\n      if (isType(p, classOrClassName)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    for (let p = value; p; p = Object.getPrototypeOf(p)) {\n      if (getType(p) === classOrClassName) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nfunction isMap(payload) {\n  return getType(payload) === \"Map\";\n}\n\nfunction isNaNValue(payload) {\n  return getType(payload) === \"Number\" && isNaN(payload);\n}\n\nfunction isNumber(payload) {\n  return getType(payload) === \"Number\" && !isNaN(payload);\n}\n\nfunction isNegativeNumber(payload) {\n  return isNumber(payload) && payload < 0;\n}\n\nfunction isNull(payload) {\n  return getType(payload) === \"Null\";\n}\n\nfunction isOneOf(a, b, c, d, e) {\n  return (value) => a(value) || b(value) || !!c && c(value) || !!d && d(value) || !!e && e(value);\n}\n\nfunction isUndefined(payload) {\n  return getType(payload) === \"Undefined\";\n}\n\nconst isNullOrUndefined = isOneOf(isNull, isUndefined);\n\nfunction isObject(payload) {\n  return isPlainObject(payload);\n}\n\nfunction isObjectLike(payload) {\n  return isAnyObject(payload);\n}\n\nfunction isPositiveNumber(payload) {\n  return isNumber(payload) && payload > 0;\n}\n\nfunction isSymbol(payload) {\n  return getType(payload) === \"Symbol\";\n}\n\nfunction isPrimitive(payload) {\n  return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\n}\n\nfunction isPromise(payload) {\n  return getType(payload) === \"Promise\";\n}\n\nfunction isRegExp(payload) {\n  return getType(payload) === \"RegExp\";\n}\n\nfunction isSet(payload) {\n  return getType(payload) === \"Set\";\n}\n\nfunction isWeakMap(payload) {\n  return getType(payload) === \"WeakMap\";\n}\n\nfunction isWeakSet(payload) {\n  return getType(payload) === \"WeakSet\";\n}\n\nexport { getType, isAnyObject, isArray, isBlob, isBoolean, isDate, isEmptyArray, isEmptyObject, isEmptyString, isError, isFile, isFullArray, isFullObject, isFullString, isFunction, isInstanceOf, isMap, isNaNValue, isNegativeNumber, isNull, isNullOrUndefined, isNumber, isObject, isObjectLike, isOneOf, isPlainObject, isPositiveNumber, isPrimitive, isPromise, isRegExp, isSet, isString, isSymbol, isType, isUndefined, isWeakMap, isWeakSet };\n","import { isArray, isPlainObject } from 'is-what';\n\nfunction assignProp(carry, key, newVal, originalObject, includeNonenumerable) {\n  const propType = {}.propertyIsEnumerable.call(originalObject, key) ? \"enumerable\" : \"nonenumerable\";\n  if (propType === \"enumerable\")\n    carry[key] = newVal;\n  if (includeNonenumerable && propType === \"nonenumerable\") {\n    Object.defineProperty(carry, key, {\n      value: newVal,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nfunction copy(target, options = {}) {\n  if (isArray(target)) {\n    return target.map((item) => copy(item, options));\n  }\n  if (!isPlainObject(target)) {\n    return target;\n  }\n  const props = Object.getOwnPropertyNames(target);\n  const symbols = Object.getOwnPropertySymbols(target);\n  return [...props, ...symbols].reduce((carry, key) => {\n    if (isArray(options.props) && !options.props.includes(key)) {\n      return carry;\n    }\n    const val = target[key];\n    const newVal = copy(val, options);\n    assignProp(carry, key, newVal, target, options.nonenumerable);\n    return carry;\n  }, {});\n}\n\nexport { copy };\n",null,"/* eslint-disable import/export */\nexport { Item } from './item/item';\nexport { Category } from './category/category';\nexport { User } from './user/user';\nexport { Room } from './room/room';\nexport { Message } from './message/message';\n","import {\n    Column,\n    Entity,\n    JoinTable,\n    ManyToMany,\n    ManyToOne,\n    PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Category, Room } from '..';\n\n@Entity()\nexport class Item {\n    @PrimaryGeneratedColumn('increment')\n    id: number;\n\n    @Column('text')\n    name: string;\n\n    @Column('text')\n    description: string;\n\n    @Column('text')\n    imageUrl: string;\n\n    @Column('integer')\n    price: number;\n\n    @Column('integer')\n    width: number;\n\n    @Column('integer')\n    length: number;\n\n    @Column('float', { default: 0.0 })\n    x: number;\n\n    @Column('float', { default: 0.0 })\n    y: number;\n\n    @ManyToMany(() => Category, (category) => category.items)\n    @JoinTable()\n    categories: Category[];\n\n    @ManyToOne(() => Room, (room) => room.items, { nullable: true, onDelete: 'CASCADE' })\n    room: Room | null;\n}\n","import { Column, Entity, ManyToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Item } from '../item/item';\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn('increment')\n    id: number;\n\n    @Column('text')\n    name: string;\n\n    @ManyToMany(() => Item, (item) => item.categories)\n    items: Item[];\n}\n","import {\n    Column,\n    Entity,\n    OneToMany,\n    PrimaryGeneratedColumn,\n    Unique,\n} from 'typeorm';\nimport { Room } from '..';\nimport { Message } from '../message/message';\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn('increment')\n    id: number;\n\n    @Unique(['email'])\n    @Column('text')\n    email: string;\n\n    @Column('text', { select: false })\n    password: string;\n\n    @OneToMany(() => Room, (room) => room.user, { cascade: true })\n    rooms: Room[];\n\n    @OneToMany(() => Message, (message) => message.user, { cascade: true })\n    messages: Message[];\n}\n","import {\n    Column,\n    Entity,\n    ManyToOne,\n    PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { User } from '..';\n\n@Entity()\nexport class Message {\n    @PrimaryGeneratedColumn('increment')\n    id: number;\n\n    @Column('text')\n    role: string;\n\n    @Column('text')\n    content: string;\n\n    @ManyToOne(() => User, (user) => user.rooms, { onDelete: 'CASCADE' })\n    user: User;\n}\n","import {\n    Column,\n    Entity,\n    ManyToOne,\n    OneToMany,\n    PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Item, User } from '..';\n\n@Entity()\nexport class Room {\n    @PrimaryGeneratedColumn('increment')\n    id: number;\n\n    @Column('text')\n    name: string;\n\n    @Column('float')\n    width: number;\n\n    @Column('float')\n    length: number;\n\n    @Column('float', { default: 0.0 })\n    area: number;\n\n    @ManyToOne(() => User, (user) => user.rooms, { onDelete: 'CASCADE' })\n    user: User;\n\n    @OneToMany(() => Item, (item) => item.room, {\n        nullable: true,\n    })\n    items: Item[];\n}\n","import { publicProcedure } from '@server/trpc';\nimport { User } from '@server/entities';\nimport { TRPCError } from '@trpc/server';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { UserSelect } from '@server/shared/entities';\nimport config from '@server/config';\nimport { prepareTokenPayload } from '../tokenPayload';\nimport { loginSchema } from './schema';\n\nconst { expiresIn, tokenKey } = config.auth;\n\nexport default publicProcedure\n    .meta({description: 'Endpoint dedicated for user login.' })\n    .input(loginSchema)\n    .query(async ({ input: { email, password }, ctx: { db } }) => {\n        const user = (await db.getRepository(User).findOne({\n            select: { id: true, password: true },\n            where: { email },\n        })) as Omit<UserSelect, 'email'> | undefined;\n\n        if (!user) {\n            throw new TRPCError({\n                message: `User with email ${email} does not exist.`,\n                code: 'UNAUTHORIZED',\n            });\n        }\n\n        const isMatch = await bcrypt.compare(password, user.password);\n\n        if (!isMatch) {\n            throw new TRPCError({\n                message: 'Invalid password, please try again.',\n                code: 'UNAUTHORIZED',\n            });\n        }\n\n        const payload = prepareTokenPayload(user);\n\n        const token = jwt.sign(payload, tokenKey, { expiresIn });\n\n        return {\n            id: user.id,\n            token,\n        };\n    });\n","import 'dotenv/config';\nimport z from 'zod';\n\nconst { env } = process;\n\nif (!env.NODE_ENV) env.NODE_ENV = 'development';\n\nconst isTest = env.NODE_ENV === 'test';\nconst isDevTest = env.NODE_ENV === 'development' || isTest;\n\nconst isInMemory = env.DB_TYPE === 'pg-mem';\n\nconst schema = z\n    .object({\n        env: z\n            .enum(['development', 'production', 'staging', 'test'])\n            .default('development'),\n        isCi: z.coerce.boolean().default(false),\n        port: z.coerce.number().default(3000),\n\n        auth: z.object({\n            tokenKey: z.string().default(() => {\n                if (isDevTest) {\n                    return '';\n                }\n\n                throw new Error(\n                    'You must provide a token key in production env!'\n                );\n            }),\n            expiresIn: z.string().default('7d'),\n            passwordCost: z.coerce.number().default(isDevTest ? 6 : 12),\n        }),\n\n        database: z.object({\n            type: z\n                .enum([\n                    'postgres',\n                    'mysql',\n                    'mariadb',\n                    'better-sqlite3',\n                    'pg-mem',\n                ])\n                .default('postgres'),\n            host: z.string().default('localhost'),\n            port: z.coerce.number().default(5432),\n            database: isInMemory ? z.string().optional() : z.string(),\n            username: isInMemory ? z.string().optional() : z.string(),\n            password: isInMemory ? z.string().optional() : z.string(),\n\n            // By default, log and synchronize the database schema only for tests and development.\n            logging: z.preprocess(\n                coerceBoolean,\n                z.boolean().default(isDevTest)\n            ),\n            synchronize: z.preprocess(\n                coerceBoolean,\n                z.boolean().default(isDevTest)\n            ),\n        }),\n\n        ai: z.object({\n            apiKey: z.string().default(() => {\n                if (isDevTest) {\n                    return '';\n                }\n\n                throw new Error(\n                    'You must provide an API key in production env!'\n                );\n            }),\n        }),\n    })\n    .readonly();\n\nconst config = schema.parse({\n    env: env.NODE_ENV,\n    port: env.PORT,\n    isCi: env.CI,\n\n    auth: {\n        tokenKey: env.TOKEN_KEY,\n        expiresIn: env.TOKEN_EXPIRES_IN,\n        passwordCost: env.PASSWORD_COST,\n    },\n\n    database: {\n        type: env.DB_TYPE,\n        host: env.DB_HOST,\n        port: env.DB_PORT,\n        database: env.DB_NAME,\n        username: env.DB_USER,\n        password: env.DB_PASSWORD,\n        logging: env.DB_LOGGING,\n        synchronize: env.DB_SYNC,\n    },\n\n    ai: {\n        apiKey: env.OPENAI_API_KEY,\n    },\n});\n\nexport default config;\n\n// utility functions\nfunction coerceBoolean(value: unknown) {\n    if (typeof value === 'string') {\n        return value === 'true' || value === '1';\n    }\n\n    return undefined;\n}\n","import type { AuthUser } from '@server/entities/user/schema';\nimport z from 'zod';\n\nconst tokenPayloadSchema = z.object({\n    user: z.object({\n        id: z.number(),\n    }),\n});\n\ntype TokenPayload = z.infer<typeof tokenPayloadSchema>;\n\nexport function prepareTokenPayload(user: AuthUser): TokenPayload {\n    return tokenPayloadSchema.parse({ user });\n}\n\nexport function getUserFromToken(token: string): AuthUser {\n    return JSON.parse(atob(token.split('.')[1])).user;\n}\n\nexport function getUserIdFromToken(token: string) {\n    return getUserFromToken(token).id;\n}\n","import { z } from \"zod\";\n\nexport const loginSchema = z.object({\n    email: z.string().toLowerCase().trim().email().describe('User email'),\n    password: z.coerce.string().trim().describe('User password'),\n});","import { publicProcedure } from '@server/trpc';\nimport bcrypt from 'bcrypt';\nimport { User } from '@server/entities';\nimport { TRPCError } from '@trpc/server';\nimport { signupSchema } from './schema';\n\nexport default publicProcedure\n    .input(signupSchema)\n    .mutation(async ({ input: { email, password }, ctx: { db } }) => {\n        const hashedPassword = await bcrypt.hash(password, 10);\n\n        try {\n            const user = await db\n                .getRepository(User)\n                .save({ email, password: hashedPassword });\n\n            return {\n                id: user.id,\n                email: user.email,\n            };\n        } catch (error) {\n            if (!(error instanceof Error)) {\n                throw error;\n            }\n\n            if (error.message.includes('duplicate key')) {\n                throw new TRPCError({\n                    code: 'BAD_REQUEST',\n                    message: `Email ${email} is already taken, please try another.`,\n                });\n            }\n\n            throw error;\n        }\n    });\n","import { z } from 'zod';\n\nexport const signupSchema = z.object({\n    email: z.string().toLowerCase().trim().email(),\n    password: z.coerce.string().min(8).trim(),\n});\n","import { router } from '@server/trpc'\nimport login from './login'\nimport signup from './signup'\n\nexport default router({\n  login,\n  signup,\n})\n","import jsonwebtoken from 'jsonwebtoken'\nimport config from '@server/config'\nimport { buildAuthenticatedProcedure } from './buildAuthenticatedProcedure'\n\nconst { tokenKey } = config.auth\n\nconst verifyToken = (token: string) => jsonwebtoken.verify(token, tokenKey)\n\nexport const authenticatedProcedure = buildAuthenticatedProcedure(verifyToken)\n","import type { Jwt, JwtPayload } from 'jsonwebtoken'\nimport { z } from 'zod'\nimport { TRPCError } from '@trpc/server'\nimport { authUserSchema } from '@server/entities/user/schema'\nimport { publicProcedure } from '..'\n\ntype VerifyToken = (token: string) => Jwt | JwtPayload | string\n\nconst tokenSchema = z.object({\n  user: authUserSchema,\n})\n\nexport function buildAuthenticatedProcedure(verify: VerifyToken) {\n  function getUserFromToken(token: string) {\n    try {\n      const tokenVerified = verify(token)\n      const tokenParsed = tokenSchema.parse(tokenVerified)\n\n      return tokenParsed.user\n    } catch (error) {\n      return null\n    }\n  }\n\n  return publicProcedure.use(({ ctx, next }) => {\n    if (ctx.authUser) {\n      return next({\n        ctx: {\n          authUser: ctx.authUser,\n        },\n      })\n    }\n\n    if (!ctx.req) {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Missing Express request object',\n      })\n    }\n\n    const token = ctx.req.header('Authorization')?.replace('Bearer ', '')\n\n    if (!token) {\n      throw new TRPCError({\n        code: 'UNAUTHORIZED',\n        message: 'Unauthenticated. Please log in.',\n      })\n    }\n\n    const authUser = getUserFromToken(token)\n\n    if (!authUser) {\n      throw new TRPCError({\n        code: 'UNAUTHORIZED',\n        message: 'Invalid token.',\n      })\n    }\n\n    return next({\n      ctx: {\n        authUser,\n      },\n    })\n  })\n}\n","import { z } from 'zod';\nimport { validates } from '@server/utils/validation';\nimport { User } from './user';\n\nexport type BareUser = Omit<User, 'rooms' | 'messages'>;\nexport type AuthUser = Pick<BareUser, 'id'>;\n\nexport const userSchema = validates<BareUser>().with({\n    id: z.number().int().positive(),\n    email: z.string().trim().toLowerCase().email(),\n    password: z.string().min(8).max(64),\n});\n\nexport const userInsertSchema = userSchema.omit({ id: true });\nexport const authUserSchema = validates<AuthUser>().with({\n    id: z.number().int().positive(),\n});\n\nexport type UserInsert = z.infer<typeof userInsertSchema>;\nexport type UserSelect = z.infer<typeof userSchema>;\n","import { z } from 'zod'\n\n// Source: https://github.com/colinhacks/zod/issues/372#issuecomment-1280054492\ntype Validates<Model> = {\n  [key in keyof Model]-?: undefined extends Model[key]\n    ? null extends Model[key]\n      ? z.ZodNullableType<z.ZodOptionalType<z.ZodType<Model[key]>>>\n      : z.ZodOptionalType<z.ZodType<Model[key]>>\n    : null extends Model[key]\n    ? z.ZodNullableType<z.ZodType<Model[key]>>\n    : z.ZodType<Model[key]>\n}\n\nexport function validates<Model = never>() {\n  return {\n    with: <\n      Schema extends Validates<Model> & {\n        [unknownKey in Exclude<keyof Schema, keyof Model>]: never\n      },\n    >(\n      schema: Schema\n    ) => z.object(schema),\n  }\n}\n","import { Item, Room } from '@server/entities';\nimport { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { TRPCError } from '@trpc/server';\nimport { itemInsertSchema } from '../../../entities/item/schema';\n\nexport default authenticatedProcedure\n    .input(itemInsertSchema)\n    .mutation(async ({ input: item, ctx: { db } }) => {\n        const room = await db\n            .getRepository(Room)\n            .findOneBy({ id: item.roomId });\n        if (!room)\n            throw new TRPCError({\n                code: 'NOT_FOUND',\n                message: `Room with ID ${item.roomId} does not exist.`,\n            });\n\n        return db.getRepository(Item).save({\n            ...item,\n            room,\n        });\n    });\n","import { z } from 'zod';\nimport { validates } from '@server/utils/validation';\nimport { Item } from './item';\n\nexport type BareItem = Omit<Item, 'categories' | 'room'>;\n\nexport const itemSchema = validates<BareItem>().with({\n    id: z.number().int().positive(),\n    name: z\n        .string()\n        .min(2, {\n            message: 'Item name must be at least 2 characters long.',\n        })\n        .trim(),\n    description: z\n        .string()\n        .min(10, {\n            message: 'Item description must be at least 10 characters long.',\n        })\n        .trim(),\n    imageUrl: z.string().url(),\n    price: z.number().int().positive(),\n    width: z.number().positive(),\n    length: z.number().positive(),\n    x: z.number().positive(),\n    y: z.number().positive(),\n});\n\nexport const itemInsertSchema = itemSchema.omit({ id: true }).extend({\n    roomId: z.number().int().positive(),\n});;\nexport const itemUpdateSchema = itemSchema.partial().required({ id: true });\nexport const idSchema = itemSchema.pick({ id: true });\n\nexport const itemCategoryUpdateSchema = idSchema.extend({\n    categoryIds: z.array(z.number().int().positive()),\n});\n\nexport const itemRoomUpdateSchema = idSchema.extend({\n    roomId: z.number().int().positive(),\n});\n\nexport const itemShopUpdateSchema = idSchema.extend({\n    shopId: z.number().int().positive(),\n});\n\nexport const updatePositionSchema = idSchema.extend({\n    x: z.number().positive({ message: 'Coordinate X must be positive.' }),\n    y: z.number().positive({ message: 'Coordinate Y must be positive.' }),\n});\nexport type ItemInsert = z.infer<typeof itemInsertSchema>;\nexport type ItemUpdate = z.infer<typeof itemUpdateSchema>;\nexport type ItemUpdatePosition = z.infer<typeof updatePositionSchema>;\n","import { Item } from '@server/entities';\nimport { TRPCError } from '@trpc/server';\nimport { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { idSchema } from '../../../entities/item/schema';\n\nexport default authenticatedProcedure\n    .input(idSchema)\n    .mutation(async ({ input: { id }, ctx: { db } }) => {\n        const { affected } = await db\n            .getRepository(Item)\n            .update({ id }, { room: null });\n        if (affected === 0)\n            throw new TRPCError({\n                code: 'BAD_REQUEST',\n                message: `Item with id ${id} does not exist.`,\n            });\n\n        return {\n            message: `Successfully remove ${affected} item from its room.`,\n        };\n    });\n","import { publicProcedure } from '@server/trpc';\nimport { Item } from '@server/entities';\nimport { TRPCError } from '@trpc/server';\nimport { updatePositionSchema } from '../../../entities/item/schema';\n\nexport default publicProcedure\n    .input(updatePositionSchema)\n    .mutation(async ({ input: { id, x, y }, ctx: { db } }) => {\n        const found = await db.getRepository(Item).findOneBy({ id });\n        if (!found)\n            throw new TRPCError({\n                code: 'NOT_FOUND',\n                message: `Item with id ${id} does not exist.`,\n            });\n\n        const item = await db.getRepository(Item).save({\n            ...found,\n            x,\n            y,\n        });\n\n        return {\n            item,\n        };\n    });\n","import { Category, Item } from '@server/entities';\nimport { TRPCError } from '@trpc/server';\nimport { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { In } from 'typeorm';\nimport { itemCategoryUpdateSchema } from '../../../entities/item/schema';\n\nexport default authenticatedProcedure\n    .input(itemCategoryUpdateSchema)\n    .mutation(async ({ input: { id, categoryIds }, ctx: { db } }) => {\n        const found = await db.getRepository(Item).findOneBy({ id });\n        if (!found)\n            throw new TRPCError({\n                code: 'NOT_FOUND',\n                message: `Item with id ${id} does not exist.`,\n            });\n\n        const categories = await db\n            .getRepository(Category)\n            .findBy({ id: In(categoryIds) });\n\n        return db.getRepository(Item).save({\n            ...found,\n            categories: categories.filter((c) => c !== null),\n        });\n    });\n","import { Item, Room } from '@server/entities';\nimport { TRPCError } from '@trpc/server';\nimport { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { itemRoomUpdateSchema } from '../../../entities/item/schema';\n\nexport default authenticatedProcedure\n    .input(itemRoomUpdateSchema)\n    .mutation(async ({ input: { id, roomId }, ctx: { db } }) => {\n        const found = await db.getRepository(Item).findOneBy({ id });\n        if (!found)\n            throw new TRPCError({\n                code: 'NOT_FOUND',\n                message: `Item with id ${id} does not exist.`,\n            });\n\n        const room = await db\n            .getRepository(Room)\n            .findOneBy({ id: roomId });\n        if (!room)\n            throw new TRPCError({\n                code: 'NOT_FOUND',\n                message: `Room with id ${roomId} does not exist.`,\n            });\n\n        return db.getRepository(Item).save({\n            ...found,\n            room,\n        });\n    });\n","import { Item } from '@server/entities';\nimport { TRPCError } from '@trpc/server';\nimport { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { idSchema } from '../../../entities/item/schema';\n\nexport default authenticatedProcedure\n    .input(idSchema)\n    .mutation(async ({ input: { id }, ctx: { db } }) => {\n        const itemFound = await db.getRepository(Item).findOneBy({ id });\n        if (!itemFound) {\n            throw new TRPCError({\n                code: 'BAD_REQUEST',\n                message: `Item with id ${id} does not exist.`,\n            });\n        }\n\n        return db.getRepository(Item).save({ ...itemFound, categories: [] });\n    });\n","import { Item } from '@server/entities';\nimport { TRPCError } from '@trpc/server';\nimport { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { idSchema } from '../../../entities/item/schema';\n\nexport default authenticatedProcedure\n    .input(idSchema)\n    .mutation(async ({ input: { id }, ctx: { db } }) => {\n        const itemFound = await db.getRepository(Item).findOneBy({ id });\n        if (!itemFound)\n            throw new TRPCError({\n                code: 'NOT_FOUND',\n                message: `Item with id ${id} does not exist.`,\n            });\n\n        return db.getRepository(Item).save({ ...itemFound, room: null });\n    });\n","import { router } from '@server/trpc';\nimport addItem from './addItem';\nimport removeItem from './removeItem';\nimport updatePosition from './updatePosition';\nimport updateCategory from './updateCategory';\nimport updateRoom from './updateRoom';\nimport removeCategories from './removeCategories';\nimport removeRoom from './removeRoom';\n\nexport default router({\n    addItem,\n    removeItem,\n    updatePosition,\n    updateCategory,\n    updateRoom,\n    removeCategories,\n    removeRoom,\n});\n","import { z } from 'zod';\nimport { validates } from '@server/utils/validation';\nimport { Room } from './room';\n\nexport type BareRoom = Omit<Room, 'items' | 'user'>;\n\nexport const roomSchema = validates<BareRoom>().with({\n    id: z.number().int().positive(),\n    name: z.string().min(2, {\n        message: 'Room name must be at least 2 characters long.',\n    }),\n    width: z\n        .number()\n        .positive({ message: 'Width cannot be 0 or a negative number. ' }),\n    length: z\n        .number()\n        .positive({ message: 'Length cannot be 0 or a negative number. ' }),\n    area: z.number().nonnegative(),\n});\n\nexport const roomIdSchema = roomSchema.pick({ id: true });\nexport const insertRoomSchema = roomSchema.omit({ id: true });\nexport const updateRoomSchema = roomSchema.partial().required({ id: true });\n\nexport type RoomInsert = z.infer<typeof insertRoomSchema>;\nexport type RoomUpdate = z.infer<typeof roomSchema>;\n","import { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { roomIdSchema } from '@server/entities/room/schema';\nimport { Room } from '@server/entities/room/room';\nimport { TRPCError } from '@trpc/server';\n\nexport default authenticatedProcedure\n    .input(roomIdSchema)\n    .mutation(async ({ input: { id }, ctx: { db } }) => {\n        const { affected } = await db.getRepository(Room).delete(id);\n        if (affected === 0) {\n            throw new TRPCError({\n                code: 'NOT_FOUND',\n                message: `Room with id ${id} not found.`,\n            });\n        }\n\n        return {\n            message: `Room with ID ${id} deleted successfully.`,\n        };\n    });\n","import { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { insertRoomSchema } from '@server/entities/room/schema';\nimport { Room } from '@server/entities/room/room';\nimport { User } from '@server/entities';\n\nexport default authenticatedProcedure\n    .input(insertRoomSchema)\n    .mutation(async ({ input: room, ctx: { db, authUser } }) => {\n\n        const user = await db.getRepository(User).findOneBy({ id: authUser.id });\n\n        const roomWithArea = {\n            ...room,\n            user: user!,\n            area: room.length * room.width,\n        };\n        return db.getRepository(Room).save(roomWithArea);\n    });\n","import { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { updateRoomSchema } from '@server/entities/room/schema';\nimport { Room } from '@server/entities/room/room';\nimport { TRPCError } from '@trpc/server';\n\nexport default authenticatedProcedure\n    .input(updateRoomSchema)\n    .mutation(async ({ input: room, ctx: { db } }) => {\n        const { affected } = await db.getRepository(Room).update(room.id, room);\n        if (affected === 0) {\n            throw new TRPCError({\n                code: 'NOT_FOUND',\n                message: `Room with id ${room.id} not found.`,\n            });\n        }\n\n        return db.getRepository(Room).findOneByOrFail({ id: room.id });\n    });\n","import { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { Room } from '@server/entities/room/room';\nimport { roomIdSchema } from '@server/entities/room/schema';\n\nexport default authenticatedProcedure\n    .input(roomIdSchema)\n    .query(async ({ input: { id }, ctx: { db } }) =>\n        db\n            .getRepository(Room)\n            .findOne({ where: { id }, relations: { items: true } })\n    );\n","import { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { Room } from '@server/entities/room/room';\nimport { User } from '@server/entities';\n\nexport default authenticatedProcedure.query(\n    async ({ ctx: { db, authUser } }) => {\n        const user = await db\n            .getRepository(User)\n            .findOneBy({ id: authUser.id });\n\n        return db.getRepository(Room).find({\n            where: { user: user! },\n        });\n    }\n);\n","import { router } from '@server/trpc';\nimport deleteRoom from './deleteRoom';\nimport createRoom from './createRoom';\nimport updateRoom from './updateRoom';\nimport loadRoom from './loadRoom';\nimport getRooms from './getRooms';\n\nexport default router({\n    createRoom,\n    updateRoom,\n    deleteRoom,\n    getRooms,\n    loadRoom,\n});\n","import { z } from 'zod';\nimport { validates } from '@server/utils/validation';\nimport { Message } from './message';\n\nexport type BareMessage = Omit<Message, 'user'>;\n\nexport const roomSchema = validates<BareMessage>().with({\n    id: z.number().int().positive(),\n    role: z.string().min(1),\n    content: z.string().min(1, { message: 'Question must be at least 1 character long.' }),\n});\n\nexport const chatMessageSchema = roomSchema\n    .omit({ id: true })\n    .extend({ user: z.object({ id: z.number().int().positive() }) });\nexport const newMessageSchema = chatMessageSchema.omit({\n    role: true,\n    user: true,\n});\n\nexport type NewMessage = z.infer<typeof newMessageSchema>;\nexport type ChatMessage = z.infer<typeof chatMessageSchema>;\n","import { ChatMessage } from '@server/entities/message/schema';\nimport { TRPCError } from '@trpc/server';\nimport {\n    ChatCompletionSystemMessageParam,\n    ChatCompletionUserMessageParam,\n} from 'openai/resources/index.mjs';\nimport { AuthUser } from '@server/shared/entities';\nimport { DataSource } from 'typeorm';\nimport OpenAI from 'openai';\nimport buildRepository from './repository';\nimport buildGenerator from './generator';\n\nconst FIRST_MESSAGE: ChatCompletionSystemMessageParam = {\n    role: 'system',\n    content:\n        'You are a chatbot which is created with the sole purpose to help users with room interior design. Any question related to room interior design, you should answer. If the question is not related to room interior design, you should inform the user that you are not able to answer the question.',\n};\n\nexport default (db: DataSource, authUser: AuthUser, ai: OpenAI) => ({\n    repository: buildRepository(db, authUser),\n    generator: buildGenerator(ai),\n\n    async run(content: string) {\n        const newMessage = {\n            role: 'user',\n            content,\n        } as ChatCompletionUserMessageParam;\n\n        const history = await this.repository.getHistory();\n\n        const isFirstMessage = history.length === 0;\n\n        if (isFirstMessage) {\n            history.push(FIRST_MESSAGE);\n        }\n\n        history.push(newMessage);\n\n        const chatResponse = await this.generator.generateResponse(history);\n        if (!chatResponse || !chatResponse?.content)\n            throw new TRPCError({\n                code: 'INTERNAL_SERVER_ERROR',\n                message: \"Something went wrong: assistant's response is empty.\",\n            });\n\n        const messagesToSave = [\n            {\n                user: authUser,\n                ...newMessage,\n            },\n            {\n                user: authUser,\n                ...chatResponse,\n            },\n        ] as ChatMessage[];\n\n        await this.repository.saveMessages(\n            isFirstMessage\n                ? [{ ...FIRST_MESSAGE, user: authUser }, ...messagesToSave]\n                : messagesToSave\n        );\n\n        return chatResponse.content;\n    },\n});\n","import { Message } from '@server/entities';\nimport { AuthUser } from '@server/shared/entities';\nimport { ChatCompletionMessageParam } from 'openai/resources/index.mjs';\nimport { DataSource } from 'typeorm';\nimport { ChatMessage } from '../../../../entities/message/schema';\n\nexport default (db: DataSource, authUser: AuthUser) => ({\n\n    repository: db.getRepository(Message),\n\n    async getHistory() {\n        return (await this.repository.find({\n            where: { user: authUser },\n            select: { role: true, content: true },\n        })) as ChatCompletionMessageParam[];\n    },\n\n    async saveMessages(messages: ChatMessage[]): Promise<void> {\n        await this.repository.save(messages);\n    },\n});\n","/* eslint-disable no-console */\n/* eslint-disable no-constant-condition */\n\nimport {\n    ChatCompletionAssistantMessageParam,\n    ChatCompletionMessageParam,\n} from 'openai/resources/index.mjs';\nimport OpenAI from 'openai';\n\nexport default (ai: OpenAI) => ({\n    async generateResponse(\n        history: ChatCompletionMessageParam[]\n    ): Promise<ChatCompletionAssistantMessageParam | null> {\n        let response = null;\n        try {\n            response = await getAnswer(ai, history);\n        } catch (error) {\n            console.log(error);\n        }\n        return response;\n    },\n});\n\nasync function getAnswer(\n    ai: OpenAI,\n    messages: ChatCompletionMessageParam[]\n): Promise<ChatCompletionAssistantMessageParam | null> {\n    const completion = await ai.chat.completions.create({\n        messages,\n        model: 'gpt-3.5-turbo',\n    });\n    return {\n        role: 'assistant',\n        content: completion.choices[0].message.content,\n    };\n}\n","import { authenticatedProcedure } from '@server/trpc/authenticatedProcedure';\nimport { newMessageSchema } from '../../../entities/message/schema';\nimport buildService from '../service/openai/index';\n\nexport default authenticatedProcedure\n    .input(newMessageSchema)\n    .mutation(async ({ input: { content }, ctx: { db, authUser, ai } }) => {\n        const service = buildService(db, authUser, ai);\n        const message = await service.run(content);\n\n        return {\n            message,\n        };\n    });\n","import { router } from '../trpc';\nimport user from './user';\nimport item from './item';\nimport room from './room';\nimport chat from './message/chat';\n\nexport const appRouter = router({\n    user,\n    item,\n    room,\n    chat,\n});\n\nexport type AppRouter = typeof appRouter;\n","import { join } from 'path'\nimport { DataSource, type DataSourceOptions } from 'typeorm'\nimport { SnakeNamingStrategy } from 'typeorm-naming-strategies'\nimport { newDb } from 'pg-mem'\nimport * as entities from '../entities'\n\nexport function createDatabase(\n  options: Partial<DataSourceOptions | { type: 'pg-mem' }> = {}\n) {\n  if (options.type === 'pg-mem') {\n    return createMemoryDatabase()\n  }\n\n  return new DataSource({\n    entities,\n    migrations: [relative('./migrations/**/*.ts')],\n    namingStrategy: new SnakeNamingStrategy(),\n    ...options,\n  } as any)\n}\n\nfunction createMemoryDatabase(): DataSource {\n  const pgMemory = newDb()\n\n  pgMemory.public.registerFunction({\n    name: 'current_database',\n    implementation: () => 'test',\n  })\n  pgMemory.public.registerFunction({\n    name: 'version',\n    implementation: () => '1',\n  })\n\n  return pgMemory.adapters.createTypeormDataSource({\n    type: 'postgres',\n    entities,\n    synchronize: true,\n    logging: false,\n    namingStrategy: new SnakeNamingStrategy(),\n  })\n}\n\nfunction relative(...paths: string[]) {\n  return join(__dirname, ...paths)\n}\n\nexport type Database = DataSource\n","import OpenAI from 'openai';\nimport config from '../../../../../config';\n\nexport default function buildAi() {\n    return new OpenAI({\n        apiKey: config.ai.apiKey,\n    });\n}\n\n// If you wish to fine tune, uncomment the following lines\n// import fineTune from './tune';\n// fineTune();\n","import createApp from './app';\nimport { createDatabase } from './database';\nimport config from './config';\nimport buildAi from './modules/message/service/openai/config/open-ai';\n\nconst database = createDatabase(config.database);\nconst ai = buildAi();\n\ndatabase.initialize().then(() => {\n    const app = createApp(database, ai);\n\n    app.listen(config.port, () => {\n        // eslint-disable-next-line no-console\n        console.log(`Server is running at http://localhost:${config.port}`);\n    });\n});\n"],"mappings":"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","names":["module","hasOwnProperty","toString","isRegExp","string","keys","word","map","splice","isMap","module","dot","Column","copy","value","t","module","exports","value","key","map","x","doubleQuoted","groupBy","join","values","filter","int","t","neg","first","parse","get","last","flatten","kw","schema","skip","v","set","c","module","hash","value","keys","entries","string","map","set","Map","Set","isMap","isPlainObject","isSet","value","hash","string","nextHash","reverse","this$1$1","values","entries","zipAll","toString","collection","ii","isArray","Collection","map","count","list","has","set","neg","KeyedCollection","IndexedCollection","SetCollection","Iterator","Seq","toSeq","__iterate","__iterator","KeyedSeq","toKeyedSeq","IndexedSeq","toIndexedSeq","SetSeq","toSetSeq","ArraySeq","get","ObjectSeq","keys","CollectionSeq","imul","ToKeyedSequence","valueSeq","ToIndexedSequence","includes","ToSetSequence","FromEntriesSequence","entrySeq","remove","clear","sort","sortBy","__ensureOwner","ArrayMapNode","update","BitmapIndexedNode","HashArrayMapNode","HashCollisionNode","ValueNode","MapIterator","List","concat","seq","slice","VNode","OrderedMap","Stack","wasAltered","Range","indexOf","lastIndexOf","equals","find","forEach","filter","first","flatten","keySeq","last","skipWhile","OrderedSet","Record","hashCode","toJS$1","Repeat","module","isArray","isUndefined","isNumber","isDate","map","format","locale","some","t","to","from","config","set","keys","now","sign","token","ordinal","i","string","diff","value","get","localeData","indexOf","M","hours","minutes","values","tokens","meridiem","min","max","years","months","weeks","days","seconds","milliseconds","offset","isString","toString","valueOf","toArray","toObject","thresholds","module","walker","module","walker","value","module","max","walker","value","get","module","string","word","value","module","string","value","module","isArray","has","keys","value","stringify","module","value","count","z","module","parse","module","env","hash","module","module","module","env","min","version","module","useColors","keys","module","module","module","isString","value","isNumber","isBoolean","isUndefined","module","isPlainObject","isTypedArray","module","module","module","module","module","isEmpty","module","isPlainObject","reduce","isNumber","values","value","module","schema","string","module","value","module","timeout","module","schema","first","keys","values","require_constants","module","module","isEmpty","isPlainObject","last","toArray","isBoolean","isNumber","isString","value","first","join","schema","values","keys","module","values","value","first","module","module","t","module","config","module","flatten","module","module","module","module","sortBy","value","module","isString","config","module","config","module","module","config","module","get","isEmpty","max","isBoolean","config","value","trx","migrationContent","module","flatten","includes","value","config","module","module","module","module","flatten","isNumber","module","merge","config","module","config","value","module","groupBy","has","isEmpty","map","reduce","isString","isUndefined","value","alias","column","join","values","keys","require_builder","module","toArray","require_helpers","module","isString","require_compiler","module","module","toArray","isString","value","keyName","module","groupBy","indexOf","isEmpty","value","module","toArray","value","module","groupBy","first","has","value","value","value","remove","value","module","module","config","module","config","value","module","module","parse","config","module","parse","module","config","module","config","module","require_knex","module","module","exports","value","key","deepEqual","set","sum","first","t","values","DataType","filter","schema","not","has","_a","hash","last","groupBy","int","item","map","keys","p","newDb","config","get","args","copy","x","ret","equals","_","col","DataSource","take","skip","order","import_express","value","value","value","values","value","string","value","value","keys","walker","transformed","result","value","getType","isArray","getType","isPlainObject","getType","isNull","getType","value","isUndefined","isArray","isPlainObject","string","import_typeorm","import_typeorm","import_typeorm","import_typeorm","import_server","import_zod","z","value","import_zod","z","import_zod","bcrypt","jwt","import_bcrypt","import_server","import_zod","bcrypt","import_jsonwebtoken","import_zod","import_server","import_zod","import_zod","schema","tokenKey","jsonwebtoken","import_server","import_zod","import_server","import_server","import_server","import_typeorm","import_server","import_server","import_server","import_zod","import_server","import_server","updateRoom_default","updateRoom_default","import_zod","roomSchema","import_server","ai","ai","ai","ai","express","cors","import_typeorm","import_openai","OpenAI"]}