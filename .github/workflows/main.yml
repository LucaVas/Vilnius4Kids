name: Test, Build, and Deploy

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16.1-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432

      rabbitmq:
        image: rabbitmq:3.13-alpine
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672

    env:
      NODE_ENV: test
      TOKEN_KEY: ${{ secrets.TOKEN_KEY }}
      TOKEN_EXPIRES_IN: ${{ vars.TOKEN_EXPIRATION }}
      SMTP_SERVICE: ${{ vars.SMTP_SERVICE }}
      SMTP_HOST: ${{ vars.SMTP_HOST }}
      SMTP_PORT: ${{ vars.SMTP_PORT }}
      SMTP_SECURE_CONNECTION: true
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      SMTP_SENDER: ${{ secrets.SMTP_USERNAME }}
      VITE_API_ORIGIN: http://localhost:3000
      VITE_API_PATH: /api/v1/trpc
      CLIENT_PATH: http://localhost:5173
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      RABBIT_MQ_CHANNEL_RETRY_DELAYS_MS: 1000
      RABBIT_MQ_CHANNEL_MAX_RETRIES: 5
      RABBIT_MQ_CONNECTION_RETRY_DELAYS_MS: 1000
      RABBIT_MQ_CONNECTION_MAX_RETRIES: 5
      RABBIT_MQ_SUBSCRIPTIONS_QUEUE_NAME: ${{ vars.RABBIT_MQ_SUBSCRIPTIONS_QUEUE_NAME }}
      RABBIT_MQ_SUBSCRIPTIONS_QUEUE_DURABLE: ${{ vars.RABBIT_MQ_SUBSCRIPTIONS_QUEUE_DURABLE }}
      RABBIT_MQ_SUBSCRIPTIONS_QUEUE_PERSISTENT: ${{ vars.RABBIT_MQ_SUBSCRIPTIONS_QUEUE_PERSISTENT }}
      RABBIT_MQ_REPORTS_QUEUE_NAME: ${{ vars.RABBIT_MQ_REPORTS_QUEUE_NAME }}
      RABBIT_MQ_REPORTS_QUEUE_DURABLE: ${{ vars.RABBIT_MQ_REPORTS_QUEUE_DURABLE }}
      RABBIT_MQ_REPORTS_QUEUE_PERSISTENT: ${{ vars.RABBIT_MQ_REPORTS_QUEUE_PERSISTENT }}
      RABBIT_MQ_PASSWORD_RESETS_QUEUE_NAME: ${{ vars.RABBIT_MQ_PASSWORD_RESETS_QUEUE_NAME }}
      RABBIT_MQ_PASSWORD_RESETS_QUEUE_DURABLE: ${{ vars.RABBIT_MQ_PASSWORD_RESETS_QUEUE_DURABLE }}
      RABBIT_MQ_PASSWORD_RESETS_QUEUE_PERSISTENT: ${{ vars.RABBIT_MQ_PASSWORD_RESETS_QUEUE_PERSISTENT }}
      RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_NAME: ${{ vars.RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_NAME }}
      RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_DURABLE: ${{ vars.RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_DURABLE }}
      RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_PERSISTENT: ${{ vars.RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_PERSISTENT }}
      LOG_LEVEL: trace

    steps:
      - name: Check out repository
        uses: actions/checkout@v4.1.1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check server
        run: npm run typecheck -w=server

      - name: Type check client
        run: npm run typecheck -w=client

      - name: Lint server
        run: npm run lint -w=server

      - name: Lint client
        run: npm run lint -w=client

      - name: Test server
        run: npm run test -w=server

      - name: Test client (unit)
        run: npm run test:unit -w=client

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Build server
        run: npm run build -w=server

      - name: Start server
        run: npm run start -w=server &
        env:
          DB_USER: testuser
          DB_PASSWORD: testpassword
          DB_NAME: testdb
          DB_HOST: localhost
          DB_SSL: false
          PORT: 3000
          RABBIT_MQ_USER: guest
          RABBIT_MQ_PASSWORD: guest
          RABBIT_MQ_HOST: localhost

      - name: Run migrations
        run: npm run migration:run -w=server
        env:
          DB_USER: testuser
          DB_PASSWORD: testpassword
          DB_NAME: testdb
          DB_HOST: localhost
          DB_SSL: false
          PORT: 3000

      - name: Build front end for E2E tests
        run: npm run build -w=client
        env:
          VITE_API_ORIGIN: http://localhost:3000
          VITE_API_PATH: /api/v1/trpc
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

      - name: Health probe
        uses: Jtalk/url-health-check-action@v4
        with:
          max-attempts: 5
          retry-delay: 5s
          url: http://localhost:3000/api/health

      - name: Readiness probe
        uses: Jtalk/url-health-check-action@v4
        with:
          max-attempts: 5
          retry-delay: 5s
          url: http://localhost:3000/api/ready

      - name: Test client E2E
        run: npm run test:e2e -w=client

      - uses: actions/upload-artifact@v4.3.1
        if: always()
        with:
          name: playwright-report
          path: client/playwright-report/
          retention-days: 7

  render-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod'
    env:
      NODE_ENV: production
      RENDER_DEPLOY_HOOK_URL_CLIENT: ${{ secrets.RENDER_DEPLOY_HOOK_URL_CLIENT }}
      RENDER_DEPLOY_HOOK_URL_SERVER: ${{ secrets.RENDER_DEPLOY_HOOK_URL_SERVER }}
    steps:
      - name: Deploy server
        run: |
          curl "$RENDER_DEPLOY_HOOK_URL_SERVER"
      - name: Deploy client
        run: |
          curl "$RENDER_DEPLOY_HOOK_URL_CLIENT"

  aws-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod'
    env:
      NODE_ENV: production
      LOG_LEVEL: trace
      TOKEN_KEY: ${{ secrets.TOKEN_KEY }}
      TOKEN_EXPIRES_IN: ${{ vars.TOKEN_EXPIRATION }}
      SMTP_SERVICE: ${{ vars.SMTP_SERVICE }}
      SMTP_HOST: ${{ vars.SMTP_HOST }}
      SMTP_PORT: ${{ vars.SMTP_PORT }}
      SMTP_SECURE_CONNECTION: true
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      SMTP_SENDER: ${{ secrets.SMTP_USERNAME }}
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      CLIENT_PATH: ${{ vars.CLIENT_PATH }}
      API_ORIGIN: ${{ vars.API_ORIGIN }}
      API_PATH: ${{ vars.API_PATH }}
      API_PROXY_PASS: ${{ vars.API_PROXY_PASS }}
      AWS_LIGHTSAIL_SERVICE: ${{ vars.AWS_LIGHTSAIL_SERVICE }}
      CLIENT_IMAGE_TAG: client-${{ github.sha }}
      SERVER_IMAGE_TAG: server-${{ github.sha }}
      RABBIT_MQ_USER: ${{ secrets.RABBIT_MQ_USER }}
      RABBIT_MQ_PASSWORD: ${{ secrets.RABBIT_MQ_PASSWORD }}
      RABBIT_MQ_HOST: ${{ secrets.RABBIT_MQ_HOST }}
      RABBIT_MQ_CHANNEL_RETRY_DELAYS_MS: ${{ vars.RABBIT_MQ_CHANNEL_RETRY_DELAYS_MS }}
      RABBIT_MQ_CHANNEL_MAX_RETRIES: ${{ vars.RABBIT_MQ_CHANNEL_MAX_RETRIES }}
      RABBIT_MQ_CONNECTION_RETRY_DELAYS_MS: ${{ vars.RABBIT_MQ_CONNECTION_RETRY_DELAYS_MS }}
      RABBIT_MQ_CONNECTION_MAX_RETRIES: ${{ vars.RABBIT_MQ_CONNECTION_MAX_RETRIES }}
      RABBIT_MQ_SUBSCRIPTIONS_QUEUE_NAME: ${{ vars.RABBIT_MQ_SUBSCRIPTIONS_QUEUE_NAME }}
      RABBIT_MQ_SUBSCRIPTIONS_QUEUE_DURABLE: ${{ vars.RABBIT_MQ_SUBSCRIPTIONS_QUEUE_DURABLE }}
      RABBIT_MQ_SUBSCRIPTIONS_QUEUE_PERSISTENT: ${{ vars.RABBIT_MQ_SUBSCRIPTIONS_QUEUE_PERSISTENT }}
      RABBIT_MQ_REPORTS_QUEUE_NAME: ${{ vars.RABBIT_MQ_REPORTS_QUEUE_NAME }}
      RABBIT_MQ_REPORTS_QUEUE_DURABLE: ${{ vars.RABBIT_MQ_REPORTS_QUEUE_DURABLE }}
      RABBIT_MQ_REPORTS_QUEUE_PERSISTENT: ${{ vars.RABBIT_MQ_REPORTS_QUEUE_PERSISTENT }}
      RABBIT_MQ_PASSWORD_RESETS_QUEUE_NAME: ${{ vars.RABBIT_MQ_PASSWORD_RESETS_QUEUE_NAME }}
      RABBIT_MQ_PASSWORD_RESETS_QUEUE_DURABLE: ${{ vars.RABBIT_MQ_PASSWORD_RESETS_QUEUE_DURABLE }}
      RABBIT_MQ_PASSWORD_RESETS_QUEUE_PERSISTENT: ${{ vars.RABBIT_MQ_PASSWORD_RESETS_QUEUE_PERSISTENT }}
      RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_NAME: ${{ vars.RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_NAME }}
      RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_DURABLE: ${{ vars.RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_DURABLE }}
      RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_PERSISTENT: ${{ vars.RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_PERSISTENT }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup aws lightsail cli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          which aws
          aws --version
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build server image
        run: >-
          docker build
          --platform linux/amd64
          -t $SERVER_IMAGE_TAG
          -f ./server/Dockerfile .

      - name: Build client image
        run: >-
          docker build
          --platform linux/amd64
          -t $CLIENT_IMAGE_TAG
          --build-arg VITE_API_ORIGIN=$API_ORIGIN
          --build-arg VITE_API_PATH=$API_PATH
          --build-arg VITE_GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY
          -f ./client/Dockerfile .

      - name: Push server image
        run: >-
          aws lightsail push-container-image
          --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }}
          --label $SERVER_IMAGE_TAG
          --image $SERVER_IMAGE_TAG
          --output yaml

      - name: Push client image
        run: >-
          aws lightsail push-container-image
          --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }}
          --label $CLIENT_IMAGE_TAG
          --image $CLIENT_IMAGE_TAG
          --output yaml

      - name: Get Lightsail image tag
        run: |
          aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$SERVER_IMAGE_TAG'")) | .image'
          echo "LIGHTSAIL_SERVER_IMAGE=$(aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$SERVER_IMAGE_TAG'")) | .image')" >> $GITHUB_ENV
          echo "LIGHTSAIL_CLIENT_IMAGE=$(aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$CLIENT_IMAGE_TAG'")) | .image')" >> $GITHUB_ENV

      - name: Create containers.json
        run: |
          echo '{
            "client": {
              "image": "${{ env.LIGHTSAIL_CLIENT_IMAGE }}",
              "ports": {
                "80": "HTTP"
              },
              "environment": {
                "API_PROXY_PASS": "http://localhost:3000"
              }
            },
            "server": {
              "image": "${{ env.LIGHTSAIL_SERVER_IMAGE }}",
              "ports": {
                "3000": "HTTP"
              },
              "environment": {
                "NODE_ENV": "production",
                "LOG_LEVEL": "trace",
                "DB_SSL": "true",
                "DB_SYNC": "true",
                "DB_HOST": "${{ secrets.PROD_DB_HOST }}",
                "DB_NAME": "${{ secrets.PROD_DB_NAME }}",
                "DB_USER": "${{ secrets.PROD_DB_USER }}",
                "DB_PASSWORD": "${{ secrets.PROD_DB_PASSWORD }}",
                "TOKEN_KEY": "${{ secrets.TOKEN_KEY }}",
                "TOKEN_EXPIRES_IN": "${{ vars.TOKEN_EXPIRATION }}",
                "SMTP_SERVICE": "${{ vars.SMTP_SERVICE }}",
                "SMTP_HOST": "${{ vars.SMTP_HOST }}",
                "SMTP_PORT": "${{ vars.SMTP_PORT }}",
                "SMTP_SECURE_CONNECTION": "true",
                "SMTP_USERNAME": "${{ secrets.SMTP_USERNAME }}",
                "SMTP_PASSWORD": "${{ secrets.SMTP_PASSWORD }}",
                "SMTP_SENDER": "${{ secrets.SMTP_USERNAME }}",
                "CLIENT_PATH": "${{ vars.CLIENT_PATH }}",
                "GOOGLE_MAPS_API_KEY": "${{ secrets.GOOGLE_MAPS_API_KEY }}",
                "RABBIT_MQ_USER": "${{ secrets.RABBIT_MQ_USER }}",
                "RABBIT_MQ_PASSWORD": "${{ secrets.RABBIT_MQ_PASSWORD }}",
                "RABBIT_MQ_HOST": "${{ secrets.RABBIT_MQ_HOST }}",
                "RABBIT_MQ_CHANNEL_RETRY_DELAYS_MS": "${{ vars.RABBIT_MQ_CHANNEL_RETRY_DELAYS_MS }}",
                "RABBIT_MQ_CHANNEL_MAX_RETRIES": "${{ vars.RABBIT_MQ_CHANNEL_MAX_RETRIES }}",
                "RABBIT_MQ_CONNECTION_RETRY_DELAYS_MS": "${{ vars.RABBIT_MQ_CONNECTION_RETRY_DELAYS_MS }}",
                "RABBIT_MQ_CONNECTION_MAX_RETRIES": "${{ vars.RABBIT_MQ_CONNECTION_MAX_RETRIES }}",
                "RABBIT_MQ_SUBSCRIPTIONS_QUEUE_NAME": "${{ vars.RABBIT_MQ_SUBSCRIPTIONS_QUEUE_NAME }}",
                "RABBIT_MQ_SUBSCRIPTIONS_QUEUE_DURABLE": "${{ vars.RABBIT_MQ_SUBSCRIPTIONS_QUEUE_DURABLE }}",
                "RABBIT_MQ_SUBSCRIPTIONS_QUEUE_PERSISTENT": "${{ vars.RABBIT_MQ_SUBSCRIPTIONS_QUEUE_PERSISTENT }}",
                "RABBIT_MQ_REPORTS_QUEUE_NAME": "${{ vars.RABBIT_MQ_REPORTS_QUEUE_NAME }}",
                "RABBIT_MQ_REPORTS_QUEUE_DURABLE": "${{ vars.RABBIT_MQ_REPORTS_QUEUE_DURABLE }}",
                "RABBIT_MQ_REPORTS_QUEUE_PERSISTENT": "${{ vars.RABBIT_MQ_REPORTS_QUEUE_PERSISTENT }}",
                "RABBIT_MQ_PASSWORD_RESETS_QUEUE_NAME": "${{ vars.RABBIT_MQ_PASSWORD_RESETS_QUEUE_NAME }}",
                "RABBIT_MQ_PASSWORD_RESETS_QUEUE_DURABLE": "${{ vars.RABBIT_MQ_PASSWORD_RESETS_QUEUE_DURABLE }}",
                "RABBIT_MQ_PASSWORD_RESETS_QUEUE_PERSISTENT": "${{ vars.RABBIT_MQ_PASSWORD_RESETS_QUEUE_PERSISTENT }}",
                "RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_NAME": "${{ vars.RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_NAME }}",
                "RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_DURABLE": "${{ vars.RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_DURABLE }}",
                "RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_PERSISTENT": ${{ vars.RABBIT_MQ_ACCOUNT_VERIFICATIONS_QUEUE_PERSISTENT }}
              }
            }
          }' > containers.json

      - name: Create public-endpoint.json file
        run: |
          echo '{
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "intervalSeconds": 10,
              "path": "/api/health"
            }
          }' > public-endpoint.json

      - name: Deploy to AWS Lightsail
        run: |
          aws lightsail create-container-service-deployment \
          --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} \
          --containers file://containers.json \
          --public-endpoint file://public-endpoint.json
